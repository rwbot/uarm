package com.jogamp.opengl.util.texture.spi;

import com.jogamp.common.util.IOUtil;
import com.jogamp.opengl.GLException;
import com.jogamp.opengl.util.texture.TextureData;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;


































public class NetPbmTextureWriter
  implements TextureWriter
{
  int magic;
  public static final String PPM = "ppm";
  public static final String PAM = "pam";
  
  public NetPbmTextureWriter()
  {
    this(0);
  }
  







  public NetPbmTextureWriter(int paramInt)
  {
    switch (paramInt) {
    case 0: 
    case 6: 
    case 7: 
      break;
    default: 
      throw new GLException("Unsupported magic: " + paramInt + ", should be 0 (auto), 6 (PPM) or 7 (PAM)");
    }
    magic = paramInt;
  }
  
  public int getMagic() { return magic; }
  



  public String getSuffix()
  {
    return magic == 6 ? "ppm" : "pam";
  }
  
  public boolean write(File paramFile, TextureData paramTextureData) throws IOException
  {
    int i = magic;
    

    if (0 == magic) {
      if ("ppm".equals(IOUtil.getFileSuffix(paramFile))) {
        magic = 6;
      } else if ("pam".equals(IOUtil.getFileSuffix(paramFile))) {
        magic = 7;
      } else
        return false;
    }
    boolean bool;
    try {
      bool = writeImpl(paramFile, paramTextureData);
    } finally {
      magic = i;
    }
    return bool;
  }
  
  private boolean writeImpl(File paramFile, TextureData paramTextureData) throws IOException {
    int i = paramTextureData.getPixelFormat();
    int j = paramTextureData.getPixelType();
    if (((i == 6407) || (i == 6408) || (i == 32992) || (i == 32993)) && ((j == 5120) || (j == 5121)))
    {





      ByteBuffer localByteBuffer = (ByteBuffer)paramTextureData.getBuffer();
      if (null == localByteBuffer) {
        localByteBuffer = (ByteBuffer)paramTextureData.getMipmapData()[0];
      }
      localByteBuffer.rewind();
      
      int k = (i == 6408) || (i == 32993) ? 4 : 3;
      
      if ((i == 32992) || (i == 32993))
      {
        for (int m = 0; m < localByteBuffer.remaining(); m += k) {
          byte b1 = localByteBuffer.get(m + 0);
          byte b2 = localByteBuffer.get(m + 2);
          localByteBuffer.put(m + 0, b2);
          localByteBuffer.put(m + 2, b1);
        }
        i = 4 == k ? 6408 : 6407;
        paramTextureData.setPixelFormat(i);
      }
      
      if ((magic == 6) && (k == 4)) {
        throw new IOException("NetPbmTextureWriter magic 6 (PPM) doesn't RGBA pixel format, use magic 7 (PAM)");
      }
      
      FileOutputStream localFileOutputStream = IOUtil.getFileOutputStream(paramFile, true);
      
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("P");
      localStringBuilder.append(magic);
      localStringBuilder.append("\n");
      if (7 == magic) {
        localStringBuilder.append("WIDTH ");
      }
      localStringBuilder.append(paramTextureData.getWidth());
      if (7 == magic) {
        localStringBuilder.append("\nHEIGHT ");
      } else {
        localStringBuilder.append(" ");
      }
      localStringBuilder.append(paramTextureData.getHeight());
      if (7 == magic) {
        localStringBuilder.append("\nDEPTH ");
        localStringBuilder.append(k);
        localStringBuilder.append("\nMAXVAL 255\nTUPLTYPE ");
        if (i == 6408) {
          localStringBuilder.append("RGB_ALPHA");
        } else {
          localStringBuilder.append("RGB");
        }
        localStringBuilder.append("\nENDHDR\n");
      } else {
        localStringBuilder.append("\n255\n");
      }
      
      localFileOutputStream.write(localStringBuilder.toString().getBytes());
      
      FileChannel localFileChannel = localFileOutputStream.getChannel();
      localFileChannel.write(localByteBuffer);
      localFileChannel.force(true);
      localFileChannel.close();
      localFileOutputStream.close();
      localByteBuffer.rewind();
      
      return true;
    }
    throw new IOException("NetPbmTextureWriter writer doesn't support this pixel format / type (only GL_RGB/A + bytes)");
  }
}
