package com.jogamp.nativewindow;

import jogamp.nativewindow.Debug;































public class DefaultGraphicsConfiguration
  implements Cloneable, AbstractGraphicsConfiguration
{
  protected static final boolean DEBUG = Debug.debug("GraphicsConfiguration");
  
  private AbstractGraphicsScreen screen;
  protected CapabilitiesImmutable capabilitiesChosen;
  protected CapabilitiesImmutable capabilitiesRequested;
  
  public DefaultGraphicsConfiguration(AbstractGraphicsScreen paramAbstractGraphicsScreen, CapabilitiesImmutable paramCapabilitiesImmutable1, CapabilitiesImmutable paramCapabilitiesImmutable2)
  {
    if (null == paramAbstractGraphicsScreen) {
      throw new IllegalArgumentException("Null screen");
    }
    if (null == paramCapabilitiesImmutable1) {
      throw new IllegalArgumentException("Null chosen caps");
    }
    if (null == paramCapabilitiesImmutable2) {
      throw new IllegalArgumentException("Null requested caps");
    }
    screen = paramAbstractGraphicsScreen;
    capabilitiesChosen = paramCapabilitiesImmutable1;
    capabilitiesRequested = paramCapabilitiesImmutable2;
  }
  
  public Object clone()
  {
    try {
      return super.clone();
    } catch (CloneNotSupportedException localCloneNotSupportedException) {
      throw new NativeWindowException(localCloneNotSupportedException);
    }
  }
  
  public final AbstractGraphicsScreen getScreen()
  {
    return screen;
  }
  
  public final CapabilitiesImmutable getChosenCapabilities()
  {
    return capabilitiesChosen;
  }
  
  public final CapabilitiesImmutable getRequestedCapabilities()
  {
    return capabilitiesRequested;
  }
  
  public AbstractGraphicsConfiguration getNativeGraphicsConfiguration()
  {
    return this;
  }
  
  public final int getVisualID(VisualIDHolder.VIDType paramVIDType) throws NativeWindowException
  {
    return capabilitiesChosen.getVisualID(paramVIDType);
  }
  








  protected void setChosenCapabilities(CapabilitiesImmutable paramCapabilitiesImmutable)
  {
    capabilitiesChosen = paramCapabilitiesImmutable;
  }
  







  protected void setScreen(AbstractGraphicsScreen paramAbstractGraphicsScreen)
  {
    screen = paramAbstractGraphicsScreen;
  }
  
  public String toString()
  {
    return getClass().getSimpleName() + "[" + screen + ",\n\tchosen    " + capabilitiesChosen + ",\n\trequested " + capabilitiesRequested + "]";
  }
  


  public static String toHexString(int paramInt)
  {
    return "0x" + Integer.toHexString(paramInt);
  }
  
  public static String toHexString(long paramLong) {
    return "0x" + Long.toHexString(paramLong);
  }
}
