package jogamp.opengl.glu.tessellator;











class Normal
{
  static boolean SLANTED_SWEEP;
  









  static double S_UNIT_X;
  









  static double S_UNIT_Y;
  









  private static final boolean TRUE_PROJECT = false;
  










  static
  {
    SLANTED_SWEEP = false;
    




    if (SLANTED_SWEEP)
    {








      S_UNIT_X = 0.5094153956495538D;
      S_UNIT_Y = 0.8605207462201063D;
    } else {
      S_UNIT_X = 1.0D;
      S_UNIT_Y = 0.0D;
    }
  }
  
  private static double Dot(double[] paramArrayOfDouble1, double[] paramArrayOfDouble2) {
    return paramArrayOfDouble1[0] * paramArrayOfDouble2[0] + paramArrayOfDouble1[1] * paramArrayOfDouble2[1] + paramArrayOfDouble1[2] * paramArrayOfDouble2[2];
  }
  
  static void Normalize(double[] paramArrayOfDouble) {
    double d = paramArrayOfDouble[0] * paramArrayOfDouble[0] + paramArrayOfDouble[1] * paramArrayOfDouble[1] + paramArrayOfDouble[2] * paramArrayOfDouble[2];
    
    assert (d > 0.0D);
    d = Math.sqrt(d);
    paramArrayOfDouble[0] /= d;
    paramArrayOfDouble[1] /= d;
    paramArrayOfDouble[2] /= d;
  }
  
  static int LongAxis(double[] paramArrayOfDouble) {
    int i = 0;
    
    if (Math.abs(paramArrayOfDouble[1]) > Math.abs(paramArrayOfDouble[0])) {
      i = 1;
    }
    if (Math.abs(paramArrayOfDouble[2]) > Math.abs(paramArrayOfDouble[i])) {
      i = 2;
    }
    return i;
  }
  



  static void ComputeNormal(GLUtessellatorImpl paramGLUtessellatorImpl, double[] paramArrayOfDouble)
  {
    GLUvertex localGLUvertex4 = mesh.vHead;
    

    double[] arrayOfDouble1 = new double[3];
    double[] arrayOfDouble2 = new double[3];
    GLUvertex[] arrayOfGLUvertex2 = new GLUvertex[3];
    GLUvertex[] arrayOfGLUvertex1 = new GLUvertex[3];
    double[] arrayOfDouble3 = new double[3];
    double[] arrayOfDouble4 = new double[3];
    double[] arrayOfDouble5 = new double[3]; double 
    
      tmp60_59 = (arrayOfDouble1[2] = -2.0E150D);arrayOfDouble1[1] = tmp60_59;arrayOfDouble1[0] = tmp60_59; double 
      tmp77_76 = (arrayOfDouble2[2] = 2.0E150D);arrayOfDouble2[1] = tmp77_76;arrayOfDouble2[0] = tmp77_76;
    
    for (GLUvertex localGLUvertex1 = next; localGLUvertex1 != tmp60_59; localGLUvertex1 = next) {
      for (i = 0; i < 3; i++) {
        double d1 = coords[i];
        if (d1 < arrayOfDouble2[i]) {
          arrayOfDouble2[i] = d1;
          arrayOfGLUvertex2[i] = localGLUvertex1;
        }
        if (d1 > arrayOfDouble1[i]) {
          arrayOfDouble1[i] = d1;
          arrayOfGLUvertex1[i] = localGLUvertex1;
        }
      }
    }
    



    int i = 0;
    if (arrayOfDouble1[1] - arrayOfDouble2[1] > arrayOfDouble1[0] - arrayOfDouble2[0]) {
      i = 1;
    }
    if (arrayOfDouble1[2] - arrayOfDouble2[2] > arrayOfDouble1[i] - arrayOfDouble2[i]) {
      i = 2;
    }
    if (arrayOfDouble2[i] >= arrayOfDouble1[i])
    {
      paramArrayOfDouble[0] = 0.0D;
      paramArrayOfDouble[1] = 0.0D;
      paramArrayOfDouble[2] = 1.0D;
      return;
    }
    



    double d3 = 0.0D;
    GLUvertex localGLUvertex2 = arrayOfGLUvertex2[i];
    GLUvertex localGLUvertex3 = arrayOfGLUvertex1[i];
    arrayOfDouble3[0] = (coords[0] - coords[0]);
    arrayOfDouble3[1] = (coords[1] - coords[1]);
    arrayOfDouble3[2] = (coords[2] - coords[2]);
    for (localGLUvertex1 = next; localGLUvertex1 != tmp60_59; localGLUvertex1 = next) {
      arrayOfDouble4[0] = (coords[0] - coords[0]);
      arrayOfDouble4[1] = (coords[1] - coords[1]);
      arrayOfDouble4[2] = (coords[2] - coords[2]);
      arrayOfDouble5[0] = (arrayOfDouble3[1] * arrayOfDouble4[2] - arrayOfDouble3[2] * arrayOfDouble4[1]);
      arrayOfDouble5[1] = (arrayOfDouble3[2] * arrayOfDouble4[0] - arrayOfDouble3[0] * arrayOfDouble4[2]);
      arrayOfDouble5[2] = (arrayOfDouble3[0] * arrayOfDouble4[1] - arrayOfDouble3[1] * arrayOfDouble4[0]);
      double d2 = arrayOfDouble5[0] * arrayOfDouble5[0] + arrayOfDouble5[1] * arrayOfDouble5[1] + arrayOfDouble5[2] * arrayOfDouble5[2];
      if (d2 > d3) {
        d3 = d2;
        paramArrayOfDouble[0] = arrayOfDouble5[0];
        paramArrayOfDouble[1] = arrayOfDouble5[1];
        paramArrayOfDouble[2] = arrayOfDouble5[2];
      }
    }
    
    if (d3 <= 0.0D)
    {
      double tmp547_546 = (paramArrayOfDouble[2] = 0.0D);paramArrayOfDouble[1] = tmp547_546;paramArrayOfDouble[0] = tmp547_546;
      paramArrayOfDouble[LongAxis(arrayOfDouble3)] = 1.0D;
    }
  }
  

  static void CheckOrientation(GLUtessellatorImpl paramGLUtessellatorImpl)
  {
    GLUface localGLUface2 = mesh.fHead;
    
    GLUvertex localGLUvertex2 = mesh.vHead;
    




    double d = 0.0D;
    for (GLUface localGLUface1 = next; localGLUface1 != localGLUface2; localGLUface1 = next) {
      GLUhalfEdge localGLUhalfEdge = anEdge;
      if (winding > 0)
        do {
          d += (Org.s - Sym.Org.s) * (Org.t + Sym.Org.t);
          localGLUhalfEdge = Lnext;
        } while (localGLUhalfEdge != anEdge);
    }
    if (d < 0.0D)
    {
      for (GLUvertex localGLUvertex1 = next; localGLUvertex1 != localGLUvertex2; localGLUvertex1 = next) {
        t = (-t);
      }
      tUnit[0] = (-tUnit[0]);
      tUnit[1] = (-tUnit[1]);
      tUnit[2] = (-tUnit[2]);
    }
  }
  



  public static void __gl_projectPolygon(GLUtessellatorImpl paramGLUtessellatorImpl)
  {
    GLUvertex localGLUvertex2 = mesh.vHead;
    
    double[] arrayOfDouble1 = new double[3];
    

    int j = 0;
    
    arrayOfDouble1[0] = normal[0];
    arrayOfDouble1[1] = normal[1];
    arrayOfDouble1[2] = normal[2];
    if ((arrayOfDouble1[0] == 0.0D) && (arrayOfDouble1[1] == 0.0D) && (arrayOfDouble1[2] == 0.0D)) {
      ComputeNormal(paramGLUtessellatorImpl, arrayOfDouble1);
      j = 1;
    }
    double[] arrayOfDouble2 = sUnit;
    double[] arrayOfDouble3 = tUnit;
    int i = LongAxis(arrayOfDouble1);
    
























    arrayOfDouble2[i] = 0.0D;
    arrayOfDouble2[((i + 1) % 3)] = S_UNIT_X;
    arrayOfDouble2[((i + 2) % 3)] = S_UNIT_Y;
    
    arrayOfDouble3[i] = 0.0D;
    arrayOfDouble3[((i + 1) % 3)] = (arrayOfDouble1[i] > 0.0D ? -S_UNIT_Y : S_UNIT_Y);
    arrayOfDouble3[((i + 2) % 3)] = (arrayOfDouble1[i] > 0.0D ? S_UNIT_X : -S_UNIT_X);
    


    for (GLUvertex localGLUvertex1 = next; localGLUvertex1 != localGLUvertex2; localGLUvertex1 = next) {
      s = Dot(coords, arrayOfDouble2);
      t = Dot(coords, arrayOfDouble3);
    }
    if (j != 0) {
      CheckOrientation(paramGLUtessellatorImpl);
    }
  }
  
  private Normal() {}
}
