package com.jogamp.opengl.util.texture.spi;

import com.jogamp.common.util.IOUtil;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

































































public class SGIImage
{
  private final Header header;
  private int format;
  private byte[] data;
  private int[] rowStart;
  private int[] rowSize;
  private int rleEnd;
  private byte[] tmpData;
  private byte[] tmpRead;
  private static final int MAGIC = 474;
  
  static class Header
  {
    short magic;
    byte storage;
    byte bpc;
    short dimension;
    short xsize;
    short ysize;
    short zsize;
    int pixmin;
    int pixmax;
    int dummy;
    String imagename;
    int colormap;
    
    Header()
    {
      magic = 474;
    }
    
    Header(DataInputStream paramDataInputStream) throws IOException {
      magic = paramDataInputStream.readShort();
      storage = paramDataInputStream.readByte();
      bpc = paramDataInputStream.readByte();
      dimension = paramDataInputStream.readShort();
      xsize = paramDataInputStream.readShort();
      ysize = paramDataInputStream.readShort();
      zsize = paramDataInputStream.readShort();
      pixmin = paramDataInputStream.readInt();
      pixmax = paramDataInputStream.readInt();
      dummy = paramDataInputStream.readInt();
      byte[] arrayOfByte1 = new byte[80];
      paramDataInputStream.read(arrayOfByte1);
      int i = 0;
      while (arrayOfByte1[(i++)] != 0) {}
      imagename = new String(arrayOfByte1, 0, i);
      colormap = paramDataInputStream.readInt();
      byte[] arrayOfByte2 = new byte['Æ”'];
      paramDataInputStream.read(arrayOfByte2);
    }
    
    public String toString()
    {
      return "magic: " + magic + " storage: " + storage + " bpc: " + bpc + " dimension: " + dimension + " xsize: " + xsize + " ysize: " + ysize + " zsize: " + zsize + " pixmin: " + pixmin + " pixmax: " + pixmax + " imagename: " + imagename + " colormap: " + colormap;
    }
  }
  









  private SGIImage(Header paramHeader)
  {
    header = paramHeader;
  }
  
  public static SGIImage read(String paramString) throws IOException
  {
    return read(new FileInputStream(paramString));
  }
  
  public static SGIImage read(InputStream paramInputStream) throws IOException
  {
    DataInputStream localDataInputStream = new DataInputStream(new BufferedInputStream(paramInputStream));
    
    Header localHeader = new Header(localDataInputStream);
    SGIImage localSGIImage = new SGIImage(localHeader);
    localSGIImage.decodeImage(localDataInputStream);
    return localSGIImage;
  }
  

  public void write(String paramString, boolean paramBoolean)
    throws IOException
  {
    write(new File(paramString), paramBoolean);
  }
  

  public void write(File paramFile, boolean paramBoolean)
    throws IOException
  {
    writeImage(paramFile, data, header.xsize, header.ysize, header.zsize, paramBoolean);
  }
  




  public static SGIImage createFromData(int paramInt1, int paramInt2, boolean paramBoolean, byte[] paramArrayOfByte)
  {
    Header localHeader = new Header();
    xsize = ((short)paramInt1);
    ysize = ((short)paramInt2);
    zsize = ((short)(paramBoolean ? 4 : 3));
    SGIImage localSGIImage = new SGIImage(localHeader);
    data = paramArrayOfByte;
    return localSGIImage;
  }
  





  @Deprecated
  public static boolean isSGIImage(InputStream paramInputStream)
    throws IOException
  {
    if (!(paramInputStream instanceof BufferedInputStream)) {
      paramInputStream = new BufferedInputStream(paramInputStream);
    }
    if (!paramInputStream.markSupported()) {
      throw new IOException("Can not test non-destructively whether given InputStream is an SGI RGB image");
    }
    DataInputStream localDataInputStream = new DataInputStream(paramInputStream);
    localDataInputStream.mark(4);
    int i = localDataInputStream.readShort();
    localDataInputStream.reset();
    return i == 474;
  }
  
  public int getWidth()
  {
    return header.xsize;
  }
  
  public int getHeight()
  {
    return header.ysize;
  }
  
  public int getFormat()
  {
    return format;
  }
  
  public byte[] getData()
  {
    return data;
  }
  
  public String toString() {
    return header.toString();
  }
  


  private void decodeImage(DataInputStream paramDataInputStream)
    throws IOException
  {
    if (header.storage == 1)
    {
      i = header.ysize * header.zsize;
      rowStart = new int[i];
      rowSize = new int[i];
      rleEnd = (8 * i + 512);
      for (j = 0; j < i; j++) {
        rowStart[j] = paramDataInputStream.readInt();
      }
      for (j = 0; j < i; j++) {
        rowSize[j] = paramDataInputStream.readInt();
      }
      tmpRead = new byte[header.xsize * 256];
    }
    tmpData = readAll(paramDataInputStream);
    
    int i = header.xsize;
    int j = header.ysize;
    int k = header.zsize;
    int m = 0;
    
    data = new byte[i * j * 4];
    byte[] arrayOfByte1 = new byte[i];
    byte[] arrayOfByte2 = new byte[i];
    byte[] arrayOfByte3 = new byte[i];
    byte[] arrayOfByte4 = new byte[i];
    for (int n = 0; n < j; n++) {
      if (k >= 4) {
        getRow(arrayOfByte1, n, 0);
        getRow(arrayOfByte2, n, 1);
        getRow(arrayOfByte3, n, 2);
        getRow(arrayOfByte4, n, 3);
        rgbatorgba(arrayOfByte1, arrayOfByte2, arrayOfByte3, arrayOfByte4, data, m);
      } else if (k == 3) {
        getRow(arrayOfByte1, n, 0);
        getRow(arrayOfByte2, n, 1);
        getRow(arrayOfByte3, n, 2);
        rgbtorgba(arrayOfByte1, arrayOfByte2, arrayOfByte3, data, m);
      } else if (k == 2) {
        getRow(arrayOfByte1, n, 0);
        getRow(arrayOfByte4, n, 1);
        latorgba(arrayOfByte1, arrayOfByte4, data, m);
      } else {
        getRow(arrayOfByte1, n, 0);
        bwtorgba(arrayOfByte1, data, m);
      }
      m += 4 * i;
    }
    rowStart = null;
    rowSize = null;
    tmpData = null;
    tmpRead = null;
    format = 6408;
    header.zsize = 4;
  }
  
  private void getRow(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    if (header.storage == 1) {
      i = rowStart[(paramInt1 + paramInt2 * header.ysize)] - rleEnd;
      System.arraycopy(tmpData, i, tmpRead, 0, rowSize[(paramInt1 + paramInt2 * header.ysize)]);
      int j = 0;
      int k = 0;
      for (;;) {
        int m = tmpRead[(j++)];
        int n = m & 0x7F;
        if (n == 0) {
          return;
        }
        if ((m & 0x80) != 0) {
          while (n-- > 0) {
            paramArrayOfByte[(k++)] = tmpRead[(j++)];
          }
        }
        m = tmpRead[(j++)];
        while (n-- > 0) {
          paramArrayOfByte[(k++)] = m;
        }
      }
    }
    
    int i = paramInt1 * header.xsize + paramInt2 * header.xsize * header.ysize;
    System.arraycopy(tmpData, i, paramArrayOfByte, 0, header.xsize);
  }
  
  private void bwtorgba(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, int paramInt)
  {
    for (int i = 0; i < paramArrayOfByte1.length; i++) {
      paramArrayOfByte2[(4 * i + paramInt + 0)] = paramArrayOfByte1[i];
      paramArrayOfByte2[(4 * i + paramInt + 1)] = paramArrayOfByte1[i];
      paramArrayOfByte2[(4 * i + paramInt + 2)] = paramArrayOfByte1[i];
      paramArrayOfByte2[(4 * i + paramInt + 3)] = -1;
    }
  }
  
  private void latorgba(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, byte[] paramArrayOfByte3, int paramInt) {
    for (int i = 0; i < paramArrayOfByte1.length; i++) {
      paramArrayOfByte3[(4 * i + paramInt + 0)] = paramArrayOfByte1[i];
      paramArrayOfByte3[(4 * i + paramInt + 1)] = paramArrayOfByte1[i];
      paramArrayOfByte3[(4 * i + paramInt + 2)] = paramArrayOfByte1[i];
      paramArrayOfByte3[(4 * i + paramInt + 3)] = paramArrayOfByte2[i];
    }
  }
  
  private void rgbtorgba(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, byte[] paramArrayOfByte3, byte[] paramArrayOfByte4, int paramInt) {
    for (int i = 0; i < paramArrayOfByte3.length; i++) {
      paramArrayOfByte4[(4 * i + paramInt + 0)] = paramArrayOfByte1[i];
      paramArrayOfByte4[(4 * i + paramInt + 1)] = paramArrayOfByte2[i];
      paramArrayOfByte4[(4 * i + paramInt + 2)] = paramArrayOfByte3[i];
      paramArrayOfByte4[(4 * i + paramInt + 3)] = -1;
    }
  }
  
  private void rgbatorgba(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, byte[] paramArrayOfByte3, byte[] paramArrayOfByte4, byte[] paramArrayOfByte5, int paramInt) {
    for (int i = 0; i < paramArrayOfByte3.length; i++) {
      paramArrayOfByte5[(4 * i + paramInt + 0)] = paramArrayOfByte1[i];
      paramArrayOfByte5[(4 * i + paramInt + 1)] = paramArrayOfByte2[i];
      paramArrayOfByte5[(4 * i + paramInt + 2)] = paramArrayOfByte3[i];
      paramArrayOfByte5[(4 * i + paramInt + 3)] = paramArrayOfByte4[i];
    }
  }
  





  private static byte imgref(byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6)
  {
    return paramArrayOfByte[(paramInt4 * paramInt5 * paramInt3 + paramInt4 * paramInt2 + paramInt1)];
  }
  













  private void writeHeader(DataOutputStream paramDataOutputStream, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean)
    throws IOException
  {
    paramDataOutputStream.writeShort(474);
    paramDataOutputStream.write(paramBoolean ? 1 : 0);
    paramDataOutputStream.write(1);
    

    paramDataOutputStream.writeShort(3);
    

    paramDataOutputStream.writeShort(paramInt1);
    paramDataOutputStream.writeShort(paramInt2);
    paramDataOutputStream.writeShort(paramInt3);
    

    paramDataOutputStream.writeInt(0);
    paramDataOutputStream.writeInt(255);
    

    paramDataOutputStream.writeInt(0);
    

    for (int i = 0; i < 80; i++) {
      paramDataOutputStream.write(0);
    }
    
    paramDataOutputStream.writeInt(0);
    

    for (i = 0; i < 404; i++) {
      paramDataOutputStream.write(0);
    }
  }
  



  private void writeImage(File paramFile, byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean)
    throws IOException
  {
    byte[] arrayOfByte1 = new byte[paramInt1 * paramInt2 * paramInt3];
    int i = 0;
    for (int j = 0; j < paramInt3; j++) {
      for (int k = j; k < paramInt1 * paramInt2 * paramInt3; k += paramInt3) {
        arrayOfByte1[(i++)] = paramArrayOfByte[k];
      }
    }
    paramArrayOfByte = arrayOfByte1;
    
















    int[] arrayOfInt1 = new int[paramInt2 * paramInt3];
    int[] arrayOfInt2 = new int[paramInt2 * paramInt3];
    










    byte[] arrayOfByte2 = new byte[2 * paramInt1 * paramInt2 * paramInt3];
    
    int m = 0;
    int n = 0;
    int i1 = 0;
    int i2 = 0;
    int i3 = 1;
    int i4 = paramInt2;
    
    if (paramBoolean) {
      i2 = paramInt2 - 1;
      i4 = -1;
      i3 = -1;
    }
    


    for (int i5 = 0; i5 < paramInt3; i5++) {
      for (int i6 = i2; i6 != i4; i6 += i3)
      {

        i7 = 0;
        int i8 = 0;
        int i9 = 0;
        int i10 = 0;
        int i11 = n;
        int i12 = n++;
        int i13 = 0;
        
        while (i7 < paramInt1)
        {
          i10 = 0;
          if (i9 != 0) {
            if (imgref(paramArrayOfByte, i7, i6, i5, paramInt1, paramInt2, paramInt3) != i13) {
              i10 = 1;
            }
            

          }
          else if (i7 + 3 < paramInt1) {
            i10 = 1;
            for (i14 = 1; i14 <= 3; i14++)
            {




              if (imgref(paramArrayOfByte, i7, i6, i5, paramInt1, paramInt2, paramInt3) != imgref(paramArrayOfByte, i7 + i14, i6, i5, paramInt1, paramInt2, paramInt3)) {
                i10 = 0;
              }
            }
          }
          
          if ((i10 != 0) || (i8 == 127))
          {
            if (i7 > 0) {
              if (i9 != 0) {
                arrayOfByte2[i12] = i8;
              } else {
                arrayOfByte2[i12] = ((byte)(i8 | 0x80));
              }
            }
            

            if (i9 != 0) {
              if (i10 != 0)
                i9 = 0;
              arrayOfByte2[(n++)] = i13;
            } else {
              if (i10 != 0)
                i9 = 1;
              i13 = imgref(paramArrayOfByte, i7, i6, i5, paramInt1, paramInt2, paramInt3);
            }
            
            if (i7 > 0)
            {
              i12 = n++;
              
              i8 = 0;
            }
          }
          

          if (i9 == 0) {
            arrayOfByte2[(n++)] = imgref(paramArrayOfByte, i7, i6, i5, paramInt1, paramInt2, paramInt3);
          }
          i8 = (byte)(i8 + 1);
          
          if (i7 == paramInt1 - 1)
          {
            if (i9 != 0) {
              arrayOfByte2[i12] = i8;
              

              arrayOfByte2[(n++)] = i13;
            }
            else {
              arrayOfByte2[i12] = ((byte)(i8 | 0x80));
            }
            
            arrayOfByte2[(n++)] = 0;
          }
          
          i7++;
        }
        
        int i14 = n - i11;
        if (paramBoolean) {
          arrayOfInt2[(paramInt2 * i5 + (paramInt2 - i6 - 1))] = i14;
        } else {
          arrayOfInt2[(paramInt2 * i5 + i6)] = i14;
        }
        if (paramBoolean) {
          arrayOfInt1[(paramInt2 * i5 + (paramInt2 - i6 - 1))] = m;
        } else
          arrayOfInt1[(paramInt2 * i5 + i6)] = m;
        m += i14;
      }
    }
    


    i1 = n;
    



    DataOutputStream localDataOutputStream = new DataOutputStream(new BufferedOutputStream(IOUtil.getFileOutputStream(paramFile, true)));
    
    writeHeader(localDataOutputStream, paramInt1, paramInt2, paramInt3, true);
    

    for (int i7 = 0; i7 < paramInt2 * paramInt3; i7++)
      localDataOutputStream.writeInt(arrayOfInt1[i7] + 512 + 2 * paramInt2 * paramInt3 * 4);
    for (i7 = 0; i7 < paramInt2 * paramInt3; i7++)
      localDataOutputStream.writeInt(arrayOfInt2[i7]);
    for (i7 = 0; i7 < i1; i7++) {
      localDataOutputStream.write(arrayOfByte2[i7]);
    }
    localDataOutputStream.close();
  }
  
  private byte[] readAll(DataInputStream paramDataInputStream) throws IOException {
    Object localObject = new byte['ä€€'];
    int i = 0;
    int j = 0;
    
    int k = 0;
    byte[] arrayOfByte;
    do {
      j = paramDataInputStream.read((byte[])localObject, i, localObject.length - i);
      if (i == localObject.length)
      {
        arrayOfByte = new byte[2 * localObject.length];
        System.arraycopy(localObject, 0, arrayOfByte, 0, i);
        localObject = arrayOfByte;
      }
      if (j > 0) {
        i += j;
      }
      
      k = (j == -1) || (paramDataInputStream.available() == 0) ? 1 : 0;
    } while (k == 0);
    

    if (i != localObject.length) {
      arrayOfByte = new byte[i];
      System.arraycopy(localObject, 0, arrayOfByte, 0, i);
      localObject = arrayOfByte;
    }
    
    return localObject;
  }
}
