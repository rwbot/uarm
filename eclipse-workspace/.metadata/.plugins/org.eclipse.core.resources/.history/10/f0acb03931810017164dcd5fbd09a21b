package com.leapmotion.leap;




public class Mask
  extends Interface
{
  private long swigCPtr;
  


  public Mask(long paramLong, boolean paramBoolean)
  {
    super(LeapJNI.Mask_SWIGUpcast(paramLong), paramBoolean);
    swigCPtr = paramLong;
  }
  
  public static long getCPtr(Mask paramMask) {
    return paramMask == null ? 0L : swigCPtr;
  }
  
  protected void finalize() {
    delete();
  }
  
  public synchronized void delete() {
    if (swigCPtr != 0L) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        LeapJNI.delete_Mask(swigCPtr);
      }
      swigCPtr = 0L;
    }
    super.delete();
  }
  










  public byte[] data()
  {
    byte[] arrayOfByte = new byte[width() * height()];
    LeapJNI.Mask_data(swigCPtr, this, arrayOfByte);
    return arrayOfByte;
  }
  
  public Mask() {
    this(LeapJNI.new_Mask(), true);
  }
  
  public long sequenceId() {
    return LeapJNI.Mask_sequenceId(swigCPtr, this);
  }
  
  public int id() {
    return LeapJNI.Mask_id(swigCPtr, this);
  }
  
  public void data(byte[] paramArrayOfByte) {
    LeapJNI.Mask_data(swigCPtr, this, paramArrayOfByte);
  }
  
  public int width() {
    return LeapJNI.Mask_width(swigCPtr, this);
  }
  
  public int height() {
    return LeapJNI.Mask_height(swigCPtr, this);
  }
  
  public int offsetX() {
    return LeapJNI.Mask_offsetX(swigCPtr, this);
  }
  
  public int offsetY() {
    return LeapJNI.Mask_offsetY(swigCPtr, this);
  }
  
  public boolean isValid() {
    return LeapJNI.Mask_isValid(swigCPtr, this);
  }
  
  public static Mask invalid() {
    return new Mask(LeapJNI.Mask_invalid(), false);
  }
  
  public boolean equals(Mask paramMask) {
    return LeapJNI.Mask_equals(swigCPtr, this, getCPtr(paramMask), paramMask);
  }
  
  public String toString() {
    return LeapJNI.Mask_toString(swigCPtr, this);
  }
}
