package com.jogamp.opengl.util;

import com.jogamp.opengl.GL;
import com.jogamp.opengl.GLArrayData;
import com.jogamp.opengl.GLBufferStorage;
import com.jogamp.opengl.GLException;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;
import jogamp.opengl.util.GLArrayHandler;
import jogamp.opengl.util.GLArrayHandlerInterleaved;
import jogamp.opengl.util.GLDataArrayHandler;
import jogamp.opengl.util.GLFixedArrayHandler;
import jogamp.opengl.util.GLFixedArrayHandlerFlat;
import jogamp.opengl.util.glsl.GLSLArrayHandler;
import jogamp.opengl.util.glsl.GLSLArrayHandlerFlat;
import jogamp.opengl.util.glsl.GLSLArrayHandlerInterleaved;





























































public class GLArrayDataServer
  extends GLArrayDataClient
  implements GLArrayDataEditable
{
  public static GLArrayDataServer createFixed(int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean, int paramInt4, Buffer paramBuffer, int paramInt5)
    throws GLException
  {
    GLArrayDataServer localGLArrayDataServer = new GLArrayDataServer();
    GLFixedArrayHandler localGLFixedArrayHandler = new GLFixedArrayHandler(localGLArrayDataServer);
    localGLArrayDataServer.init(null, paramInt1, paramInt2, paramInt3, paramBoolean, paramInt4, paramBuffer, paramBuffer.limit(), 0, false, localGLFixedArrayHandler, 0, 0L, paramInt5, 34962, false);
    
    return localGLArrayDataServer;
  }
  






















  public static GLArrayDataServer createFixed(int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean, int paramInt4, int paramInt5)
    throws GLException
  {
    GLArrayDataServer localGLArrayDataServer = new GLArrayDataServer();
    GLFixedArrayHandler localGLFixedArrayHandler = new GLFixedArrayHandler(localGLArrayDataServer);
    localGLArrayDataServer.init(null, paramInt1, paramInt2, paramInt3, paramBoolean, 0, null, paramInt4, 0, false, localGLFixedArrayHandler, 0, 0L, paramInt5, 34962, false);
    
    return localGLArrayDataServer;
  }
  











  public static GLArrayDataServer createGLSL(String paramString, int paramInt1, int paramInt2, boolean paramBoolean, int paramInt3, int paramInt4)
    throws GLException
  {
    GLArrayDataServer localGLArrayDataServer = new GLArrayDataServer();
    GLSLArrayHandler localGLSLArrayHandler = new GLSLArrayHandler(localGLArrayDataServer);
    localGLArrayDataServer.init(paramString, -1, paramInt1, paramInt2, paramBoolean, 0, null, paramInt3, 0, true, localGLSLArrayHandler, 0, 0L, paramInt4, 34962, true);
    
    return localGLArrayDataServer;
  }
  











  public static GLArrayDataServer createGLSLMapped(String paramString, int paramInt1, int paramInt2, boolean paramBoolean, int paramInt3, int paramInt4)
    throws GLException
  {
    GLArrayDataServer localGLArrayDataServer = new GLArrayDataServer();
    GLSLArrayHandler localGLSLArrayHandler = new GLSLArrayHandler(localGLArrayDataServer);
    localGLArrayDataServer.init(paramString, -1, paramInt1, paramInt2, paramBoolean, 0, null, 0, paramInt3, true, localGLSLArrayHandler, 0, 0L, paramInt4, 34962, true);
    
    localGLArrayDataServer.seal(true);
    return localGLArrayDataServer;
  }
  













  public static GLArrayDataServer createGLSL(String paramString, int paramInt1, int paramInt2, boolean paramBoolean, int paramInt3, Buffer paramBuffer, int paramInt4)
    throws GLException
  {
    GLArrayDataServer localGLArrayDataServer = new GLArrayDataServer();
    GLSLArrayHandler localGLSLArrayHandler = new GLSLArrayHandler(localGLArrayDataServer);
    localGLArrayDataServer.init(paramString, -1, paramInt1, paramInt2, paramBoolean, paramInt3, paramBuffer, paramBuffer.limit(), 0, true, localGLSLArrayHandler, 0, 0L, paramInt4, 34962, true);
    
    return localGLArrayDataServer;
  }
  














  public static GLArrayDataServer createData(int paramInt1, int paramInt2, int paramInt3, Buffer paramBuffer, int paramInt4, int paramInt5)
    throws GLException
  {
    GLArrayDataServer localGLArrayDataServer = new GLArrayDataServer();
    GLDataArrayHandler localGLDataArrayHandler = new GLDataArrayHandler(localGLArrayDataServer);
    localGLArrayDataServer.init(null, -1, paramInt1, paramInt2, false, paramInt3, paramBuffer, paramBuffer.limit(), 0, false, localGLDataArrayHandler, 0, 0L, paramInt4, paramInt5, false);
    
    return localGLArrayDataServer;
  }
  












  public static GLArrayDataServer createData(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
    throws GLException
  {
    GLArrayDataServer localGLArrayDataServer = new GLArrayDataServer();
    GLDataArrayHandler localGLDataArrayHandler = new GLDataArrayHandler(localGLArrayDataServer);
    localGLArrayDataServer.init(null, -1, paramInt1, paramInt2, false, 0, null, paramInt3, 0, false, localGLDataArrayHandler, 0, 0L, paramInt4, paramInt5, false);
    
    return localGLArrayDataServer;
  }
  














  public static GLArrayDataServer createDataMapped(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
    throws GLException
  {
    GLArrayDataServer localGLArrayDataServer = new GLArrayDataServer();
    GLDataArrayHandler localGLDataArrayHandler = new GLDataArrayHandler(localGLArrayDataServer);
    localGLArrayDataServer.init(null, -1, paramInt1, paramInt2, false, 0, null, 0, paramInt3, false, localGLDataArrayHandler, 0, 0L, paramInt4, paramInt5, false);
    
    return localGLArrayDataServer;
  }
  












  public static GLArrayDataServer createFixedInterleaved(int paramInt1, int paramInt2, boolean paramBoolean, int paramInt3, int paramInt4)
    throws GLException
  {
    GLArrayDataServer localGLArrayDataServer = new GLArrayDataServer();
    GLArrayHandlerInterleaved localGLArrayHandlerInterleaved = new GLArrayHandlerInterleaved(localGLArrayDataServer);
    localGLArrayDataServer.init("mgl_InterleaveArray", -1, paramInt1, paramInt2, false, 0, null, paramInt3, 0, false, localGLArrayHandlerInterleaved, 0, 0L, paramInt4, 34962, false);
    
    return localGLArrayDataServer;
  }
  












  public static GLArrayDataServer createFixedInterleavedMapped(int paramInt1, int paramInt2, boolean paramBoolean, int paramInt3, int paramInt4)
    throws GLException
  {
    GLArrayDataServer localGLArrayDataServer = new GLArrayDataServer();
    GLArrayHandlerInterleaved localGLArrayHandlerInterleaved = new GLArrayHandlerInterleaved(localGLArrayDataServer);
    localGLArrayDataServer.init("mgl_InterleaveArray", -1, paramInt1, paramInt2, false, 0, null, 0, paramInt3, false, localGLArrayHandlerInterleaved, 0, 0L, paramInt4, 34962, false);
    
    localGLArrayDataServer.seal(true);
    return localGLArrayDataServer;
  }
  













  public static GLArrayDataServer createFixedInterleaved(int paramInt1, int paramInt2, boolean paramBoolean, int paramInt3, Buffer paramBuffer, int paramInt4)
    throws GLException
  {
    GLArrayDataServer localGLArrayDataServer = new GLArrayDataServer();
    GLArrayHandlerInterleaved localGLArrayHandlerInterleaved = new GLArrayHandlerInterleaved(localGLArrayDataServer);
    localGLArrayDataServer.init("mgl_InterleaveArray", -1, paramInt1, paramInt2, paramBoolean, paramInt3, paramBuffer, paramBuffer.limit(), 0, false, localGLArrayHandlerInterleaved, 0, 0L, paramInt4, 34962, false);
    
    return localGLArrayDataServer;
  }
  













  public GLArrayData addFixedSubArray(int paramInt1, int paramInt2, int paramInt3)
  {
    if (interleavedOffset >= getComponentCount() * getComponentSizeInBytes()) {
      i = interleavedOffset / getComponentSizeInBytes();
      throw new GLException("Interleaved offset > total components (" + i + " > " + getComponentCount() + ")");
    }
    if (usesGLSL) {
      throw new GLException("buffer uses GLSL");
    }
    int i = 0 == getStride() ? getComponentCount() * getComponentSizeInBytes() : getStride();
    GLArrayDataWrapper localGLArrayDataWrapper;
    if (0 < mappedElementCount) {
      localGLArrayDataWrapper = GLArrayDataWrapper.createFixed(paramInt1, paramInt2, 
        getComponentType(), 
        getNormalized(), i, mappedElementCount, 
        getVBOName(), interleavedOffset, getVBOUsage(), paramInt3);
    } else {
      localGLArrayDataWrapper = GLArrayDataWrapper.createFixed(paramInt1, paramInt2, 
        getComponentType(), 
        getNormalized(), i, getBuffer(), 
        getVBOName(), interleavedOffset, getVBOUsage(), paramInt3);
    }
    localGLArrayDataWrapper.setVBOEnabled(isVBO());
    interleavedOffset += paramInt2 * getComponentSizeInBytes();
    if (34962 == paramInt3) {
      glArrayHandler.addSubHandler(new GLFixedArrayHandlerFlat(localGLArrayDataWrapper));
    }
    return localGLArrayDataWrapper;
  }
  












  public static GLArrayDataServer createGLSLInterleaved(int paramInt1, int paramInt2, boolean paramBoolean, int paramInt3, int paramInt4)
    throws GLException
  {
    GLArrayDataServer localGLArrayDataServer = new GLArrayDataServer();
    GLSLArrayHandlerInterleaved localGLSLArrayHandlerInterleaved = new GLSLArrayHandlerInterleaved(localGLArrayDataServer);
    localGLArrayDataServer.init("mgl_InterleaveArray", -1, paramInt1, paramInt2, paramBoolean, 0, null, paramInt3, 0, false, localGLSLArrayHandlerInterleaved, 0, 0L, paramInt4, 34962, true);
    
    return localGLArrayDataServer;
  }
  











  public static GLArrayDataServer createGLSLInterleavedMapped(int paramInt1, int paramInt2, boolean paramBoolean, int paramInt3, int paramInt4)
    throws GLException
  {
    GLArrayDataServer localGLArrayDataServer = new GLArrayDataServer();
    GLSLArrayHandlerInterleaved localGLSLArrayHandlerInterleaved = new GLSLArrayHandlerInterleaved(localGLArrayDataServer);
    localGLArrayDataServer.init("mgl_InterleaveArray", -1, paramInt1, paramInt2, paramBoolean, 0, null, 0, paramInt3, false, localGLSLArrayHandlerInterleaved, 0, 0L, paramInt4, 34962, true);
    
    localGLArrayDataServer.seal(true);
    return localGLArrayDataServer;
  }
  













  public static GLArrayDataServer createGLSLInterleaved(int paramInt1, int paramInt2, boolean paramBoolean, int paramInt3, Buffer paramBuffer, int paramInt4)
    throws GLException
  {
    GLArrayDataServer localGLArrayDataServer = new GLArrayDataServer();
    GLSLArrayHandlerInterleaved localGLSLArrayHandlerInterleaved = new GLSLArrayHandlerInterleaved(localGLArrayDataServer);
    localGLArrayDataServer.init("mgl_InterleaveArray", -1, paramInt1, paramInt2, paramBoolean, paramInt3, paramBuffer, paramBuffer.limit(), 0, false, localGLSLArrayHandlerInterleaved, 0, 0L, paramInt4, 34962, true);
    
    return localGLArrayDataServer;
  }
  












  public GLArrayData addGLSLSubArray(String paramString, int paramInt1, int paramInt2)
  {
    if (interleavedOffset >= getComponentCount() * getComponentSizeInBytes()) {
      i = interleavedOffset / getComponentSizeInBytes();
      throw new GLException("Interleaved offset > total components (" + i + " > " + getComponentCount() + ")");
    }
    if (!usesGLSL) {
      throw new GLException("buffer uses fixed function");
    }
    int i = 0 == getStride() ? getComponentCount() * getComponentSizeInBytes() : getStride();
    GLArrayDataWrapper localGLArrayDataWrapper;
    if (0 < mappedElementCount) {
      localGLArrayDataWrapper = GLArrayDataWrapper.createGLSL(paramString, paramInt1, 
        getComponentType(), 
        getNormalized(), i, mappedElementCount, 
        getVBOName(), interleavedOffset, getVBOUsage(), paramInt2);
    } else {
      localGLArrayDataWrapper = GLArrayDataWrapper.createGLSL(paramString, paramInt1, 
        getComponentType(), 
        getNormalized(), i, getBuffer(), 
        getVBOName(), interleavedOffset, getVBOUsage(), paramInt2);
    }
    localGLArrayDataWrapper.setVBOEnabled(isVBO());
    interleavedOffset += paramInt1 * getComponentSizeInBytes();
    if (34962 == paramInt2) {
      glArrayHandler.addSubHandler(new GLSLArrayHandlerFlat(localGLArrayDataWrapper));
    }
    return localGLArrayDataWrapper;
  }
  
  public final void setInterleavedOffset(int paramInt) {
    interleavedOffset = paramInt;
  }
  
  public final int getInterleavedOffset() {
    return interleavedOffset;
  }
  











  public void destroy(GL paramGL)
  {
    int i = vboName;
    super.destroy(paramGL);
    if (i != 0) {
      int[] arrayOfInt = { i };
      paramGL.glDeleteBuffers(1, arrayOfInt, 0);
      vboName = 0;
    }
  }
  









  public void setVBOEnabled(boolean paramBoolean)
  {
    checkSeal(false);
    super.setVBOEnabled(paramBoolean);
  }
  
  public GLBufferStorage mapStorage(GL paramGL, int paramInt) {
    if (null != getBuffer()) {
      throw new IllegalStateException("user buffer not null");
    }
    if (null != mappedStorage) {
      throw new IllegalStateException("already mapped: " + mappedStorage);
    }
    checkSeal(true);
    bindBuffer(paramGL, true);
    paramGL.glBufferData(getVBOTarget(), getSizeInBytes(), null, getVBOUsage());
    GLBufferStorage localGLBufferStorage = paramGL.mapBuffer(getVBOTarget(), paramInt);
    setMappedBuffer(localGLBufferStorage);
    bindBuffer(paramGL, false);
    seal(false);
    rewind();
    return localGLBufferStorage;
  }
  
  public GLBufferStorage mapStorage(GL paramGL, long paramLong1, long paramLong2, int paramInt) { if (null != getBuffer()) {
      throw new IllegalStateException("user buffer not null");
    }
    if (null != mappedStorage) {
      throw new IllegalStateException("already mapped: " + mappedStorage);
    }
    checkSeal(true);
    bindBuffer(paramGL, true);
    paramGL.glBufferData(getVBOTarget(), getSizeInBytes(), null, getVBOUsage());
    GLBufferStorage localGLBufferStorage = paramGL.mapBufferRange(getVBOTarget(), paramLong1, paramLong2, paramInt);
    setMappedBuffer(localGLBufferStorage);
    bindBuffer(paramGL, false);
    seal(false);
    rewind();
    return localGLBufferStorage;
  }
  
  private final void setMappedBuffer(GLBufferStorage paramGLBufferStorage) { mappedStorage = paramGLBufferStorage;
    ByteBuffer localByteBuffer = paramGLBufferStorage.getMappedBuffer();
    if (componentClazz == ByteBuffer.class) {
      buffer = localByteBuffer;
    } else if (componentClazz == ShortBuffer.class) {
      buffer = localByteBuffer.asShortBuffer();
    } else if (componentClazz == IntBuffer.class) {
      buffer = localByteBuffer.asIntBuffer();
    } else if (componentClazz == FloatBuffer.class) {
      buffer = localByteBuffer.asFloatBuffer();
    } else {
      throw new GLException("Given Buffer Class not supported: " + componentClazz + ":\n\t" + this);
    }
  }
  
  public void unmapStorage(GL paramGL) {
    if (null == mappedStorage) {
      throw new IllegalStateException("not mapped");
    }
    mappedStorage = null;
    buffer = null;
    seal(true);
    bindBuffer(paramGL, true);
    paramGL.glUnmapBuffer(getVBOTarget());
    bindBuffer(paramGL, false);
  }
  

















  public String toString()
  {
    return "GLArrayDataServer[" + name + ", index " + index + ", location " + location + ", isVertexAttribute " + isVertexAttribute + ", usesGLSL " + usesGLSL + ", usesShaderState " + (null != shaderState) + ", dataType 0x" + Integer.toHexString(componentType) + ", bufferClazz " + componentClazz + ", elements " + getElementCount() + ", components " + componentsPerElement + ", stride " + strideB + "b " + strideL + "c" + ", initialElementCount " + initialElementCount + ", mappedElementCount " + mappedElementCount + ", mappedStorage " + mappedStorage + ", vboEnabled " + vboEnabled + ", vboName " + vboName + ", vboUsage 0x" + Integer.toHexString(vboUsage) + ", vboTarget 0x" + Integer.toHexString(vboTarget) + ", vboOffset " + vboOffset + ", sealed " + sealed + ", bufferEnabled " + bufferEnabled + ", bufferWritten " + bufferWritten + ", buffer " + buffer + ", alive " + alive + "]";
  }
  















  protected void init(String paramString, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean1, int paramInt4, Buffer paramBuffer, int paramInt5, int paramInt6, boolean paramBoolean2, GLArrayHandler paramGLArrayHandler, int paramInt7, long paramLong, int paramInt8, int paramInt9, boolean paramBoolean3)
    throws GLException
  {
    super.init(paramString, paramInt1, paramInt2, paramInt3, paramBoolean1, paramInt4, paramBuffer, paramInt5, paramInt6, paramBoolean2, paramGLArrayHandler, paramInt7, paramLong, paramInt8, paramInt9, paramBoolean3);
    

    vboEnabled = true;
  }
  
  protected void init_vbo(GL paramGL)
  {
    super.init_vbo(paramGL);
    if ((vboEnabled) && (vboName == 0)) {
      int[] arrayOfInt = new int[1];
      paramGL.glGenBuffers(1, arrayOfInt, 0);
      vboName = arrayOfInt[0];
      if (0 < interleavedOffset) {
        glArrayHandler.setSubArrayVBOName(vboName);
      }
    }
  }
  




  protected GLArrayDataServer() {}
  




  public GLArrayDataServer(GLArrayDataServer paramGLArrayDataServer)
  {
    super(paramGLArrayDataServer);
    interleavedOffset = interleavedOffset;
    mappedStorage = mappedStorage;
  }
  
  private int interleavedOffset = 0;
  private GLBufferStorage mappedStorage = null;
}
