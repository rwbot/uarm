package processing.opengl;

import java.util.Arrays;
import java.util.HashMap;
import processing.core.PApplet;
import processing.core.PConstants;
import processing.core.PFont;
import processing.core.PFont.Glyph;
import processing.core.PGraphics;
import processing.core.PImage;







































class FontTexture
  implements PConstants
{
  protected PGL pgl;
  protected boolean is3D;
  protected int minSize;
  protected int maxSize;
  protected int offsetX;
  protected int offsetY;
  protected int lineHeight;
  protected Texture[] textures = null;
  protected PImage[] images = null;
  protected int lastTex;
  protected TextureInfo[] glyphTexinfos;
  protected HashMap<PFont.Glyph, TextureInfo> texinfoMap;
  
  public FontTexture(PGraphicsOpenGL pg, PFont font, boolean is3D) {
    pgl = pgl;
    this.is3D = is3D;
    
    initTexture(pg, font);
  }
  


  protected void allocate() {}
  


  protected void dispose()
  {
    for (int i = 0; i < textures.length; i++) {
      textures[i].dispose();
    }
  }
  
  protected void initTexture(PGraphicsOpenGL pg, PFont font)
  {
    lastTex = -1;
    
    int spow = PGL.nextPowerOfTwo(font.getSize());
    minSize = PApplet.min(PGraphicsOpenGL.maxTextureSize, 
      PApplet.max(PGL.MIN_FONT_TEX_SIZE, spow));
    maxSize = PApplet.min(PGraphicsOpenGL.maxTextureSize, 
      PApplet.max(PGL.MAX_FONT_TEX_SIZE, 2 * spow));
    
    if (maxSize < spow) {
      PGraphics.showWarning("The font size is too large to be properly displayed with OpenGL");
    }
    

    addTexture(pg);
    
    offsetX = 0;
    offsetY = 0;
    lineHeight = 0;
    
    texinfoMap = new HashMap();
    glyphTexinfos = new TextureInfo[font.getGlyphCount()];
    addAllGlyphsToTexture(pg, font);
  }
  



  public boolean addTexture(PGraphicsOpenGL pg)
  {
    int w = maxSize;
    boolean resize; int h; boolean resize; if ((-1 < lastTex) && (textures[lastTex].glHeight < maxSize))
    {

      int h = PApplet.min(2 * textures[lastTex].glHeight, maxSize);
      resize = true;
    } else {
      h = minSize;
      resize = false;
    }
    Texture tex;
    Texture tex;
    if (is3D)
    {

      tex = new Texture(pg, w, h, 
        new Texture.Parameters(2, 4, false));

    }
    else
    {

      tex = new Texture(pg, w, h, 
        new Texture.Parameters(2, 3, false));
    }
    
    if (textures == null) {
      textures = new Texture[1];
      textures[0] = tex;
      images = new PImage[1];
      images[0] = pg.wrapTexture(tex);
      lastTex = 0;
    } else if (resize)
    {


      Texture tex0 = textures[lastTex];
      tex.put(tex0);
      textures[lastTex] = tex;
      
      pg.setCache(images[lastTex], tex);
      images[lastTex].width = width;
      images[lastTex].height = height;
    }
    else {
      lastTex = textures.length;
      Texture[] tempTex = new Texture[lastTex + 1];
      PApplet.arrayCopy(textures, tempTex, textures.length);
      tempTex[lastTex] = tex;
      textures = tempTex;
      
      PImage[] tempImg = new PImage[textures.length];
      PApplet.arrayCopy(images, tempImg, images.length);
      tempImg[lastTex] = pg.wrapTexture(tex);
      images = tempImg;
    }
    

    tex.bind();
    
    return resize;
  }
  

  public void begin() {}
  

  public void end()
  {
    for (int i = 0; i < textures.length; i++) {
      pgl.disableTexturing(textures[i].glTarget);
    }
  }
  
  public PImage getTexture(TextureInfo info)
  {
    return images[texIndex];
  }
  


  public void addAllGlyphsToTexture(PGraphicsOpenGL pg, PFont font)
  {
    for (int i = 0; i < font.getGlyphCount(); i++) {
      addToTexture(pg, i, font.getGlyph(i));
    }
  }
  

  public void updateGlyphsTexCoords()
  {
    for (int i = 0; i < glyphTexinfos.length; i++) {
      TextureInfo tinfo = glyphTexinfos[i];
      if ((tinfo != null) && (texIndex == lastTex)) {
        tinfo.updateUV();
      }
    }
  }
  
  public TextureInfo getTexInfo(PFont.Glyph glyph)
  {
    TextureInfo info = (TextureInfo)texinfoMap.get(glyph);
    return info;
  }
  
  public TextureInfo addToTexture(PGraphicsOpenGL pg, PFont.Glyph glyph)
  {
    int n = glyphTexinfos.length;
    if (n == 0) {
      glyphTexinfos = new TextureInfo[1];
    }
    addToTexture(pg, n, glyph);
    return glyphTexinfos[n];
  }
  
  public boolean contextIsOutdated()
  {
    boolean outdated = false;
    for (int i = 0; i < textures.length; i++) {
      if (textures[i].contextIsOutdated()) {
        outdated = true;
      }
    }
    if (outdated) {
      for (int i = 0; i < textures.length; i++) {
        textures[i].dispose();
      }
    }
    return outdated;
  }
  
















  protected void addToTexture(PGraphicsOpenGL pg, int idx, PFont.Glyph glyph)
  {
    int w = 1 + width + 1;
    int h = 1 + height + 1;
    


    int[] rgba = new int[w * h];
    int t = 0;
    int p = 0;
    if (PGL.BIG_ENDIAN) {
      Arrays.fill(rgba, 0, w, 65280);
      t = w;
      for (int y = 0; y < height; y++) {
        rgba[(t++)] = 65280;
        for (int x = 0; x < width; x++) {
          rgba[(t++)] = (0xFF00 | image.pixels[(p++)]);
        }
        rgba[(t++)] = 65280;
      }
      Arrays.fill(rgba, (h - 1) * w, h * w, 65280);
    } else {
      Arrays.fill(rgba, 0, w, 16777215);
      t = w;
      for (int y = 0; y < height; y++) {
        rgba[(t++)] = 16777215;
        for (int x = 0; x < width; x++) {
          rgba[(t++)] = (image.pixels[(p++)] << 24 | 0xFFFFFF);
        }
        rgba[(t++)] = 16777215;
      }
      Arrays.fill(rgba, (h - 1) * w, h * w, 16777215);
    }
    

    if (offsetX + w > textures[lastTex].glWidth)
    {
      offsetX = 0;
      offsetY += lineHeight;
    }
    lineHeight = Math.max(lineHeight, h);
    
    boolean resized = false;
    if (offsetY + lineHeight > textures[lastTex].glHeight)
    {
      resized = addTexture(pg);
      if (resized)
      {

        updateGlyphsTexCoords();
      }
      else
      {
        offsetX = 0;
        offsetY = 0;
        lineHeight = 0;
      }
    }
    
    TextureInfo tinfo = new TextureInfo(lastTex, offsetX, offsetY, w, h, rgba);
    offsetX += w;
    
    if (idx == glyphTexinfos.length) {
      TextureInfo[] temp = new TextureInfo[glyphTexinfos.length + 1];
      System.arraycopy(glyphTexinfos, 0, temp, 0, glyphTexinfos.length);
      glyphTexinfos = temp;
    }
    
    glyphTexinfos[idx] = tinfo;
    texinfoMap.put(glyph, tinfo);
  }
  
  class TextureInfo {
    int texIndex;
    int width;
    int height;
    int[] crop;
    float u0;
    float u1;
    float v0;
    float v1;
    int[] pixels;
    
    TextureInfo(int tidx, int cropX, int cropY, int cropW, int cropH, int[] pix) {
      texIndex = tidx;
      crop = new int[4];
      


      crop[0] = (cropX + 1);
      crop[1] = (cropY + 1 + cropH - 2);
      crop[2] = (cropW - 2);
      crop[3] = (-cropH + 2);
      pixels = pix;
      updateUV();
      updateTex();
    }
    
    void updateUV()
    {
      width = textures[texIndex].glWidth;
      height = textures[texIndex].glHeight;
      
      u0 = (crop[0] / width);
      u1 = (u0 + crop[2] / width);
      v0 = ((crop[1] + crop[3]) / height);
      v1 = (v0 - crop[3] / height);
    }
    
    void updateTex()
    {
      textures[texIndex].setNative(pixels, crop[0] - 1, crop[1] + crop[3] - 1, 
        crop[2] + 2, -crop[3] + 2);
    }
  }
}
