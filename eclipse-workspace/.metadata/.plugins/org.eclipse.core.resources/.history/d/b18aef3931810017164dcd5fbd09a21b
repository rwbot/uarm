package com.jogamp.opengl.math;

import java.util.ArrayList;




























public final class VectorUtil
{
  public static final float[] VEC3_ONE = { 1.0F, 1.0F, 1.0F };
  public static final float[] VEC3_ZERO = { 0.0F, 0.0F, 0.0F };
  public static final float[] VEC3_UNIT_Y = { 0.0F, 1.0F, 0.0F };
  public static final float[] VEC3_UNIT_Y_NEG = { 0.0F, -1.0F, 0.0F };
  public static final float[] VEC3_UNIT_Z = { 0.0F, 0.0F, 1.0F };
  public static final float[] VEC3_UNIT_Z_NEG = { 0.0F, 0.0F, -1.0F };
  public VectorUtil() {}
  
  public static enum Winding { CW(-1),  CCW(1);
    
    public final int dir;
    
    private Winding(int paramInt) {
      dir = paramInt;
    }
  }
  








  public static float[] copyVec2(float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2)
  {
    System.arraycopy(paramArrayOfFloat2, paramInt2, paramArrayOfFloat1, paramInt1, 2);
    return paramArrayOfFloat1;
  }
  








  public static float[] copyVec3(float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2)
  {
    System.arraycopy(paramArrayOfFloat2, paramInt2, paramArrayOfFloat1, paramInt1, 3);
    return paramArrayOfFloat1;
  }
  








  public static float[] copyVec4(float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2)
  {
    System.arraycopy(paramArrayOfFloat2, paramInt2, paramArrayOfFloat1, paramInt1, 4);
    return paramArrayOfFloat1;
  }
  






  public static boolean isVec2Equal(float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2)
  {
    return (FloatUtil.isEqual(paramArrayOfFloat1[(0 + paramInt1)], paramArrayOfFloat2[(0 + paramInt2)])) && (FloatUtil.isEqual(paramArrayOfFloat1[(1 + paramInt1)], paramArrayOfFloat2[(1 + paramInt2)]));
  }
  







  public static boolean isVec3Equal(float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2)
  {
    return (FloatUtil.isEqual(paramArrayOfFloat1[(0 + paramInt1)], paramArrayOfFloat2[(0 + paramInt2)])) && (FloatUtil.isEqual(paramArrayOfFloat1[(1 + paramInt1)], paramArrayOfFloat2[(1 + paramInt2)])) && (FloatUtil.isEqual(paramArrayOfFloat1[(2 + paramInt1)], paramArrayOfFloat2[(2 + paramInt2)]));
  }
  






  public static boolean isVec2Equal(float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2, float paramFloat)
  {
    return (FloatUtil.isEqual(paramArrayOfFloat1[(0 + paramInt1)], paramArrayOfFloat2[(0 + paramInt2)], paramFloat)) && (FloatUtil.isEqual(paramArrayOfFloat1[(1 + paramInt1)], paramArrayOfFloat2[(1 + paramInt2)], paramFloat));
  }
  







  public static boolean isVec3Equal(float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2, float paramFloat)
  {
    return (FloatUtil.isEqual(paramArrayOfFloat1[(0 + paramInt1)], paramArrayOfFloat2[(0 + paramInt2)], paramFloat)) && (FloatUtil.isEqual(paramArrayOfFloat1[(1 + paramInt1)], paramArrayOfFloat2[(1 + paramInt2)], paramFloat)) && (FloatUtil.isEqual(paramArrayOfFloat1[(2 + paramInt1)], paramArrayOfFloat2[(2 + paramInt2)], paramFloat));
  }
  


  public static boolean isVec2Zero(float[] paramArrayOfFloat, int paramInt)
  {
    return (0.0F == paramArrayOfFloat[(0 + paramInt)]) && (0.0F == paramArrayOfFloat[(1 + paramInt)]);
  }
  


  public static boolean isVec3Zero(float[] paramArrayOfFloat, int paramInt)
  {
    return (0.0F == paramArrayOfFloat[(0 + paramInt)]) && (0.0F == paramArrayOfFloat[(1 + paramInt)]) && (0.0F == paramArrayOfFloat[(2 + paramInt)]);
  }
  





  public static boolean isVec2Zero(float[] paramArrayOfFloat, int paramInt, float paramFloat)
  {
    return isZero(paramArrayOfFloat[(0 + paramInt)], paramArrayOfFloat[(1 + paramInt)], paramFloat);
  }
  





  public static boolean isVec3Zero(float[] paramArrayOfFloat, int paramInt, float paramFloat)
  {
    return isZero(paramArrayOfFloat[(0 + paramInt)], paramArrayOfFloat[(1 + paramInt)], paramArrayOfFloat[(2 + paramInt)], paramFloat);
  }
  






  public static boolean isZero(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    return (FloatUtil.isZero(paramFloat1, paramFloat3)) && (FloatUtil.isZero(paramFloat2, paramFloat3));
  }
  







  public static boolean isZero(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4)
  {
    return (FloatUtil.isZero(paramFloat1, paramFloat4)) && (FloatUtil.isZero(paramFloat2, paramFloat4)) && (FloatUtil.isZero(paramFloat3, paramFloat4));
  }
  






  public static float distSquareVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2)
  {
    float f1 = paramArrayOfFloat1[0] - paramArrayOfFloat2[0];
    float f2 = paramArrayOfFloat1[1] - paramArrayOfFloat2[1];
    float f3 = paramArrayOfFloat1[2] - paramArrayOfFloat2[2];
    return f1 * f1 + f2 * f2 + f3 * f3;
  }
  


  public static float distVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2)
  {
    return FloatUtil.sqrt(distSquareVec3(paramArrayOfFloat1, paramArrayOfFloat2));
  }
  





  public static float dotVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2)
  {
    return paramArrayOfFloat1[0] * paramArrayOfFloat2[0] + paramArrayOfFloat1[1] * paramArrayOfFloat2[1] + paramArrayOfFloat1[2] * paramArrayOfFloat2[2];
  }
  




  public static float cosAngleVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2)
  {
    return dotVec3(paramArrayOfFloat1, paramArrayOfFloat2) / (normVec3(paramArrayOfFloat1) * normVec3(paramArrayOfFloat2));
  }
  




  public static float angleVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2)
  {
    return FloatUtil.acos(cosAngleVec3(paramArrayOfFloat1, paramArrayOfFloat2));
  }
  


  public static float normSquareVec2(float[] paramArrayOfFloat)
  {
    return paramArrayOfFloat[0] * paramArrayOfFloat[0] + paramArrayOfFloat[1] * paramArrayOfFloat[1];
  }
  


  public static float normSquareVec2(float[] paramArrayOfFloat, int paramInt)
  {
    float f1 = paramArrayOfFloat[(0 + paramInt)];
    float f2 = f1 * f1;
    f1 = paramArrayOfFloat[(1 + paramInt)];
    return f2 + f1 * f1;
  }
  


  public static float normSquareVec3(float[] paramArrayOfFloat)
  {
    return paramArrayOfFloat[0] * paramArrayOfFloat[0] + paramArrayOfFloat[1] * paramArrayOfFloat[1] + paramArrayOfFloat[2] * paramArrayOfFloat[2];
  }
  


  public static float normSquareVec3(float[] paramArrayOfFloat, int paramInt)
  {
    float f1 = paramArrayOfFloat[(0 + paramInt)];
    float f2 = f1 * f1;
    f1 = paramArrayOfFloat[(1 + paramInt)];
    f2 += f1 * f1;
    f1 = paramArrayOfFloat[(2 + paramInt)];
    return f2 + f1 * f1;
  }
  


  public static float normVec2(float[] paramArrayOfFloat)
  {
    return FloatUtil.sqrt(normSquareVec2(paramArrayOfFloat));
  }
  


  public static float normVec3(float[] paramArrayOfFloat)
  {
    return FloatUtil.sqrt(normSquareVec3(paramArrayOfFloat));
  }
  






  public static float[] normalizeVec2(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2)
  {
    float f1 = normSquareVec2(paramArrayOfFloat2);
    if (FloatUtil.isZero(f1, 1.1920929E-7F)) {
      paramArrayOfFloat1[0] = 0.0F;
      paramArrayOfFloat1[1] = 0.0F;
    } else {
      float f2 = 1.0F / FloatUtil.sqrt(f1);
      paramArrayOfFloat2[0] *= f2;
      paramArrayOfFloat2[1] *= f2;
    }
    return paramArrayOfFloat1;
  }
  




  public static float[] normalizeVec2(float[] paramArrayOfFloat)
  {
    float f1 = normSquareVec2(paramArrayOfFloat);
    if (FloatUtil.isZero(f1, 1.1920929E-7F)) {
      paramArrayOfFloat[0] = 0.0F;
      paramArrayOfFloat[1] = 0.0F;
    } else {
      float f2 = 1.0F / FloatUtil.sqrt(f1);
      paramArrayOfFloat[0] *= f2;
      paramArrayOfFloat[1] *= f2;
    }
    return paramArrayOfFloat;
  }
  






  public static float[] normalizeVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2)
  {
    float f1 = normSquareVec3(paramArrayOfFloat2);
    if (FloatUtil.isZero(f1, 1.1920929E-7F)) {
      paramArrayOfFloat1[0] = 0.0F;
      paramArrayOfFloat1[1] = 0.0F;
      paramArrayOfFloat1[2] = 0.0F;
    } else {
      float f2 = 1.0F / FloatUtil.sqrt(f1);
      paramArrayOfFloat2[0] *= f2;
      paramArrayOfFloat2[1] *= f2;
      paramArrayOfFloat2[2] *= f2;
    }
    return paramArrayOfFloat1;
  }
  




  public static float[] normalizeVec3(float[] paramArrayOfFloat)
  {
    float f1 = normSquareVec3(paramArrayOfFloat);
    if (FloatUtil.isZero(f1, 1.1920929E-7F)) {
      paramArrayOfFloat[0] = 0.0F;
      paramArrayOfFloat[1] = 0.0F;
      paramArrayOfFloat[2] = 0.0F;
    } else {
      float f2 = 1.0F / FloatUtil.sqrt(f1);
      paramArrayOfFloat[0] *= f2;
      paramArrayOfFloat[1] *= f2;
      paramArrayOfFloat[2] *= f2;
    }
    return paramArrayOfFloat;
  }
  




  public static float[] normalizeVec3(float[] paramArrayOfFloat, int paramInt)
  {
    float f1 = normSquareVec3(paramArrayOfFloat, paramInt);
    if (FloatUtil.isZero(f1, 1.1920929E-7F)) {
      paramArrayOfFloat[(0 + paramInt)] = 0.0F;
      paramArrayOfFloat[(1 + paramInt)] = 0.0F;
      paramArrayOfFloat[(2 + paramInt)] = 0.0F;
    } else {
      float f2 = 1.0F / FloatUtil.sqrt(f1);
      paramArrayOfFloat[(0 + paramInt)] *= f2;
      paramArrayOfFloat[(1 + paramInt)] *= f2;
      paramArrayOfFloat[(2 + paramInt)] *= f2;
    }
    return paramArrayOfFloat;
  }
  






  public static float[] scaleVec2(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float paramFloat)
  {
    paramArrayOfFloat2[0] *= paramFloat;
    paramArrayOfFloat2[1] *= paramFloat;
    return paramArrayOfFloat1;
  }
  






  public static float[] scaleVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float paramFloat)
  {
    paramArrayOfFloat2[0] *= paramFloat;
    paramArrayOfFloat2[1] *= paramFloat;
    paramArrayOfFloat2[2] *= paramFloat;
    return paramArrayOfFloat1;
  }
  







  public static float[] scaleVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    paramArrayOfFloat2[0] *= paramArrayOfFloat3[0];
    paramArrayOfFloat2[1] *= paramArrayOfFloat3[1];
    paramArrayOfFloat2[2] *= paramArrayOfFloat3[2];
    return paramArrayOfFloat1;
  }
  







  public static float[] scaleVec2(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    paramArrayOfFloat2[0] *= paramArrayOfFloat3[0];
    paramArrayOfFloat2[1] *= paramArrayOfFloat3[1];
    return paramArrayOfFloat1;
  }
  






  public static float[] divVec2(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float paramFloat)
  {
    paramArrayOfFloat2[0] /= paramFloat;
    paramArrayOfFloat2[1] /= paramFloat;
    return paramArrayOfFloat1;
  }
  






  public static float[] divVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float paramFloat)
  {
    paramArrayOfFloat2[0] /= paramFloat;
    paramArrayOfFloat2[1] /= paramFloat;
    paramArrayOfFloat2[2] /= paramFloat;
    return paramArrayOfFloat1;
  }
  







  public static float[] divVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    paramArrayOfFloat2[0] /= paramArrayOfFloat3[0];
    paramArrayOfFloat2[1] /= paramArrayOfFloat3[1];
    paramArrayOfFloat2[2] /= paramArrayOfFloat3[2];
    return paramArrayOfFloat1;
  }
  







  public static float[] divVec2(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    paramArrayOfFloat2[0] /= paramArrayOfFloat3[0];
    paramArrayOfFloat2[1] /= paramArrayOfFloat3[1];
    return paramArrayOfFloat1;
  }
  






  public static float[] addVec2(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    paramArrayOfFloat2[0] += paramArrayOfFloat3[0];
    paramArrayOfFloat2[1] += paramArrayOfFloat3[1];
    return paramArrayOfFloat1;
  }
  






  public static float[] addVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    paramArrayOfFloat2[0] += paramArrayOfFloat3[0];
    paramArrayOfFloat2[1] += paramArrayOfFloat3[1];
    paramArrayOfFloat2[2] += paramArrayOfFloat3[2];
    return paramArrayOfFloat1;
  }
  






  public static float[] subVec2(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    paramArrayOfFloat2[0] -= paramArrayOfFloat3[0];
    paramArrayOfFloat2[1] -= paramArrayOfFloat3[1];
    return paramArrayOfFloat1;
  }
  






  public static float[] subVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    paramArrayOfFloat2[0] -= paramArrayOfFloat3[0];
    paramArrayOfFloat2[1] -= paramArrayOfFloat3[1];
    paramArrayOfFloat2[2] -= paramArrayOfFloat3[2];
    return paramArrayOfFloat1;
  }
  






  public static float[] crossVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    paramArrayOfFloat1[0] = (paramArrayOfFloat2[1] * paramArrayOfFloat3[2] - paramArrayOfFloat2[2] * paramArrayOfFloat3[1]);
    paramArrayOfFloat1[1] = (paramArrayOfFloat2[2] * paramArrayOfFloat3[0] - paramArrayOfFloat2[0] * paramArrayOfFloat3[2]);
    paramArrayOfFloat1[2] = (paramArrayOfFloat2[0] * paramArrayOfFloat3[1] - paramArrayOfFloat2[1] * paramArrayOfFloat3[0]);
    return paramArrayOfFloat1;
  }
  






  public static float[] crossVec3(float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2, float[] paramArrayOfFloat3, int paramInt3)
  {
    paramArrayOfFloat1[(0 + paramInt1)] = (paramArrayOfFloat2[(1 + paramInt2)] * paramArrayOfFloat3[(2 + paramInt3)] - paramArrayOfFloat2[(2 + paramInt2)] * paramArrayOfFloat3[(1 + paramInt3)]);
    paramArrayOfFloat1[(1 + paramInt1)] = (paramArrayOfFloat2[(2 + paramInt2)] * paramArrayOfFloat3[(0 + paramInt3)] - paramArrayOfFloat2[(0 + paramInt2)] * paramArrayOfFloat3[(2 + paramInt3)]);
    paramArrayOfFloat1[(2 + paramInt1)] = (paramArrayOfFloat2[(0 + paramInt2)] * paramArrayOfFloat3[(1 + paramInt3)] - paramArrayOfFloat2[(1 + paramInt2)] * paramArrayOfFloat3[(0 + paramInt3)]);
    return paramArrayOfFloat1;
  }
  






  public static float[] mulColMat4Vec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    paramArrayOfFloat1[0] = (paramArrayOfFloat3[0] * paramArrayOfFloat2[0] + paramArrayOfFloat3[1] * paramArrayOfFloat2[4] + paramArrayOfFloat3[2] * paramArrayOfFloat2[8] + paramArrayOfFloat2[12]);
    paramArrayOfFloat1[1] = (paramArrayOfFloat3[0] * paramArrayOfFloat2[1] + paramArrayOfFloat3[1] * paramArrayOfFloat2[5] + paramArrayOfFloat3[2] * paramArrayOfFloat2[9] + paramArrayOfFloat2[13]);
    paramArrayOfFloat1[2] = (paramArrayOfFloat3[0] * paramArrayOfFloat2[2] + paramArrayOfFloat3[1] * paramArrayOfFloat2[6] + paramArrayOfFloat3[2] * paramArrayOfFloat2[10] + paramArrayOfFloat2[14]);
    
    return paramArrayOfFloat1;
  }
  






  public static float[] mulRowMat4Vec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    paramArrayOfFloat1[0] = (paramArrayOfFloat3[0] * paramArrayOfFloat2[0] + paramArrayOfFloat3[1] * paramArrayOfFloat2[1] + paramArrayOfFloat3[2] * paramArrayOfFloat2[2] + paramArrayOfFloat2[3]);
    paramArrayOfFloat1[1] = (paramArrayOfFloat3[0] * paramArrayOfFloat2[4] + paramArrayOfFloat3[1] * paramArrayOfFloat2[5] + paramArrayOfFloat3[2] * paramArrayOfFloat2[6] + paramArrayOfFloat2[7]);
    paramArrayOfFloat1[2] = (paramArrayOfFloat3[0] * paramArrayOfFloat2[8] + paramArrayOfFloat3[1] * paramArrayOfFloat2[9] + paramArrayOfFloat3[2] * paramArrayOfFloat2[10] + paramArrayOfFloat2[11]);
    
    return paramArrayOfFloat1;
  }
  





  public static float mid(float paramFloat1, float paramFloat2)
  {
    return (paramFloat1 + paramFloat2) * 0.5F;
  }
  





  public static float[] midVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    paramArrayOfFloat1[0] = ((paramArrayOfFloat2[0] + paramArrayOfFloat3[0]) * 0.5F);
    paramArrayOfFloat1[1] = ((paramArrayOfFloat2[1] + paramArrayOfFloat3[1]) * 0.5F);
    paramArrayOfFloat1[2] = ((paramArrayOfFloat2[2] + paramArrayOfFloat3[2]) * 0.5F);
    return paramArrayOfFloat1;
  }
  






  public static float determinantVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    return paramArrayOfFloat1[0] * paramArrayOfFloat2[1] * paramArrayOfFloat3[2] + paramArrayOfFloat1[1] * paramArrayOfFloat2[2] * paramArrayOfFloat3[0] + paramArrayOfFloat1[2] * paramArrayOfFloat2[0] * paramArrayOfFloat3[1] - paramArrayOfFloat1[0] * paramArrayOfFloat2[2] * paramArrayOfFloat3[1] - paramArrayOfFloat1[1] * paramArrayOfFloat2[0] * paramArrayOfFloat3[2] - paramArrayOfFloat1[2] * paramArrayOfFloat2[1] * paramArrayOfFloat3[0];
  }
  






  public static boolean isCollinearVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    return FloatUtil.isZero(determinantVec3(paramArrayOfFloat1, paramArrayOfFloat2, paramArrayOfFloat3), 1.1920929E-7F);
  }
  








  public static boolean isInCircleVec2(Vert2fImmutable paramVert2fImmutable1, Vert2fImmutable paramVert2fImmutable2, Vert2fImmutable paramVert2fImmutable3, Vert2fImmutable paramVert2fImmutable4)
  {
    float[] arrayOfFloat1 = paramVert2fImmutable1.getCoord();
    float[] arrayOfFloat2 = paramVert2fImmutable2.getCoord();
    float[] arrayOfFloat3 = paramVert2fImmutable3.getCoord();
    float[] arrayOfFloat4 = paramVert2fImmutable4.getCoord();
    


    return (arrayOfFloat1[0] * arrayOfFloat1[0] + arrayOfFloat1[1] * arrayOfFloat1[1]) * triAreaVec2(arrayOfFloat2, arrayOfFloat3, arrayOfFloat4) - (arrayOfFloat2[0] * arrayOfFloat2[0] + arrayOfFloat2[1] * arrayOfFloat2[1]) * triAreaVec2(arrayOfFloat1, arrayOfFloat3, arrayOfFloat4) + (arrayOfFloat3[0] * arrayOfFloat3[0] + arrayOfFloat3[1] * arrayOfFloat3[1]) * triAreaVec2(arrayOfFloat1, arrayOfFloat2, arrayOfFloat4) - (arrayOfFloat4[0] * arrayOfFloat4[0] + arrayOfFloat4[1] * arrayOfFloat4[1]) * triAreaVec2(arrayOfFloat1, arrayOfFloat2, arrayOfFloat3) > 0.0F;
  }
  







  public static float triAreaVec2(Vert2fImmutable paramVert2fImmutable1, Vert2fImmutable paramVert2fImmutable2, Vert2fImmutable paramVert2fImmutable3)
  {
    float[] arrayOfFloat1 = paramVert2fImmutable1.getCoord();
    float[] arrayOfFloat2 = paramVert2fImmutable2.getCoord();
    float[] arrayOfFloat3 = paramVert2fImmutable3.getCoord();
    return (arrayOfFloat2[0] - arrayOfFloat1[0]) * (arrayOfFloat3[1] - arrayOfFloat1[1]) - (arrayOfFloat2[1] - arrayOfFloat1[1]) * (arrayOfFloat3[0] - arrayOfFloat1[0]);
  }
  







  public static float triAreaVec2(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    return (paramArrayOfFloat2[0] - paramArrayOfFloat1[0]) * (paramArrayOfFloat3[1] - paramArrayOfFloat1[1]) - (paramArrayOfFloat2[1] - paramArrayOfFloat1[1]) * (paramArrayOfFloat3[0] - paramArrayOfFloat1[0]);
  }
  











  public static boolean isInTriangleVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3, float[] paramArrayOfFloat4, float[] paramArrayOfFloat5, float[] paramArrayOfFloat6, float[] paramArrayOfFloat7)
  {
    subVec3(paramArrayOfFloat5, paramArrayOfFloat3, paramArrayOfFloat1);
    subVec3(paramArrayOfFloat6, paramArrayOfFloat2, paramArrayOfFloat1);
    subVec3(paramArrayOfFloat7, paramArrayOfFloat4, paramArrayOfFloat1);
    

    float f1 = dotVec3(paramArrayOfFloat5, paramArrayOfFloat5);
    float f2 = dotVec3(paramArrayOfFloat5, paramArrayOfFloat6);
    float f3 = dotVec3(paramArrayOfFloat6, paramArrayOfFloat6);
    float f4 = dotVec3(paramArrayOfFloat5, paramArrayOfFloat7);
    float f5 = dotVec3(paramArrayOfFloat6, paramArrayOfFloat7);
    

    float f6 = 1.0F / (f1 * f3 - f2 * f2);
    float f7 = (f3 * f4 - f2 * f5) * f6;
    float f8 = (f1 * f5 - f2 * f4) * f6;
    

    return (f7 >= 0.0F) && (f8 >= 0.0F) && (f7 + f8 < 1.0F);
  }
  
















  public static boolean isVec3InTriangle3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3, float[] paramArrayOfFloat4, float[] paramArrayOfFloat5, float[] paramArrayOfFloat6, float[] paramArrayOfFloat7, float[] paramArrayOfFloat8, float[] paramArrayOfFloat9)
  {
    subVec3(paramArrayOfFloat7, paramArrayOfFloat3, paramArrayOfFloat1);
    subVec3(paramArrayOfFloat8, paramArrayOfFloat2, paramArrayOfFloat1);
    

    float f1 = dotVec3(paramArrayOfFloat7, paramArrayOfFloat7);
    float f2 = dotVec3(paramArrayOfFloat7, paramArrayOfFloat8);
    float f3 = dotVec3(paramArrayOfFloat8, paramArrayOfFloat8);
    

    float f4 = 1.0F / (f1 * f3 - f2 * f2);
    
    subVec3(paramArrayOfFloat9, paramArrayOfFloat4, paramArrayOfFloat1);
    float f5 = dotVec3(paramArrayOfFloat7, paramArrayOfFloat9);
    float f6 = dotVec3(paramArrayOfFloat8, paramArrayOfFloat9);
    float f7 = (f3 * f5 - f2 * f6) * f4;
    float f8 = (f1 * f6 - f2 * f5) * f4;
    

    if ((f7 >= 0.0F) && (f8 >= 0.0F) && (f7 + f8 < 1.0F)) {
      return true;
    }
    


    subVec3(paramArrayOfFloat9, paramArrayOfFloat4, paramArrayOfFloat1);
    f5 = dotVec3(paramArrayOfFloat7, paramArrayOfFloat9);
    f6 = dotVec3(paramArrayOfFloat8, paramArrayOfFloat9);
    f7 = (f3 * f5 - f2 * f6) * f4;
    f8 = (f1 * f6 - f2 * f5) * f4;
    

    if ((f7 >= 0.0F) && (f8 >= 0.0F) && (f7 + f8 < 1.0F)) {
      return true;
    }
    


    subVec3(paramArrayOfFloat9, paramArrayOfFloat5, paramArrayOfFloat1);
    f5 = dotVec3(paramArrayOfFloat7, paramArrayOfFloat9);
    f6 = dotVec3(paramArrayOfFloat8, paramArrayOfFloat9);
    f7 = (f3 * f5 - f2 * f6) * f4;
    f8 = (f1 * f6 - f2 * f5) * f4;
    

    if ((f7 >= 0.0F) && (f8 >= 0.0F) && (f7 + f8 < 1.0F)) {
      return true;
    }
    
    return false;
  }
  
















  public static boolean isVec3InTriangle3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3, float[] paramArrayOfFloat4, float[] paramArrayOfFloat5, float[] paramArrayOfFloat6, float[] paramArrayOfFloat7, float[] paramArrayOfFloat8, float[] paramArrayOfFloat9, float paramFloat)
  {
    subVec3(paramArrayOfFloat7, paramArrayOfFloat3, paramArrayOfFloat1);
    subVec3(paramArrayOfFloat8, paramArrayOfFloat2, paramArrayOfFloat1);
    

    float f1 = dotVec3(paramArrayOfFloat7, paramArrayOfFloat7);
    float f2 = dotVec3(paramArrayOfFloat7, paramArrayOfFloat8);
    float f3 = dotVec3(paramArrayOfFloat8, paramArrayOfFloat8);
    

    float f4 = 1.0F / (f1 * f3 - f2 * f2);
    
    subVec3(paramArrayOfFloat9, paramArrayOfFloat4, paramArrayOfFloat1);
    float f5 = dotVec3(paramArrayOfFloat7, paramArrayOfFloat9);
    float f6 = dotVec3(paramArrayOfFloat8, paramArrayOfFloat9);
    float f7 = (f3 * f5 - f2 * f6) * f4;
    float f8 = (f1 * f6 - f2 * f5) * f4;
    

    if ((FloatUtil.compare(f7, 0.0F, paramFloat) >= 0) && 
      (FloatUtil.compare(f8, 0.0F, paramFloat) >= 0) && 
      (FloatUtil.compare(f7 + f8, 1.0F, paramFloat) < 0)) {
      return true;
    }
    


    subVec3(paramArrayOfFloat9, paramArrayOfFloat4, paramArrayOfFloat1);
    f5 = dotVec3(paramArrayOfFloat7, paramArrayOfFloat9);
    f6 = dotVec3(paramArrayOfFloat8, paramArrayOfFloat9);
    f7 = (f3 * f5 - f2 * f6) * f4;
    f8 = (f1 * f6 - f2 * f5) * f4;
    

    if ((FloatUtil.compare(f7, 0.0F, paramFloat) >= 0) && 
      (FloatUtil.compare(f8, 0.0F, paramFloat) >= 0) && 
      (FloatUtil.compare(f7 + f8, 1.0F, paramFloat) < 0)) {
      return true;
    }
    


    subVec3(paramArrayOfFloat9, paramArrayOfFloat5, paramArrayOfFloat1);
    f5 = dotVec3(paramArrayOfFloat7, paramArrayOfFloat9);
    f6 = dotVec3(paramArrayOfFloat8, paramArrayOfFloat9);
    f7 = (f3 * f5 - f2 * f6) * f4;
    f8 = (f1 * f6 - f2 * f5) * f4;
    

    if ((FloatUtil.compare(f7, 0.0F, paramFloat) >= 0) && 
      (FloatUtil.compare(f8, 0.0F, paramFloat) >= 0) && 
      (FloatUtil.compare(f7 + f8, 1.0F, paramFloat) < 0)) {
      return true;
    }
    

    return false;
  }
  





  public static boolean ccw(Vert2fImmutable paramVert2fImmutable1, Vert2fImmutable paramVert2fImmutable2, Vert2fImmutable paramVert2fImmutable3)
  {
    return triAreaVec2(paramVert2fImmutable1, paramVert2fImmutable2, paramVert2fImmutable3) > 0.0F;
  }
  





  public static Winding getWinding(Vert2fImmutable paramVert2fImmutable1, Vert2fImmutable paramVert2fImmutable2, Vert2fImmutable paramVert2fImmutable3)
  {
    return triAreaVec2(paramVert2fImmutable1, paramVert2fImmutable2, paramVert2fImmutable3) > 0.0F ? Winding.CCW : Winding.CW;
  }
  



  public static float area(ArrayList<? extends Vert2fImmutable> paramArrayList)
  {
    int i = paramArrayList.size();
    float f = 0.0F;
    int j = i - 1; for (int k = 0; k < i; j = k++)
    {
      float[] arrayOfFloat1 = ((Vert2fImmutable)paramArrayList.get(j)).getCoord();
      float[] arrayOfFloat2 = ((Vert2fImmutable)paramArrayList.get(k)).getCoord();
      f += arrayOfFloat1[0] * arrayOfFloat2[1] - arrayOfFloat2[0] * arrayOfFloat1[1];
    }
    return f;
  }
  



  public static Winding getWinding(ArrayList<? extends Vert2fImmutable> paramArrayList)
  {
    return area(paramArrayList) >= 0.0F ? Winding.CCW : Winding.CW;
  }
  





  public static float[] getNormalVec2(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    subVec2(paramArrayOfFloat1, paramArrayOfFloat3, paramArrayOfFloat2);
    float f = paramArrayOfFloat1[0];paramArrayOfFloat1[0] = (-paramArrayOfFloat1[1]);paramArrayOfFloat1[1] = f;
    return normalizeVec2(paramArrayOfFloat1);
  }
  











  public static float[] getNormalVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3, float[] paramArrayOfFloat4, float[] paramArrayOfFloat5, float[] paramArrayOfFloat6)
  {
    subVec3(paramArrayOfFloat5, paramArrayOfFloat3, paramArrayOfFloat2);
    subVec3(paramArrayOfFloat6, paramArrayOfFloat4, paramArrayOfFloat2);
    return normalizeVec3(crossVec3(paramArrayOfFloat1, paramArrayOfFloat5, paramArrayOfFloat6));
  }
  













  public static float[] getPlaneVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    System.arraycopy(paramArrayOfFloat2, 0, paramArrayOfFloat1, 0, 3);
    paramArrayOfFloat1[3] = (-dotVec3(paramArrayOfFloat2, paramArrayOfFloat3));
    return paramArrayOfFloat1;
  }
  

















  public static float[] getPlaneVec3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3, float[] paramArrayOfFloat4, float[] paramArrayOfFloat5, float[] paramArrayOfFloat6)
  {
    getNormalVec3(paramArrayOfFloat1, paramArrayOfFloat2, paramArrayOfFloat3, paramArrayOfFloat4, paramArrayOfFloat5, paramArrayOfFloat6);
    paramArrayOfFloat1[3] = (-dotVec3(paramArrayOfFloat1, paramArrayOfFloat2));
    return paramArrayOfFloat1;
  }
  











  public static float[] line2PlaneIntersection(float[] paramArrayOfFloat1, Ray paramRay, float[] paramArrayOfFloat2, float paramFloat)
  {
    float f = dotVec3(dir, paramArrayOfFloat2);
    
    if (Math.abs(f) < paramFloat) {
      return null;
    }
    scaleVec3(paramArrayOfFloat1, dir, -(dotVec3(orig, paramArrayOfFloat2) + paramArrayOfFloat2[3]) / f);
    return addVec3(paramArrayOfFloat1, paramArrayOfFloat1, orig);
  }
  






  public static float[] seg2SegIntersection(float[] paramArrayOfFloat, Vert2fImmutable paramVert2fImmutable1, Vert2fImmutable paramVert2fImmutable2, Vert2fImmutable paramVert2fImmutable3, Vert2fImmutable paramVert2fImmutable4)
  {
    float f1 = (paramVert2fImmutable1.getX() - paramVert2fImmutable2.getX()) * (paramVert2fImmutable3.getY() - paramVert2fImmutable4.getY()) - (paramVert2fImmutable1.getY() - paramVert2fImmutable2.getY()) * (paramVert2fImmutable3.getX() - paramVert2fImmutable4.getX());
    
    if (f1 == 0.0F) {
      return null;
    }
    float f2 = paramVert2fImmutable1.getX() * paramVert2fImmutable2.getY() - paramVert2fImmutable1.getY() * paramVert2fImmutable2.getX();
    float f3 = paramVert2fImmutable3.getX() * paramVert2fImmutable4.getY() - paramVert2fImmutable3.getY() * paramVert2fImmutable4.getY();
    float f4 = ((paramVert2fImmutable3.getX() - paramVert2fImmutable4.getX()) * f2 - (paramVert2fImmutable1.getX() - paramVert2fImmutable2.getX()) * f3) / f1;
    float f5 = ((paramVert2fImmutable3.getY() - paramVert2fImmutable4.getY()) * f2 - (paramVert2fImmutable1.getY() - paramVert2fImmutable2.getY()) * f3) / f1;
    
    float f6 = (f4 - paramVert2fImmutable1.getX()) / (paramVert2fImmutable2.getX() - paramVert2fImmutable1.getX());
    float f7 = (f4 - paramVert2fImmutable3.getX()) / (paramVert2fImmutable4.getX() - paramVert2fImmutable3.getX());
    if ((f6 <= 0.0F) || (f6 >= 1.0F)) return null;
    if ((f7 <= 0.0F) || (f7 >= 1.0F)) { return null;
    }
    paramArrayOfFloat[0] = f4;
    paramArrayOfFloat[1] = f5;
    paramArrayOfFloat[2] = 0.0F;
    return paramArrayOfFloat;
  }
  








  public static boolean testSeg2SegIntersection(Vert2fImmutable paramVert2fImmutable1, Vert2fImmutable paramVert2fImmutable2, Vert2fImmutable paramVert2fImmutable3, Vert2fImmutable paramVert2fImmutable4)
  {
    float[] arrayOfFloat1 = paramVert2fImmutable1.getCoord();
    float[] arrayOfFloat2 = paramVert2fImmutable2.getCoord();
    float[] arrayOfFloat3 = paramVert2fImmutable3.getCoord();
    float[] arrayOfFloat4 = paramVert2fImmutable4.getCoord();
    
    float f1 = (arrayOfFloat1[0] - arrayOfFloat2[0]) * (arrayOfFloat3[1] - arrayOfFloat4[1]) - (arrayOfFloat1[1] - arrayOfFloat2[1]) * (arrayOfFloat3[0] - arrayOfFloat4[0]);
    
    if (f1 == 0.0F) {
      return false;
    }
    
    float f2 = arrayOfFloat1[0] * arrayOfFloat2[1] - arrayOfFloat1[1] * arrayOfFloat2[0];
    float f3 = arrayOfFloat3[0] * arrayOfFloat4[1] - arrayOfFloat3[1] * arrayOfFloat4[1];
    float f4 = ((arrayOfFloat3[0] - arrayOfFloat4[0]) * f2 - (arrayOfFloat1[0] - arrayOfFloat2[0]) * f3) / f1;
    
    float f5 = (f4 - arrayOfFloat1[0]) / (arrayOfFloat2[0] - arrayOfFloat1[0]);
    float f6 = (f4 - arrayOfFloat3[0]) / (arrayOfFloat4[0] - arrayOfFloat3[0]);
    if ((f5 <= 0.0F) || (f5 >= 1.0F) || (f6 <= 0.0F) || (f6 >= 1.0F)) {
      return false;
    }
    
    return true;
  }
  








  public static boolean testSeg2SegIntersection(Vert2fImmutable paramVert2fImmutable1, Vert2fImmutable paramVert2fImmutable2, Vert2fImmutable paramVert2fImmutable3, Vert2fImmutable paramVert2fImmutable4, float paramFloat)
  {
    float[] arrayOfFloat1 = paramVert2fImmutable1.getCoord();
    float[] arrayOfFloat2 = paramVert2fImmutable2.getCoord();
    float[] arrayOfFloat3 = paramVert2fImmutable3.getCoord();
    float[] arrayOfFloat4 = paramVert2fImmutable4.getCoord();
    
    float f1 = (arrayOfFloat1[0] - arrayOfFloat2[0]) * (arrayOfFloat3[1] - arrayOfFloat4[1]) - (arrayOfFloat1[1] - arrayOfFloat2[1]) * (arrayOfFloat3[0] - arrayOfFloat4[0]);
    
    if (FloatUtil.isZero(f1, paramFloat)) {
      return false;
    }
    
    float f2 = arrayOfFloat1[0] * arrayOfFloat2[1] - arrayOfFloat1[1] * arrayOfFloat2[0];
    float f3 = arrayOfFloat3[0] * arrayOfFloat4[1] - arrayOfFloat3[1] * arrayOfFloat4[1];
    float f4 = ((arrayOfFloat3[0] - arrayOfFloat4[0]) * f2 - (arrayOfFloat1[0] - arrayOfFloat2[0]) * f3) / f1;
    
    float f5 = (f4 - arrayOfFloat1[0]) / (arrayOfFloat2[0] - arrayOfFloat1[0]);
    float f6 = (f4 - arrayOfFloat3[0]) / (arrayOfFloat4[0] - arrayOfFloat3[0]);
    if ((FloatUtil.compare(f5, 0.0F, paramFloat) <= 0) || 
      (FloatUtil.compare(f5, 1.0F, paramFloat) >= 0) || 
      (FloatUtil.compare(f6, 0.0F, paramFloat) <= 0) || 
      (FloatUtil.compare(f6, 1.0F, paramFloat) >= 0)) {
      return false;
    }
    
    if ((f5 <= 0.0F) || (f5 >= 1.0F) || (f6 <= 0.0F) || (f6 >= 1.0F)) {
      return false;
    }
    
    return true;
  }
  










  public static float[] line2lineIntersection(float[] paramArrayOfFloat, Vert2fImmutable paramVert2fImmutable1, Vert2fImmutable paramVert2fImmutable2, Vert2fImmutable paramVert2fImmutable3, Vert2fImmutable paramVert2fImmutable4)
  {
    float f1 = (paramVert2fImmutable1.getX() - paramVert2fImmutable2.getX()) * (paramVert2fImmutable3.getY() - paramVert2fImmutable4.getY()) - (paramVert2fImmutable1.getY() - paramVert2fImmutable2.getY()) * (paramVert2fImmutable3.getX() - paramVert2fImmutable4.getX());
    
    if (f1 == 0.0F) {
      return null;
    }
    float f2 = paramVert2fImmutable1.getX() * paramVert2fImmutable2.getY() - paramVert2fImmutable1.getY() * paramVert2fImmutable2.getX();
    float f3 = paramVert2fImmutable3.getX() * paramVert2fImmutable4.getY() - paramVert2fImmutable3.getY() * paramVert2fImmutable4.getY();
    float f4 = ((paramVert2fImmutable3.getX() - paramVert2fImmutable4.getX()) * f2 - (paramVert2fImmutable1.getX() - paramVert2fImmutable2.getX()) * f3) / f1;
    float f5 = ((paramVert2fImmutable3.getY() - paramVert2fImmutable4.getY()) * f2 - (paramVert2fImmutable1.getY() - paramVert2fImmutable2.getY()) * f3) / f1;
    
    paramArrayOfFloat[0] = f4;
    paramArrayOfFloat[1] = f5;
    paramArrayOfFloat[2] = 0.0F;
    return paramArrayOfFloat;
  }
  











  public static boolean testTri2SegIntersection(Vert2fImmutable paramVert2fImmutable1, Vert2fImmutable paramVert2fImmutable2, Vert2fImmutable paramVert2fImmutable3, Vert2fImmutable paramVert2fImmutable4, Vert2fImmutable paramVert2fImmutable5)
  {
    return (testSeg2SegIntersection(paramVert2fImmutable1, paramVert2fImmutable2, paramVert2fImmutable4, paramVert2fImmutable5)) || (testSeg2SegIntersection(paramVert2fImmutable2, paramVert2fImmutable3, paramVert2fImmutable4, paramVert2fImmutable5)) || (testSeg2SegIntersection(paramVert2fImmutable1, paramVert2fImmutable3, paramVert2fImmutable4, paramVert2fImmutable5));
  }
  











  public static boolean testTri2SegIntersection(Vert2fImmutable paramVert2fImmutable1, Vert2fImmutable paramVert2fImmutable2, Vert2fImmutable paramVert2fImmutable3, Vert2fImmutable paramVert2fImmutable4, Vert2fImmutable paramVert2fImmutable5, float paramFloat)
  {
    return (testSeg2SegIntersection(paramVert2fImmutable1, paramVert2fImmutable2, paramVert2fImmutable4, paramVert2fImmutable5, paramFloat)) || (testSeg2SegIntersection(paramVert2fImmutable2, paramVert2fImmutable3, paramVert2fImmutable4, paramVert2fImmutable5, paramFloat)) || (testSeg2SegIntersection(paramVert2fImmutable1, paramVert2fImmutable3, paramVert2fImmutable4, paramVert2fImmutable5, paramFloat));
  }
}
