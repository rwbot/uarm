package jogamp.nativewindow.windows;

import com.jogamp.common.nio.Buffers;
import com.jogamp.common.nio.StructAccessor;
import com.jogamp.common.os.MachineDataInfo;
import com.jogamp.common.os.MachineDataInfo.StaticConfig;
import java.nio.ByteBuffer;
import jogamp.common.os.MachineDataInfoRuntime;










public class PIXELFORMATDESCRIPTOR
{
  StructAccessor accessor;
  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  
  private final MachineDataInfo md;
  private static final int[] PIXELFORMATDESCRIPTOR_size = { 40, 40, 40, 40, 40, 40, 40, 40 };
  private static final int[] nSize_offset = { 0, 0, 0, 0, 0, 0, 0, 0 };
  
  private static final int[] nVersion_offset = { 2, 2, 2, 2, 2, 2, 2, 2 };
  
  private static final int[] dwFlags_offset = { 4, 4, 4, 4, 4, 4, 4, 4 };
  
  private static final int[] iPixelType_offset = { 8, 8, 8, 8, 8, 8, 8, 8 };
  
  private static final int[] cColorBits_offset = { 9, 9, 9, 9, 9, 9, 9, 9 };
  
  private static final int[] cRedBits_offset = { 10, 10, 10, 10, 10, 10, 10, 10 };
  
  private static final int[] cRedShift_offset = { 11, 11, 11, 11, 11, 11, 11, 11 };
  
  private static final int[] cGreenBits_offset = { 12, 12, 12, 12, 12, 12, 12, 12 };
  
  private static final int[] cGreenShift_offset = { 13, 13, 13, 13, 13, 13, 13, 13 };
  
  private static final int[] cBlueBits_offset = { 14, 14, 14, 14, 14, 14, 14, 14 };
  
  private static final int[] cBlueShift_offset = { 15, 15, 15, 15, 15, 15, 15, 15 };
  
  private static final int[] cAlphaBits_offset = { 16, 16, 16, 16, 16, 16, 16, 16 };
  
  private static final int[] cAlphaShift_offset = { 17, 17, 17, 17, 17, 17, 17, 17 };
  
  private static final int[] cAccumBits_offset = { 18, 18, 18, 18, 18, 18, 18, 18 };
  
  private static final int[] cAccumRedBits_offset = { 19, 19, 19, 19, 19, 19, 19, 19 };
  
  private static final int[] cAccumGreenBits_offset = { 20, 20, 20, 20, 20, 20, 20, 20 };
  
  private static final int[] cAccumBlueBits_offset = { 21, 21, 21, 21, 21, 21, 21, 21 };
  
  private static final int[] cAccumAlphaBits_offset = { 22, 22, 22, 22, 22, 22, 22, 22 };
  
  private static final int[] cDepthBits_offset = { 23, 23, 23, 23, 23, 23, 23, 23 };
  
  private static final int[] cStencilBits_offset = { 24, 24, 24, 24, 24, 24, 24, 24 };
  
  private static final int[] cAuxBuffers_offset = { 25, 25, 25, 25, 25, 25, 25, 25 };
  
  private static final int[] iLayerType_offset = { 26, 26, 26, 26, 26, 26, 26, 26 };
  
  private static final int[] bReserved_offset = { 27, 27, 27, 27, 27, 27, 27, 27 };
  
  private static final int[] dwLayerMask_offset = { 28, 28, 28, 28, 28, 28, 28, 28 };
  
  private static final int[] dwVisibleMask_offset = { 32, 32, 32, 32, 32, 32, 32, 32 };
  
  private static final int[] dwDamageMask_offset = { 36, 36, 36, 36, 36, 36, 36, 36 };
  
  public static int size()
  {
    return PIXELFORMATDESCRIPTOR_size[mdIdx];
  }
  
  public static PIXELFORMATDESCRIPTOR create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }
  
  public static PIXELFORMATDESCRIPTOR create(ByteBuffer paramByteBuffer) {
    return new PIXELFORMATDESCRIPTOR(paramByteBuffer);
  }
  
  PIXELFORMATDESCRIPTOR(ByteBuffer paramByteBuffer) {
    md = valuesmdIdxmd;
    accessor = new StructAccessor(paramByteBuffer);
  }
  
  public ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }
  
  public PIXELFORMATDESCRIPTOR setNSize(short paramShort)
  {
    accessor.setShortAt(nSize_offset[mdIdx], paramShort);
    return this;
  }
  
  public short getNSize()
  {
    return accessor.getShortAt(nSize_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setNVersion(short paramShort)
  {
    accessor.setShortAt(nVersion_offset[mdIdx], paramShort);
    return this;
  }
  
  public short getNVersion()
  {
    return accessor.getShortAt(nVersion_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setDwFlags(int paramInt)
  {
    accessor.setIntAt(dwFlags_offset[mdIdx], paramInt);
    return this;
  }
  
  public int getDwFlags()
  {
    return accessor.getIntAt(dwFlags_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setIPixelType(byte paramByte)
  {
    accessor.setByteAt(iPixelType_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getIPixelType()
  {
    return accessor.getByteAt(iPixelType_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCColorBits(byte paramByte)
  {
    accessor.setByteAt(cColorBits_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCColorBits()
  {
    return accessor.getByteAt(cColorBits_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCRedBits(byte paramByte)
  {
    accessor.setByteAt(cRedBits_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCRedBits()
  {
    return accessor.getByteAt(cRedBits_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCRedShift(byte paramByte)
  {
    accessor.setByteAt(cRedShift_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCRedShift()
  {
    return accessor.getByteAt(cRedShift_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCGreenBits(byte paramByte)
  {
    accessor.setByteAt(cGreenBits_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCGreenBits()
  {
    return accessor.getByteAt(cGreenBits_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCGreenShift(byte paramByte)
  {
    accessor.setByteAt(cGreenShift_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCGreenShift()
  {
    return accessor.getByteAt(cGreenShift_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCBlueBits(byte paramByte)
  {
    accessor.setByteAt(cBlueBits_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCBlueBits()
  {
    return accessor.getByteAt(cBlueBits_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCBlueShift(byte paramByte)
  {
    accessor.setByteAt(cBlueShift_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCBlueShift()
  {
    return accessor.getByteAt(cBlueShift_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCAlphaBits(byte paramByte)
  {
    accessor.setByteAt(cAlphaBits_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCAlphaBits()
  {
    return accessor.getByteAt(cAlphaBits_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCAlphaShift(byte paramByte)
  {
    accessor.setByteAt(cAlphaShift_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCAlphaShift()
  {
    return accessor.getByteAt(cAlphaShift_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCAccumBits(byte paramByte)
  {
    accessor.setByteAt(cAccumBits_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCAccumBits()
  {
    return accessor.getByteAt(cAccumBits_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCAccumRedBits(byte paramByte)
  {
    accessor.setByteAt(cAccumRedBits_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCAccumRedBits()
  {
    return accessor.getByteAt(cAccumRedBits_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCAccumGreenBits(byte paramByte)
  {
    accessor.setByteAt(cAccumGreenBits_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCAccumGreenBits()
  {
    return accessor.getByteAt(cAccumGreenBits_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCAccumBlueBits(byte paramByte)
  {
    accessor.setByteAt(cAccumBlueBits_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCAccumBlueBits()
  {
    return accessor.getByteAt(cAccumBlueBits_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCAccumAlphaBits(byte paramByte)
  {
    accessor.setByteAt(cAccumAlphaBits_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCAccumAlphaBits()
  {
    return accessor.getByteAt(cAccumAlphaBits_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCDepthBits(byte paramByte)
  {
    accessor.setByteAt(cDepthBits_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCDepthBits()
  {
    return accessor.getByteAt(cDepthBits_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCStencilBits(byte paramByte)
  {
    accessor.setByteAt(cStencilBits_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCStencilBits()
  {
    return accessor.getByteAt(cStencilBits_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setCAuxBuffers(byte paramByte)
  {
    accessor.setByteAt(cAuxBuffers_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getCAuxBuffers()
  {
    return accessor.getByteAt(cAuxBuffers_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setILayerType(byte paramByte)
  {
    accessor.setByteAt(iLayerType_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getILayerType()
  {
    return accessor.getByteAt(iLayerType_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setBReserved(byte paramByte)
  {
    accessor.setByteAt(bReserved_offset[mdIdx], paramByte);
    return this;
  }
  
  public byte getBReserved()
  {
    return accessor.getByteAt(bReserved_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setDwLayerMask(int paramInt)
  {
    accessor.setIntAt(dwLayerMask_offset[mdIdx], paramInt);
    return this;
  }
  
  public int getDwLayerMask()
  {
    return accessor.getIntAt(dwLayerMask_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setDwVisibleMask(int paramInt)
  {
    accessor.setIntAt(dwVisibleMask_offset[mdIdx], paramInt);
    return this;
  }
  
  public int getDwVisibleMask()
  {
    return accessor.getIntAt(dwVisibleMask_offset[mdIdx]);
  }
  
  public PIXELFORMATDESCRIPTOR setDwDamageMask(int paramInt)
  {
    accessor.setIntAt(dwDamageMask_offset[mdIdx], paramInt);
    return this;
  }
  
  public int getDwDamageMask()
  {
    return accessor.getIntAt(dwDamageMask_offset[mdIdx]);
  }
}
