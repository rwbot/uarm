package g4p_controls;

import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.font.TextLayout;
import java.util.LinkedList;
import processing.awt.PGraphicsJava2D;
import processing.core.PApplet;
import processing.event.MouseEvent;

public abstract class GLinearTrackControl
  extends GValueControl
{
  protected static float TINSET = 2.0F;
  protected static int THUMB_SPOT = 1;
  protected static int TRACK_SPOT = 2;
  protected float trackWidth;
  protected float trackLength;
  protected float trackDisplayLength;
  protected float trackOffset;
  protected int textOrientation = 0;
  protected int downHotSpot = -1;
  protected int status = 0;
  protected StyledString[] labels;
  protected boolean labelsInvalid = true;
  protected Font localFont = G4P.numericLabelFont;
  
  public GLinearTrackControl(PApplet paramPApplet, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4)
  {
    super(paramPApplet, paramFloat1, paramFloat2, paramFloat3, paramFloat4);
  }
  
  public void setTextOrientation(int paramInt)
  {
    switch (paramInt)
    {
    case -1: 
    case 0: 
    case 1: 
      textOrientation = paramInt;
      break;
    default: 
      textOrientation = 0;
    }
    bufferInvalid = true;
  }
  
  public void setTickLabels(String[] paramArrayOfString)
  {
    if ((paramArrayOfString == null) || (paramArrayOfString.length < 2)) {
      return;
    }
    for (String str : paramArrayOfString) {
      if ((str == null) || (str.length() == 0)) {
        return;
      }
    }
    labels = new StyledString[paramArrayOfString.length];
    for (int i = 0; i < paramArrayOfString.length; i++) {
      labels[i] = new StyledString(paramArrayOfString[i]);
    }
    setStickToTicks(true);
    setNbrTicks(labels.length);
    startLimit = 0.0F;
    endLimit = (nbrTicks - 1);
    valueType = 0;
    showLimits = false;
    showValue = false;
    bufferInvalid = true;
  }
  
  public void setShowTicks(boolean paramBoolean)
  {
    super.setShowTicks(paramBoolean);
    float f = calcTrackOffset();
    if (f != trackOffset)
    {
      trackOffset = f;
      bufferInvalid = true;
    }
    bufferInvalid = true;
  }
  
  protected float calcTrackOffset()
  {
    return showTicks ? trackWidth + 2.0F : trackWidth / 2.0F + 2.0F;
  }
  
  public void setTrackOffset(float paramFloat)
  {
    trackOffset = paramFloat;
  }
  
  public float getTrackOffset()
  {
    return trackOffset;
  }
  
  public String getValueS()
  {
    int i = Math.round(startLimit + (endLimit - startLimit) * parametricTarget);
    return labels == null ? getNumericDisplayString(getValueF()) : labels[i].getPlainText();
  }
  
  public void mouseEvent(MouseEvent paramMouseEvent)
  {
    if ((!visible) || (!enabled) || (!available)) {
      return;
    }
    calcTransformedOrigin(winApp.mouseX, winApp.mouseY);
    currSpot = whichHotSpot(ox, oy);
    ox -= width / 2.0F;
    ox /= trackLength;
    if ((currSpot >= 0) || (focusIsWith == this)) {
      cursorIsOver = this;
    } else if (cursorIsOver == this) {
      cursorIsOver = null;
    }
    switch (paramMouseEvent.getAction())
    {
    case 1: 
      if ((focusIsWith != this) && (currSpot > -1) && (z >= focusObjectZ()))
      {
        downHotSpot = currSpot;
        status = (downHotSpot == THUMB_SPOT ? 2 : 0);
        offset = (ox + 0.5F - parametricPos);
        takeFocus();
        bufferInvalid = true;
      }
      break;
    case 3: 
      if (focusIsWith == this)
      {
        parametricTarget = (ox + 0.5F);
        parametricTarget = calcParametricTarget(parametricTarget);
        dragging = false;
        status = 0;
        loseFocus(null);
        bufferInvalid = true;
      }
      break;
    case 8: 
      if ((currSpot > -1) && (z >= focusObjectZ())) {
        parametricTarget = calcParametricTarget(parametricTarget + paramMouseEvent.getCount() * wheelDelta * G4P.wheelForSlider);
      }
      break;
    case 2: 
      if ((focusIsWith == this) && (dragging))
      {
        if (downHotSpot == THUMB_SPOT)
        {
          parametricTarget = (ox - offset + 0.5F);
          if ((parametricTarget < 0.0F) || (parametricTarget > 1.0F)) {
            offset = 0.0F;
          }
          parametricTarget = calcParametricTarget(parametricTarget);
        }
        status = 0;
        bufferInvalid = true;
        loseFocus(null);
      }
      dragging = false;
      break;
    case 4: 
      if (focusIsWith == this)
      {
        status = 3;
        dragging = true;
        if (downHotSpot == THUMB_SPOT)
        {
          parametricTarget = (ox - offset + 0.5F);
          if (parametricTarget < 0.0F)
          {
            parametricTarget = 0.0F;
            offset = 0.0F;
          }
          else if (parametricTarget > 1.0F)
          {
            parametricTarget = 1.0F;
            offset = 0.0F;
          }
          bufferInvalid = true;
        }
      }
      break;
    case 5: 
      int i = status;
      if (currSpot == THUMB_SPOT) {
        status = 1;
      } else {
        status = 0;
      }
      if (i != status) {
        bufferInvalid = true;
      }
      break;
    }
  }
  
  public void draw()
  {
    if (!visible) {
      return;
    }
    updateBuffer();
    winApp.pushStyle();
    winApp.pushMatrix();
    winApp.translate(cx, cy);
    winApp.rotate(rotAngle);
    winApp.pushMatrix();
    winApp.translate(-halfWidth, -halfHeight);
    winApp.imageMode(0);
    if (alphaLevel < 255) {
      winApp.tint(255, alphaLevel);
    }
    winApp.image(buffer, 0.0F, 0.0F);
    winApp.popMatrix();
    winApp.popMatrix();
    winApp.popStyle();
  }
  
  protected void drawValue(Graphics2D paramGraphics2D)
  {
    ssValue.setText(getNumericDisplayString(getValueF()));
    TextLayout localTextLayout = ssValue.getLines(paramGraphics2D).getFirst()).layout;
    float f3 = localTextLayout.getVisibleAdvance();
    float f1;
    float f2;
    switch (textOrientation)
    {
    case -1: 
      f1 = (parametricPos - 0.5F) * trackLength + localTextLayout.getDescent();
      f2 = -trackOffset;
      buffer.pushMatrix();
      buffer.translate(f1, f2);
      buffer.rotate(-1.5707964F);
      localTextLayout.draw(paramGraphics2D, 0.0F, 0.0F);
      buffer.popMatrix();
      break;
    case 1: 
      f1 = (parametricPos - 0.5F) * trackLength - localTextLayout.getDescent();
      f2 = -trackOffset - f3;
      buffer.pushMatrix();
      buffer.translate(f1, f2);
      buffer.rotate(1.5707964F);
      localTextLayout.draw(paramGraphics2D, 0.0F, 0.0F);
      buffer.popMatrix();
      break;
    case 0: 
      f1 = (parametricPos - 0.5F) * trackLength - f3 / 2.0F;
      if (f1 < -trackDisplayLength / 2.0F) {
        f1 = -trackDisplayLength / 2.0F;
      } else if (f1 + f3 > trackDisplayLength / 2.0F) {
        f1 = trackDisplayLength / 2.0F - f3;
      }
      f2 = -trackOffset - localTextLayout.getDescent();
      localTextLayout.draw(paramGraphics2D, f1, f2);
      localTextLayout = ssEndLimit.getLines(paramGraphics2D).getFirst()).layout;
    }
  }
  
  protected void drawLimits(Graphics2D paramGraphics2D)
  {
    if (limitsInvalid)
    {
      ssStartLimit.setText(getNumericDisplayString(startLimit));
      ssEndLimit.setText(getNumericDisplayString(endLimit));
      limitsInvalid = false;
    }
    TextLayout localTextLayout;
    float f1;
    float f2;
    switch (textOrientation)
    {
    case -1: 
      localTextLayout = ssStartLimit.getLines(paramGraphics2D).getFirst()).layout;
      f1 = -trackLength / 2.0F + localTextLayout.getDescent();
      f2 = trackOffset + localTextLayout.getVisibleAdvance();
      buffer.pushMatrix();
      buffer.translate(f1, f2);
      buffer.rotate(-1.5707964F);
      localTextLayout.draw(paramGraphics2D, 0.0F, 0.0F);
      buffer.popMatrix();
      localTextLayout = ssEndLimit.getLines(paramGraphics2D).getFirst()).layout;
      f1 = trackLength / 2.0F + localTextLayout.getDescent();
      f2 = trackOffset + localTextLayout.getVisibleAdvance();
      buffer.pushMatrix();
      buffer.translate(f1, f2);
      buffer.rotate(-1.5707964F);
      localTextLayout.draw(paramGraphics2D, 0.0F, 0.0F);
      buffer.popMatrix();
      break;
    case 1: 
      localTextLayout = ssStartLimit.getLines(paramGraphics2D).getFirst()).layout;
      f1 = -trackLength / 2.0F - localTextLayout.getDescent();
      f2 = trackOffset;
      buffer.pushMatrix();
      buffer.translate(f1, f2);
      buffer.rotate(1.5707964F);
      localTextLayout.draw(paramGraphics2D, 0.0F, 0.0F);
      buffer.popMatrix();
      localTextLayout = ssEndLimit.getLines(paramGraphics2D).getFirst()).layout;
      f1 = trackLength / 2.0F - localTextLayout.getDescent();
      f2 = trackOffset;
      buffer.pushMatrix();
      buffer.translate(f1, f2);
      buffer.rotate(1.5707964F);
      localTextLayout.draw(paramGraphics2D, 0.0F, 0.0F);
      buffer.popMatrix();
      break;
    case 0: 
      localTextLayout = ssStartLimit.getLines(paramGraphics2D).getFirst()).layout;
      f1 = -(trackLength + trackWidth) / 2.0F;
      f2 = trackOffset + localTextLayout.getAscent();
      localTextLayout.draw(paramGraphics2D, f1, f2);
      localTextLayout = ssEndLimit.getLines(paramGraphics2D).getFirst()).layout;
      f1 = (trackLength + trackWidth) / 2.0F - localTextLayout.getVisibleAdvance();
      f2 = trackOffset + localTextLayout.getAscent();
      localTextLayout.draw(paramGraphics2D, f1, f2);
    }
  }
  
  protected void drawLabels(Graphics2D paramGraphics2D)
  {
    if (labelsInvalid)
    {
      ssStartLimit.setText(getNumericDisplayString(startLimit));
      ssEndLimit.setText(getNumericDisplayString(endLimit));
      limitsInvalid = false;
    }
    float f3 = 1.0F / (nbrTicks - 1);
    int i;
    TextLayout localTextLayout;
    float f1;
    float f2;
    switch (textOrientation)
    {
    case -1: 
      for (i = 0; i < labels.length; i++)
      {
        localTextLayout = labels[i].getLines(paramGraphics2D).getFirst()).layout;
        f1 = (i * f3 - 0.5F) * trackLength + localTextLayout.getDescent();
        f2 = trackOffset + localTextLayout.getVisibleAdvance();
        buffer.pushMatrix();
        buffer.translate(f1, f2);
        buffer.rotate(-1.5707964F);
        localTextLayout.draw(paramGraphics2D, 0.0F, 0.0F);
        buffer.popMatrix();
      }
      break;
    case 1: 
      for (i = 0; i < labels.length; i++)
      {
        localTextLayout = labels[i].getLines(paramGraphics2D).getFirst()).layout;
        f1 = (i * f3 - 0.5F) * trackLength - localTextLayout.getDescent();
        f2 = trackOffset;
        buffer.pushMatrix();
        buffer.translate(f1, f2);
        buffer.rotate(1.5707964F);
        localTextLayout.draw(paramGraphics2D, 0.0F, 0.0F);
        buffer.popMatrix();
      }
      break;
    case 0: 
      for (i = 0; i < labels.length; i++)
      {
        localTextLayout = labels[i].getLines(paramGraphics2D).getFirst()).layout;
        f1 = (i * f3 - 0.5F) * trackLength - 0.5F * localTextLayout.getVisibleAdvance();
        f2 = trackOffset + localTextLayout.getAscent();
        localTextLayout.draw(paramGraphics2D, f1, f2);
      }
    }
  }
}
