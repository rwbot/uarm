package jogamp.opengl.util.pngj.chunks;

import jogamp.opengl.util.pngj.ImageInfo;
import jogamp.opengl.util.pngj.PngHelperInternal;
import jogamp.opengl.util.pngj.PngjException;




public class PngChunkPHYS
  extends PngChunkSingle
{
  public static final String ID = "pHYs";
  private long pixelsxUnitX;
  private long pixelsxUnitY;
  private int units;
  
  public PngChunkPHYS(ImageInfo paramImageInfo)
  {
    super("pHYs", paramImageInfo);
  }
  
  public PngChunk.ChunkOrderingConstraint getOrderingConstraint()
  {
    return PngChunk.ChunkOrderingConstraint.BEFORE_IDAT;
  }
  
  public ChunkRaw createRawChunk()
  {
    ChunkRaw localChunkRaw = createEmptyChunk(9, true);
    PngHelperInternal.writeInt4tobytes((int)pixelsxUnitX, data, 0);
    PngHelperInternal.writeInt4tobytes((int)pixelsxUnitY, data, 4);
    data[8] = ((byte)units);
    return localChunkRaw;
  }
  
  public void parseFromRaw(ChunkRaw paramChunkRaw)
  {
    if (len != 9)
      throw new PngjException("bad chunk length " + paramChunkRaw);
    pixelsxUnitX = PngHelperInternal.readInt4fromBytes(data, 0);
    if (pixelsxUnitX < 0L)
      pixelsxUnitX += 4294967296L;
    pixelsxUnitY = PngHelperInternal.readInt4fromBytes(data, 4);
    if (pixelsxUnitY < 0L)
      pixelsxUnitY += 4294967296L;
    units = PngHelperInternal.readInt1fromByte(data, 8);
  }
  
  public void cloneDataFromRead(PngChunk paramPngChunk)
  {
    PngChunkPHYS localPngChunkPHYS = (PngChunkPHYS)paramPngChunk;
    pixelsxUnitX = pixelsxUnitX;
    pixelsxUnitY = pixelsxUnitY;
    units = units;
  }
  
  public long getPixelsxUnitX() {
    return pixelsxUnitX;
  }
  
  public void setPixelsxUnitX(long paramLong) {
    pixelsxUnitX = paramLong;
  }
  
  public long getPixelsxUnitY() {
    return pixelsxUnitY;
  }
  
  public void setPixelsxUnitY(long paramLong) {
    pixelsxUnitY = paramLong;
  }
  
  public int getUnits() {
    return units;
  }
  
  public void setUnits(int paramInt) {
    units = paramInt;
  }
  




  public double getAsDpi()
  {
    if ((units != 1) || (pixelsxUnitX != pixelsxUnitY))
      return -1.0D;
    return pixelsxUnitX * 0.0254D;
  }
  


  public double[] getAsDpi2()
  {
    if (units != 1)
      return new double[] { -1.0D, -1.0D };
    return new double[] { pixelsxUnitX * 0.0254D, pixelsxUnitY * 0.0254D };
  }
  
  public void setAsDpi(double paramDouble) {
    units = 1;
    pixelsxUnitX = ((paramDouble / 0.0254D + 0.5D));
    pixelsxUnitY = pixelsxUnitX;
  }
  
  public void setAsDpi2(double paramDouble1, double paramDouble2) {
    units = 1;
    pixelsxUnitX = ((paramDouble1 / 0.0254D + 0.5D));
    pixelsxUnitY = ((paramDouble2 / 0.0254D + 0.5D));
  }
}
