package com.jogamp.newt.event.awt;

import com.jogamp.nativewindow.NativeSurfaceHolder;
import com.jogamp.newt.Window;
import java.awt.Component;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import jogamp.newt.awt.event.AWTNewtEventFactory;
























public class AWTMouseAdapter
  extends AWTAdapter
  implements java.awt.event.MouseListener, MouseMotionListener, MouseWheelListener
{
  public AWTMouseAdapter(com.jogamp.newt.event.MouseListener paramMouseListener, NativeSurfaceHolder paramNativeSurfaceHolder)
  {
    super(paramMouseListener, paramNativeSurfaceHolder);
  }
  
  public AWTMouseAdapter(com.jogamp.newt.event.MouseListener paramMouseListener, Window paramWindow) {
    super(paramMouseListener, paramWindow);
  }
  
  public AWTMouseAdapter(Window paramWindow) {
    super(paramWindow);
  }
  

  public AWTMouseAdapter() {}
  

  public synchronized AWTAdapter addTo(Component paramComponent)
  {
    paramComponent.addMouseListener(this);
    paramComponent.addMouseMotionListener(this);
    paramComponent.addMouseWheelListener(this);
    return this;
  }
  
  public synchronized AWTAdapter removeFrom(Component paramComponent)
  {
    paramComponent.removeMouseListener(this);
    paramComponent.removeMouseMotionListener(this);
    paramComponent.removeMouseWheelListener(this);
    return this;
  }
  
  public synchronized void mouseClicked(java.awt.event.MouseEvent paramMouseEvent)
  {
    if (!isSetup) return;
    com.jogamp.newt.event.MouseEvent localMouseEvent = AWTNewtEventFactory.createMouseEvent(paramMouseEvent, nsHolder);
    if (consumeAWTEvent) {
      paramMouseEvent.consume();
    }
    if (AWTAdapter.EventProcRes.DISPATCH == processEvent(false, localMouseEvent)) {
      ((com.jogamp.newt.event.MouseListener)newtListener).mouseClicked(localMouseEvent);
    }
  }
  
  public synchronized void mouseEntered(java.awt.event.MouseEvent paramMouseEvent)
  {
    if (!isSetup) return;
    com.jogamp.newt.event.MouseEvent localMouseEvent = AWTNewtEventFactory.createMouseEvent(paramMouseEvent, nsHolder);
    if (consumeAWTEvent) {
      paramMouseEvent.consume();
    }
    if (AWTAdapter.EventProcRes.DISPATCH == processEvent(false, localMouseEvent)) {
      ((com.jogamp.newt.event.MouseListener)newtListener).mouseEntered(localMouseEvent);
    }
  }
  
  public synchronized void mouseExited(java.awt.event.MouseEvent paramMouseEvent)
  {
    if (!isSetup) return;
    com.jogamp.newt.event.MouseEvent localMouseEvent = AWTNewtEventFactory.createMouseEvent(paramMouseEvent, nsHolder);
    if (consumeAWTEvent) {
      paramMouseEvent.consume();
    }
    if (AWTAdapter.EventProcRes.DISPATCH == processEvent(false, localMouseEvent)) {
      ((com.jogamp.newt.event.MouseListener)newtListener).mouseExited(localMouseEvent);
    }
  }
  
  public synchronized void mousePressed(java.awt.event.MouseEvent paramMouseEvent)
  {
    if (!isSetup) return;
    com.jogamp.newt.event.MouseEvent localMouseEvent = AWTNewtEventFactory.createMouseEvent(paramMouseEvent, nsHolder);
    if (consumeAWTEvent) {
      paramMouseEvent.consume();
    }
    if (AWTAdapter.EventProcRes.DISPATCH == processEvent(false, localMouseEvent)) {
      ((com.jogamp.newt.event.MouseListener)newtListener).mousePressed(localMouseEvent);
    }
  }
  
  public synchronized void mouseReleased(java.awt.event.MouseEvent paramMouseEvent)
  {
    if (!isSetup) return;
    com.jogamp.newt.event.MouseEvent localMouseEvent = AWTNewtEventFactory.createMouseEvent(paramMouseEvent, nsHolder);
    if (consumeAWTEvent) {
      paramMouseEvent.consume();
    }
    if (AWTAdapter.EventProcRes.DISPATCH == processEvent(false, localMouseEvent)) {
      ((com.jogamp.newt.event.MouseListener)newtListener).mouseReleased(localMouseEvent);
    }
  }
  
  public synchronized void mouseDragged(java.awt.event.MouseEvent paramMouseEvent)
  {
    if (!isSetup) return;
    com.jogamp.newt.event.MouseEvent localMouseEvent = AWTNewtEventFactory.createMouseEvent(paramMouseEvent, nsHolder);
    if (consumeAWTEvent) {
      paramMouseEvent.consume();
    }
    if (AWTAdapter.EventProcRes.DISPATCH == processEvent(false, localMouseEvent)) {
      ((com.jogamp.newt.event.MouseListener)newtListener).mouseDragged(localMouseEvent);
    }
  }
  
  public synchronized void mouseMoved(java.awt.event.MouseEvent paramMouseEvent)
  {
    if (!isSetup) return;
    com.jogamp.newt.event.MouseEvent localMouseEvent = AWTNewtEventFactory.createMouseEvent(paramMouseEvent, nsHolder);
    if (consumeAWTEvent) {
      paramMouseEvent.consume();
    }
    if (AWTAdapter.EventProcRes.DISPATCH == processEvent(false, localMouseEvent)) {
      ((com.jogamp.newt.event.MouseListener)newtListener).mouseMoved(localMouseEvent);
    }
  }
  
  public synchronized void mouseWheelMoved(MouseWheelEvent paramMouseWheelEvent)
  {
    if (!isSetup) return;
    com.jogamp.newt.event.MouseEvent localMouseEvent = AWTNewtEventFactory.createMouseEvent(paramMouseWheelEvent, nsHolder);
    if (consumeAWTEvent) {
      paramMouseWheelEvent.consume();
    }
    if (AWTAdapter.EventProcRes.DISPATCH == processEvent(false, localMouseEvent)) {
      ((com.jogamp.newt.event.MouseListener)newtListener).mouseWheelMoved(localMouseEvent);
    }
  }
}
