package g4p_controls;

import java.awt.Font;
import java.awt.font.TextAttribute;
import processing.core.PApplet;

public abstract class GTextBase
  extends GAbstractControl
{
  protected StyledString stext = new StyledString("");
  protected Font localFont = G4P.globalFont;
  
  public GTextBase(PApplet paramPApplet, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4)
  {
    super(paramPApplet, paramFloat1, paramFloat2, paramFloat3, paramFloat4);
    setFont(localFont);
  }
  
  public void setText(String paramString)
  {
    if ((paramString == null) || (paramString.length() == 0)) {
      paramString = " ";
    }
    stext.setText(paramString, Integer.MAX_VALUE);
    bufferInvalid = true;
  }
  
  public boolean loadText(String paramString)
  {
    StyledString localStyledString = StyledString.load(winApp, paramString);
    if (localStyledString != null)
    {
      setStyledText(localStyledString);
      stext.startIdx = (stext.endIdx = -1);
      bufferInvalid = true;
      return true;
    }
    return false;
  }
  
  public boolean saveText(String paramString)
  {
    stext.startIdx = (stext.endIdx = -1);
    StyledString.save(winApp, stext, paramString);
    return true;
  }
  
  public void setFont(Font paramFont)
  {
    if ((paramFont != null) && (paramFont != localFont))
    {
      localFont = paramFont;
      bufferInvalid = true;
    }
  }
  
  public void setStyledText(StyledString paramStyledString)
  {
    if (paramStyledString != null)
    {
      stext = paramStyledString;
      stext.setWrapWidth((int)width - 4);
      bufferInvalid = true;
    }
  }
  
  public void forceBufferUpdate()
  {
    if (stext != null) {
      stext.invalidateText();
    }
    bufferInvalid = true;
  }
  
  public void setTextPlain()
  {
    stext.clearAttributes();
    bufferInvalid = true;
  }
  
  public void setTextBold(int paramInt1, int paramInt2)
  {
    addAttributeImpl(G4P.WEIGHT, G4P.WEIGHT_BOLD, paramInt1, paramInt2);
  }
  
  public void setTextBold()
  {
    addAttributeImpl(G4P.WEIGHT, G4P.WEIGHT_BOLD);
  }
  
  public void setTextItalic(int paramInt1, int paramInt2)
  {
    addAttributeImpl(G4P.POSTURE, G4P.POSTURE_OBLIQUE, paramInt1, paramInt2);
  }
  
  public void setTextItalic()
  {
    addAttributeImpl(G4P.POSTURE, G4P.POSTURE_OBLIQUE);
  }
  
  public StyledString getStyledText()
  {
    return stext;
  }
  
  public String getText()
  {
    return stext.getPlainText();
  }
  
  protected void addAttributeImpl(TextAttribute paramTextAttribute, Object paramObject)
  {
    stext.addAttribute(paramTextAttribute, paramObject);
    bufferInvalid = true;
  }
  
  protected void addAttributeImpl(TextAttribute paramTextAttribute, Object paramObject, int paramInt1, int paramInt2)
  {
    if (paramInt1 >= paramInt2) {
      return;
    }
    if (paramInt1 < 0) {
      paramInt1 = 0;
    }
    if (paramInt2 > stext.length()) {
      paramInt2 = stext.length();
    }
    stext.addAttribute(paramTextAttribute, paramObject, paramInt1, paramInt2);
    bufferInvalid = true;
  }
}
