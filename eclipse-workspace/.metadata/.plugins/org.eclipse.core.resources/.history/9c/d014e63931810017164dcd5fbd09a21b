package com.jogamp.newt.awt;

import com.jogamp.common.ExceptionUtils;
import com.jogamp.common.util.awt.AWTEDTExecutor;
import com.jogamp.nativewindow.AbstractGraphicsConfiguration;
import com.jogamp.nativewindow.CapabilitiesImmutable;
import com.jogamp.nativewindow.NativeWindow;
import com.jogamp.nativewindow.OffscreenLayerOption;
import com.jogamp.nativewindow.WindowClosingProtocol;
import com.jogamp.nativewindow.WindowClosingProtocol.WindowClosingMode;
import com.jogamp.nativewindow.awt.AWTGraphicsConfiguration;
import com.jogamp.nativewindow.awt.AWTPrintLifecycle;
import com.jogamp.nativewindow.awt.AWTWindowClosingProtocol;
import com.jogamp.nativewindow.awt.JAWTWindow;
import com.jogamp.newt.Display;
import com.jogamp.newt.Screen;
import com.jogamp.newt.Window;
import com.jogamp.newt.Window.FocusRunnable;
import com.jogamp.newt.event.KeyEvent;
import com.jogamp.newt.event.KeyListener;
import com.jogamp.newt.event.WindowAdapter;
import com.jogamp.newt.event.WindowEvent;
import com.jogamp.newt.event.WindowListener;
import com.jogamp.newt.event.awt.AWTAdapter;
import com.jogamp.newt.event.awt.AWTKeyAdapter;
import com.jogamp.newt.event.awt.AWTMouseAdapter;
import com.jogamp.opengl.GLAnimatorControl;
import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.GLCapabilities;
import com.jogamp.opengl.GLCapabilitiesImmutable;
import com.jogamp.opengl.GLDrawable;
import com.jogamp.opengl.GLDrawableFactory;
import com.jogamp.opengl.GLException;
import com.jogamp.opengl.GLOffscreenAutoDrawable;
import com.jogamp.opengl.util.GLDrawableUtil;
import com.jogamp.opengl.util.TileRenderer;
import java.applet.Applet;
import java.awt.AWTKeyStroke;
import java.awt.Canvas;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.KeyboardFocusManager;
import java.awt.geom.NoninvertibleTransformException;
import java.beans.Beans;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.PrintStream;
import java.lang.reflect.Method;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Set;
import javax.swing.MenuSelectionManager;
import jogamp.nativewindow.awt.AWTMisc;
import jogamp.nativewindow.jawt.JAWTUtil;
import jogamp.newt.Debug;
import jogamp.newt.WindowImpl;
import jogamp.newt.awt.NewtFactoryAWT;
import jogamp.newt.awt.event.AWTParentWindowAdapter;
import jogamp.newt.driver.DriverClearFocus;
import jogamp.opengl.awt.AWTTilePainter;

































public class NewtCanvasAWT
  extends Canvas
  implements WindowClosingProtocol, OffscreenLayerOption, AWTPrintLifecycle
{
  public static final boolean DEBUG = Debug.debug("Window");
  
  private final Object sync = new Object();
  private volatile JAWTWindow jawtWindow = null;
  private boolean isApplet = false;
  private boolean shallUseOffscreenLayer = false;
  private Window newtChild = null;
  private boolean newtChildAttached = false;
  private boolean isOnscreen = true;
  
  private WindowClosingProtocol.WindowClosingMode newtChildCloseOp;
  
  private final AWTParentWindowAdapter awtWinAdapter;
  
  private final AWTAdapter awtMouseAdapter;
  private final AWTAdapter awtKeyAdapter;
  private volatile AWTGraphicsConfiguration awtConfig;
  private boolean destroyJAWTPending = false;
  
  private boolean skipJAWTDestroy = false;
  

  private volatile boolean componentAdded = false;
  
  private final AWTWindowClosingProtocol awtWindowClosingProtocol = new AWTWindowClosingProtocol(this, new Runnable()new Runnable
  {
    public void run()
    {
      if (componentAdded) {
        NewtCanvasAWT.this.destroyImpl(false, true);
      }
    }
  }, new Runnable()
  {




    public void run()
    {



      if ((componentAdded) && (newtChild != null)) {
        newtChild.sendWindowEvent(102);
      }
    }
  });
  


















  public NewtCanvasAWT()
  {
    awtMouseAdapter = new AWTMouseAdapter().addTo(this);
    awtKeyAdapter = new AWTKeyAdapter().addTo(this);
    awtWinAdapter = ((AWTParentWindowAdapter)new AWTParentWindowAdapter().addTo(this));
    awtWinAdapter.removeWindowClosingFrom(this);
  }
  


  public NewtCanvasAWT(GraphicsConfiguration paramGraphicsConfiguration)
  {
    super(paramGraphicsConfiguration);
    awtMouseAdapter = new AWTMouseAdapter().addTo(this);
    awtKeyAdapter = new AWTKeyAdapter().addTo(this);
    awtWinAdapter = ((AWTParentWindowAdapter)new AWTParentWindowAdapter().addTo(this));
    awtWinAdapter.removeWindowClosingFrom(this);
  }
  



  public NewtCanvasAWT(Window paramWindow)
  {
    awtMouseAdapter = new AWTMouseAdapter().addTo(this);
    awtKeyAdapter = new AWTKeyAdapter().addTo(this);
    awtWinAdapter = ((AWTParentWindowAdapter)new AWTParentWindowAdapter().addTo(this));
    awtWinAdapter.removeWindowClosingFrom(this);
    setNEWTChild(paramWindow);
  }
  


  public NewtCanvasAWT(GraphicsConfiguration paramGraphicsConfiguration, Window paramWindow)
  {
    super(paramGraphicsConfiguration);
    awtMouseAdapter = new AWTMouseAdapter().addTo(this);
    awtKeyAdapter = new AWTKeyAdapter().addTo(this);
    awtWinAdapter = ((AWTParentWindowAdapter)new AWTParentWindowAdapter().addTo(this));
    awtWinAdapter.removeWindowClosingFrom(this);
    setNEWTChild(paramWindow);
  }
  
  public void setShallUseOffscreenLayer(boolean paramBoolean)
  {
    shallUseOffscreenLayer = paramBoolean;
  }
  
  public final boolean getShallUseOffscreenLayer()
  {
    return shallUseOffscreenLayer;
  }
  
  public final boolean isOffscreenLayerSurfaceEnabled()
  {
    JAWTWindow localJAWTWindow = jawtWindow;
    return (null != localJAWTWindow) && (localJAWTWindow.isOffscreenLayerSurfaceEnabled());
  }
  



  public final boolean isApplet()
  {
    return isApplet;
  }
  
  private final boolean isParent() {
    Window localWindow = newtChild;
    return (null != localWindow) && (jawtWindow == localWindow.getParent());
  }
  
  private final boolean isFullscreen() {
    Window localWindow = newtChild;
    return (null != localWindow) && (localWindow.isFullscreen());
  }
  
  class FocusAction implements Window.FocusRunnable {
    FocusAction() {}
    
    public boolean run() { boolean bool1 = NewtCanvasAWT.this.isParent();
      boolean bool2 = NewtCanvasAWT.this.isFullscreen();
      if (NewtCanvasAWT.DEBUG) {
        System.err.println("NewtCanvasAWT.FocusAction: " + Display.getThreadName() + ", isOnscreen " + isOnscreen + ", hasFocus " + hasFocus() + ", isParent " + bool1 + ", isFS " + bool2);
      }
      if ((bool1) && (!bool2)) {
        if (isOnscreen)
        {
          AWTEDTExecutor.singleton.invoke(false, NewtCanvasAWT.awtClearGlobalFocusOwner);
        } else if (!hasFocus())
        {

          NewtCanvasAWT.this.requestFocus();
        }
      }
      return false;
    } }
  
  private final FocusAction focusAction = new FocusAction();
  
  private static class ClearFocusOwner implements Runnable {
    private ClearFocusOwner() {}
    
    public void run() { KeyboardFocusManager.getCurrentKeyboardFocusManager().clearGlobalFocusOwner(); }
  }
  
  private static final Runnable awtClearGlobalFocusOwner = new ClearFocusOwner(null);
  

  private final Runnable awtClearSelectedMenuPath = new Runnable()
  {
    public void run() {
      MenuSelectionManager.defaultManager().clearSelectedPath();
    }
  };
  private final WindowListener clearAWTMenusOnNewtFocus = new WindowAdapter()
  {
    public void windowResized(WindowEvent paramAnonymousWindowEvent) {
      NewtCanvasAWT.this.updateLayoutSize();
    }
    
    public void windowGainedFocus(WindowEvent paramAnonymousWindowEvent) {
      if ((NewtCanvasAWT.this.isParent()) && (!NewtCanvasAWT.this.isFullscreen()))
        AWTEDTExecutor.singleton.invoke(false, awtClearSelectedMenuPath);
    }
  };
  
  class FocusTraversalKeyListener implements KeyListener {
    FocusTraversalKeyListener() {}
    
    public void keyPressed(KeyEvent paramKeyEvent) {
      if ((NewtCanvasAWT.this.isParent()) && (!NewtCanvasAWT.this.isFullscreen())) {
        handleKey(paramKeyEvent, false);
      }
    }
    
    public void keyReleased(KeyEvent paramKeyEvent) {
      if ((NewtCanvasAWT.this.isParent()) && (!NewtCanvasAWT.this.isFullscreen())) {
        handleKey(paramKeyEvent, true);
      }
    }
    
    void handleKey(KeyEvent paramKeyEvent, boolean paramBoolean) {
      if (null == keyboardFocusManager) {
        throw new InternalError("XXX");
      }
      AWTKeyStroke localAWTKeyStroke = AWTKeyStroke.getAWTKeyStroke(paramKeyEvent.getKeyCode(), paramKeyEvent.getModifiers(), paramBoolean);
      int i = 0;
      if (null != localAWTKeyStroke) {
        Set localSet1 = keyboardFocusManager.getDefaultFocusTraversalKeys(0);
        Set localSet2 = keyboardFocusManager.getDefaultFocusTraversalKeys(1);
        Component localComponent; if (localSet1.contains(localAWTKeyStroke)) {
          localComponent = AWTMisc.getNextFocus(NewtCanvasAWT.this, true);
          if (NewtCanvasAWT.DEBUG) {
            System.err.println("NewtCanvasAWT.focusKey (fwd): " + localAWTKeyStroke + ", current focusOwner " + keyboardFocusManager.getFocusOwner() + ", hasFocus: " + hasFocus() + ", nextFocus " + localComponent);
          }
          
          localComponent.requestFocus();
          i = 1;
        } else if (localSet2.contains(localAWTKeyStroke)) {
          localComponent = AWTMisc.getNextFocus(NewtCanvasAWT.this, false);
          if (NewtCanvasAWT.DEBUG) {
            System.err.println("NewtCanvasAWT.focusKey (bwd): " + localAWTKeyStroke + ", current focusOwner " + keyboardFocusManager.getFocusOwner() + ", hasFocus: " + hasFocus() + ", prevFocus " + localComponent);
          }
          
          localComponent.requestFocus();
          i = 1;
        }
      }
      if (i != 0) {
        paramKeyEvent.setConsumed(true);
      }
      if (NewtCanvasAWT.DEBUG)
        System.err.println("NewtCanvasAWT.focusKey: XXX: " + localAWTKeyStroke);
    }
  }
  
  private final FocusTraversalKeyListener newtFocusTraversalKeyListener = new FocusTraversalKeyListener();
  
  class FocusPropertyChangeListener implements PropertyChangeListener {
    FocusPropertyChangeListener() {}
    
    public void propertyChange(PropertyChangeEvent paramPropertyChangeEvent) { Object localObject1 = paramPropertyChangeEvent.getOldValue();
      Object localObject2 = paramPropertyChangeEvent.getNewValue();
      boolean bool1 = NewtCanvasAWT.this.isParent();
      boolean bool2 = NewtCanvasAWT.this.isFullscreen();
      if (NewtCanvasAWT.DEBUG) {
        System.err.println("NewtCanvasAWT.FocusProperty: " + paramPropertyChangeEvent.getPropertyName() + ", src " + paramPropertyChangeEvent.getSource() + ", " + localObject1 + " -> " + localObject2 + ", isParent " + bool1 + ", isFS " + bool2);
      }
      if ((bool1) && (!bool2)) {
        if (localObject2 == NewtCanvasAWT.this) {
          if (NewtCanvasAWT.DEBUG) {
            System.err.println("NewtCanvasAWT.FocusProperty: AWT focus -> NEWT focus traversal");
          }
          NewtCanvasAWT.this.requestFocusNEWTChild();
        } else if ((localObject1 == NewtCanvasAWT.this) && (localObject2 == null))
        {
          if (NewtCanvasAWT.DEBUG) {
            System.err.println("NewtCanvasAWT.FocusProperty: NEWT focus");
          }
        } else if ((null != localObject2) && (localObject2 != NewtCanvasAWT.this))
        {
          if (NewtCanvasAWT.DEBUG) {
            System.err.println("NewtCanvasAWT.FocusProperty: lost focus - clear focus");
          }
          if ((newtChild.getDelegatedWindow() instanceof DriverClearFocus))
            ((DriverClearFocus)newtChild.getDelegatedWindow()).clearFocus();
        }
      }
    }
  }
  
  private final FocusPropertyChangeListener focusPropertyChangeListener = new FocusPropertyChangeListener();
  private volatile KeyboardFocusManager keyboardFocusManager = null;
  
  private final void requestFocusNEWTChild() {
    if (null != newtChild) {
      newtChild.setFocusAction(null);
      if (isOnscreen) {
        AWTEDTExecutor.singleton.invoke(false, awtClearGlobalFocusOwner);
      }
      newtChild.requestFocus();
      newtChild.setFocusAction(focusAction);
    }
  }
  











  public Window setNEWTChild(Window paramWindow)
  {
    synchronized (sync) {
      Window localWindow = newtChild;
      if (DEBUG) {
        System.err.println("NewtCanvasAWT.setNEWTChild.0: win " + newtWinHandleToHexString(localWindow) + " -> " + newtWinHandleToHexString(paramWindow));
      }
      Container localContainer = AWTMisc.getContainer(this);
      
      if (null != newtChild) {
        detachNewtChild(localContainer);
        newtChild = null;
      }
      
      newtChild = paramWindow;
      
      updateLayoutSize();
      

      return localWindow;
    }
  }
  
  private final void updateLayoutSize() {
    Window localWindow = newtChild;
    if (null != localWindow)
    {
      Dimension localDimension = new Dimension(localWindow.getWidth(), localWindow.getHeight());
      setMinimumSize(localDimension);
      setPreferredSize(localDimension);
    }
  }
  
  public Window getNEWTChild()
  {
    return newtChild;
  }
  
  public NativeWindow getNativeWindow()
  {
    return jawtWindow;
  }
  
  public WindowClosingProtocol.WindowClosingMode getDefaultCloseOperation() {
    return awtWindowClosingProtocol.getDefaultCloseOperation();
  }
  
  public WindowClosingProtocol.WindowClosingMode setDefaultCloseOperation(WindowClosingProtocol.WindowClosingMode paramWindowClosingMode)
  {
    return awtWindowClosingProtocol.setDefaultCloseOperation(paramWindowClosingMode);
  }
  










  public final void setSkipJAWTDestroy(boolean paramBoolean) { skipJAWTDestroy = paramBoolean; }
  
  public final boolean getSkipJAWTDestroy() { return skipJAWTDestroy; }
  
  private final void determineIfApplet() {
    isApplet = false;
    Object localObject = this;
    while ((!isApplet) && (null != localObject)) {
      isApplet = (localObject instanceof Applet);
      localObject = ((Component)localObject).getParent();
    }
  }
  
  private void setAWTGraphicsConfiguration(AWTGraphicsConfiguration paramAWTGraphicsConfiguration)
  {
    awtConfig = paramAWTGraphicsConfiguration;
    if (null != jawtWindow)
    {
      jawtWindow.setAWTGraphicsConfiguration(paramAWTGraphicsConfiguration);
    }
  }
  





















  public GraphicsConfiguration getGraphicsConfiguration()
  {
    GraphicsConfiguration localGraphicsConfiguration1 = super.getGraphicsConfiguration();
    
    if (Beans.isDesignTime()) {
      return localGraphicsConfiguration1;
    }
    Object localObject = null != awtConfig ? awtConfig.getAWTGraphicsConfiguration() : null;
    
    if ((null != localGraphicsConfiguration1) && (null != localObject) && (!localObject.equals(localGraphicsConfiguration1)))
    {

      if (!localObject.getDevice().getIDstring().equals(localGraphicsConfiguration1.getDevice().getIDstring()))
      {






        AWTGraphicsConfiguration localAWTGraphicsConfiguration = AWTGraphicsConfiguration.create(localGraphicsConfiguration1, awtConfig
          .getChosenCapabilities(), awtConfig
          .getRequestedCapabilities());
        GraphicsConfiguration localGraphicsConfiguration2 = localAWTGraphicsConfiguration.getAWTGraphicsConfiguration();
        boolean bool = localAWTGraphicsConfiguration.getChosenCapabilities().equals(awtConfig.getChosenCapabilities());
        if (DEBUG) {
          System.err.println(getThreadName() + ": getGraphicsConfiguration() Info: Changed GC and GD");
          System.err.println("Created Config (n): Old     GC " + localObject);
          System.err.println("Created Config (n): Old     GD " + localObject.getDevice().getIDstring());
          System.err.println("Created Config (n): Parent  GC " + localGraphicsConfiguration1);
          System.err.println("Created Config (n): Parent  GD " + localGraphicsConfiguration1.getDevice().getIDstring());
          System.err.println("Created Config (n): New     GC " + localGraphicsConfiguration2);
          System.err.println("Created Config (n): Old     CF " + awtConfig);
          System.err.println("Created Config (n): New     CF " + localAWTGraphicsConfiguration);
          System.err.println("Created Config (n): EQUALS CAPS " + bool);
        }
        
        if (null != localGraphicsConfiguration2) {
          setAWTGraphicsConfiguration(localAWTGraphicsConfiguration);
          



          if (DEBUG) {
            System.err.println(getThreadName() + ": Info: getGraphicsConfiguration - end.01: newGC " + localGraphicsConfiguration2);
          }
          return localGraphicsConfiguration2;
        }
        if (DEBUG) {
          System.err.println(getThreadName() + ": Info: getGraphicsConfiguration - end.00: oldGC " + localObject);
        }
      }
      






      return localObject; }
    if (null == localGraphicsConfiguration1)
    {





      return localObject;
    }
    



    return localGraphicsConfiguration1;
  }
  
  private static String getThreadName() { return Thread.currentThread().getName(); }
  
  public void addNotify()
  {
    if (Beans.isDesignTime()) {
      super.addNotify();




    }
    else
    {



      disableBackgroundErase();
      

      GraphicsConfiguration localGraphicsConfiguration = super.getGraphicsConfiguration();
      if (null == localGraphicsConfiguration) {
        throw new GLException("Error: NULL AWT GraphicsConfiguration");
      }
      CapabilitiesImmutable localCapabilitiesImmutable = null != newtChild ? newtChild.getRequestedCapabilities() : null;
      AWTGraphicsConfiguration localAWTGraphicsConfiguration = AWTGraphicsConfiguration.create(localGraphicsConfiguration, null, localCapabilitiesImmutable);
      if (null == localAWTGraphicsConfiguration) {
        throw new GLException("Error: NULL AWTGraphicsConfiguration");
      }
      setAWTGraphicsConfiguration(localAWTGraphicsConfiguration);
      

      super.addNotify();
      

      disableBackgroundErase();
      
      synchronized (sync) {
        determineIfApplet();
        if (DEBUG) {
          System.err.println("NewtCanvasAWT.addNotify.0 - isApplet " + isApplet + ", addedOnAWTEDT " + EventQueue.isDispatchThread() + " @ " + currentThreadName());
          ExceptionUtils.dumpStack(System.err);
        }
        jawtWindow = NewtFactoryAWT.getNativeWindow(this, localAWTGraphicsConfiguration);
        jawtWindow.setShallUseOffscreenLayer(shallUseOffscreenLayer);
        
        jawtWindow.lockSurface();
        


        jawtWindow.unlockSurface();
        
        awtWindowClosingProtocol.addClosingListener();
        componentAdded = true;
        if (DEBUG)
        {

          System.err.println("NewtCanvasAWT.addNotify.X: twin " + newtWinHandleToHexString(newtChild) + ", comp " + this + ", visible " + 
            isVisible() + ", showing " + isShowing() + ", displayable " + 
            isDisplayable() + ", cont " + AWTMisc.getContainer(this)); }
      }
    }
  }
  
  private final boolean updatePixelScale(GraphicsConfiguration paramGraphicsConfiguration) {
    if (jawtWindow.updatePixelScale(paramGraphicsConfiguration, true)) {
      Window localWindow1 = newtChild;
      Window localWindow2 = localWindow1.getDelegatedWindow();
      float[] arrayOfFloat1; if ((localWindow2 instanceof WindowImpl)) {
        arrayOfFloat1 = jawtWindow.getMaximumSurfaceScale(new float[2]);
        float[] arrayOfFloat2 = jawtWindow.getMinimumSurfaceScale(new float[2]);
        ((WindowImpl)localWindow2).pixelScaleChangeNotify(arrayOfFloat2, arrayOfFloat1, true);
      }
      else {
        arrayOfFloat1 = jawtWindow.getRequestedSurfaceScale(new float[2]);
        if (!jawtWindow.setSurfaceScale(arrayOfFloat1)) {}
      }
      

      return true;
    }
    return false;
  }
  
  public void removeNotify()
  {
    if (Beans.isDesignTime()) {
      super.removeNotify();
    } else {
      if (DEBUG) {
        System.err.println("NewtCanvasAWT.removeNotify.0 - isApplet " + isApplet + " @ " + currentThreadName());
        ExceptionUtils.dumpStack(System.err);
      }
      componentAdded = false;
      awtWindowClosingProtocol.removeClosingListener();
      destroyImpl(true, false);
      super.removeNotify();
      if (DEBUG) {
        System.err.println("NewtCanvasAWT.removeNotify.X @ " + currentThreadName());
      }
    }
  }
  









  public final void destroy()
  {
    if (DEBUG) {
      System.err.println("NewtCanvasAWT.destroy() @ " + currentThreadName());
      ExceptionUtils.dumpStack(System.err);
    }
    AWTEDTExecutor.singleton.invoke(true, new Runnable()
    {

      public void run() { NewtCanvasAWT.this.destroyImpl(false, false); }
    });
  }
  
  private final void destroyImpl(boolean paramBoolean1, boolean paramBoolean2) {
    synchronized (sync) {
      Container localContainer = AWTMisc.getContainer(this);
      if (DEBUG) {
        System.err.println("NewtCanvasAWT.destroyImpl @ " + currentThreadName());
        System.err.println("NewtCanvasAWT.destroyImpl.0 - isApplet " + isApplet + ", isOnAWTEDT " + EventQueue.isDispatchThread() + ", skipJAWTDestroy " + skipJAWTDestroy + "; removeNotify " + paramBoolean1 + ", windowClosing " + paramBoolean2 + ", destroyJAWTPending " + destroyJAWTPending + ", hasJAWT " + (null != jawtWindow) + ", hasNEWT " + (null != newtChild) + "): nw " + 
        

          newtWinHandleToHexString(newtChild) + ", from " + localContainer);
      }
      if (null != newtChild) {
        detachNewtChild(localContainer);
        
        if (!paramBoolean1) {
          Window localWindow1 = newtChild;
          Window localWindow2 = localWindow1.getDelegatedWindow();
          newtChild = null;
          if ((paramBoolean2) && ((localWindow2 instanceof WindowImpl))) {
            ((WindowImpl)localWindow2).windowDestroyNotify(true);
          } else {
            localWindow1.destroy();
          }
        }
      }
      if (((destroyJAWTPending) || (paramBoolean1) || (paramBoolean2)) && (null != jawtWindow)) {
        if (skipJAWTDestroy)
        {
          destroyJAWTPending = true;
        } else {
          NewtFactoryAWT.destroyNativeWindow(jawtWindow);
          jawtWindow = null;
          awtConfig = null;
          destroyJAWTPending = false;
        }
      }
    }
  }
  
  public void paint(Graphics paramGraphics)
  {
    synchronized (sync) {
      if ((validateComponent(true)) && (!printActive)) {
        newtChild.windowRepaint(0, 0, getWidth(), getHeight());
      }
    }
  }
  
  public void update(Graphics paramGraphics) {
    paint(paramGraphics);
  }
  

  public void reshape(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    synchronized (getTreeLock()) {
      synchronized (sync) {
        super.reshape(paramInt1, paramInt2, paramInt3, paramInt4);
        if (DEBUG) {
          System.err.println("NewtCanvasAWT.reshape: " + paramInt1 + "/" + paramInt2 + " " + paramInt3 + "x" + paramInt4);
        }
        if ((!validateComponent(true)) || 
          (printActive) || (!updatePixelScale(getGraphicsConfiguration()))) {}
      }
    }
  }
  





  private volatile boolean printActive = false;
  private GLAnimatorControl printAnimator = null;
  private GLAutoDrawable printGLAD = null;
  private AWTTilePainter printAWTTiles = null;
  
  private final GLAutoDrawable getGLAD() {
    if ((null != newtChild) && ((newtChild instanceof GLAutoDrawable))) {
      return (GLAutoDrawable)newtChild;
    }
    return null;
  }
  
  public void setupPrint(double paramDouble1, double paramDouble2, int paramInt1, int paramInt2, int paramInt3)
  {
    printActive = true;
    int i = isOpaque() ? 3 : 4;
    TileRenderer localTileRenderer = new TileRenderer();
    printAWTTiles = new AWTTilePainter(localTileRenderer, i, paramDouble1, paramDouble2, paramInt1, paramInt2, paramInt3, DEBUG);
    AWTEDTExecutor.singleton.invoke(getTreeLock(), true, true, setupPrintOnEDT); }
  
  private final Runnable setupPrintOnEDT = new Runnable()
  {
    public void run() {
      synchronized (sync) {
        if (!NewtCanvasAWT.this.validateComponent(true)) {
          if (NewtCanvasAWT.DEBUG) {
            System.err.println(NewtCanvasAWT.currentThreadName() + ": Info: NewtCanvasAWT setupPrint - skipped GL render, drawable not valid yet");
          }
          printActive = false;
          return;
        }
        if (!isVisible()) {
          if (NewtCanvasAWT.DEBUG) {
            System.err.println(NewtCanvasAWT.currentThreadName() + ": Info: NewtCanvasAWT setupPrint - skipped GL render, canvas not visible");
          }
          printActive = false;
          return;
        }
        GLAutoDrawable localGLAutoDrawable = NewtCanvasAWT.this.getGLAD();
        if (null == localGLAutoDrawable) {
          if (NewtCanvasAWT.DEBUG) {
            System.err.println("AWT print.setup exit, newtChild not a GLAutoDrawable: " + newtChild);
          }
          printActive = false;
          return;
        }
        printAnimator = localGLAutoDrawable.getAnimator();
        if (null != printAnimator) {
          printAnimator.remove(localGLAutoDrawable);
        }
        printGLAD = localGLAutoDrawable;
        GLCapabilitiesImmutable localGLCapabilitiesImmutable = localGLAutoDrawable.getChosenGLCapabilities();
        int i = printAWTTiles.getNumSamples(localGLCapabilitiesImmutable);
        GLDrawable localGLDrawable = printGLAD.getDelegatedDrawable();
        boolean bool1 = i != localGLCapabilitiesImmutable.getNumSamples();
        
        boolean bool2 = ((printAWTTiles.customTileWidth != -1) && (printAWTTiles.customTileWidth != localGLDrawable.getSurfaceWidth())) || ((printAWTTiles.customTileHeight != -1) && (printAWTTiles.customTileHeight != localGLDrawable.getSurfaceHeight()));
        boolean bool3 = localGLCapabilitiesImmutable.isOnscreen();
        
        GLCapabilities localGLCapabilities = (GLCapabilities)localGLCapabilitiesImmutable.cloneMutable();
        localGLCapabilities.setDoubleBuffered(false);
        localGLCapabilities.setOnscreen(false);
        if (i != localGLCapabilities.getNumSamples()) {
          localGLCapabilities.setSampleBuffers(0 < i);
          localGLCapabilities.setNumSamples(i);
        }
        boolean bool4 = GLDrawableUtil.isSwapGLContextSafe(localGLAutoDrawable.getRequestedGLCapabilities(), localGLCapabilitiesImmutable, localGLCapabilities);
        
        boolean bool5 = ((bool3) || (bool1) || (bool2)) && (bool4);
        
        if (NewtCanvasAWT.DEBUG) {
          System.err.println("AWT print.setup: reqNewGLAD " + bool5 + "[ onscreen " + bool3 + ", samples " + bool1 + ", size " + bool2 + ", safe " + bool4 + "], " + ", drawableSize " + localGLDrawable
            .getSurfaceWidth() + "x" + localGLDrawable.getSurfaceHeight() + ", customTileSize " + 
            printAWTTiles.customTileWidth + "x" + printAWTTiles.customTileHeight + ", scaleMat " + 
            printAWTTiles.scaleMatX + " x " + printAWTTiles.scaleMatY + ", numSamples " + 
            printAWTTiles.customNumSamples + " -> " + i + ", printAnimator " + printAnimator);
        }
        if (bool5) {
          GLDrawableFactory localGLDrawableFactory = GLDrawableFactory.getFactory(localGLCapabilities.getGLProfile());
          GLOffscreenAutoDrawable localGLOffscreenAutoDrawable = null;
          try {
            localGLOffscreenAutoDrawable = localGLDrawableFactory.createOffscreenAutoDrawable(null, localGLCapabilities, null, 
              printAWTTiles.customTileWidth != -1 ? printAWTTiles.customTileWidth : 1024, 
              printAWTTiles.customTileHeight != -1 ? printAWTTiles.customTileHeight : 1024);
          } catch (GLException localGLException) {
            if (NewtCanvasAWT.DEBUG) {
              System.err.println("Caught: " + localGLException.getMessage());
              localGLException.printStackTrace();
            }
          }
          if (null != localGLOffscreenAutoDrawable) {
            printGLAD = localGLOffscreenAutoDrawable;
            GLDrawableUtil.swapGLContextAndAllGLEventListener(localGLAutoDrawable, printGLAD);
            localGLDrawable = printGLAD.getDelegatedDrawable();
          }
        }
        printAWTTiles.setGLOrientation(printGLAD.isGLOriented(), printGLAD.isGLOriented());
        printAWTTiles.renderer.setTileSize(localGLDrawable.getSurfaceWidth(), localGLDrawable.getSurfaceHeight(), 0);
        printAWTTiles.renderer.attachAutoDrawable(printGLAD);
        if (NewtCanvasAWT.DEBUG) {
          System.err.println("AWT print.setup " + printAWTTiles);
          System.err.println("AWT print.setup AA " + i + ", " + localGLCapabilities);
          System.err.println("AWT print.setup printGLAD: " + printGLAD.getSurfaceWidth() + "x" + printGLAD.getSurfaceHeight() + ", " + printGLAD);
          System.err.println("AWT print.setup printDraw: " + localGLDrawable.getSurfaceWidth() + "x" + localGLDrawable.getSurfaceHeight() + ", " + localGLDrawable);
        }
      }
    }
  };
  
  public void releasePrint()
  {
    if ((!printActive) || (null == printGLAD)) {
      throw new IllegalStateException("setupPrint() not called");
    }
    
    AWTEDTExecutor.singleton.invoke(getTreeLock(), true, true, releasePrintOnEDT);
    newtChild.sendWindowEvent(100); }
  
  private final Runnable releasePrintOnEDT = new Runnable()
  {
    public void run() {
      synchronized (sync) {
        if (NewtCanvasAWT.DEBUG) {
          System.err.println("AWT print.release " + printAWTTiles);
        }
        GLAutoDrawable localGLAutoDrawable = NewtCanvasAWT.this.getGLAD();
        printAWTTiles.dispose();
        printAWTTiles = null;
        if (printGLAD != localGLAutoDrawable) {
          GLDrawableUtil.swapGLContextAndAllGLEventListener(printGLAD, localGLAutoDrawable);
          printGLAD.destroy();
        }
        printGLAD = null;
        if (null != printAnimator) {
          printAnimator.add(localGLAutoDrawable);
          printAnimator = null;
        }
        printActive = false;
      }
    }
  };
  
  public void print(Graphics paramGraphics)
  {
    synchronized (sync) {
      if ((!printActive) || (null == printGLAD)) {
        throw new IllegalStateException("setupPrint() not called");
      }
      if ((DEBUG) && (!EventQueue.isDispatchThread())) {
        System.err.println(currentThreadName() + ": Warning: GLCanvas print - not called from AWT-EDT");
      }
      

      Graphics2D localGraphics2D = (Graphics2D)paramGraphics;
      try {
        printAWTTiles.setupGraphics2DAndClipBounds(localGraphics2D, getWidth(), getHeight());
        TileRenderer localTileRenderer = printAWTTiles.renderer;
        if (DEBUG) {
          System.err.println("AWT print.0: " + localTileRenderer);
        }
        if (!localTileRenderer.eot()) {
          try {
            do {
              localTileRenderer.display();
            } while (!localTileRenderer.eot());
            if (DEBUG) {
              System.err.println("AWT print.1: " + printAWTTiles);
            }
            localTileRenderer.reset();
          } finally {
            printAWTTiles.resetGraphics2D();
          }
        }
      } catch (NoninvertibleTransformException localNoninvertibleTransformException) {
        System.err.println("Caught: Inversion failed of: " + localGraphics2D.getTransform());
        localNoninvertibleTransformException.printStackTrace();
      }
      if (DEBUG) {
        System.err.println("AWT print.X: " + printAWTTiles);
      }
    }
  }
  
  private final boolean validateComponent(boolean paramBoolean) {
    if ((Beans.isDesignTime()) || (!isDisplayable())) {
      return false;
    }
    if ((null == newtChild) || (null == jawtWindow)) {
      return false;
    }
    if ((0 >= getWidth()) || (0 >= getHeight())) {
      return false;
    }
    
    if ((paramBoolean) && (!newtChildAttached) && (null != newtChild)) {
      attachNewtChild();
    }
    
    return true;
  }
  
  private final void configureNewtChild(boolean paramBoolean) {
    awtWinAdapter.clear();
    awtKeyAdapter.clear();
    awtMouseAdapter.clear();
    
    if (null != keyboardFocusManager) {
      keyboardFocusManager.removePropertyChangeListener("focusOwner", focusPropertyChangeListener);
      keyboardFocusManager = null;
    }
    
    if (null != newtChild) {
      newtChild.setKeyboardFocusHandler(null);
      if (paramBoolean) {
        if (null == jawtWindow.getGraphicsConfiguration()) {
          throw new InternalError("XXX");
        }
        isOnscreen = jawtWindow.getGraphicsConfiguration().getChosenCapabilities().isOnscreen();
        awtWinAdapter.setDownstream(jawtWindow, newtChild);
        newtChild.addWindowListener(clearAWTMenusOnNewtFocus);
        newtChild.setFocusAction(focusAction);
        newtChildCloseOp = newtChild.setDefaultCloseOperation(WindowClosingProtocol.WindowClosingMode.DO_NOTHING_ON_CLOSE);
        keyboardFocusManager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        keyboardFocusManager.addPropertyChangeListener("focusOwner", focusPropertyChangeListener);
        

        setFocusable(true);
        if (isOnscreen)
        {
          newtChild.setKeyboardFocusHandler(newtFocusTraversalKeyListener);
        }
        else {
          awtMouseAdapter.setDownstream(newtChild);
          

          awtKeyAdapter.setDownstream(newtChild);
          
          awtKeyAdapter.setConsumeAWTEvent(true);
        }
      } else {
        newtChild.removeWindowListener(clearAWTMenusOnNewtFocus);
        newtChild.setFocusAction(null);
        newtChild.setDefaultCloseOperation(newtChildCloseOp);
        setFocusable(false);
      }
    }
  }
  









  public final boolean isAWTEventPassThrough()
  {
    return !isOnscreen;
  }
  
  private final void attachNewtChild() {
    if ((null == newtChild) || (null == jawtWindow) || (newtChildAttached)) {
      return;
    }
    if (DEBUG)
    {

      System.err.println("NewtCanvasAWT.attachNewtChild.0 @ " + currentThreadName());
      System.err.println("\twin " + newtWinHandleToHexString(newtChild) + ", EDTUtil: cur " + newtChild
        .getScreen().getDisplay().getEDTUtil() + ", comp " + this + ", visible " + 
        isVisible() + ", showing " + isShowing() + ", displayable " + isDisplayable() + ", cont " + 
        AWTMisc.getContainer(this));
    }
    
    newtChildAttached = true;
    newtChild.setFocusAction(null);
    if (DEBUG) {
      System.err.println("NewtCanvasAWT.attachNewtChild.1: newtChild: " + newtChild);
    }
    int i = getWidth();
    int j = getHeight();
    if (DEBUG) {
      System.err.println("NewtCanvasAWT.attachNewtChild.2: size " + i + "x" + j + ", isNValid " + newtChild.isNativeValid());
    }
    newtChild.setVisible(false);
    newtChild.setSize(i, j);
    float[] arrayOfFloat = newtChild.getRequestedSurfaceScale(new float[2]);
    jawtWindow.setSurfaceScale(arrayOfFloat);
    newtChild.reparentWindow(jawtWindow, -1, -1, 2);
    newtChild.addSurfaceUpdatedListener(jawtWindow);
    if ((jawtWindow.isOffscreenLayerSurfaceEnabled()) && 
      (0 != (0x2 & JAWTUtil.getOSXCALayerQuirks()))) {
      AWTEDTExecutor.singleton.invoke(false, forceRelayout);
    }
    newtChild.setVisible(true);
    configureNewtChild(true);
    newtChild.sendWindowEvent(100);
    
    if (DEBUG)
      System.err.println("NewtCanvasAWT.attachNewtChild.X: win " + newtWinHandleToHexString(newtChild) + ", EDTUtil: cur " + newtChild.getScreen().getDisplay().getEDTUtil() + ", comp " + this);
  }
  
  private final Runnable forceRelayout = new Runnable()
  {
    public void run() {
      if (NewtCanvasAWT.DEBUG) {
        System.err.println("NewtCanvasAWT.forceRelayout.0");
      }
      
      NewtCanvasAWT localNewtCanvasAWT = NewtCanvasAWT.this;
      int i = localNewtCanvasAWT.getWidth();
      int j = localNewtCanvasAWT.getHeight();
      localNewtCanvasAWT.setSize(i + 1, j + 1);
      localNewtCanvasAWT.setSize(i, j);
      if (NewtCanvasAWT.DEBUG)
        System.err.println("NewtCanvasAWT.forceRelayout.X");
    } };
  private static boolean disableBackgroundEraseInitialized;
  private static Method disableBackgroundEraseMethod;
  
  private final void detachNewtChild(Container paramContainer) { if ((null == newtChild) || (null == jawtWindow) || (!newtChildAttached)) {
      return;
    }
    if (DEBUG)
    {

      System.err.println("NewtCanvasAWT.detachNewtChild.0: win " + newtWinHandleToHexString(newtChild) + ", EDTUtil: cur " + newtChild
        .getScreen().getDisplay().getEDTUtil() + ", comp " + this + ", visible " + 
        isVisible() + ", showing " + isShowing() + ", displayable " + isDisplayable() + ", cont " + paramContainer);
    }
    

    newtChild.removeSurfaceUpdatedListener(jawtWindow);
    newtChildAttached = false;
    newtChild.setFocusAction(null);
    configureNewtChild(false);
    newtChild.setVisible(false);
    
    newtChild.reparentWindow(null, -1, -1, 0);
    
    if (DEBUG) {
      System.err.println("NewtCanvasAWT.detachNewtChild.X: win " + newtWinHandleToHexString(newtChild) + ", EDTUtil: cur " + newtChild.getScreen().getDisplay().getEDTUtil() + ", comp " + this);
    }
  }
  






  private void disableBackgroundErase()
  {
    if (!disableBackgroundEraseInitialized) {
      try {
        AccessController.doPrivileged(new PrivilegedAction()
        {
          public Object run() {
            try {
              Class localClass = getToolkit().getClass();
              while ((localClass != null) && (NewtCanvasAWT.disableBackgroundEraseMethod == null)) {
                try {
                  NewtCanvasAWT.access$2002(localClass
                    .getDeclaredMethod("disableBackgroundErase", new Class[] { Canvas.class }));
                  
                  NewtCanvasAWT.disableBackgroundEraseMethod.setAccessible(true);
                } catch (Exception localException2) {
                  localClass = localClass.getSuperclass();
                }
              }
            }
            catch (Exception localException1) {}
            return null;
          }
        });
      }
      catch (Exception localException1) {}
      disableBackgroundEraseInitialized = true;
      if (DEBUG) {
        System.err.println("NewtCanvasAWT: TK disableBackgroundErase method found: " + (null != disableBackgroundEraseMethod));
      }
    }
    
    if (disableBackgroundEraseMethod != null) {
      Object localObject = null;
      try {
        disableBackgroundEraseMethod.invoke(getToolkit(), new Object[] { this });
      } catch (Exception localException2) {
        localObject = localException2;
      }
      if (DEBUG)
        System.err.println("NewtCanvasAWT: TK disableBackgroundErase error: " + localObject);
    }
  }
  
  protected static String currentThreadName() {
    return "[" + Thread.currentThread().getName() + ", isAWT-EDT " + EventQueue.isDispatchThread() + "]";
  }
  
  static String newtWinHandleToHexString(Window paramWindow) { return null != paramWindow ? toHexString(paramWindow.getWindowHandle()) : "nil"; }
  
  static String toHexString(long paramLong) {
    return "0x" + Long.toHexString(paramLong);
  }
}
