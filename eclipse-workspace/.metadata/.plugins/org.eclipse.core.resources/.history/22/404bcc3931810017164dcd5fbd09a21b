package com.jogamp.common.jvm;

import com.jogamp.common.net.Uri;
import com.jogamp.common.net.Uri.Encoded;
import com.jogamp.common.os.NativeLibrary;
import com.jogamp.common.util.JarUtil;
import com.jogamp.common.util.PropertyAccess;
import com.jogamp.common.util.cache.TempJarCache;
import java.io.IOException;
import java.io.PrintStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URISyntaxException;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import jogamp.common.Debug;
import jogamp.common.os.PlatformPropsImpl;






























































public class JNILibLoaderBase
{
  public static final boolean DEBUG;
  protected static final boolean PERF;
  private static final Object perfSync;
  private static long perfTotal;
  private static long perfCount;
  private static final HashSet<String> loaded;
  private static LoaderAction loaderAction;
  private static final String nativeJarTagPackage = "jogamp.nativetag";
  private static final Method customLoadLibraryMethod;
  
  private static class DefaultAction
    implements JNILibLoaderBase.LoaderAction
  {
    private DefaultAction() {}
    
    public boolean loadLibrary(String paramString, boolean paramBoolean, ClassLoader paramClassLoader)
    {
      boolean bool = true;
      if (!JNILibLoaderBase.isLoaded(paramString)) {
        try {
          JNILibLoaderBase.loadLibraryInternal(paramString, paramClassLoader);
          JNILibLoaderBase.addLoaded(paramString);
          if (JNILibLoaderBase.DEBUG) {
            System.err.println("JNILibLoaderBase: loaded " + paramString);
          }
        } catch (UnsatisfiedLinkError localUnsatisfiedLinkError) {
          bool = false;
          if (JNILibLoaderBase.DEBUG) {
            localUnsatisfiedLinkError.printStackTrace();
          }
          if ((!paramBoolean) && (localUnsatisfiedLinkError.getMessage().indexOf("already loaded") < 0)) {
            throw localUnsatisfiedLinkError;
          }
        }
      }
      return bool;
    }
    
    public void loadLibrary(String paramString, String[] paramArrayOfString, boolean paramBoolean, ClassLoader paramClassLoader)
    {
      if (!JNILibLoaderBase.isLoaded(paramString)) {
        if (null != paramArrayOfString) {
          for (int i = 0; i < paramArrayOfString.length; i++) {
            loadLibrary(paramArrayOfString[i], paramBoolean, paramClassLoader);
          }
        }
        loadLibrary(paramString, false, paramClassLoader);
      }
    }
  }
  


  public static boolean isLoaded(String paramString)
  {
    return loaded.contains(paramString);
  }
  
  public static void addLoaded(String paramString) {
    loaded.add(paramString);
    if (DEBUG) {
      System.err.println("JNILibLoaderBase: Loaded Native Library: " + paramString);
    }
  }
  
  public static void disableLoading() {
    setLoadingAction(null);
  }
  
  public static void enableLoading() {
    setLoadingAction(new DefaultAction(null));
  }
  
  public static synchronized void setLoadingAction(LoaderAction paramLoaderAction) {
    loaderAction = paramLoaderAction;
  }
  














  private static final boolean addNativeJarLibsImpl(Class<?> paramClass, Uri paramUri, Uri.Encoded paramEncoded1, Uri.Encoded paramEncoded2)
    throws IOException, SecurityException, URISyntaxException
  {
    if (DEBUG) {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("JNILibLoaderBase: addNativeJarLibsImpl(").append(PlatformPropsImpl.NEWLINE);
      localStringBuilder.append("  classFromJavaJar  = ").append(paramClass).append(PlatformPropsImpl.NEWLINE);
      localStringBuilder.append("  classJarURI       = ").append(paramUri).append(PlatformPropsImpl.NEWLINE);
      localStringBuilder.append("  jarBasename       = ").append(paramEncoded1).append(PlatformPropsImpl.NEWLINE);
      localStringBuilder.append("  os.and.arch       = ").append(PlatformPropsImpl.os_and_arch).append(PlatformPropsImpl.NEWLINE);
      localStringBuilder.append("  nativeJarBasename = ").append(paramEncoded2).append(PlatformPropsImpl.NEWLINE);
      localStringBuilder.append(")");
      System.err.println(localStringBuilder.toString());
    }
    long l1 = PERF ? System.currentTimeMillis() : 0L;
    
    boolean bool = false;
    
    Uri localUri1 = paramUri.getContainedUri();
    if (null == localUri1) {
      throw new IllegalArgumentException("JarSubURI is null of: " + paramUri);
    }
    
    Uri localUri2 = localUri1.getDirectory();
    
    if (DEBUG) {
      System.err.printf("JNILibLoaderBase: addNativeJarLibsImpl: initial: %s -> %s%n", new Object[] { localUri1, localUri2 });
    }
    
    String str1 = String.format("natives/%s/", new Object[] { PlatformPropsImpl.os_and_arch });
    if (DEBUG) {
      System.err.printf("JNILibLoaderBase: addNativeJarLibsImpl: nativeLibraryPath: %s%n", new Object[] { str1 });
    }
    


    Object localObject1 = JarUtil.getJarFileUri(localUri2.getEncoded().concat(paramEncoded2));
    
    if (DEBUG) {
      System.err.printf("JNILibLoaderBase: addNativeJarLibsImpl: module: %s -> %s%n", new Object[] { paramEncoded2, localObject1 });
    }
    try
    {
      bool = TempJarCache.addNativeLibs(paramClass, (Uri)localObject1, str1);
    } catch (Exception localException1) {
      if (DEBUG) {
        System.err.printf("JNILibLoaderBase: addNativeJarLibsImpl: Caught %s%n", new Object[] { localException1.getMessage() });
        localException1.printStackTrace();
      }
    }
    
    if (!bool) {
      localObject1 = paramClass.getClassLoader();
      


      Object localObject2 = ((ClassLoader)localObject1).getResource(str1);
      Object localObject3; if (null != localObject2) {
        localObject3 = JarUtil.getJarFileUri(localUri2.getEncoded().concat(paramEncoded1));
        try {
          if (TempJarCache.addNativeLibs(paramClass, (Uri)localObject3, str1)) {
            bool = true;
            if (DEBUG) {
              System.err.printf("JNILibLoaderBase: addNativeJarLibsImpl: fat: %s -> %s%n", new Object[] { paramEncoded1, localObject3 });
            }
          }
        } catch (Exception localException2) {
          if (DEBUG) {
            System.err.printf("JNILibLoaderBase: addNativeJarLibsImpl: Caught %s%n", new Object[] { localException2.getMessage() });
            localException2.printStackTrace();
          }
        }
      }
      
      if (!bool)
      {




        localObject3 = paramClass.getPackage().getName();
        int i = ((String)localObject3).lastIndexOf('.');
        if (0 <= i) {
          localObject2 = ((String)localObject3).substring(i + 1);
        } else {
          localObject2 = localObject3;
        }
        
        localObject3 = PlatformPropsImpl.os_and_arch.replace('-', '.');
        String str2 = "jogamp.nativetag." + (String)localObject2 + "." + (String)localObject3 + ".TAG";
        try {
          if (DEBUG) {
            System.err.printf("JNILibLoaderBase: addNativeJarLibsImpl: ClassLoader/TAG: Locating module %s, os.and.arch %s: %s%n", new Object[] { localObject2, localObject3, str2 });
          }
          
          Uri localUri3 = JarUtil.getJarUri(str2, (ClassLoader)localObject1);
          if (DEBUG) {
            System.err.printf("JNILibLoaderBase: addNativeJarLibsImpl: ClassLoader/TAG: %s -> %s%n", new Object[] { str2, localUri3 });
          }
          bool = TempJarCache.addNativeLibs(paramClass, localUri3, str1);
        } catch (Exception localException3) {
          if (DEBUG) {
            System.err.printf("JNILibLoaderBase: addNativeJarLibsImpl: Caught %s%n", new Object[] { localException3.getMessage() });
            localException3.printStackTrace();
          }
        }
      }
    }
    
    if ((DEBUG) || (PERF)) {
      long l2 = System.currentTimeMillis() - l1;
      long l4;
      long l3; synchronized (perfSync) {
        l4 = perfCount + 1L;
        l3 = perfTotal + l2;
        perfTotal = l3;
        perfCount = l4;
      }
      double d = l3 / l4;
      System.err.printf("JNILibLoaderBase: addNativeJarLibsImpl.X: %s / %s -> ok: %b; duration: now %d ms, total %d ms (count %d, avrg %.3f ms)%n", new Object[] { paramEncoded1, paramEncoded2, 
        Boolean.valueOf(bool), Long.valueOf(l2), Long.valueOf(l3), Long.valueOf(l4), Double.valueOf(d) });
    }
    return bool;
  }
  



















  public static final boolean addNativeJarLibsJoglCfg(Class<?>[] paramArrayOfClass)
  {
    return addNativeJarLibs(paramArrayOfClass, "-all");
  }
  





































































  public static boolean addNativeJarLibs(Class<?>[] paramArrayOfClass, String paramString)
  {
    if (DEBUG) {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("JNILibLoaderBase: addNativeJarLibs(").append(PlatformPropsImpl.NEWLINE);
      localStringBuilder.append("  classesFromJavaJars   = ").append(Arrays.asList(paramArrayOfClass)).append(PlatformPropsImpl.NEWLINE);
      localStringBuilder.append("  singleJarMarker       = ").append(paramString).append(PlatformPropsImpl.NEWLINE);
      localStringBuilder.append(")");
      System.err.println(localStringBuilder.toString());
    }
    
    boolean bool = false;
    if (TempJarCache.isInitialized()) {
      bool = addNativeJarLibsWithTempJarCache(paramArrayOfClass, paramString);
    } else if (DEBUG) {
      System.err.println("JNILibLoaderBase: addNativeJarLibs0: disabled due to uninitialized TempJarCache");
    }
    return bool;
  }
  
  private static boolean addNativeJarLibsWithTempJarCache(Class<?>[] paramArrayOfClass, String paramString)
  {
    int i = 0;
    boolean bool;
    try { int j = 0;
      bool = true;
      
      for (int k = 0; k < paramArrayOfClass.length; k++) {
        Class<?> localClass = paramArrayOfClass[k];
        if (localClass != null)
        {


          ClassLoader localClassLoader = localClass.getClassLoader();
          Uri localUri = JarUtil.getJarUri(localClass.getName(), localClassLoader);
          Uri.Encoded localEncoded1 = JarUtil.getJarBasename(localUri);
          
          if (localEncoded1 != null)
          {


            Uri.Encoded localEncoded2 = localEncoded1.substring(0, localEncoded1.indexOf(".jar"));
            
            if (DEBUG) {
              System.err.printf("JNILibLoaderBase: jarBasename: %s%n", new Object[] { localEncoded2 });
            }
            





            if ((paramString != null) && 
              (localEncoded2.indexOf(paramString) >= 0)) {
              j = 1;
            }
            


            Uri.Encoded localEncoded3 = Uri.Encoded.cast(String.format("%s-natives-%s.jar", new Object[] { localEncoded2.get(), PlatformPropsImpl.os_and_arch }));
            
            bool = addNativeJarLibsImpl(localClass, localUri, localEncoded1, localEncoded3);
            if (bool) {
              i++;
            }
            if ((DEBUG) && (j != 0))
              System.err.printf("JNILibLoaderBase: addNativeJarLibs0: done: %s%n", new Object[] { localEncoded2 });
          }
        }
      }
    } catch (Exception localException) { System.err.printf("JNILibLoaderBase: Caught %s: %s%n", new Object[] { localException.getClass().getSimpleName(), localException.getMessage() });
      if (DEBUG) {
        localException.printStackTrace();
      }
      bool = false;
    }
    if (DEBUG) {
      System.err.printf("JNILibLoaderBase: addNativeJarLibsWhenInitialized: count %d, ok %b%n", new Object[] { Integer.valueOf(i), Boolean.valueOf(bool) });
    }
    return bool;
  }
  







  protected static synchronized boolean loadLibrary(String paramString, boolean paramBoolean, ClassLoader paramClassLoader)
  {
    if (loaderAction != null) {
      return loaderAction.loadLibrary(paramString, paramBoolean, paramClassLoader);
    }
    return false;
  }
  








  protected static synchronized void loadLibrary(String paramString, String[] paramArrayOfString, boolean paramBoolean, ClassLoader paramClassLoader)
  {
    if (loaderAction != null) {
      loaderAction.loadLibrary(paramString, paramArrayOfString, paramBoolean, paramClassLoader);
    }
  }
  
  static
  {
    Debug.initSingleton();
    DEBUG = Debug.debug("JNILibLoader");
    PERF = (DEBUG) || (PropertyAccess.isPropertyDefined("jogamp.debug.JNILibLoader.Perf", true));
    

    perfSync = new Object();
    perfTotal = 0L;
    perfCount = 0L;
    




























































    loaded = new HashSet();
    loaderAction = new DefaultAction(null);
    






















































































































































































































































































































































































    Method localMethod = (Method)AccessController.doPrivileged(new PrivilegedAction()
    {
      public Method run()
      {
        boolean bool = PropertyAccess.getBooleanProperty("sun.jnlp.applet.launcher", true);
        
        Class localClass = null;
        Method localMethod = null;
        
        if (bool) {
          try {
            localClass = Class.forName("org.jdesktop.applet.util.JNLPAppletLauncher");
          }
          catch (ClassNotFoundException localClassNotFoundException1)
          {
            System.err.println("JNILibLoaderBase: <org.jdesktop.applet.util.JNLPAppletLauncher> not found, despite enabled property <sun.jnlp.applet.launcher>, JNLPAppletLauncher was probably used before");
            System.setProperty("sun.jnlp.applet.launcher", Boolean.FALSE.toString());
          } catch (LinkageError localLinkageError) {
            throw localLinkageError;
          }
          if (null != localClass) {
            try {
              localMethod = localClass.getDeclaredMethod("loadLibrary", new Class[] { String.class });
            } catch (NoSuchMethodException localNoSuchMethodException1) {
              if (JNILibLoaderBase.DEBUG) {
                localNoSuchMethodException1.printStackTrace();
              }
              localClass = null;
            }
          }
        }
        if (null == localClass) {
          String str = PropertyAccess.getProperty("jnlp.launcher.class", false);
          if (null != str) {
            try {
              localClass = Class.forName(str);
              localMethod = localClass.getDeclaredMethod("loadLibrary", new Class[] { String.class });
            } catch (ClassNotFoundException localClassNotFoundException2) {
              if (JNILibLoaderBase.DEBUG) {
                localClassNotFoundException2.printStackTrace();
              }
            } catch (NoSuchMethodException localNoSuchMethodException2) {
              if (JNILibLoaderBase.DEBUG) {
                localNoSuchMethodException2.printStackTrace();
              }
              localClass = null;
            }
          }
        }
        return localMethod;
      } });
    customLoadLibraryMethod = localMethod;
  }
  
  private static void loadLibraryInternal(String paramString, ClassLoader paramClassLoader)
  {
    int i = 0;
    if ((null != customLoadLibraryMethod) && (!paramString.equals("jawt")))
    {
      if (DEBUG) {
        System.err.println("JNILibLoaderBase: customLoad(" + paramString + ") - mode 1");
      }
      try {
        customLoadLibraryMethod.invoke(null, new Object[] { paramString });
        i = 1;
      } catch (Exception localException) {
        Object localObject = localException;
        if ((localObject instanceof InvocationTargetException)) {
          localObject = ((InvocationTargetException)localObject).getTargetException();
        }
        if ((localObject instanceof Error)) {
          throw ((Error)localObject);
        }
        if ((localObject instanceof RuntimeException)) {
          throw ((RuntimeException)localObject);
        }
        
        throw ((UnsatisfiedLinkError)new UnsatisfiedLinkError("can not load library " + paramString).initCause(localException));
      }
    }
    else {
      String str1 = NativeLibrary.findLibrary(paramString, paramClassLoader);
      if (DEBUG) {
        System.err.println("JNILibLoaderBase: loadLibraryInternal(" + paramString + "), TempJarCache: " + str1);
      }
      if (null != str1) {
        if (DEBUG) {
          System.err.println("JNILibLoaderBase: System.load(" + str1 + ") - mode 2");
        }
        System.load(str1);
        i = 2;
      } else {
        if (DEBUG)
          System.err.println("JNILibLoaderBase: System.loadLibrary(" + paramString + ") - mode 3");
        Iterator localIterator;
        try {
          System.loadLibrary(paramString);
          i = 3;
        } catch (UnsatisfiedLinkError localUnsatisfiedLinkError1) {
          if (DEBUG) {
            System.err.println("ERROR (retry w/ enumLibPath) - " + localUnsatisfiedLinkError1.getMessage());
          }
          List localList = NativeLibrary.enumerateLibraryPaths(paramString, paramString, paramString, paramClassLoader);
          
          localIterator = localList.iterator(); } while ((0 == i) && (localIterator.hasNext())) {
          String str2 = (String)localIterator.next();
          if (DEBUG) {
            System.err.println("JNILibLoaderBase: System.load(" + str2 + ") - mode 4");
          }
          try {
            System.load(str2);
            i = 4;
          } catch (UnsatisfiedLinkError localUnsatisfiedLinkError2) {
            if (DEBUG) {
              System.err.println("n/a - " + localUnsatisfiedLinkError2.getMessage());
            }
            if (!localIterator.hasNext()) {
              throw localUnsatisfiedLinkError2;
            }
          }
        }
      }
    }
    
    if (DEBUG) {
      System.err.println("JNILibLoaderBase: loadLibraryInternal(" + paramString + "): OK - mode " + i);
    }
  }
  
  public JNILibLoaderBase() {}
  
  public static abstract interface LoaderAction
  {
    public abstract boolean loadLibrary(String paramString, boolean paramBoolean, ClassLoader paramClassLoader);
    
    public abstract void loadLibrary(String paramString, String[] paramArrayOfString, boolean paramBoolean, ClassLoader paramClassLoader);
  }
}
