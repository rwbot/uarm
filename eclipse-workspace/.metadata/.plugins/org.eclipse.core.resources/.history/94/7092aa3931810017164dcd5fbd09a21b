package processing.awt;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Label;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowStateListener;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.io.PrintStream;
import java.lang.management.ManagementFactory;
import java.lang.management.RuntimeMXBean;
import java.lang.reflect.Method;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import processing.core.PApplet;
import processing.core.PGraphics;
import processing.core.PImage;
import processing.core.PSurfaceNone;
import processing.core.PSurfaceNone.AnimationThread;

























public class PSurfaceAWT
  extends PSurfaceNone
{
  GraphicsDevice displayDevice;
  Frame frame;
  Rectangle screenRect;
  Insets currentInsets = new Insets(0, 0, 0, 0);
  

  Canvas canvas;
  

  int sketchWidth;
  

  int sketchHeight;
  
  List<Image> iconImages;
  

  public PSurfaceAWT(PGraphics graphics)
  {
    super(graphics);
    






















    canvas = new SmoothCanvas();
    




    canvas.setFocusTraversalKeysEnabled(false);
    
    canvas.addComponentListener(new ComponentAdapter()
    {
      public void componentResized(ComponentEvent e) {
        if (!sketch.isLooping())
        {

          Dimension canvasSize = canvas.getSize();
          if ((width != sketch.sketchWidth()) || 
            (height != sketch.sketchHeight())) {
            sketch.redraw();
          }
        }
      }
    });
    addListeners();
  }
  






































  public class SmoothCanvas
    extends Canvas
  {
    private Dimension oldSize = new Dimension(0, 0);
    private Dimension newSize = new Dimension(0, 0);
    
    public SmoothCanvas() {}
    
    public Frame getFrame() {
      return frame;
    }
    

    public Dimension getPreferredSize()
    {
      return new Dimension(sketchWidth, sketchHeight);
    }
    

    public Dimension getMinimumSize()
    {
      return getPreferredSize();
    }
    


    public Dimension getMaximumSize()
    {
      return frame.isResizable() ? super.getMaximumSize() : getPreferredSize();
    }
    

    public void validate()
    {
      super.validate();
      newSize.width = getWidth();
      newSize.height = getHeight();
      



      if (!oldSize.equals(newSize))
      {
        oldSize = newSize;
        sketch.setSize(newSize.width, newSize.height);
        
        render();
      }
    }
    





    public void update(Graphics g)
    {
      paint(g);
    }
    



    public void paint(Graphics screen)
    {
      render();
    }
  }
  





























  protected synchronized void render()
  {
    if ((canvas.isDisplayable()) && 
      (graphics.image != null)) {
      if (canvas.getBufferStrategy() == null) {
        canvas.createBufferStrategy(2);
      }
      BufferStrategy strategy = canvas.getBufferStrategy();
      if (strategy != null)
      {
        do
        {

          do
          {
            Graphics2D draw = (Graphics2D)strategy.getDrawGraphics();
            
            draw.drawImage(graphics.image, 0, 0, sketchWidth, sketchHeight, null);
            draw.dispose();
          } while (strategy.contentsRestored());
          

          strategy.show();

        }
        while (strategy.contentsLost());
      }
    }
  }
  















































  public void initOffscreen(PApplet sketch)
  {
    this.sketch = sketch;
  }
  
























  public void initFrame(final PApplet sketch)
  {
    this.sketch = sketch;
    
    GraphicsEnvironment environment = 
      GraphicsEnvironment.getLocalGraphicsEnvironment();
    
    int displayNum = sketch.sketchDisplay();
    
    if (displayNum > 0) {
      GraphicsDevice[] devices = environment.getScreenDevices();
      if (displayNum <= devices.length) {
        displayDevice = devices[(displayNum - 1)];
      } else {
        System.err.format("Display %d does not exist, using the default display instead.%n", new Object[] {
          Integer.valueOf(displayNum) });
        for (int i = 0; i < devices.length; i++) {
          System.err.format("Display %d is %s%n", new Object[] { Integer.valueOf(i + 1), devices[i] });
        }
      }
    }
    if (displayDevice == null) {
      displayDevice = environment.getDefaultScreenDevice();
    }
    



    boolean spanDisplays = sketch.sketchDisplay() == 0;
    screenRect = (spanDisplays ? getDisplaySpan() : 
      displayDevice.getDefaultConfiguration().getBounds());
    




    displayWidth = screenRect.width;
    displayHeight = screenRect.height;
    
    sketchWidth = sketch.sketchWidth();
    sketchHeight = sketch.sketchHeight();
    
    boolean fullScreen = sketch.sketchFullScreen();
    













    if ((fullScreen) || (spanDisplays)) {
      sketchWidth = screenRect.width;
      sketchHeight = screenRect.height;
    }
    




    frame = new JFrame(displayDevice.getDefaultConfiguration());
    










    Color windowColor = new Color(sketch.sketchWindowColor(), false);
    if ((frame instanceof JFrame)) {
      ((JFrame)frame).getContentPane().setBackground(windowColor);
    } else {
      frame.setBackground(windowColor);
    }
    

    setProcessingIcon(frame);
    








    frame.add(canvas);
    setSize(sketchWidth, sketchHeight);
    
























    frame.setLayout(null);
    









    if (fullScreen) {
      frame.invalidate();
    }
    







    frame.setResizable(false);
    
    frame.addWindowListener(new WindowAdapter()
    {
      public void windowClosing(WindowEvent e) {
        sketch.exit();
      }
    });
  }
  



  public Object getNative()
  {
    return canvas;
  }
  







  public void setTitle(String title)
  {
    frame.setTitle(title);
    

    if ((cursorVisible) && 
      (PApplet.platform == 2) && 
      (cursorType != 0)) {
      hideCursor();
      showCursor();
    }
  }
  




  public void setResizable(boolean resizable)
  {
    if (frame != null) {
      frame.setResizable(resizable);
    }
  }
  

  public void setIcon(PImage image)
  {
    Image awtImage = (Image)image.getNative();
    
    if (PApplet.platform != 2) {
      frame.setIconImage(awtImage);
    }
    else {
      try
      {
        Class<?> thinkDifferent = 
          Thread.currentThread().getContextClassLoader().loadClass("processing.core.ThinkDifferent");
        Method method = 
          thinkDifferent.getMethod("setIconImage", new Class[] { Image.class });
        method.invoke(null, new Object[] { awtImage });
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
  }
  

  public void setAlwaysOnTop(boolean always)
  {
    frame.setAlwaysOnTop(always);
  }
  

  public void setLocation(int x, int y)
  {
    frame.setLocation(x, y);
  }
  




  protected void setProcessingIcon(Frame frame)
  {
    if (PApplet.platform != 2)
    {
      try
      {
        if (iconImages == null) {
          iconImages = new ArrayList();
          int[] sizes = { 16, 32, 48, 64, 128, 256, 512 };
          
          for (int sz : sizes)
          {
            URL url = PApplet.class.getResource("/icon/icon-" + sz + ".png");
            Image image = Toolkit.getDefaultToolkit().getImage(url);
            iconImages.add(image);
          }
        }
        
        frame.setIconImages(iconImages);

      }
      catch (Exception localException1) {}
    }
    else if (!dockIconSpecified())
    {

      URL url = PApplet.class.getResource("/icon/icon-512.png");
      

      try
      {
        Class<?> thinkDifferent = 
          Thread.currentThread().getContextClassLoader().loadClass("processing.core.ThinkDifferent");
        Method method = 
          thinkDifferent.getMethod("setIconImage", new Class[] { Image.class });
        method.invoke(null, new Object[] { Toolkit.getDefaultToolkit().getImage(url) });
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
  }
  






  private boolean dockIconSpecified()
  {
    List<String> jvmArgs = 
      ManagementFactory.getRuntimeMXBean().getInputArguments();
    for (String arg : jvmArgs) {
      if (arg.startsWith("-Xdock:icon")) {
        return true;
      }
    }
    return false;
  }
  

  public void setVisible(boolean visible)
  {
    frame.setVisible(visible);
    

    if (canvas != null)
    {
      canvas.requestFocus();
    }
  }
  



















  public void placePresent(int stopColor)
  {
    setFullFrame();
    


    canvas.setBounds((screenRect.width - sketchWidth) / 2, 
      (screenRect.height - sketchHeight) / 2, 
      sketchWidth, sketchHeight);
    





    if (stopColor != 0) {
      Label label = new Label("stop");
      label.setForeground(new Color(stopColor, false));
      label.addMouseListener(new MouseAdapter()
      {
        public void mousePressed(java.awt.event.MouseEvent e) {
          sketch.exit();
        }
      });
      frame.add(label);
      
      Dimension labelSize = label.getPreferredSize();
      

      labelSize = new Dimension(100, height);
      label.setSize(labelSize);
      label.setLocation(20, screenRect.height - height - 20);
    }
  }
  





















































  private void setCanvasSize()
  {
    int contentW = Math.max(sketchWidth, 128);
    int contentH = Math.max(sketchHeight, 128);
    
    canvas.setBounds((contentW - sketchWidth) / 2, 
      (contentH - sketchHeight) / 2, 
      sketchWidth, sketchHeight);
  }
  


  private Dimension setFrameSize()
  {
    frame.addNotify();
    


    currentInsets = frame.getInsets();
    int windowW = Math.max(sketchWidth, 128) + 
      currentInsets.left + currentInsets.right;
    int windowH = Math.max(sketchHeight, 128) + 
      currentInsets.top + currentInsets.bottom;
    frame.setSize(windowW, windowH);
    return new Dimension(windowW, windowH);
  }
  


  private void setFrameCentered()
  {
    frame.setLocation(screenRect.x + (screenRect.width - sketchWidth) / 2, 
      screenRect.y + (screenRect.height - sketchHeight) / 2);
  }
  




  private void setFullFrame()
  {
    PApplet.hideMenuBar();
    






    frame.removeNotify();
    frame.setUndecorated(true);
    frame.addNotify();
    

    frame.setBounds(screenRect);
  }
  




  public void placeWindow(int[] location, int[] editorLocation)
  {
    Dimension window = setFrameSize();
    
    int contentW = Math.max(sketchWidth, 128);
    int contentH = Math.max(sketchHeight, 128);
    
    if (sketch.sketchFullScreen()) {
      setFullFrame();
    }
    

    if (!sketch.sketchFullScreen()) {
      if (location != null)
      {

        frame.setLocation(location[0], location[1]);
      }
      else if (editorLocation != null) {
        int locationX = editorLocation[0] - 20;
        int locationY = editorLocation[1];
        
        if (locationX - width > 10)
        {
          frame.setLocation(locationX - width, locationY);


        }
        else
        {


          locationX = (sketch.displayWidth - width) / 2;
          locationY = (sketch.displayHeight - height) / 2;
          








          frame.setLocation(locationX, locationY);
        }
      } else {
        setFrameCentered();
      }
      Point frameLoc = frame.getLocation();
      if (y < 0)
      {

        frame.setLocation(x, 30);
      }
    }
    
    canvas.setBounds((contentW - sketchWidth) / 2, 
      (contentH - sketchHeight) / 2, 
      sketchWidth, sketchHeight);
    

    setupFrameResizeListener();
  }
  
























  public void setSize(int wide, int high)
  {
    if ((wide == sketch.width) && (high == sketch.height) && (
      (frame == null) || (currentInsets.equals(frame.getInsets()))))
    {


      return;
    }
    
    sketchWidth = wide;
    sketchHeight = high;
    


    if (frame != null) {
      setFrameSize();
    }
    setCanvasSize();
    






    sketch.setSize(wide, high);
    



    graphics.setSize(wide, high);
  }
  































































  static Rectangle getDisplaySpan()
  {
    Rectangle bounds = new Rectangle();
    GraphicsEnvironment environment = 
      GraphicsEnvironment.getLocalGraphicsEnvironment();
    for (GraphicsDevice device : environment.getScreenDevices()) {
      for (GraphicsConfiguration config : device.getConfigurations()) {
        Rectangle2D.union(bounds, config.getBounds(), bounds);
      }
    }
    return bounds;
  }
  

























  public void setupExternalMessages()
  {
    frame.addComponentListener(new ComponentAdapter()
    {
      public void componentMoved(ComponentEvent e) {
        Point where = ((Frame)e.getSource()).getLocation();
        sketch.frameMoved(x, y);
      }
    });
  }
  




  private void setupFrameResizeListener()
  {
    frame.addWindowStateListener(new WindowStateListener()
    {


      public void windowStateChanged(WindowEvent e)
      {


        if (6 == e.getNewState())
        {









          frame.addNotify();
        }
        
      }
    });
    frame.addComponentListener(new ComponentAdapter()
    {


      public void componentResized(ComponentEvent e)
      {

        if (frame.isResizable())
        {


          Frame farm = (Frame)e.getComponent();
          if (farm.isVisible()) {
            Dimension windowSize = farm.getSize();
            int x = farm.getX() + currentInsets.left;
            int y = farm.getY() + currentInsets.top;
            





            setSize(width - currentInsets.left - currentInsets.right, 
              height - currentInsets.top - currentInsets.bottom);
            

            setLocation(x - currentInsets.left, y - currentInsets.top);
          }
        }
      }
    });
  }
  




































































  protected void nativeMouseEvent(java.awt.event.MouseEvent nativeEvent)
  {
    int peCount = nativeEvent.getClickCount();
    
    int peAction = 0;
    switch (nativeEvent.getID()) {
    case 501: 
      peAction = 1;
      break;
    case 502: 
      peAction = 2;
      break;
    case 500: 
      peAction = 3;
      break;
    case 506: 
      peAction = 4;
      break;
    case 503: 
      peAction = 5;
      break;
    case 504: 
      peAction = 6;
      break;
    case 505: 
      peAction = 7;
      break;
    
    case 507: 
      peAction = 8;
      








      peCount = ((MouseWheelEvent)nativeEvent).getWheelRotation();
    }
    
    



    int modifiers = nativeEvent.getModifiers();
    
    int peModifiers = modifiers & 
      0xF;
    









    int peButton = 0;
    









    if ((modifiers & 0x10) != 0) {
      peButton = 37;
    } else if ((modifiers & 0x8) != 0) {
      peButton = 3;
    } else if ((modifiers & 0x4) != 0) {
      peButton = 39;
    }
    



    if (PApplet.platform == 2)
    {
      if ((modifiers & 0x2) != 0) {
        peButton = 39;
      }
    }
    
    sketch.postEvent(new processing.event.MouseEvent(nativeEvent, nativeEvent.getWhen(), 
      peAction, peModifiers, 
      nativeEvent.getX(), nativeEvent.getY(), 
      peButton, 
      peCount));
  }
  
  protected void nativeKeyEvent(java.awt.event.KeyEvent event)
  {
    int peAction = 0;
    switch (event.getID()) {
    case 401: 
      peAction = 1;
      break;
    case 402: 
      peAction = 2;
      break;
    case 400: 
      peAction = 3;
    }
    
    





    int peModifiers = event.getModifiers() & 
      0xF;
    



    sketch.postEvent(new processing.event.KeyEvent(event, event.getWhen(), 
      peAction, peModifiers, 
      event.getKeyChar(), event.getKeyCode()));
  }
  


  protected void addListeners()
  {
    canvas.addMouseListener(new MouseListener()
    {
      public void mousePressed(java.awt.event.MouseEvent e) {
        nativeMouseEvent(e);
      }
      
      public void mouseReleased(java.awt.event.MouseEvent e) {
        nativeMouseEvent(e);
      }
      
      public void mouseClicked(java.awt.event.MouseEvent e) {
        nativeMouseEvent(e);
      }
      
      public void mouseEntered(java.awt.event.MouseEvent e) {
        nativeMouseEvent(e);
      }
      
      public void mouseExited(java.awt.event.MouseEvent e) {
        nativeMouseEvent(e);
      }
      
    });
    canvas.addMouseMotionListener(new MouseMotionListener()
    {
      public void mouseDragged(java.awt.event.MouseEvent e) {
        nativeMouseEvent(e);
      }
      
      public void mouseMoved(java.awt.event.MouseEvent e) {
        nativeMouseEvent(e);
      }
      
    });
    canvas.addMouseWheelListener(new MouseWheelListener()
    {
      public void mouseWheelMoved(MouseWheelEvent e) {
        nativeMouseEvent(e);
      }
      
    });
    canvas.addKeyListener(new KeyListener()
    {
      public void keyPressed(java.awt.event.KeyEvent e) {
        nativeKeyEvent(e);
      }
      
      public void keyReleased(java.awt.event.KeyEvent e)
      {
        nativeKeyEvent(e);
      }
      
      public void keyTyped(java.awt.event.KeyEvent e)
      {
        nativeKeyEvent(e);
      }
      
    });
    canvas.addFocusListener(new FocusListener()
    {
      public void focusGained(FocusEvent e) {
        sketch.focused = true;
        sketch.focusGained();
      }
      
      public void focusLost(FocusEvent e) {
        sketch.focused = false;
        sketch.focusLost();
      }
    });
  }
  



































  int cursorType = 0;
  boolean cursorVisible = true;
  

  Cursor invisibleCursor;
  

  public void setCursor(int kind)
  {
    if ((PApplet.platform == 2) && (kind == 13)) {
      kind = 12;
    }
    canvas.setCursor(Cursor.getPredefinedCursor(kind));
    cursorVisible = true;
    cursorType = kind;
  }
  






  public void setCursor(PImage img, int x, int y)
  {
    Dimension cursorSize = Toolkit.getDefaultToolkit().getBestCursorSize(width, height);
    if ((width == 0) || (height == 0)) {
      return;
    }
    
    Cursor cursor = 
      canvas.getToolkit().createCustomCursor((Image)img.getNative(), 
      new Point(x, y), 
      "custom");
    canvas.setCursor(cursor);
    cursorVisible = true;
  }
  




  public void showCursor()
  {
    if (!cursorVisible) {
      cursorVisible = true;
      canvas.setCursor(Cursor.getPredefinedCursor(cursorType));
    }
  }
  




  public void hideCursor()
  {
    if (invisibleCursor == null) {
      BufferedImage cursorImg = 
        new BufferedImage(16, 16, 2);
      
      Dimension cursorSize = Toolkit.getDefaultToolkit().getBestCursorSize(16, 16);
      if ((width == 0) || (height == 0)) {
        invisibleCursor = Cursor.getDefaultCursor();
      } else {
        invisibleCursor = 
          canvas.getToolkit().createCustomCursor(cursorImg, new Point(8, 8), "blank");
      }
    }
    canvas.setCursor(invisibleCursor);
    cursorVisible = false;
  }
  

  public Thread createThread()
  {
    new PSurfaceNone.AnimationThread(this)
    {
      public void callDraw() {
        sketch.handleDraw();
        render();
      }
    };
  }
  
  void debug(String format, Object... args)
  {
    System.out.format(format + "%n", args);
  }
}
