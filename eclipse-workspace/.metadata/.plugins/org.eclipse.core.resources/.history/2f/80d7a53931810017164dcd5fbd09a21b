package processing.data;



public abstract class Sort
  implements Runnable
{
  public Sort() {}
  


  public void run()
  {
    int c = size();
    if (c > 1) {
      sort(0, c - 1);
    }
  }
  
  protected void sort(int i, int j)
  {
    int pivotIndex = (i + j) / 2;
    swap(pivotIndex, j);
    int k = partition(i - 1, j);
    swap(k, j);
    if (k - i > 1) sort(i, k - 1);
    if (j - k > 1) sort(k + 1, j);
  }
  
  protected int partition(int left, int right)
  {
    int pivot = right;
    do {
      while (compare(++left, pivot) < 0.0F) {}
      while ((right != 0) && (compare(--right, pivot) > 0.0F)) {}
      swap(left, right);
    } while (
    


      left < right);
    swap(left, right);
    return left;
  }
  
  public abstract int size();
  
  public abstract float compare(int paramInt1, int paramInt2);
  
  public abstract void swap(int paramInt1, int paramInt2);
}
