package processing.opengl;

import java.nio.IntBuffer;
import processing.core.PApplet;
import processing.core.PConstants;










































public class FrameBuffer
  implements PConstants
{
  protected PGraphicsOpenGL pg;
  protected PGL pgl;
  protected int context;
  public int glFbo;
  public int glDepth;
  public int glStencil;
  public int glDepthStencil;
  public int glMultisample;
  public int width;
  public int height;
  private PGraphicsOpenGL.GLResourceFrameBuffer glres;
  protected int depthBits;
  protected int stencilBits;
  protected boolean packedDepthStencil;
  protected boolean multisample;
  protected int nsamples;
  protected int numColorBuffers;
  protected Texture[] colorBufferTex;
  protected boolean screenFb;
  protected boolean noDepth;
  protected IntBuffer pixelBuffer;
  
  FrameBuffer(PGraphicsOpenGL pg)
  {
    this.pg = pg;
    pgl = pgl;
    context = pgl.createEmptyContext();
  }
  


  FrameBuffer(PGraphicsOpenGL pg, int w, int h, int samples, int colorBuffers, int depthBits, int stencilBits, boolean packedDepthStencil, boolean screen)
  {
    this(pg);
    
    glFbo = 0;
    glDepth = 0;
    glStencil = 0;
    glDepthStencil = 0;
    glMultisample = 0;
    
    if (screen)
    {


      depthBits = stencilBits = samples = colorBuffers = 0;
    }
    
    width = w;
    height = h;
    
    if (1 < samples) {
      multisample = true;
      nsamples = samples;
    } else {
      multisample = false;
      nsamples = 1;
    }
    
    numColorBuffers = colorBuffers;
    colorBufferTex = new Texture[numColorBuffers];
    for (int i = 0; i < numColorBuffers; i++) {
      colorBufferTex[i] = null;
    }
    
    if ((depthBits < 1) && (stencilBits < 1)) {
      this.depthBits = 0;
      this.stencilBits = 0;
      this.packedDepthStencil = false;
    }
    else if (packedDepthStencil)
    {


      this.depthBits = 24;
      this.stencilBits = 8;
      this.packedDepthStencil = true;
    } else {
      this.depthBits = depthBits;
      this.stencilBits = stencilBits;
      this.packedDepthStencil = false;
    }
    

    screenFb = screen;
    
    allocate();
    noDepth = false;
    
    pixelBuffer = null;
  }
  
  FrameBuffer(PGraphicsOpenGL pg, int w, int h)
  {
    this(pg, w, h, 1, 1, 0, 0, false, false);
  }
  
  FrameBuffer(PGraphicsOpenGL pg, int w, int h, boolean screen)
  {
    this(pg, w, h, 1, 1, 0, 0, false, screen);
  }
  
  public void clear()
  {
    pg.pushFramebuffer();
    pg.setFramebuffer(this);
    pgl.clearDepth(1.0F);
    pgl.clearStencil(0);
    pgl.clearColor(0.0F, 0.0F, 0.0F, 0.0F);
    pgl.clear(PGL.DEPTH_BUFFER_BIT | 
      PGL.STENCIL_BUFFER_BIT | 
      PGL.COLOR_BUFFER_BIT);
    pg.popFramebuffer();
  }
  
  public void copyColor(FrameBuffer dest) {
    copy(dest, PGL.COLOR_BUFFER_BIT);
  }
  
  public void copyDepth(FrameBuffer dest) {
    copy(dest, PGL.DEPTH_BUFFER_BIT);
  }
  
  public void copyStencil(FrameBuffer dest) {
    copy(dest, PGL.STENCIL_BUFFER_BIT);
  }
  
  public void copy(FrameBuffer dest, int mask) {
    pgl.bindFramebufferImpl(PGL.READ_FRAMEBUFFER, glFbo);
    pgl.bindFramebufferImpl(PGL.DRAW_FRAMEBUFFER, glFbo);
    pgl.blitFramebuffer(0, 0, width, height, 
      0, 0, width, height, mask, PGL.NEAREST);
    pgl.bindFramebufferImpl(PGL.READ_FRAMEBUFFER, pg.getCurrentFB().glFbo);
    pgl.bindFramebufferImpl(PGL.DRAW_FRAMEBUFFER, pg.getCurrentFB().glFbo);
  }
  
  public void bind() {
    pgl.bindFramebufferImpl(PGL.FRAMEBUFFER, glFbo);
  }
  
  public void disableDepthTest() {
    noDepth = true;
  }
  
  public void finish() {
    if (noDepth)
    {
      if (pg.getHint(-2)) {
        pgl.enable(PGL.DEPTH_TEST);
      } else {
        pgl.disable(PGL.DEPTH_TEST);
      }
    }
  }
  
  public void readPixels() {
    if (pixelBuffer == null) createPixelBuffer();
    pixelBuffer.rewind();
    pgl.readPixels(0, 0, width, height, PGL.RGBA, PGL.UNSIGNED_BYTE, 
      pixelBuffer);
  }
  
  public void getPixels(int[] pixels) {
    if (pixelBuffer != null) {
      pixelBuffer.get(pixels, 0, pixels.length);
      pixelBuffer.rewind();
    }
  }
  
  public IntBuffer getPixelBuffer() {
    return pixelBuffer;
  }
  
  public boolean hasDepthBuffer() {
    return depthBits > 0;
  }
  
  public boolean hasStencilBuffer() {
    return stencilBits > 0;
  }
  
  public void setFBO(int id) {
    if (screenFb) {
      glFbo = id;
    }
  }
  




  public void setColorBuffer(Texture tex)
  {
    setColorBuffers(new Texture[] { tex }, 1);
  }
  
  public void setColorBuffers(Texture[] textures)
  {
    setColorBuffers(textures, textures.length);
  }
  
  public void setColorBuffers(Texture[] textures, int n)
  {
    if (screenFb) { return;
    }
    if (numColorBuffers != PApplet.min(n, textures.length)) {
      throw new RuntimeException("Wrong number of textures to set the color buffers.");
    }
    

    for (int i = 0; i < numColorBuffers; i++) {
      colorBufferTex[i] = textures[i];
    }
    
    pg.pushFramebuffer();
    pg.setFramebuffer(this);
    

    for (int i = 0; i < numColorBuffers; i++) {
      pgl.framebufferTexture2D(PGL.FRAMEBUFFER, PGL.COLOR_ATTACHMENT0 + i, 
        PGL.TEXTURE_2D, 0, 0);
    }
    
    for (int i = 0; i < numColorBuffers; i++) {
      pgl.framebufferTexture2D(PGL.FRAMEBUFFER, PGL.COLOR_ATTACHMENT0 + i, 
        colorBufferTex[i].glTarget, 
        colorBufferTex[i].glName, 0);
    }
    
    pgl.validateFramebuffer();
    
    pg.popFramebuffer();
  }
  
  public void swapColorBuffers()
  {
    for (int i = 0; i < numColorBuffers - 1; i++) {
      int i1 = i + 1;
      Texture tmp = colorBufferTex[i];
      colorBufferTex[i] = colorBufferTex[i1];
      colorBufferTex[i1] = tmp;
    }
    
    pg.pushFramebuffer();
    pg.setFramebuffer(this);
    for (int i = 0; i < numColorBuffers; i++) {
      pgl.framebufferTexture2D(PGL.FRAMEBUFFER, PGL.COLOR_ATTACHMENT0 + i, 
        colorBufferTex[i].glTarget, 
        colorBufferTex[i].glName, 0);
    }
    pgl.validateFramebuffer();
    
    pg.popFramebuffer();
  }
  
  public int getDefaultReadBuffer()
  {
    if (screenFb) {
      return pgl.getDefaultReadBuffer();
    }
    return PGL.COLOR_ATTACHMENT0;
  }
  

  public int getDefaultDrawBuffer()
  {
    if (screenFb) {
      return pgl.getDefaultDrawBuffer();
    }
    return PGL.COLOR_ATTACHMENT0;
  }
  






  protected void allocate()
  {
    dispose();
    
    context = pgl.getCurrentContext();
    glres = new PGraphicsOpenGL.GLResourceFrameBuffer(this);
    
    if (screenFb) {
      glFbo = 0;
    } else {
      if (multisample) {
        initColorBufferMultisample();
      }
      
      if (packedDepthStencil) {
        initPackedDepthStencilBuffer();
      } else {
        if (depthBits > 0) {
          initDepthBuffer();
        }
        if (stencilBits > 0) {
          initStencilBuffer();
        }
      }
    }
  }
  
  protected void dispose()
  {
    if (screenFb) return;
    if (glres != null) {
      glres.dispose();
      glFbo = 0;
      glDepth = 0;
      glStencil = 0;
      glMultisample = 0;
      glDepthStencil = 0;
      glres = null;
    }
  }
  
  protected boolean contextIsOutdated()
  {
    if (screenFb) { return false;
    }
    boolean outdated = !pgl.contextIsCurrent(context);
    if (outdated) {
      dispose();
      for (int i = 0; i < numColorBuffers; i++) {
        colorBufferTex[i] = null;
      }
    }
    return outdated;
  }
  
  protected void initColorBufferMultisample()
  {
    if (screenFb) { return;
    }
    pg.pushFramebuffer();
    pg.setFramebuffer(this);
    
    pgl.bindRenderbuffer(PGL.RENDERBUFFER, glMultisample);
    pgl.renderbufferStorageMultisample(PGL.RENDERBUFFER, nsamples, 
      PGL.RGBA8, width, height);
    pgl.framebufferRenderbuffer(PGL.FRAMEBUFFER, PGL.COLOR_ATTACHMENT0, 
      PGL.RENDERBUFFER, glMultisample);
    
    pg.popFramebuffer();
  }
  
  protected void initPackedDepthStencilBuffer()
  {
    if (screenFb) { return;
    }
    if ((width == 0) || (height == 0)) {
      throw new RuntimeException("PFramebuffer: size undefined.");
    }
    
    pg.pushFramebuffer();
    pg.setFramebuffer(this);
    
    pgl.bindRenderbuffer(PGL.RENDERBUFFER, glDepthStencil);
    
    if (multisample) {
      pgl.renderbufferStorageMultisample(PGL.RENDERBUFFER, nsamples, 
        PGL.DEPTH24_STENCIL8, width, height);
    } else {
      pgl.renderbufferStorage(PGL.RENDERBUFFER, PGL.DEPTH24_STENCIL8, 
        width, height);
    }
    
    pgl.framebufferRenderbuffer(PGL.FRAMEBUFFER, PGL.DEPTH_ATTACHMENT, 
      PGL.RENDERBUFFER, glDepthStencil);
    pgl.framebufferRenderbuffer(PGL.FRAMEBUFFER, PGL.STENCIL_ATTACHMENT, 
      PGL.RENDERBUFFER, glDepthStencil);
    
    pg.popFramebuffer();
  }
  
  protected void initDepthBuffer()
  {
    if (screenFb) { return;
    }
    if ((width == 0) || (height == 0)) {
      throw new RuntimeException("PFramebuffer: size undefined.");
    }
    
    pg.pushFramebuffer();
    pg.setFramebuffer(this);
    
    pgl.bindRenderbuffer(PGL.RENDERBUFFER, glDepth);
    
    int glConst = PGL.DEPTH_COMPONENT16;
    if (depthBits == 16) {
      glConst = PGL.DEPTH_COMPONENT16;
    } else if (depthBits == 24) {
      glConst = PGL.DEPTH_COMPONENT24;
    } else if (depthBits == 32) {
      glConst = PGL.DEPTH_COMPONENT32;
    }
    
    if (multisample) {
      pgl.renderbufferStorageMultisample(PGL.RENDERBUFFER, nsamples, glConst, 
        width, height);
    } else {
      pgl.renderbufferStorage(PGL.RENDERBUFFER, glConst, width, height);
    }
    
    pgl.framebufferRenderbuffer(PGL.FRAMEBUFFER, PGL.DEPTH_ATTACHMENT, 
      PGL.RENDERBUFFER, glDepth);
    
    pg.popFramebuffer();
  }
  
  protected void initStencilBuffer()
  {
    if (screenFb) { return;
    }
    if ((width == 0) || (height == 0)) {
      throw new RuntimeException("PFramebuffer: size undefined.");
    }
    
    pg.pushFramebuffer();
    pg.setFramebuffer(this);
    
    pgl.bindRenderbuffer(PGL.RENDERBUFFER, glStencil);
    
    int glConst = PGL.STENCIL_INDEX1;
    if (stencilBits == 1) {
      glConst = PGL.STENCIL_INDEX1;
    } else if (stencilBits == 4) {
      glConst = PGL.STENCIL_INDEX4;
    } else if (stencilBits == 8) {
      glConst = PGL.STENCIL_INDEX8;
    }
    if (multisample) {
      pgl.renderbufferStorageMultisample(PGL.RENDERBUFFER, nsamples, glConst, 
        width, height);
    } else {
      pgl.renderbufferStorage(PGL.RENDERBUFFER, glConst, width, height);
    }
    
    pgl.framebufferRenderbuffer(PGL.FRAMEBUFFER, PGL.STENCIL_ATTACHMENT, 
      PGL.RENDERBUFFER, glStencil);
    
    pg.popFramebuffer();
  }
  
  protected void createPixelBuffer()
  {
    pixelBuffer = IntBuffer.allocate(width * height);
    pixelBuffer.rewind();
  }
}
