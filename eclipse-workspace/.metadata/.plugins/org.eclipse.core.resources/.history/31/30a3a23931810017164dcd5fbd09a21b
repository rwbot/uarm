package processing.javafx;

import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.io.PrintStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javafx.animation.Animation;
import javafx.animation.Animation.Status;
import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.ReadOnlyBooleanProperty;
import javafx.beans.property.ReadOnlyDoubleProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.event.EventType;
import javafx.scene.Cursor;
import javafx.scene.ImageCursor;
import javafx.scene.Scene;
import javafx.scene.SceneAntialiasing;
import javafx.scene.canvas.Canvas;
import javafx.scene.image.Image;
import javafx.scene.image.PixelFormat;
import javafx.scene.image.PixelWriter;
import javafx.scene.image.WritableImage;
import javafx.scene.input.KeyCode;
import javafx.scene.input.ScrollEvent;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.stage.WindowEvent;
import javafx.util.Duration;
import processing.core.PApplet;
import processing.core.PGraphics;
import processing.core.PImage;
import processing.core.PSurface;















public class PSurfaceFX
  implements PSurface
{
  PApplet sketch;
  PGraphicsFX2D fx;
  Stage stage;
  Canvas canvas;
  final Animation animation;
  float frameRate = 60.0F;
  List<Image> iconImages;
  
  public PSurfaceFX(PGraphicsFX2D graphics) { fx = graphics;
    canvas = new ResizableCanvas();
    

    KeyFrame keyFrame = new KeyFrame(Duration.millis(1000.0D), 
      new EventHandler() {
        public void handle(ActionEvent event) {
          long startNanoTime = System.nanoTime();
          sketch.handleDraw();
          long drawNanos = System.nanoTime() - startNanoTime;
          
          if (sketch.exitCalled())
          {



            Platform.exit();
          }
          

          if (sketch.frameCount > 5)
            animation.setRate(-PApplet.min(1.0E9F / (float)drawNanos, frameRate)); } }, new KeyValue[0]);
    


    animation = new Timeline(new KeyFrame[] { keyFrame });
    animation.setCycleCount(-1);
    





    animation.setRate(-frameRate);
  }
  
  public Object getNative()
  {
    return canvas;
  }
  
  class ResizableCanvas extends Canvas
  {
    public ResizableCanvas()
    {
      widthProperty().addListener(new ChangeListener()
      {

        public void changed(ObservableValue<? extends Number> value, Number oldWidth, Number newWidth)
        {
          sketch.setSize(newWidth.intValue(), sketch.height);
          
          fx.setSize(sketch.width, sketch.height);
        }
      });
      heightProperty().addListener(new ChangeListener()
      {

        public void changed(ObservableValue<? extends Number> value, Number oldHeight, Number newHeight)
        {
          sketch.setSize(sketch.width, newHeight.intValue());
          
          fx.setSize(sketch.width, sketch.height);

        }
        

      });
      EventHandler<javafx.scene.input.MouseEvent> mouseHandler = new EventHandler() {
        public void handle(javafx.scene.input.MouseEvent e) {
          fxMouseEvent(e);
        }
        
      };
      setOnMousePressed(mouseHandler);
      setOnMouseReleased(mouseHandler);
      setOnMouseClicked(mouseHandler);
      setOnMouseEntered(mouseHandler);
      setOnMouseExited(mouseHandler);
      
      setOnMouseDragged(mouseHandler);
      setOnMouseMoved(mouseHandler);
      
      setOnScroll(new EventHandler() {
        public void handle(ScrollEvent e) {
          fxScrollEvent(e);
        }
        
      });
      EventHandler<javafx.scene.input.KeyEvent> keyHandler = new EventHandler() {
        public void handle(javafx.scene.input.KeyEvent e) {
          fxKeyEvent(e);
        }
        
      };
      setOnKeyPressed(keyHandler);
      setOnKeyReleased(keyHandler);
      setOnKeyTyped(keyHandler);
      
      setFocusTraversable(false);
      
      focusedProperty().addListener(new ChangeListener()
      {
        public void changed(ObservableValue<? extends Boolean> value, Boolean oldValue, Boolean newValue) {
          if (newValue.booleanValue()) {
            sketch.focused = true;
            sketch.focusGained();
          } else {
            sketch.focused = false;
            sketch.focusLost();
          }
        }
      });
    }
    
    public Stage getStage() {
      return stage;
    }
    
    public boolean isResizable()
    {
      return true;
    }
    
    public double prefWidth(double height)
    {
      return getWidth();
    }
    
    public double prefHeight(double width)
    {
      return getHeight();
    }
  }
  





  public static class PApplicationFX
    extends Application
  {
    public static PSurfaceFX surface;
    





    public PApplicationFX() {}
    




    public void start(Stage stage)
    {
      PApplet sketch = surfacesketch;
      

      GraphicsDevice displayDevice = null;
      
      GraphicsEnvironment environment = 
        GraphicsEnvironment.getLocalGraphicsEnvironment();
      
      int displayNum = sketch.sketchDisplay();
      if (displayNum > 0) {
        GraphicsDevice[] devices = environment.getScreenDevices();
        if (displayNum <= devices.length) {
          displayDevice = devices[(displayNum - 1)];
        } else {
          System.err.format("Display %d does not exist, using the default display instead.%n", new Object[] {
            Integer.valueOf(displayNum) });
          for (int i = 0; i < devices.length; i++) {
            System.err.format("Display %d is %s%n", new Object[] { Integer.valueOf(i + 1), devices[i] });
          }
        }
      }
      if (displayDevice == null) {
        displayDevice = environment.getDefaultScreenDevice();
      }
      
      boolean fullScreen = sketch.sketchFullScreen();
      boolean spanDisplays = sketch.sketchDisplay() == 0;
      
      Rectangle primaryScreenRect = displayDevice.getDefaultConfiguration().getBounds();
      Rectangle screenRect = primaryScreenRect;
      if ((fullScreen) || (spanDisplays)) {
        double minX = screenRect.getMinX();
        double maxX = screenRect.getMaxX();
        double minY = screenRect.getMinY();
        double maxY = screenRect.getMaxY();
        if (spanDisplays) {
          for (GraphicsDevice s : environment.getScreenDevices()) {
            Rectangle bounds = s.getDefaultConfiguration().getBounds();
            minX = Math.min(minX, bounds.getMinX());
            maxX = Math.max(maxX, bounds.getMaxX());
            minY = Math.min(minY, bounds.getMinY());
            maxY = Math.max(maxY, bounds.getMaxY());
          }
        }
        if (minY < 0.0D)
        {
          System.err.format("FX can't place window at negative Y coordinate [x=%d, y=%d]. Please make sure that your secondary display does not extend above the main display.", new Object[] {
          

            Integer.valueOf((int)minX), Integer.valueOf((int)minY) });
          screenRect = primaryScreenRect;
        } else {
          screenRect = new Rectangle((int)minX, (int)minY, 
            (int)(maxX - minX), (int)(maxY - minY));
        }
      }
      


      displayWidth = ((int)screenRect.getWidth());
      displayHeight = ((int)screenRect.getHeight());
      
      int sketchWidth = sketch.sketchWidth();
      int sketchHeight = sketch.sketchHeight();
      
      if ((fullScreen) || (spanDisplays)) {
        sketchWidth = (int)screenRect.getWidth();
        sketchHeight = (int)screenRect.getHeight();
        
        stage.initStyle(StageStyle.UNDECORATED);
        stage.setX(screenRect.getMinX());
        stage.setY(screenRect.getMinY());
        stage.setWidth(screenRect.getWidth());
        stage.setHeight(screenRect.getHeight());
      }
      
      Canvas canvas = surfacecanvas;
      surfacefx.context = canvas.getGraphicsContext2D();
      StackPane stackPane = new StackPane();
      stackPane.getChildren().add(canvas);
      canvas.widthProperty().bind(stackPane.widthProperty());
      canvas.heightProperty().bind(stackPane.heightProperty());
      
      int width = sketchWidth;
      int height = sketchHeight;
      int smooth = sketch.sketchSmooth();
      


      if (((PApplet.platform == 2) || 
        (PApplet.platform == 3)) && 
        (PApplet.javaVersionName.compareTo("1.8.0_60") >= 0) && 
        (PApplet.javaVersionName.compareTo("1.8.0_72") < 0)) {
        System.err.println("smooth() disabled for JavaFX with this Java version due to Oracle bug");
        System.err.println("https://github.com/processing/processing/issues/3795");
        smooth = 0;
      }
      
      SceneAntialiasing sceneAntialiasing = smooth == 0 ? 
        SceneAntialiasing.DISABLED : SceneAntialiasing.BALANCED;
      
      stage.setScene(new Scene(stackPane, width, height, false, sceneAntialiasing));
      


      surfacestage = stage;
    }
    
    public void stop() throws Exception
    {
      surfacesketch.dispose();
    }
  }
  



  public void initFrame(PApplet sketch)
  {
    this.sketch = sketch;
    PApplicationFX.surface = this;
    
    new Thread(new Runnable() {
      public void run() {
        Application.launch(PSurfaceFX.PApplicationFX.class, new String[0]);
      }
    })
    


      .start();
    

    while (stage == null) {
      try
      {
        Thread.sleep(5L);
      }
      catch (InterruptedException localInterruptedException) {}
    }
    setProcessingIcon(stage);
  }
  



  public void setTitle(String title)
  {
    stage.setTitle(title);
  }
  



  public void setVisible(final boolean visible)
  {
    Platform.runLater(new Runnable() {
      public void run() {
        if (visible) {
          stage.show();
          canvas.requestFocus();
        } else {
          stage.hide();
        }
      }
    });
  }
  



  public void setResizable(boolean resizable)
  {
    stage.setResizable(resizable);
  }
  

  public void setIcon(PImage icon)
  {
    int w = pixelWidth;
    int h = pixelHeight;
    WritableImage im = new WritableImage(w, h);
    im.getPixelWriter().setPixels(0, 0, w, h, 
      PixelFormat.getIntArgbInstance(), 
      pixels, 
      0, w);
    
    Stage stage = (Stage)canvas.getScene().getWindow();
    stage.getIcons().clear();
    stage.getIcons().add(im);
  }
  





  protected void setProcessingIcon(Stage stage)
  {
    try
    {
      if (iconImages == null) {
        iconImages = new ArrayList();
        int[] sizes = { 48, 64, 128, 256, 512 };
        
        for (int sz : sizes) {
          URL url = PApplet.class.getResource("/icon/icon-" + sz + ".png");
          Image image = new Image(url.toString());
          iconImages.add(image);
        }
      }
      List<Image> icons = stage.getIcons();
      icons.clear();
      icons.addAll(iconImages);
    }
    catch (Exception localException) {}
  }
  
  public void setAlwaysOnTop(boolean always)
  {
    stage.setAlwaysOnTop(always);
  }
  













































  public void placeWindow(int[] location, int[] editorLocation)
  {
    if (sketch.sketchFullScreen()) {
      PApplet.hideMenuBar();
    }
    




    int wide = sketch.width;
    int high = sketch.height;
    
    if (location != null)
    {

      stage.setX(location[0]);
      stage.setY(location[1]);
    }
    else if (editorLocation != null) {
      int locationX = editorLocation[0] - 20;
      int locationY = editorLocation[1];
      
      if (locationX - wide > 10)
      {
        stage.setX(locationX - wide);
        stage.setY(locationY);






      }
      else
      {





        locationX = (sketch.displayWidth - wide) / 2;
        locationY = (sketch.displayHeight - high) / 2;
        stage.setX(locationX);
        stage.setY(locationY);
      }
    }
    

    if (stage.getY() < 0.0D)
    {


      stage.setY(30.0D);
    }
    







    if (sketch.getGraphics().displayable()) {
      setVisible(true);
    }
  }
  









  public void setupExternalMessages()
  {
    stage.xProperty().addListener(new ChangeListener()
    {
      public void changed(ObservableValue<? extends Number> value, Number oldX, Number newX)
      {
        sketch.frameMoved(newX.intValue(), stage.yProperty().intValue());
      }
      
    });
    stage.yProperty().addListener(new ChangeListener()
    {
      public void changed(ObservableValue<? extends Number> value, Number oldY, Number newY)
      {
        sketch.frameMoved(stage.xProperty().intValue(), newY.intValue());
      }
      
    });
    stage.setOnCloseRequest(new EventHandler() {
      public void handle(WindowEvent we) {
        sketch.exit();
      }
    });
  }
  
  public void setLocation(int x, int y)
  {
    stage.setX(x);
    stage.setY(y);
  }
  

  public void setSize(int width, int height)
  {
    Scene scene = stage.getScene();
    double decorH = stage.getWidth() - scene.getWidth();
    double decorV = stage.getHeight() - scene.getHeight();
    stage.setWidth(width + decorH);
    stage.setHeight(height + decorV);
    fx.setSize(width, height);
  }
  













  public void setFrameRate(float fps)
  {
    if (fps > 0.0F) {
      frameRate = fps;
      animation.setRate(-frameRate);
    }
  }
  






  Cursor lastCursor = Cursor.DEFAULT;
  
  public void setCursor(int kind) { Cursor c;
    Cursor c;
    Cursor c; Cursor c; Cursor c; Cursor c; Cursor c; switch (kind) {
    case 0:  c = Cursor.DEFAULT; break;
    case 1:  c = Cursor.CROSSHAIR; break;
    case 12:  c = Cursor.HAND; break;
    case 13:  c = Cursor.MOVE; break;
    case 2:  c = Cursor.TEXT; break;
    case 3:  c = Cursor.WAIT; break;
    case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: default:  c = Cursor.DEFAULT;
    }
    lastCursor = c;
    canvas.getScene().setCursor(c);
  }
  
  public void setCursor(PImage image, int hotspotX, int hotspotY)
  {
    int w = pixelWidth;
    int h = pixelHeight;
    WritableImage im = new WritableImage(w, h);
    im.getPixelWriter().setPixels(0, 0, w, h, 
      PixelFormat.getIntArgbInstance(), 
      pixels, 
      0, w);
    ImageCursor c = new ImageCursor(im, hotspotX, hotspotY);
    lastCursor = c;
    canvas.getScene().setCursor(c);
  }
  
  public void showCursor()
  {
    canvas.getScene().setCursor(lastCursor);
  }
  
  public void hideCursor()
  {
    canvas.getScene().setCursor(Cursor.NONE);
  }
  
  public void startThread()
  {
    animation.play();
  }
  
  public void pauseThread()
  {
    animation.pause();
  }
  
  public void resumeThread()
  {
    animation.play();
  }
  
  public boolean stopThread()
  {
    animation.stop();
    return true;
  }
  
  public boolean isStopped()
  {
    return animation.getStatus() == Animation.Status.STOPPED;
  }
  


















































































  static Map<EventType<? extends javafx.scene.input.MouseEvent>, Integer> mouseMap = new HashMap();
  
  static { mouseMap.put(javafx.scene.input.MouseEvent.MOUSE_PRESSED, Integer.valueOf(1));
    mouseMap.put(javafx.scene.input.MouseEvent.MOUSE_RELEASED, Integer.valueOf(2));
    mouseMap.put(javafx.scene.input.MouseEvent.MOUSE_CLICKED, Integer.valueOf(3));
    mouseMap.put(javafx.scene.input.MouseEvent.MOUSE_DRAGGED, Integer.valueOf(4));
    mouseMap.put(javafx.scene.input.MouseEvent.MOUSE_MOVED, Integer.valueOf(5));
    mouseMap.put(javafx.scene.input.MouseEvent.MOUSE_ENTERED, Integer.valueOf(6));
    mouseMap.put(javafx.scene.input.MouseEvent.MOUSE_EXITED, Integer.valueOf(7));
  }
  

  protected void fxMouseEvent(javafx.scene.input.MouseEvent fxEvent)
  {
    int count = fxEvent.getClickCount();
    
    int action = ((Integer)mouseMap.get(fxEvent.getEventType())).intValue();
    





    int modifiers = 0;
    if (fxEvent.isShiftDown()) {
      modifiers |= 0x1;
    }
    if (fxEvent.isControlDown()) {
      modifiers |= 0x2;
    }
    if (fxEvent.isMetaDown()) {
      modifiers |= 0x4;
    }
    if (fxEvent.isAltDown()) {
      modifiers |= 0x8;
    }
    
    int button = 0;
    if (fxEvent.isPrimaryButtonDown()) {
      button = 37;
    } else if (fxEvent.isSecondaryButtonDown()) {
      button = 39;
    } else if (fxEvent.isMiddleButtonDown()) {
      button = 3;
    }
    


    if ((PApplet.platform == 2) && 
      (fxEvent.isControlDown()) && 
      (button == 37)) {
      button = 39;
    }
    

    long when = System.currentTimeMillis();
    int x = (int)fxEvent.getX();
    int y = (int)fxEvent.getY();
    
    sketch.postEvent(new processing.event.MouseEvent(fxEvent, when, 
      action, modifiers, 
      x, y, button, count));
  }
  



















  protected void fxKeyEvent(javafx.scene.input.KeyEvent fxEvent)
  {
    int action = 0;
    EventType<? extends javafx.scene.input.KeyEvent> et = fxEvent.getEventType();
    if (et == javafx.scene.input.KeyEvent.KEY_PRESSED) {
      action = 1;
    } else if (et == javafx.scene.input.KeyEvent.KEY_RELEASED) {
      action = 2;
    } else if (et == javafx.scene.input.KeyEvent.KEY_TYPED) {
      action = 3;
    }
    
    int modifiers = 0;
    if (fxEvent.isShiftDown()) {
      modifiers |= 0x1;
    }
    if (fxEvent.isControlDown()) {
      modifiers |= 0x2;
    }
    if (fxEvent.isMetaDown()) {
      modifiers |= 0x4;
    }
    if (fxEvent.isAltDown()) {
      modifiers |= 0x8;
    }
    
    long when = System.currentTimeMillis();
    
    char keyChar = getKeyChar(fxEvent);
    int keyCode = getKeyCode(fxEvent);
    sketch.postEvent(new processing.event.KeyEvent(fxEvent, when, 
      action, modifiers, 
      keyChar, keyCode));
  }
  

  private int getKeyCode(javafx.scene.input.KeyEvent fxEvent)
  {
    if (fxEvent.getEventType() == javafx.scene.input.KeyEvent.KEY_TYPED) {
      return 0;
    }
    
    KeyCode kc = fxEvent.getCode();
    switch (kc) {
    case ROMAN_CHARACTERS: 
      return 18;
    }
    
    
    return kc.impl_getCode();
  }
  

  private char getKeyChar(javafx.scene.input.KeyEvent fxEvent)
  {
    KeyCode kc = fxEvent.getCode();
    


    switch (kc) {
    case ALPHANUMERIC: 
    case ALT: 
    case ALT_GRAPH: 
    case AMPERSAND: 
    case ASTERISK: 
    case BACK_QUOTE: 
    case BACK_SLASH: 
    case BACK_SPACE: 
    case BEGIN: 
    case BRACELEFT: 
    case BRACERIGHT: 
    case C: 
    case CANCEL: 
    case F10: 
    case F11: 
    case F12: 
    case F13: 
    case F14: 
    case F15: 
    case F16: 
    case F17: 
    case F18: 
    case F19: 
    case F2: 
    case F20: 
    case F21: 
    case F22: 
    case FULL_WIDTH: 
    case G: 
    case GAME_B: 
    case GREATER: 
    case H: 
    case HALF_WIDTH: 
    case HELP: 
    case NUMPAD2: 
    case NUMPAD3: 
    case ROMAN_CHARACTERS: 
      return 65535;
    case A: 
      return '\n';
    case F: 
      return '/';
    case ENTER: 
      return '*';
    case EURO_SIGN: 
      return '-';
    case EQUALS: 
      return '+';
    case DIGIT6: 
      return '0';
    case DIGIT7: 
      return '1';
    case DIGIT8: 
      return '2';
    case DIGIT9: 
      return '3';
    case DIVIDE: 
      return '4';
    case DOLLAR: 
      return '5';
    case DOWN: 
      return '6';
    case E: 
      return '7';
    case EJECT_TOGGLE: 
      return '8';
    case END: 
      return '9';
    



    case EXCLAMATION_MARK: 
      return '.';
    case SCROLL_LOCK: 
      break;
    }
    
    

    String ch;
    

    String ch;
    
    if (fxEvent.getEventType() == javafx.scene.input.KeyEvent.KEY_TYPED) {
      ch = fxEvent.getCharacter();
    } else {
      ch = kc.impl_getChar();
    }
    
    if (ch.length() < 1) return 65535;
    if (ch.startsWith("\r")) return '\n';
    return ch.charAt(0);
  }
  
  public void initOffscreen(PApplet sketch) {}
  
  public void placePresent(int stopColor) {}
  
  public void setSmooth(int level) {}
  
  protected void fxScrollEvent(ScrollEvent event) {}
}
