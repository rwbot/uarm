package jogamp.opengl.egl;

import com.jogamp.common.nio.Buffers;
import com.jogamp.common.nio.PointerBuffer;
import com.jogamp.opengl.egl.EGLClientPixmapHI;
import com.jogamp.opengl.egl.EGLExt;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;




public class EGLExtImpl
  implements EGLExt
{
  private final EGLContext _context;
  private final EGLExtProcAddressTable _table;
  
  public boolean eglChooseConfig(long paramLong, IntBuffer paramIntBuffer1, PointerBuffer paramPointerBuffer, int paramInt, IntBuffer paramIntBuffer2)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"configs\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new RuntimeException("Argument \"num_config\" is not a direct buffer");
    long l = _table._addressof_eglChooseConfig;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglChooseConfig" }));
    }
    return dispatch_eglChooseConfig0(paramLong, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), paramInt, paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), l);
  }
  



  private native boolean dispatch_eglChooseConfig0(long paramLong1, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, int paramInt3, Object paramObject3, int paramInt4, long paramLong2);
  


  public boolean eglCopyBuffers(long paramLong1, long paramLong2, long paramLong3)
  {
    long l = _table._addressof_eglCopyBuffers;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCopyBuffers" }));
    }
    return dispatch_eglCopyBuffers0(paramLong1, paramLong2, paramLong3, l);
  }
  


  private native boolean dispatch_eglCopyBuffers0(long paramLong1, long paramLong2, long paramLong3, long paramLong4);
  

  public long eglCreateContext(long paramLong1, long paramLong2, long paramLong3, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreateContext;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateContext" }));
    }
    return dispatch_eglCreateContext0(paramLong1, paramLong2, paramLong3, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native long dispatch_eglCreateContext0(long paramLong1, long paramLong2, long paramLong3, Object paramObject, int paramInt, long paramLong4);
  


  public long eglCreatePbufferSurface(long paramLong1, long paramLong2, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreatePbufferSurface;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreatePbufferSurface" }));
    }
    return dispatch_eglCreatePbufferSurface0(paramLong1, paramLong2, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native long dispatch_eglCreatePbufferSurface0(long paramLong1, long paramLong2, Object paramObject, int paramInt, long paramLong3);
  


  public long eglCreatePixmapSurface(long paramLong1, long paramLong2, long paramLong3, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreatePixmapSurface;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreatePixmapSurface" }));
    }
    return dispatch_eglCreatePixmapSurface0(paramLong1, paramLong2, paramLong3, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native long dispatch_eglCreatePixmapSurface0(long paramLong1, long paramLong2, long paramLong3, Object paramObject, int paramInt, long paramLong4);
  


  public long eglCreateWindowSurface(long paramLong1, long paramLong2, long paramLong3, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreateWindowSurface;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateWindowSurface" }));
    }
    return dispatch_eglCreateWindowSurface0(paramLong1, paramLong2, paramLong3, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native long dispatch_eglCreateWindowSurface0(long paramLong1, long paramLong2, long paramLong3, Object paramObject, int paramInt, long paramLong4);
  

  public boolean eglDestroyContext(long paramLong1, long paramLong2)
  {
    long l = _table._addressof_eglDestroyContext;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglDestroyContext" }));
    }
    return dispatch_eglDestroyContext0(paramLong1, paramLong2, l);
  }
  

  private native boolean dispatch_eglDestroyContext0(long paramLong1, long paramLong2, long paramLong3);
  

  public boolean eglDestroySurface(long paramLong1, long paramLong2)
  {
    long l = _table._addressof_eglDestroySurface;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglDestroySurface" }));
    }
    return dispatch_eglDestroySurface0(paramLong1, paramLong2, l);
  }
  


  private native boolean dispatch_eglDestroySurface0(long paramLong1, long paramLong2, long paramLong3);
  

  public boolean eglGetConfigAttrib(long paramLong1, long paramLong2, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table._addressof_eglGetConfigAttrib;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetConfigAttrib" }));
    }
    return dispatch_eglGetConfigAttrib0(paramLong1, paramLong2, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  



  private native boolean dispatch_eglGetConfigAttrib0(long paramLong1, long paramLong2, int paramInt1, Object paramObject, int paramInt2, long paramLong3);
  


  public boolean eglGetConfigs(long paramLong, PointerBuffer paramPointerBuffer, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"configs\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"num_config\" is not a direct buffer");
    long l = _table._addressof_eglGetConfigs;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetConfigs" }));
    }
    return dispatch_eglGetConfigs0(paramLong, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native boolean dispatch_eglGetConfigs0(long paramLong1, Object paramObject1, int paramInt1, int paramInt2, Object paramObject2, int paramInt3, long paramLong2);
  


  public long eglGetCurrentDisplay()
  {
    long l = _table._addressof_eglGetCurrentDisplay;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetCurrentDisplay" }));
    }
    return dispatch_eglGetCurrentDisplay0(l);
  }
  

  private native long dispatch_eglGetCurrentDisplay0(long paramLong);
  

  public long eglGetCurrentSurface(int paramInt)
  {
    long l = _table._addressof_eglGetCurrentSurface;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetCurrentSurface" }));
    }
    return dispatch_eglGetCurrentSurface0(paramInt, l);
  }
  

  private native long dispatch_eglGetCurrentSurface0(int paramInt, long paramLong);
  

  public long eglGetDisplay(long paramLong)
  {
    long l = _table._addressof_eglGetDisplay;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetDisplay" }));
    }
    return dispatch_eglGetDisplay0(paramLong, l);
  }
  

  private native long dispatch_eglGetDisplay0(long paramLong1, long paramLong2);
  

  public int eglGetError()
  {
    long l = _table._addressof_eglGetError;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetError" }));
    }
    return dispatch_eglGetError0(l);
  }
  


  private native int dispatch_eglGetError0(long paramLong);
  


  public boolean eglInitialize(long paramLong, IntBuffer paramIntBuffer1, IntBuffer paramIntBuffer2)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new RuntimeException("Argument \"major\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new RuntimeException("Argument \"minor\" is not a direct buffer");
    long l = _table._addressof_eglInitialize;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglInitialize" }));
    }
    return dispatch_eglInitialize0(paramLong, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), l);
  }
  


  private native boolean dispatch_eglInitialize0(long paramLong1, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, long paramLong2);
  


  public boolean eglMakeCurrent(long paramLong1, long paramLong2, long paramLong3, long paramLong4)
  {
    long l = _table._addressof_eglMakeCurrent;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglMakeCurrent" }));
    }
    return dispatch_eglMakeCurrent0(paramLong1, paramLong2, paramLong3, paramLong4, l);
  }
  


  private native boolean dispatch_eglMakeCurrent0(long paramLong1, long paramLong2, long paramLong3, long paramLong4, long paramLong5);
  

  public boolean eglQueryContext(long paramLong1, long paramLong2, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table._addressof_eglQueryContext;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryContext" }));
    }
    return dispatch_eglQueryContext0(paramLong1, paramLong2, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native boolean dispatch_eglQueryContext0(long paramLong1, long paramLong2, int paramInt1, Object paramObject, int paramInt2, long paramLong3);
  

  public String eglQueryString(long paramLong, int paramInt)
  {
    long l = _table._addressof_eglQueryString;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryString" }));
    }
    return dispatch_eglQueryString0(paramLong, paramInt, l);
  }
  


  private native String dispatch_eglQueryString0(long paramLong1, int paramInt, long paramLong2);
  

  public boolean eglQuerySurface(long paramLong1, long paramLong2, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table._addressof_eglQuerySurface;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQuerySurface" }));
    }
    return dispatch_eglQuerySurface0(paramLong1, paramLong2, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native boolean dispatch_eglQuerySurface0(long paramLong1, long paramLong2, int paramInt1, Object paramObject, int paramInt2, long paramLong3);
  

  public boolean eglSwapBuffers(long paramLong1, long paramLong2)
  {
    long l = _table._addressof_eglSwapBuffers;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglSwapBuffers" }));
    }
    return dispatch_eglSwapBuffers0(paramLong1, paramLong2, l);
  }
  

  private native boolean dispatch_eglSwapBuffers0(long paramLong1, long paramLong2, long paramLong3);
  

  public boolean eglTerminate(long paramLong)
  {
    long l = _table._addressof_eglTerminate;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglTerminate" }));
    }
    return dispatch_eglTerminate0(paramLong, l);
  }
  

  private native boolean dispatch_eglTerminate0(long paramLong1, long paramLong2);
  

  public boolean eglWaitGL()
  {
    long l = _table._addressof_eglWaitGL;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglWaitGL" }));
    }
    return dispatch_eglWaitGL0(l);
  }
  

  private native boolean dispatch_eglWaitGL0(long paramLong);
  

  public boolean eglWaitNative(int paramInt)
  {
    long l = _table._addressof_eglWaitNative;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglWaitNative" }));
    }
    return dispatch_eglWaitNative0(paramInt, l);
  }
  

  private native boolean dispatch_eglWaitNative0(int paramInt, long paramLong);
  

  public boolean eglBindTexImage(long paramLong1, long paramLong2, int paramInt)
  {
    long l = _table._addressof_eglBindTexImage;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglBindTexImage" }));
    }
    return dispatch_eglBindTexImage0(paramLong1, paramLong2, paramInt, l);
  }
  

  private native boolean dispatch_eglBindTexImage0(long paramLong1, long paramLong2, int paramInt, long paramLong3);
  

  public boolean eglReleaseTexImage(long paramLong1, long paramLong2, int paramInt)
  {
    long l = _table._addressof_eglReleaseTexImage;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglReleaseTexImage" }));
    }
    return dispatch_eglReleaseTexImage0(paramLong1, paramLong2, paramInt, l);
  }
  

  private native boolean dispatch_eglReleaseTexImage0(long paramLong1, long paramLong2, int paramInt, long paramLong3);
  

  public boolean eglSurfaceAttrib(long paramLong1, long paramLong2, int paramInt1, int paramInt2)
  {
    long l = _table._addressof_eglSurfaceAttrib;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglSurfaceAttrib" }));
    }
    return dispatch_eglSurfaceAttrib0(paramLong1, paramLong2, paramInt1, paramInt2, l);
  }
  

  private native boolean dispatch_eglSurfaceAttrib0(long paramLong1, long paramLong2, int paramInt1, int paramInt2, long paramLong3);
  

  public boolean eglSwapInterval(long paramLong, int paramInt)
  {
    long l = _table._addressof_eglSwapInterval;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglSwapInterval" }));
    }
    return dispatch_eglSwapInterval0(paramLong, paramInt, l);
  }
  

  private native boolean dispatch_eglSwapInterval0(long paramLong1, int paramInt, long paramLong2);
  

  public boolean eglBindAPI(int paramInt)
  {
    long l = _table._addressof_eglBindAPI;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglBindAPI" }));
    }
    return dispatch_eglBindAPI0(paramInt, l);
  }
  

  private native boolean dispatch_eglBindAPI0(int paramInt, long paramLong);
  

  public int eglQueryAPI()
  {
    long l = _table._addressof_eglQueryAPI;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryAPI" }));
    }
    return dispatch_eglQueryAPI0(l);
  }
  


  private native int dispatch_eglQueryAPI0(long paramLong);
  


  public long eglCreatePbufferFromClientBuffer(long paramLong1, int paramInt, Buffer paramBuffer, long paramLong2, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"buffer\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreatePbufferFromClientBuffer;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreatePbufferFromClientBuffer" }));
    }
    return dispatch_eglCreatePbufferFromClientBuffer0(paramLong1, paramInt, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramLong2, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native long dispatch_eglCreatePbufferFromClientBuffer0(long paramLong1, int paramInt1, Object paramObject1, int paramInt2, long paramLong2, Object paramObject2, int paramInt3, long paramLong3);
  


  public boolean eglReleaseThread()
  {
    long l = _table._addressof_eglReleaseThread;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglReleaseThread" }));
    }
    return dispatch_eglReleaseThread0(l);
  }
  

  private native boolean dispatch_eglReleaseThread0(long paramLong);
  

  public boolean eglWaitClient()
  {
    long l = _table._addressof_eglWaitClient;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglWaitClient" }));
    }
    return dispatch_eglWaitClient0(l);
  }
  

  private native boolean dispatch_eglWaitClient0(long paramLong);
  

  public long eglGetCurrentContext()
  {
    long l = _table._addressof_eglGetCurrentContext;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetCurrentContext" }));
    }
    return dispatch_eglGetCurrentContext0(l);
  }
  


  private native long dispatch_eglGetCurrentContext0(long paramLong);
  

  public ByteBuffer eglCreateSync(long paramLong, int paramInt, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreateSync;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateSync" }));
    }
    
    ByteBuffer localByteBuffer = dispatch_eglCreateSync0(paramLong, paramInt, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
    if (localByteBuffer == null) return null;
    Buffers.nativeOrder(localByteBuffer);
    return localByteBuffer;
  }
  


  private native ByteBuffer dispatch_eglCreateSync0(long paramLong1, int paramInt1, Object paramObject, int paramInt2, long paramLong2);
  


  public boolean eglDestroySync(long paramLong, Buffer paramBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"sync\" is not a direct buffer");
    long l = _table._addressof_eglDestroySync;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglDestroySync" }));
    }
    return dispatch_eglDestroySync0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), l);
  }
  


  private native boolean dispatch_eglDestroySync0(long paramLong1, Object paramObject, int paramInt, long paramLong2);
  


  public int eglClientWaitSync(long paramLong1, Buffer paramBuffer, int paramInt, long paramLong2)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"sync\" is not a direct buffer");
    long l = _table._addressof_eglClientWaitSync;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglClientWaitSync" }));
    }
    return dispatch_eglClientWaitSync0(paramLong1, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, paramLong2, l);
  }
  



  private native int dispatch_eglClientWaitSync0(long paramLong1, Object paramObject, int paramInt1, int paramInt2, long paramLong2, long paramLong3);
  


  public boolean eglGetSyncAttrib(long paramLong, Buffer paramBuffer, int paramInt, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"sync\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table._addressof_eglGetSyncAttrib;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetSyncAttrib" }));
    }
    return dispatch_eglGetSyncAttrib0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  



  private native boolean dispatch_eglGetSyncAttrib0(long paramLong1, Object paramObject1, int paramInt1, int paramInt2, Object paramObject2, int paramInt3, long paramLong2);
  



  public ByteBuffer eglCreateImage(long paramLong1, long paramLong2, int paramInt, Buffer paramBuffer, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"buffer\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreateImage;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateImage" }));
    }
    
    ByteBuffer localByteBuffer = dispatch_eglCreateImage0(paramLong1, paramLong2, paramInt, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
    if (localByteBuffer == null) return null;
    Buffers.nativeOrder(localByteBuffer);
    return localByteBuffer;
  }
  



  private native ByteBuffer dispatch_eglCreateImage0(long paramLong1, long paramLong2, int paramInt1, Object paramObject1, int paramInt2, Object paramObject2, int paramInt3, long paramLong3);
  


  public boolean eglDestroyImage(long paramLong, Buffer paramBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"image\" is not a direct buffer");
    long l = _table._addressof_eglDestroyImage;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglDestroyImage" }));
    }
    return dispatch_eglDestroyImage0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), l);
  }
  



  private native boolean dispatch_eglDestroyImage0(long paramLong1, Object paramObject, int paramInt, long paramLong2);
  


  public long eglGetPlatformDisplay(int paramInt, Buffer paramBuffer, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"native_display\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglGetPlatformDisplay;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetPlatformDisplay" }));
    }
    return dispatch_eglGetPlatformDisplay0(paramInt, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  



  private native long dispatch_eglGetPlatformDisplay0(int paramInt1, Object paramObject1, int paramInt2, Object paramObject2, int paramInt3, long paramLong);
  



  public long eglCreatePlatformWindowSurface(long paramLong1, long paramLong2, Buffer paramBuffer, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"native_window\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreatePlatformWindowSurface;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreatePlatformWindowSurface" }));
    }
    return dispatch_eglCreatePlatformWindowSurface0(paramLong1, paramLong2, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  



  private native long dispatch_eglCreatePlatformWindowSurface0(long paramLong1, long paramLong2, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, long paramLong3);
  



  public long eglCreatePlatformPixmapSurface(long paramLong1, long paramLong2, Buffer paramBuffer, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"native_pixmap\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreatePlatformPixmapSurface;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreatePlatformPixmapSurface" }));
    }
    return dispatch_eglCreatePlatformPixmapSurface0(paramLong1, paramLong2, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  



  private native long dispatch_eglCreatePlatformPixmapSurface0(long paramLong1, long paramLong2, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, long paramLong3);
  


  public boolean eglWaitSync(long paramLong, Buffer paramBuffer, int paramInt)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"sync\" is not a direct buffer");
    long l = _table._addressof_eglWaitSync;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglWaitSync" }));
    }
    return dispatch_eglWaitSync0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, l);
  }
  


  private native boolean dispatch_eglWaitSync0(long paramLong1, Object paramObject, int paramInt1, int paramInt2, long paramLong2);
  


  public long eglCreateSync64KHR(long paramLong, int paramInt, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreateSync64KHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateSync64KHR" }));
    }
    return dispatch_eglCreateSync64KHR0(paramLong, paramInt, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  


  private native long dispatch_eglCreateSync64KHR0(long paramLong1, int paramInt1, Object paramObject, int paramInt2, long paramLong2);
  


  public boolean eglQueryDebugKHR(int paramInt, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table._addressof_eglQueryDebugKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryDebugKHR" }));
    }
    return dispatch_eglQueryDebugKHR0(paramInt, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  



  private native boolean dispatch_eglQueryDebugKHR0(int paramInt1, Object paramObject, int paramInt2, long paramLong);
  


  public int eglLabelObjectKHR(long paramLong, int paramInt, Buffer paramBuffer1, Buffer paramBuffer2)
  {
    if (!Buffers.isDirect(paramBuffer1))
      throw new RuntimeException("Argument \"object\" is not a direct buffer");
    if (!Buffers.isDirect(paramBuffer2))
      throw new RuntimeException("Argument \"label\" is not a direct buffer");
    long l = _table._addressof_eglLabelObjectKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglLabelObjectKHR" }));
    }
    return dispatch_eglLabelObjectKHR0(paramLong, paramInt, paramBuffer1, Buffers.getDirectBufferByteOffset(paramBuffer1), paramBuffer2, Buffers.getDirectBufferByteOffset(paramBuffer2), l);
  }
  



  private native int dispatch_eglLabelObjectKHR0(long paramLong1, int paramInt1, Object paramObject1, int paramInt2, Object paramObject2, int paramInt3, long paramLong2);
  


  public long eglCreateSyncKHR(long paramLong, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreateSyncKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateSyncKHR" }));
    }
    return dispatch_eglCreateSyncKHR0(paramLong, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native long dispatch_eglCreateSyncKHR0(long paramLong1, int paramInt1, Object paramObject, int paramInt2, long paramLong2);
  

  public boolean eglDestroySyncKHR(long paramLong1, long paramLong2)
  {
    long l = _table._addressof_eglDestroySyncKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglDestroySyncKHR" }));
    }
    return dispatch_eglDestroySyncKHR0(paramLong1, paramLong2, l);
  }
  

  private native boolean dispatch_eglDestroySyncKHR0(long paramLong1, long paramLong2, long paramLong3);
  

  public int eglClientWaitSyncKHR(long paramLong1, long paramLong2, int paramInt, long paramLong3)
  {
    long l = _table._addressof_eglClientWaitSyncKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglClientWaitSyncKHR" }));
    }
    return dispatch_eglClientWaitSyncKHR0(paramLong1, paramLong2, paramInt, paramLong3, l);
  }
  


  private native int dispatch_eglClientWaitSyncKHR0(long paramLong1, long paramLong2, int paramInt, long paramLong3, long paramLong4);
  

  public boolean eglGetSyncAttribKHR(long paramLong1, long paramLong2, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table._addressof_eglGetSyncAttribKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetSyncAttribKHR" }));
    }
    return dispatch_eglGetSyncAttribKHR0(paramLong1, paramLong2, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  



  private native boolean dispatch_eglGetSyncAttribKHR0(long paramLong1, long paramLong2, int paramInt1, Object paramObject, int paramInt2, long paramLong3);
  


  public long eglCreateImageKHR(long paramLong1, long paramLong2, int paramInt, Buffer paramBuffer, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"buffer\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreateImageKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateImageKHR" }));
    }
    return dispatch_eglCreateImageKHR0(paramLong1, paramLong2, paramInt, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native long dispatch_eglCreateImageKHR0(long paramLong1, long paramLong2, int paramInt1, Object paramObject1, int paramInt2, Object paramObject2, int paramInt3, long paramLong3);
  


  public boolean eglDestroyImageKHR(long paramLong1, long paramLong2)
  {
    long l = _table._addressof_eglDestroyImageKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglDestroyImageKHR" }));
    }
    return dispatch_eglDestroyImageKHR0(paramLong1, paramLong2, l);
  }
  


  private native boolean dispatch_eglDestroyImageKHR0(long paramLong1, long paramLong2, long paramLong3);
  

  public boolean eglLockSurfaceKHR(long paramLong1, long paramLong2, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglLockSurfaceKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglLockSurfaceKHR" }));
    }
    return dispatch_eglLockSurfaceKHR0(paramLong1, paramLong2, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native boolean dispatch_eglLockSurfaceKHR0(long paramLong1, long paramLong2, Object paramObject, int paramInt, long paramLong3);
  

  public boolean eglUnlockSurfaceKHR(long paramLong1, long paramLong2)
  {
    long l = _table._addressof_eglUnlockSurfaceKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglUnlockSurfaceKHR" }));
    }
    return dispatch_eglUnlockSurfaceKHR0(paramLong1, paramLong2, l);
  }
  


  private native boolean dispatch_eglUnlockSurfaceKHR0(long paramLong1, long paramLong2, long paramLong3);
  

  public boolean eglQuerySurface64KHR(long paramLong1, long paramLong2, int paramInt, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table._addressof_eglQuerySurface64KHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQuerySurface64KHR" }));
    }
    return dispatch_eglQuerySurface64KHR0(paramLong1, paramLong2, paramInt, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  


  private native boolean dispatch_eglQuerySurface64KHR0(long paramLong1, long paramLong2, int paramInt1, Object paramObject, int paramInt2, long paramLong3);
  


  public boolean eglSetDamageRegionKHR(long paramLong1, long paramLong2, IntBuffer paramIntBuffer, int paramInt)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"rects\" is not a direct buffer");
    long l = _table._addressof_eglSetDamageRegionKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglSetDamageRegionKHR" }));
    }
    return dispatch_eglSetDamageRegionKHR0(paramLong1, paramLong2, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), paramInt, l);
  }
  


  private native boolean dispatch_eglSetDamageRegionKHR0(long paramLong1, long paramLong2, Object paramObject, int paramInt1, int paramInt2, long paramLong3);
  

  public boolean eglSignalSyncKHR(long paramLong1, long paramLong2, int paramInt)
  {
    long l = _table._addressof_eglSignalSyncKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglSignalSyncKHR" }));
    }
    return dispatch_eglSignalSyncKHR0(paramLong1, paramLong2, paramInt, l);
  }
  


  private native boolean dispatch_eglSignalSyncKHR0(long paramLong1, long paramLong2, int paramInt, long paramLong3);
  

  public ByteBuffer eglCreateStreamKHR(long paramLong, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreateStreamKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateStreamKHR" }));
    }
    
    ByteBuffer localByteBuffer = dispatch_eglCreateStreamKHR0(paramLong, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
    if (localByteBuffer == null) return null;
    Buffers.nativeOrder(localByteBuffer);
    return localByteBuffer;
  }
  


  private native ByteBuffer dispatch_eglCreateStreamKHR0(long paramLong1, Object paramObject, int paramInt, long paramLong2);
  


  public boolean eglDestroyStreamKHR(long paramLong, Buffer paramBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"stream\" is not a direct buffer");
    long l = _table._addressof_eglDestroyStreamKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglDestroyStreamKHR" }));
    }
    return dispatch_eglDestroyStreamKHR0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), l);
  }
  


  private native boolean dispatch_eglDestroyStreamKHR0(long paramLong1, Object paramObject, int paramInt, long paramLong2);
  


  public boolean eglStreamAttribKHR(long paramLong, Buffer paramBuffer, int paramInt1, int paramInt2)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"stream\" is not a direct buffer");
    long l = _table._addressof_eglStreamAttribKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglStreamAttribKHR" }));
    }
    return dispatch_eglStreamAttribKHR0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt1, paramInt2, l);
  }
  



  private native boolean dispatch_eglStreamAttribKHR0(long paramLong1, Object paramObject, int paramInt1, int paramInt2, int paramInt3, long paramLong2);
  


  public boolean eglQueryStreamKHR(long paramLong, Buffer paramBuffer, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"stream\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table._addressof_eglQueryStreamKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryStreamKHR" }));
    }
    return dispatch_eglQueryStreamKHR0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  



  private native boolean dispatch_eglQueryStreamKHR0(long paramLong1, Object paramObject1, int paramInt1, int paramInt2, Object paramObject2, int paramInt3, long paramLong2);
  



  public boolean eglQueryStreamu64KHR(long paramLong, Buffer paramBuffer, int paramInt, LongBuffer paramLongBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"stream\" is not a direct buffer");
    if (!Buffers.isDirect(paramLongBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table._addressof_eglQueryStreamu64KHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryStreamu64KHR" }));
    }
    return dispatch_eglQueryStreamu64KHR0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, paramLongBuffer, Buffers.getDirectBufferByteOffset(paramLongBuffer), l);
  }
  



  private native boolean dispatch_eglQueryStreamu64KHR0(long paramLong1, Object paramObject1, int paramInt1, int paramInt2, Object paramObject2, int paramInt3, long paramLong2);
  


  public boolean eglStreamConsumerGLTextureExternalKHR(long paramLong, Buffer paramBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"stream\" is not a direct buffer");
    long l = _table._addressof_eglStreamConsumerGLTextureExternalKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglStreamConsumerGLTextureExternalKHR" }));
    }
    return dispatch_eglStreamConsumerGLTextureExternalKHR0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), l);
  }
  


  private native boolean dispatch_eglStreamConsumerGLTextureExternalKHR0(long paramLong1, Object paramObject, int paramInt, long paramLong2);
  


  public boolean eglStreamConsumerAcquireKHR(long paramLong, Buffer paramBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"stream\" is not a direct buffer");
    long l = _table._addressof_eglStreamConsumerAcquireKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglStreamConsumerAcquireKHR" }));
    }
    return dispatch_eglStreamConsumerAcquireKHR0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), l);
  }
  


  private native boolean dispatch_eglStreamConsumerAcquireKHR0(long paramLong1, Object paramObject, int paramInt, long paramLong2);
  


  public boolean eglStreamConsumerReleaseKHR(long paramLong, Buffer paramBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"stream\" is not a direct buffer");
    long l = _table._addressof_eglStreamConsumerReleaseKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglStreamConsumerReleaseKHR" }));
    }
    return dispatch_eglStreamConsumerReleaseKHR0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), l);
  }
  


  private native boolean dispatch_eglStreamConsumerReleaseKHR0(long paramLong1, Object paramObject, int paramInt, long paramLong2);
  


  public int eglGetStreamFileDescriptorKHR(long paramLong, Buffer paramBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"stream\" is not a direct buffer");
    long l = _table._addressof_eglGetStreamFileDescriptorKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetStreamFileDescriptorKHR" }));
    }
    return dispatch_eglGetStreamFileDescriptorKHR0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), l);
  }
  


  private native int dispatch_eglGetStreamFileDescriptorKHR0(long paramLong1, Object paramObject, int paramInt, long paramLong2);
  

  public ByteBuffer eglCreateStreamFromFileDescriptorKHR(long paramLong, int paramInt)
  {
    long l = _table._addressof_eglCreateStreamFromFileDescriptorKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateStreamFromFileDescriptorKHR" }));
    }
    
    ByteBuffer localByteBuffer = dispatch_eglCreateStreamFromFileDescriptorKHR0(paramLong, paramInt, l);
    if (localByteBuffer == null) return null;
    Buffers.nativeOrder(localByteBuffer);
    return localByteBuffer;
  }
  


  private native ByteBuffer dispatch_eglCreateStreamFromFileDescriptorKHR0(long paramLong1, int paramInt, long paramLong2);
  


  public boolean eglQueryStreamTimeKHR(long paramLong, Buffer paramBuffer, int paramInt, LongBuffer paramLongBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"stream\" is not a direct buffer");
    if (!Buffers.isDirect(paramLongBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table._addressof_eglQueryStreamTimeKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryStreamTimeKHR" }));
    }
    return dispatch_eglQueryStreamTimeKHR0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, paramLongBuffer, Buffers.getDirectBufferByteOffset(paramLongBuffer), l);
  }
  



  private native boolean dispatch_eglQueryStreamTimeKHR0(long paramLong1, Object paramObject1, int paramInt1, int paramInt2, Object paramObject2, int paramInt3, long paramLong2);
  



  public long eglCreateStreamProducerSurfaceKHR(long paramLong1, long paramLong2, Buffer paramBuffer, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"stream\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreateStreamProducerSurfaceKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateStreamProducerSurfaceKHR" }));
    }
    return dispatch_eglCreateStreamProducerSurfaceKHR0(paramLong1, paramLong2, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  



  private native long dispatch_eglCreateStreamProducerSurfaceKHR0(long paramLong1, long paramLong2, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, long paramLong3);
  


  public boolean eglSwapBuffersWithDamageKHR(long paramLong1, long paramLong2, IntBuffer paramIntBuffer, int paramInt)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"rects\" is not a direct buffer");
    long l = _table._addressof_eglSwapBuffersWithDamageKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglSwapBuffersWithDamageKHR" }));
    }
    return dispatch_eglSwapBuffersWithDamageKHR0(paramLong1, paramLong2, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), paramInt, l);
  }
  


  private native boolean dispatch_eglSwapBuffersWithDamageKHR0(long paramLong1, long paramLong2, Object paramObject, int paramInt1, int paramInt2, long paramLong3);
  

  public int eglWaitSyncKHR(long paramLong1, long paramLong2, int paramInt)
  {
    long l = _table._addressof_eglWaitSyncKHR;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglWaitSyncKHR" }));
    }
    return dispatch_eglWaitSyncKHR0(paramLong1, paramLong2, paramInt, l);
  }
  

  private native int dispatch_eglWaitSyncKHR0(long paramLong1, long paramLong2, int paramInt, long paramLong3);
  

  public int eglDupNativeFenceFDANDROID(long paramLong1, long paramLong2)
  {
    long l = _table._addressof_eglDupNativeFenceFDANDROID;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglDupNativeFenceFDANDROID" }));
    }
    return dispatch_eglDupNativeFenceFDANDROID0(paramLong1, paramLong2, l);
  }
  


  private native int dispatch_eglDupNativeFenceFDANDROID0(long paramLong1, long paramLong2, long paramLong3);
  

  public boolean eglQuerySurfacePointerANGLE(long paramLong1, long paramLong2, int paramInt, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table._addressof_eglQuerySurfacePointerANGLE;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQuerySurfacePointerANGLE" }));
    }
    return dispatch_eglQuerySurfacePointerANGLE0(paramLong1, paramLong2, paramInt, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  



  private native boolean dispatch_eglQuerySurfacePointerANGLE0(long paramLong1, long paramLong2, int paramInt1, Object paramObject, int paramInt2, long paramLong3);
  


  public boolean eglQueryDeviceAttribEXT(Buffer paramBuffer, int paramInt, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"device\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table._addressof_eglQueryDeviceAttribEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryDeviceAttribEXT" }));
    }
    return dispatch_eglQueryDeviceAttribEXT0(paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  



  private native boolean dispatch_eglQueryDeviceAttribEXT0(Object paramObject1, int paramInt1, int paramInt2, Object paramObject2, int paramInt3, long paramLong);
  


  public ByteBuffer eglQueryDeviceStringEXT(Buffer paramBuffer, int paramInt)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"device\" is not a direct buffer");
    long l = _table._addressof_eglQueryDeviceStringEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryDeviceStringEXT" }));
    }
    
    ByteBuffer localByteBuffer = dispatch_eglQueryDeviceStringEXT0(paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, l);
    if (localByteBuffer == null) return null;
    Buffers.nativeOrder(localByteBuffer);
    return localByteBuffer;
  }
  



  private native ByteBuffer dispatch_eglQueryDeviceStringEXT0(Object paramObject, int paramInt1, int paramInt2, long paramLong);
  


  public boolean eglQueryDevicesEXT(int paramInt, PointerBuffer paramPointerBuffer, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"devices\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"num_devices\" is not a direct buffer");
    long l = _table._addressof_eglQueryDevicesEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryDevicesEXT" }));
    }
    return dispatch_eglQueryDevicesEXT0(paramInt, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  



  private native boolean dispatch_eglQueryDevicesEXT0(int paramInt1, Object paramObject1, int paramInt2, Object paramObject2, int paramInt3, long paramLong);
  


  public boolean eglQueryDisplayAttribEXT(long paramLong, int paramInt, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table._addressof_eglQueryDisplayAttribEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryDisplayAttribEXT" }));
    }
    return dispatch_eglQueryDisplayAttribEXT0(paramLong, paramInt, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  



  private native boolean dispatch_eglQueryDisplayAttribEXT0(long paramLong1, int paramInt1, Object paramObject, int paramInt2, long paramLong2);
  



  public boolean eglGetOutputLayersEXT(long paramLong, PointerBuffer paramPointerBuffer1, PointerBuffer paramPointerBuffer2, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer1))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer2))
      throw new RuntimeException("Argument \"layers\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"num_layers\" is not a direct buffer");
    long l = _table._addressof_eglGetOutputLayersEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetOutputLayersEXT" }));
    }
    return dispatch_eglGetOutputLayersEXT0(paramLong, paramPointerBuffer1 != null ? paramPointerBuffer1.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer1), paramPointerBuffer2 != null ? paramPointerBuffer2.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer2), paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  




  private native boolean dispatch_eglGetOutputLayersEXT0(long paramLong1, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, int paramInt3, Object paramObject3, int paramInt4, long paramLong2);
  




  public boolean eglGetOutputPortsEXT(long paramLong, PointerBuffer paramPointerBuffer1, PointerBuffer paramPointerBuffer2, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer1))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer2))
      throw new RuntimeException("Argument \"ports\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"num_ports\" is not a direct buffer");
    long l = _table._addressof_eglGetOutputPortsEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetOutputPortsEXT" }));
    }
    return dispatch_eglGetOutputPortsEXT0(paramLong, paramPointerBuffer1 != null ? paramPointerBuffer1.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer1), paramPointerBuffer2 != null ? paramPointerBuffer2.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer2), paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  



  private native boolean dispatch_eglGetOutputPortsEXT0(long paramLong1, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, int paramInt3, Object paramObject3, int paramInt4, long paramLong2);
  



  public boolean eglOutputLayerAttribEXT(long paramLong1, Buffer paramBuffer, int paramInt, long paramLong2)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"layer\" is not a direct buffer");
    long l = _table._addressof_eglOutputLayerAttribEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglOutputLayerAttribEXT" }));
    }
    return dispatch_eglOutputLayerAttribEXT0(paramLong1, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, paramLong2, l);
  }
  



  private native boolean dispatch_eglOutputLayerAttribEXT0(long paramLong1, Object paramObject, int paramInt1, int paramInt2, long paramLong2, long paramLong3);
  


  public boolean eglQueryOutputLayerAttribEXT(long paramLong, Buffer paramBuffer, int paramInt, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"layer\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table._addressof_eglQueryOutputLayerAttribEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryOutputLayerAttribEXT" }));
    }
    return dispatch_eglQueryOutputLayerAttribEXT0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  



  private native boolean dispatch_eglQueryOutputLayerAttribEXT0(long paramLong1, Object paramObject1, int paramInt1, int paramInt2, Object paramObject2, int paramInt3, long paramLong2);
  


  public ByteBuffer eglQueryOutputLayerStringEXT(long paramLong, Buffer paramBuffer, int paramInt)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"layer\" is not a direct buffer");
    long l = _table._addressof_eglQueryOutputLayerStringEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryOutputLayerStringEXT" }));
    }
    
    ByteBuffer localByteBuffer = dispatch_eglQueryOutputLayerStringEXT0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, l);
    if (localByteBuffer == null) return null;
    Buffers.nativeOrder(localByteBuffer);
    return localByteBuffer;
  }
  


  private native ByteBuffer dispatch_eglQueryOutputLayerStringEXT0(long paramLong1, Object paramObject, int paramInt1, int paramInt2, long paramLong2);
  


  public boolean eglOutputPortAttribEXT(long paramLong1, Buffer paramBuffer, int paramInt, long paramLong2)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"port\" is not a direct buffer");
    long l = _table._addressof_eglOutputPortAttribEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglOutputPortAttribEXT" }));
    }
    return dispatch_eglOutputPortAttribEXT0(paramLong1, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, paramLong2, l);
  }
  



  private native boolean dispatch_eglOutputPortAttribEXT0(long paramLong1, Object paramObject, int paramInt1, int paramInt2, long paramLong2, long paramLong3);
  


  public boolean eglQueryOutputPortAttribEXT(long paramLong, Buffer paramBuffer, int paramInt, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"port\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table._addressof_eglQueryOutputPortAttribEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryOutputPortAttribEXT" }));
    }
    return dispatch_eglQueryOutputPortAttribEXT0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  



  private native boolean dispatch_eglQueryOutputPortAttribEXT0(long paramLong1, Object paramObject1, int paramInt1, int paramInt2, Object paramObject2, int paramInt3, long paramLong2);
  


  public ByteBuffer eglQueryOutputPortStringEXT(long paramLong, Buffer paramBuffer, int paramInt)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"port\" is not a direct buffer");
    long l = _table._addressof_eglQueryOutputPortStringEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryOutputPortStringEXT" }));
    }
    
    ByteBuffer localByteBuffer = dispatch_eglQueryOutputPortStringEXT0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, l);
    if (localByteBuffer == null) return null;
    Buffers.nativeOrder(localByteBuffer);
    return localByteBuffer;
  }
  



  private native ByteBuffer dispatch_eglQueryOutputPortStringEXT0(long paramLong1, Object paramObject, int paramInt1, int paramInt2, long paramLong2);
  


  public long eglGetPlatformDisplayEXT(int paramInt, Buffer paramBuffer, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"native_display\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglGetPlatformDisplayEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetPlatformDisplayEXT" }));
    }
    return dispatch_eglGetPlatformDisplayEXT0(paramInt, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  



  private native long dispatch_eglGetPlatformDisplayEXT0(int paramInt1, Object paramObject1, int paramInt2, Object paramObject2, int paramInt3, long paramLong);
  



  public long eglCreatePlatformWindowSurfaceEXT(long paramLong1, long paramLong2, Buffer paramBuffer, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"native_window\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreatePlatformWindowSurfaceEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreatePlatformWindowSurfaceEXT" }));
    }
    return dispatch_eglCreatePlatformWindowSurfaceEXT0(paramLong1, paramLong2, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  



  private native long dispatch_eglCreatePlatformWindowSurfaceEXT0(long paramLong1, long paramLong2, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, long paramLong3);
  



  public long eglCreatePlatformPixmapSurfaceEXT(long paramLong1, long paramLong2, Buffer paramBuffer, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"native_pixmap\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreatePlatformPixmapSurfaceEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreatePlatformPixmapSurfaceEXT" }));
    }
    return dispatch_eglCreatePlatformPixmapSurfaceEXT0(paramLong1, paramLong2, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  



  private native long dispatch_eglCreatePlatformPixmapSurfaceEXT0(long paramLong1, long paramLong2, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, long paramLong3);
  



  public boolean eglStreamConsumerOutputEXT(long paramLong, Buffer paramBuffer1, Buffer paramBuffer2)
  {
    if (!Buffers.isDirect(paramBuffer1))
      throw new RuntimeException("Argument \"stream\" is not a direct buffer");
    if (!Buffers.isDirect(paramBuffer2))
      throw new RuntimeException("Argument \"layer\" is not a direct buffer");
    long l = _table._addressof_eglStreamConsumerOutputEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglStreamConsumerOutputEXT" }));
    }
    return dispatch_eglStreamConsumerOutputEXT0(paramLong, paramBuffer1, Buffers.getDirectBufferByteOffset(paramBuffer1), paramBuffer2, Buffers.getDirectBufferByteOffset(paramBuffer2), l);
  }
  



  private native boolean dispatch_eglStreamConsumerOutputEXT0(long paramLong1, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, long paramLong2);
  


  public boolean eglSwapBuffersWithDamageEXT(long paramLong1, long paramLong2, IntBuffer paramIntBuffer, int paramInt)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"rects\" is not a direct buffer");
    long l = _table._addressof_eglSwapBuffersWithDamageEXT;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglSwapBuffersWithDamageEXT" }));
    }
    return dispatch_eglSwapBuffersWithDamageEXT0(paramLong1, paramLong2, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), paramInt, l);
  }
  


  private native boolean dispatch_eglSwapBuffersWithDamageEXT0(long paramLong1, long paramLong2, Object paramObject, int paramInt1, int paramInt2, long paramLong3);
  

  public long eglCreatePixmapSurfaceHI(long paramLong1, long paramLong2, EGLClientPixmapHI paramEGLClientPixmapHI)
  {
    long l = _table._addressof_eglCreatePixmapSurfaceHI;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreatePixmapSurfaceHI" }));
    }
    return dispatch_eglCreatePixmapSurfaceHI0(paramLong1, paramLong2, paramEGLClientPixmapHI == null ? null : paramEGLClientPixmapHI.getBuffer(), l);
  }
  


  private native long dispatch_eglCreatePixmapSurfaceHI0(long paramLong1, long paramLong2, ByteBuffer paramByteBuffer, long paramLong3);
  

  public long eglCreateDRMImageMESA(long paramLong, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreateDRMImageMESA;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateDRMImageMESA" }));
    }
    return dispatch_eglCreateDRMImageMESA0(paramLong, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  



  private native long dispatch_eglCreateDRMImageMESA0(long paramLong1, Object paramObject, int paramInt, long paramLong2);
  



  public boolean eglExportDRMImageMESA(long paramLong1, long paramLong2, IntBuffer paramIntBuffer1, IntBuffer paramIntBuffer2, IntBuffer paramIntBuffer3)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new RuntimeException("Argument \"name\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new RuntimeException("Argument \"handle\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer3))
      throw new RuntimeException("Argument \"stride\" is not a direct buffer");
    long l = _table._addressof_eglExportDRMImageMESA;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglExportDRMImageMESA" }));
    }
    return dispatch_eglExportDRMImageMESA0(paramLong1, paramLong2, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), paramIntBuffer3, Buffers.getDirectBufferByteOffset(paramIntBuffer3), l);
  }
  




  private native boolean dispatch_eglExportDRMImageMESA0(long paramLong1, long paramLong2, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, Object paramObject3, int paramInt3, long paramLong3);
  




  public boolean eglExportDMABUFImageQueryMESA(long paramLong1, long paramLong2, IntBuffer paramIntBuffer1, IntBuffer paramIntBuffer2, LongBuffer paramLongBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new RuntimeException("Argument \"fourcc\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new RuntimeException("Argument \"num_planes\" is not a direct buffer");
    if (!Buffers.isDirect(paramLongBuffer))
      throw new RuntimeException("Argument \"modifiers\" is not a direct buffer");
    long l = _table._addressof_eglExportDMABUFImageQueryMESA;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglExportDMABUFImageQueryMESA" }));
    }
    return dispatch_eglExportDMABUFImageQueryMESA0(paramLong1, paramLong2, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), paramLongBuffer, Buffers.getDirectBufferByteOffset(paramLongBuffer), l);
  }
  




  private native boolean dispatch_eglExportDMABUFImageQueryMESA0(long paramLong1, long paramLong2, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, Object paramObject3, int paramInt3, long paramLong3);
  




  public boolean eglExportDMABUFImageMESA(long paramLong1, long paramLong2, IntBuffer paramIntBuffer1, IntBuffer paramIntBuffer2, IntBuffer paramIntBuffer3)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new RuntimeException("Argument \"fds\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new RuntimeException("Argument \"strides\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer3))
      throw new RuntimeException("Argument \"offsets\" is not a direct buffer");
    long l = _table._addressof_eglExportDMABUFImageMESA;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglExportDMABUFImageMESA" }));
    }
    return dispatch_eglExportDMABUFImageMESA0(paramLong1, paramLong2, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), paramIntBuffer3, Buffers.getDirectBufferByteOffset(paramIntBuffer3), l);
  }
  



  private native boolean dispatch_eglExportDMABUFImageMESA0(long paramLong1, long paramLong2, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, Object paramObject3, int paramInt3, long paramLong3);
  



  public boolean eglSwapBuffersRegionNOK(long paramLong1, long paramLong2, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"rects\" is not a direct buffer");
    long l = _table._addressof_eglSwapBuffersRegionNOK;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglSwapBuffersRegionNOK" }));
    }
    return dispatch_eglSwapBuffersRegionNOK0(paramLong1, paramLong2, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native boolean dispatch_eglSwapBuffersRegionNOK0(long paramLong1, long paramLong2, int paramInt1, Object paramObject, int paramInt2, long paramLong3);
  


  public boolean eglSwapBuffersRegion2NOK(long paramLong1, long paramLong2, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"rects\" is not a direct buffer");
    long l = _table._addressof_eglSwapBuffersRegion2NOK;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglSwapBuffersRegion2NOK" }));
    }
    return dispatch_eglSwapBuffersRegion2NOK0(paramLong1, paramLong2, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native boolean dispatch_eglSwapBuffersRegion2NOK0(long paramLong1, long paramLong2, int paramInt1, Object paramObject, int paramInt2, long paramLong3);
  


  public boolean eglQueryNativeDisplayNV(long paramLong, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"display_id\" is not a direct buffer");
    long l = _table._addressof_eglQueryNativeDisplayNV;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryNativeDisplayNV" }));
    }
    return dispatch_eglQueryNativeDisplayNV0(paramLong, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  


  private native boolean dispatch_eglQueryNativeDisplayNV0(long paramLong1, Object paramObject, int paramInt, long paramLong2);
  


  public boolean eglQueryNativeWindowNV(long paramLong1, long paramLong2, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"window\" is not a direct buffer");
    long l = _table._addressof_eglQueryNativeWindowNV;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryNativeWindowNV" }));
    }
    return dispatch_eglQueryNativeWindowNV0(paramLong1, paramLong2, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  


  private native boolean dispatch_eglQueryNativeWindowNV0(long paramLong1, long paramLong2, Object paramObject, int paramInt, long paramLong3);
  


  public boolean eglQueryNativePixmapNV(long paramLong1, long paramLong2, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"pixmap\" is not a direct buffer");
    long l = _table._addressof_eglQueryNativePixmapNV;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryNativePixmapNV" }));
    }
    return dispatch_eglQueryNativePixmapNV0(paramLong1, paramLong2, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  


  private native boolean dispatch_eglQueryNativePixmapNV0(long paramLong1, long paramLong2, Object paramObject, int paramInt, long paramLong3);
  

  public boolean eglPostSubBufferNV(long paramLong1, long paramLong2, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    long l = _table._addressof_eglPostSubBufferNV;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglPostSubBufferNV" }));
    }
    return dispatch_eglPostSubBufferNV0(paramLong1, paramLong2, paramInt1, paramInt2, paramInt3, paramInt4, l);
  }
  


  private native boolean dispatch_eglPostSubBufferNV0(long paramLong1, long paramLong2, int paramInt1, int paramInt2, int paramInt3, int paramInt4, long paramLong3);
  


  public long eglCreateStreamSyncNV(long paramLong, Buffer paramBuffer, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"stream\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreateStreamSyncNV;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateStreamSyncNV" }));
    }
    return dispatch_eglCreateStreamSyncNV0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  



  private native long dispatch_eglCreateStreamSyncNV0(long paramLong1, Object paramObject1, int paramInt1, int paramInt2, Object paramObject2, int paramInt3, long paramLong2);
  


  public ByteBuffer eglCreateFenceSyncNV(long paramLong, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table._addressof_eglCreateFenceSyncNV;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateFenceSyncNV" }));
    }
    
    ByteBuffer localByteBuffer = dispatch_eglCreateFenceSyncNV0(paramLong, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
    if (localByteBuffer == null) return null;
    Buffers.nativeOrder(localByteBuffer);
    return localByteBuffer;
  }
  


  private native ByteBuffer dispatch_eglCreateFenceSyncNV0(long paramLong1, int paramInt1, Object paramObject, int paramInt2, long paramLong2);
  


  public boolean eglDestroySyncNV(Buffer paramBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"sync\" is not a direct buffer");
    long l = _table._addressof_eglDestroySyncNV;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglDestroySyncNV" }));
    }
    return dispatch_eglDestroySyncNV0(paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), l);
  }
  


  private native boolean dispatch_eglDestroySyncNV0(Object paramObject, int paramInt, long paramLong);
  


  public boolean eglFenceNV(Buffer paramBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"sync\" is not a direct buffer");
    long l = _table._addressof_eglFenceNV;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglFenceNV" }));
    }
    return dispatch_eglFenceNV0(paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), l);
  }
  


  private native boolean dispatch_eglFenceNV0(Object paramObject, int paramInt, long paramLong);
  


  public int eglClientWaitSyncNV(Buffer paramBuffer, int paramInt, long paramLong)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"sync\" is not a direct buffer");
    long l = _table._addressof_eglClientWaitSyncNV;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglClientWaitSyncNV" }));
    }
    return dispatch_eglClientWaitSyncNV0(paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, paramLong, l);
  }
  


  private native int dispatch_eglClientWaitSyncNV0(Object paramObject, int paramInt1, int paramInt2, long paramLong1, long paramLong2);
  


  public boolean eglSignalSyncNV(Buffer paramBuffer, int paramInt)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"sync\" is not a direct buffer");
    long l = _table._addressof_eglSignalSyncNV;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglSignalSyncNV" }));
    }
    return dispatch_eglSignalSyncNV0(paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, l);
  }
  



  private native boolean dispatch_eglSignalSyncNV0(Object paramObject, int paramInt1, int paramInt2, long paramLong);
  


  public boolean eglGetSyncAttribNV(Buffer paramBuffer, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"sync\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table._addressof_eglGetSyncAttribNV;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetSyncAttribNV" }));
    }
    return dispatch_eglGetSyncAttribNV0(paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native boolean dispatch_eglGetSyncAttribNV0(Object paramObject1, int paramInt1, int paramInt2, Object paramObject2, int paramInt3, long paramLong);
  


  public long eglGetSystemTimeFrequencyNV()
  {
    long l = _table._addressof_eglGetSystemTimeFrequencyNV;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetSystemTimeFrequencyNV" }));
    }
    return dispatch_eglGetSystemTimeFrequencyNV0(l);
  }
  

  private native long dispatch_eglGetSystemTimeFrequencyNV0(long paramLong);
  

  public long eglGetSystemTimeNV()
  {
    long l = _table._addressof_eglGetSystemTimeNV;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetSystemTimeNV" }));
    }
    return dispatch_eglGetSystemTimeNV0(l);
  }
  

  private native long dispatch_eglGetSystemTimeNV0(long paramLong);
  

  public EGLExtImpl(EGLContext paramEGLContext, EGLExtProcAddressTable paramEGLExtProcAddressTable)
  {
    _context = paramEGLContext;
    _table = paramEGLExtProcAddressTable;
  }
  
  public boolean isFunctionAvailable(String paramString) {
    return _context.isFunctionAvailable(paramString);
  }
  
  public boolean isExtensionAvailable(String paramString) {
    return _context.isExtensionAvailable(paramString);
  }
  
  final EGLExtProcAddressTable getProcAdressTable() {
    return _table;
  }
}
