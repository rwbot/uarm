package jogamp.nativewindow.windows;

import com.jogamp.nativewindow.AbstractGraphicsConfiguration;
import com.jogamp.nativewindow.NativeWindowException;
import com.jogamp.nativewindow.UpstreamSurfaceHook;
import jogamp.nativewindow.ProxySurfaceImpl;















































public class GDISurface
  extends ProxySurfaceImpl
{
  private long windowHandle;
  private long surfaceHandle;
  
  public GDISurface(AbstractGraphicsConfiguration paramAbstractGraphicsConfiguration, long paramLong, UpstreamSurfaceHook paramUpstreamSurfaceHook, boolean paramBoolean)
  {
    super(paramAbstractGraphicsConfiguration, paramUpstreamSurfaceHook, paramBoolean);
    windowHandle = paramLong;
    surfaceHandle = 0L;
  }
  
  protected void invalidateImpl()
  {
    if (0L != surfaceHandle) {
      throw new NativeWindowException("didn't release surface Handle: " + this);
    }
    windowHandle = 0L;
  }
  








  public final void setSurfaceHandle(long paramLong)
  {
    windowHandle = paramLong;
  }
  


  public final void setWindowHandle(long paramLong)
  {
    windowHandle = paramLong;
  }
  
  public final long getWindowHandle() {
    return windowHandle;
  }
  
  protected final int lockSurfaceImpl()
  {
    if (0L == windowHandle) {
      throw new NativeWindowException("null window handle: " + this);
    }
    if (0L != surfaceHandle) {
      throw new InternalError("surface not released");
    }
    surfaceHandle = GDI.GetDC(windowHandle);
    





    return 0L != surfaceHandle ? 3 : 1;
  }
  
  protected final void unlockSurfaceImpl()
  {
    if (0L != surfaceHandle) {
      if (0 == GDI.ReleaseDC(windowHandle, surfaceHandle)) {
        throw new NativeWindowException("DC not released: " + this + ", isWindow " + GDI.IsWindow(windowHandle) + ", werr " + GDI.GetLastError() + ", thread: " + Thread.currentThread().getName());
      }
      surfaceHandle = 0L;
    }
  }
  
  public final long getSurfaceHandle()
  {
    return surfaceHandle;
  }
  
  public final int[] convertToWindowUnits(int[] paramArrayOfInt)
  {
    return paramArrayOfInt;
  }
  
  public final int[] convertToPixelUnits(int[] paramArrayOfInt)
  {
    return paramArrayOfInt;
  }
}
