package jogamp.common.os.elf;

import com.jogamp.common.os.MachineDataInfo.StaticConfig;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;


















































































































































public class SectionHeader
{
  public static final int SHT_NULL = 0;
  public static final int SHT_PROGBITS = 1;
  public static final int SHT_SYMTAB = 2;
  public static final int SHT_STRTAB = 3;
  public static final int SHT_RELA = 4;
  public static final int SHT_HASH = 5;
  public static final int SHT_DYNAMIC = 6;
  public static final int SHT_NOTE = 7;
  public static final int SHT_NOBITS = 8;
  public static final int SHT_REL = 9;
  public static final int SHT_SHLIB = 10;
  public static final int SHT_DYNSYM = 11;
  public static final int SHT_NUM = 12;
  public static final int SHT_LOPROC = 1879048192;
  public static final int SHT_HIPROC = Integer.MAX_VALUE;
  public static final int SHT_LOUSER = Integer.MIN_VALUE;
  public static final int SHT_HIUSER = -1;
  public static final int SHT_ARM_EXIDX = 1879048193;
  public static final int SHT_ARM_PREEMPTMAP = 1879048194;
  public static final int SHT_ARM_ATTRIBUTES = 1879048195;
  public static final int SHT_AARCH64_ATTRIBUTES = 1879048195;
  public static final int SHT_ARM_DEBUGOVERLAY = 1879048196;
  public static final int SHT_ARM_OVERLAYSECTION = 1879048197;
  public static final short SHN_UNDEF = 0;
  public static final short SHN_LORESERVE = -256;
  public static final short SHN_LOPROC = -256;
  public static final short SHN_HIPROC = -225;
  public static final short SHN_ABS = -15;
  public static final short SHN_COMMON = -14;
  public static final short SHN_HIRESERVE = -1;
  public final ElfHeaderPart2 eh2;
  public final Shdr raw;
  private final int idx;
  private String name;
  
  SectionHeader(ElfHeaderPart2 paramElfHeaderPart2, byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3) { this(paramElfHeaderPart2, ByteBuffer.wrap(paramArrayOfByte, 0, paramArrayOfByte.length), paramInt3); }
  
  SectionHeader(ElfHeaderPart2 paramElfHeaderPart2, ByteBuffer paramByteBuffer, int paramInt) {
    eh2 = paramElfHeaderPart2;
    raw = Shdr.create(eh1.machDesc.ordinal(), paramByteBuffer);
    idx = paramInt;
    name = null;
  }
  
  public String toString()
  {
    return "SectionHeader[idx " + idx + ", name " + name + ", type " + IOUtils.toHexString(getType()) + ", link " + raw.getSh_link() + ", info " + IOUtils.toHexString(raw.getSh_info()) + ", flags " + IOUtils.toHexString(getFlags()) + "]";
  }
  


  void initName(Section paramSection, int paramInt)
    throws IndexOutOfBoundsException
  {
    name = IOUtils.getString(data, offset + paramInt, length - paramInt, null);
  }
  
  public int getIndex()
  {
    return idx;
  }
  
  public int getType()
  {
    return raw.getSh_type();
  }
  
  public long getFlags()
  {
    return raw.getSh_flags();
  }
  
  public long getSize()
  {
    return raw.getSh_size();
  }
  
  public String getName()
  {
    return name;
  }
  





  public Section readSection(RandomAccessFile paramRandomAccessFile)
    throws IOException, IllegalArgumentException
  {
    int i = IOUtils.long2Int(raw.getSh_size());
    if ((0 == i) || (0 > i)) {
      throw new IllegalArgumentException("Shdr[" + idx + "] has invalid int size: " + raw.getSh_size() + " -> " + i);
    }
    byte[] arrayOfByte = new byte[i];
    return readSectionImpl(paramRandomAccessFile, arrayOfByte, 0, i);
  }
  









  public Section readSection(RandomAccessFile paramRandomAccessFile, byte[] paramArrayOfByte, int paramInt1, int paramInt2)
    throws IOException, IllegalArgumentException
  {
    int i = IOUtils.long2Int(raw.getSh_size());
    if ((0 == i) || (0 > i)) {
      throw new IllegalArgumentException("Shdr[" + idx + "] has invalid int size: " + raw.getSh_size() + " -> " + i);
    }
    if (paramInt2 > i) {
      throw new IllegalArgumentException("Shdr[" + idx + "] has only " + i + " bytes, while read request is of " + paramInt2 + " bytes");
    }
    return readSectionImpl(paramRandomAccessFile, paramArrayOfByte, paramInt1, paramInt2);
  }
  
  Section readSectionImpl(RandomAccessFile paramRandomAccessFile, byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws IOException, IllegalArgumentException {
    long l = raw.getSh_offset();
    IOUtils.seek(paramRandomAccessFile, l);
    IOUtils.readBytes(paramRandomAccessFile, paramArrayOfByte, paramInt1, paramInt2);
    if (1879048195 == getType()) {
      return new SectionArmAttributes(this, paramArrayOfByte, paramInt1, paramInt2);
    }
    return new Section(this, paramArrayOfByte, paramInt1, paramInt2);
  }
}
