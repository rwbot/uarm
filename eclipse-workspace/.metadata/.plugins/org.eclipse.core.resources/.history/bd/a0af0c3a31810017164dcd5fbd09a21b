package jogamp.nativewindow.jawt.x11;

import com.jogamp.common.nio.Buffers;
import com.jogamp.common.nio.StructAccessor;
import com.jogamp.common.os.MachineDataInfo;
import com.jogamp.common.os.MachineDataInfo.StaticConfig;
import java.nio.ByteBuffer;
import jogamp.common.os.MachineDataInfoRuntime;
import jogamp.nativewindow.jawt.JAWT_PlatformInfo;








public class JAWT_X11DrawingSurfaceInfo
  implements JAWT_PlatformInfo
{
  StructAccessor accessor;
  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  
  private final MachineDataInfo md;
  private static final int[] JAWT_X11DrawingSurfaceInfo_size = { 24, 24, 24, 24, 24, 24, 48, 48 };
  private static final int[] drawable_offset = { 0, 0, 0, 0, 0, 0, 0, 0 };
  
  private static final int[] display_offset = { 4, 4, 4, 4, 4, 4, 8, 8 };
  
  private static final int[] visualID_offset = { 8, 8, 8, 8, 8, 8, 16, 16 };
  
  private static final int[] colormapID_offset = { 12, 12, 12, 12, 12, 12, 24, 24 };
  
  private static final int[] depth_offset = { 16, 16, 16, 16, 16, 16, 32, 32 };
  
  public static int size()
  {
    return JAWT_X11DrawingSurfaceInfo_size[mdIdx];
  }
  
  public static JAWT_X11DrawingSurfaceInfo create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }
  
  public static JAWT_X11DrawingSurfaceInfo create(ByteBuffer paramByteBuffer) {
    return new JAWT_X11DrawingSurfaceInfo(paramByteBuffer);
  }
  
  JAWT_X11DrawingSurfaceInfo(ByteBuffer paramByteBuffer) {
    md = valuesmdIdxmd;
    accessor = new StructAccessor(paramByteBuffer);
  }
  
  public ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }
  
  public JAWT_X11DrawingSurfaceInfo setDrawable(long paramLong)
  {
    accessor.setLongAt(drawable_offset[mdIdx], paramLong, md.pointerSizeInBytes());
    return this;
  }
  
  public long getDrawable()
  {
    return accessor.getLongAt(drawable_offset[mdIdx], md.pointerSizeInBytes());
  }
  

  public JAWT_X11DrawingSurfaceInfo setDisplay(long paramLong)
  {
    accessor.setLongAt(display_offset[mdIdx], paramLong, md.pointerSizeInBytes());
    return this;
  }
  
  public long getDisplay()
  {
    return accessor.getLongAt(display_offset[mdIdx], md.pointerSizeInBytes());
  }
  

  public JAWT_X11DrawingSurfaceInfo setVisualID(long paramLong)
  {
    accessor.setLongAt(visualID_offset[mdIdx], paramLong, md.longSizeInBytes());
    return this;
  }
  
  public long getVisualID()
  {
    return accessor.getLongAt(visualID_offset[mdIdx], md.longSizeInBytes());
  }
  
  public JAWT_X11DrawingSurfaceInfo setColormapID(long paramLong)
  {
    accessor.setLongAt(colormapID_offset[mdIdx], paramLong, md.pointerSizeInBytes());
    return this;
  }
  
  public long getColormapID()
  {
    return accessor.getLongAt(colormapID_offset[mdIdx], md.pointerSizeInBytes());
  }
  

  public JAWT_X11DrawingSurfaceInfo setDepth(int paramInt)
  {
    accessor.setIntAt(depth_offset[mdIdx], paramInt, md.intSizeInBytes());
    return this;
  }
  
  public int getDepth()
  {
    return accessor.getIntAt(depth_offset[mdIdx], md.intSizeInBytes());
  }
}
