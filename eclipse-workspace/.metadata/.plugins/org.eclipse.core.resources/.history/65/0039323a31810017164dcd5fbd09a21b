package jogamp.opengl.windows.wgl;

import java.lang.reflect.Field;

public final class WGLExtProcAddressTable extends com.jogamp.gluegen.runtime.ProcAddressTable
{
  long _addressof_wglCreateBufferRegionARB;
  long _addressof_wglDeleteBufferRegionARB;
  long _addressof_wglSaveBufferRegionARB;
  long _addressof_wglRestoreBufferRegionARB;
  long _addressof_wglCreateContextAttribsARB;
  long _addressof_wglGetExtensionsStringARB;
  long _addressof_wglMakeContextCurrent;
  long _addressof_wglGetCurrentReadDC;
  long _addressof_wglCreatePbufferARB;
  long _addressof_wglGetPbufferDCARB;
  
  public WGLExtProcAddressTable() {}
  
  public WGLExtProcAddressTable(com.jogamp.gluegen.runtime.FunctionAddressResolver paramFunctionAddressResolver) {
    super(paramFunctionAddressResolver);
  }
  

  long _addressof_wglReleasePbufferDCARB;
  
  long _addressof_wglDestroyPbufferARB;
  
  long _addressof_wglQueryPbufferARB;
  
  long _addressof_wglGetPixelFormatAttribivARB;
  
  long _addressof_wglGetPixelFormatAttribfvARB;
  
  long _addressof_wglChoosePixelFormatARB;
  
  long _addressof_wglBindTexImageARB;
  
  long _addressof_wglReleaseTexImageARB;
  long _addressof_wglSetPbufferAttribARB;
  long _addressof_wglSetStereoEmitterState3DL;
  long _addressof_wglGetGPUIDsAMD;
  long _addressof_wglGetGPUInfoAMD;
  long _addressof_wglGetContextGPUIDAMD;
  long _addressof_wglCreateAssociatedContextAMD;
  long _addressof_wglCreateAssociatedContextAttribsAMD;
  long _addressof_wglDeleteAssociatedContextAMD;
  long _addressof_wglMakeAssociatedContextCurrentAMD;
  long _addressof_wglGetCurrentAssociatedContextAMD;
  long _addressof_wglBlitContextFramebufferAMD;
  long _addressof_wglCreateDisplayColorTableEXT;
  long _addressof_wglLoadDisplayColorTableEXT;
  long _addressof_wglBindDisplayColorTableEXT;
  long _addressof_wglDestroyDisplayColorTableEXT;
  long _addressof_wglGetExtensionsStringEXT;
  long _addressof_wglCreatePbufferEXT;
  long _addressof_wglGetPbufferDCEXT;
  long _addressof_wglReleasePbufferDCEXT;
  long _addressof_wglDestroyPbufferEXT;
  long _addressof_wglQueryPbufferEXT;
  long _addressof_wglGetPixelFormatAttribivEXT;
  long _addressof_wglGetPixelFormatAttribfvEXT;
  long _addressof_wglChoosePixelFormatEXT;
  long _addressof_wglSwapIntervalEXT;
  long _addressof_wglGetSwapIntervalEXT;
  long _addressof_wglEnableFrameLockI3D;
  long _addressof_wglDisableFrameLockI3D;
  long _addressof_wglIsEnabledFrameLockI3D;
  long _addressof_wglQueryFrameLockMasterI3D;
  long _addressof_wglGetFrameUsageI3D;
  long _addressof_wglBeginFrameTrackingI3D;
  long _addressof_wglEndFrameTrackingI3D;
  long _addressof_wglQueryFrameTrackingI3D;
  long _addressof_wglDXSetResourceShareHandleNV;
  long _addressof_wglDXOpenDeviceNV;
  long _addressof_wglDXCloseDeviceNV;
  long _addressof_wglDXRegisterObjectNV;
  long _addressof_wglDXUnregisterObjectNV;
  long _addressof_wglDXObjectAccessNV;
  long _addressof_wglDXLockObjectsNV;
  long _addressof_wglDXUnlockObjectsNV;
  long _addressof_wglCopyImageSubDataNV;
  long _addressof_wglDelayBeforeSwapNV;
  long _addressof_wglEnumerateVideoDevicesNV;
  long _addressof_wglBindVideoDeviceNV;
  long _addressof_wglQueryCurrentContextNV;
  long _addressof_wglJoinSwapGroupNV;
  long _addressof_wglBindSwapBarrierNV;
  long _addressof_wglQuerySwapGroupNV;
  long _addressof_wglQueryMaxSwapGroupsNV;
  long _addressof_wglQueryFrameCountNV;
  long _addressof_wglResetFrameCountNV;
  long _addressof_wglAllocateMemoryNV;
  long _addressof_wglFreeMemoryNV;
  long _addressof_wglBindVideoCaptureDeviceNV;
  long _addressof_wglEnumerateVideoCaptureDevicesNV;
  long _addressof_wglLockVideoCaptureDeviceNV;
  long _addressof_wglQueryVideoCaptureDeviceNV;
  long _addressof_wglReleaseVideoCaptureDeviceNV;
  long _addressof_wglGetVideoDeviceNV;
  long _addressof_wglReleaseVideoDeviceNV;
  long _addressof_wglBindVideoImageNV;
  long _addressof_wglReleaseVideoImageNV;
  long _addressof_wglSendPbufferToVideoNV;
  long _addressof_wglGetVideoInfoNV;
  protected boolean isFunctionAvailableImpl(String paramString)
    throws IllegalArgumentException
  {
    String str1 = com.jogamp.gluegen.runtime.opengl.GLNameResolver.normalizeVEN(com.jogamp.gluegen.runtime.opengl.GLNameResolver.normalizeARB(paramString, true), true);
    final String str2 = "_addressof_" + str1;
    final int i = com.jogamp.gluegen.runtime.opengl.GLNameResolver.getFuncNamePermutationNumber(str1);
    Field localField = (Field)java.security.AccessController.doPrivileged(new java.security.PrivilegedAction() {
      public final Field run() {
        Field localField = null;
        for (int i = 0; i < i; i++) {
          String str = com.jogamp.gluegen.runtime.opengl.GLNameResolver.getFuncNamePermutation(str2, i);
          try {
            localField = WGLExtProcAddressTable.class.getDeclaredField(str);
            localField.setAccessible(true);
            return localField;
          } catch (NoSuchFieldException localNoSuchFieldException) {}
        }
        return null;
      }
    });
    if (null == localField)
    {

      throw new RuntimeException("WARNING: Address field query failed for \"" + str1 + "\"/\"" + paramString + "\"; it's either statically linked or address field is not a known " + "function");
    }
    

    try
    {
      return 0L != localField.getLong(this);
    } catch (Exception localException) {
      throw new RuntimeException("WARNING: Address query failed for \"" + str1 + "\"/\"" + paramString + "\"; it's either statically linked or is not a known " + "function", localException);
    }
  }
  

  public long getAddressFor(String paramString)
    throws SecurityException, IllegalArgumentException
  {
    com.jogamp.common.util.SecurityUtil.checkAllLinkPermission();
    String str1 = com.jogamp.gluegen.runtime.opengl.GLNameResolver.normalizeVEN(com.jogamp.gluegen.runtime.opengl.GLNameResolver.normalizeARB(paramString, true), true);
    final String str2 = "_addressof_" + str1;
    final int i = com.jogamp.gluegen.runtime.opengl.GLNameResolver.getFuncNamePermutationNumber(str1);
    Field localField = (Field)java.security.AccessController.doPrivileged(new java.security.PrivilegedAction() {
      public final Field run() {
        Field localField = null;
        for (int i = 0; i < i; i++) {
          String str = com.jogamp.gluegen.runtime.opengl.GLNameResolver.getFuncNamePermutation(str2, i);
          try {
            localField = WGLExtProcAddressTable.class.getDeclaredField(str);
            localField.setAccessible(true);
            return localField;
          } catch (NoSuchFieldException localNoSuchFieldException) {}
        }
        return null;
      }
    });
    if (null == localField)
    {

      throw new RuntimeException("WARNING: Address field query failed for \"" + str1 + "\"/\"" + paramString + "\"; it's either statically linked or address field is not a known " + "function");
    }
    

    try
    {
      return localField.getLong(this);
    } catch (Exception localException) {
      throw new RuntimeException("WARNING: Address query failed for \"" + str1 + "\"/\"" + paramString + "\"; it's either statically linked or is not a known " + "function", localException);
    }
  }
}
