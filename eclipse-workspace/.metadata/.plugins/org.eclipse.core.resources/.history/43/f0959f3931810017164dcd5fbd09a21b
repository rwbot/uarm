package processing.opengl;

import processing.core.PMatrix2D;





























































































public class LinePath
{
  public static final int WIND_EVEN_ODD = 0;
  public static final int WIND_NON_ZERO = 1;
  public static final byte SEG_MOVETO = 0;
  public static final byte SEG_LINETO = 1;
  public static final byte SEG_CLOSE = 2;
  public static final int JOIN_MITER = 0;
  public static final int JOIN_ROUND = 1;
  public static final int JOIN_BEVEL = 2;
  public static final int CAP_BUTT = 0;
  public static final int CAP_ROUND = 1;
  public static final int CAP_SQUARE = 2;
  private static PMatrix2D identity = new PMatrix2D();
  
  private static float defaultMiterlimit = 10.0F;
  

  static final int INIT_SIZE = 20;
  

  static final int EXPAND_MAX = 500;
  

  protected byte[] pointTypes;
  
  protected float[] floatCoords;
  
  protected int[] pointColors;
  
  protected int numTypes;
  
  protected int numCoords;
  
  protected int windingRule;
  

  public LinePath()
  {
    this(1, 20);
  }
  










  public LinePath(int rule)
  {
    this(rule, 20);
  }
  










  public LinePath(int rule, int initialCapacity)
  {
    setWindingRule(rule);
    pointTypes = new byte[initialCapacity];
    floatCoords = new float[initialCapacity * 2];
    pointColors = new int[initialCapacity];
  }
  
  void needRoom(boolean needMove, int newPoints)
  {
    if ((needMove) && (numTypes == 0)) {
      throw new RuntimeException("missing initial moveto in path definition");
    }
    
    int size = pointTypes.length;
    if (numTypes >= size) {
      int grow = size;
      if (grow > 500) {
        grow = 500;
      }
      pointTypes = copyOf(pointTypes, size + grow);
    }
    size = floatCoords.length;
    if (numCoords + newPoints * 2 > size) {
      int grow = size;
      if (grow > 1000) {
        grow = 1000;
      }
      if (grow < newPoints * 2) {
        grow = newPoints * 2;
      }
      floatCoords = copyOf(floatCoords, size + grow);
    }
    size = pointColors.length;
    if (numCoords / 2 + newPoints > size) {
      int grow = size;
      if (grow > 500) {
        grow = 500;
      }
      if (grow < newPoints) {
        grow = newPoints;
      }
      pointColors = copyOf(pointColors, size + grow);
    }
  }
  













  public final void moveTo(float x, float y, int c)
  {
    if ((numTypes > 0) && (pointTypes[(numTypes - 1)] == 0)) {
      floatCoords[(numCoords - 2)] = x;
      floatCoords[(numCoords - 1)] = y;
      pointColors[(numCoords / 2 - 1)] = c;
    } else {
      needRoom(false, 1);
      pointTypes[(numTypes++)] = 0;
      floatCoords[(numCoords++)] = x;
      floatCoords[(numCoords++)] = y;
      pointColors[(numCoords / 2 - 1)] = c;
    }
  }
  













  public final void lineTo(float x, float y, int c)
  {
    needRoom(true, 1);
    pointTypes[(numTypes++)] = 1;
    floatCoords[(numCoords++)] = x;
    floatCoords[(numCoords++)] = y;
    pointColors[(numCoords / 2 - 1)] = c;
  }
  






  public PathIterator getPathIterator()
  {
    return new PathIterator(this);
  }
  





  public final void closePath()
  {
    if ((numTypes == 0) || (pointTypes[(numTypes - 1)] != 2)) {
      needRoom(false, 0);
      pointTypes[(numTypes++)] = 2;
    }
  }
  








  public final int getWindingRule()
  {
    return windingRule;
  }
  










  public final void setWindingRule(int rule)
  {
    if ((rule != 0) && (rule != 1)) {
      throw new IllegalArgumentException("winding rule must be WIND_EVEN_ODD or WIND_NON_ZERO");
    }
    
    windingRule = rule;
  }
  




  public final void reset()
  {
    numTypes = (this.numCoords = 0);
  }
  

  public static class PathIterator
  {
    float[] floatCoords;
    
    int typeIdx;
    
    int pointIdx;
    
    int colorIdx;
    
    LinePath path;
    static final int[] curvecoords = { 2, 2 };
    
    PathIterator(LinePath p2df) {
      path = p2df;
      floatCoords = floatCoords;
      pointIdx = 0;
      colorIdx = 0;
    }
    
    public int currentSegment(float[] coords) {
      int type = path.pointTypes[typeIdx];
      int numCoords = curvecoords[type];
      if (numCoords > 0) {
        System.arraycopy(floatCoords, pointIdx, coords, 0, numCoords);
        int color = path.pointColors[colorIdx];
        coords[(numCoords + 0)] = (color >> 24 & 0xFF);
        coords[(numCoords + 1)] = (color >> 16 & 0xFF);
        coords[(numCoords + 2)] = (color >> 8 & 0xFF);
        coords[(numCoords + 3)] = (color >> 0 & 0xFF);
      }
      return type;
    }
    
    public int currentSegment(double[] coords) {
      int type = path.pointTypes[typeIdx];
      int numCoords = curvecoords[type];
      if (numCoords > 0) {
        for (int i = 0; i < numCoords; i++) {
          coords[i] = floatCoords[(pointIdx + i)];
        }
        int color = path.pointColors[colorIdx];
        coords[(numCoords + 0)] = (color >> 24 & 0xFF);
        coords[(numCoords + 1)] = (color >> 16 & 0xFF);
        coords[(numCoords + 2)] = (color >> 8 & 0xFF);
        coords[(numCoords + 3)] = (color >> 0 & 0xFF);
      }
      return type;
    }
    
    public int getWindingRule() {
      return path.getWindingRule();
    }
    
    public boolean isDone() {
      return typeIdx >= path.numTypes;
    }
    
    public void next() {
      int type = path.pointTypes[(typeIdx++)];
      if (curvecoords[type] > 0) {
        pointIdx += curvecoords[type];
        colorIdx += 1;
      }
    }
  }
  






  public static LinePath createStrokedPath(LinePath src, float weight, int caps, int join)
  {
    return createStrokedPath(src, weight, caps, join, defaultMiterlimit, null);
  }
  

  public static LinePath createStrokedPath(LinePath src, float weight, int caps, int join, float miterlimit)
  {
    return createStrokedPath(src, weight, caps, join, miterlimit, null);
  }
  

















  public static LinePath createStrokedPath(LinePath src, float weight, int caps, int join, float miterlimit, PMatrix2D transform)
  {
    LinePath dest = new LinePath();
    
    strokeTo(src, weight, caps, join, miterlimit, transform, new LineStroker()
    {
      public void moveTo(int x0, int y0, int c0) {
        moveTo(LinePath.S15_16ToFloat(x0), LinePath.S15_16ToFloat(y0), c0);
      }
      

      public void lineJoin() {}
      

      public void lineTo(int x1, int y1, int c1)
      {
        lineTo(LinePath.S15_16ToFloat(x1), LinePath.S15_16ToFloat(y1), c1);
      }
      
      public void close()
      {
        closePath();
      }
      



      public void end() {}
    });
    return dest;
  }
  


  private static void strokeTo(LinePath src, float width, int caps, int join, float miterlimit, PMatrix2D transform, LineStroker lsink)
  {
    lsink = new LineStroker(lsink, FloatToS15_16(width), caps, join, 
      FloatToS15_16(miterlimit), 
      transform == null ? identity : transform);
    
    PathIterator pi = src.getPathIterator();
    pathTo(pi, lsink);
  }
  
  private static void pathTo(PathIterator pi, LineStroker lsink)
  {
    float[] coords = new float[6];
    while (!pi.isDone())
    {
      switch (pi.currentSegment(coords)) {
      case 0: 
        int color = (int)coords[2] << 24 | 
          (int)coords[3] << 16 | 
          (int)coords[4] << 8 | 
          (int)coords[5];
        lsink.moveTo(FloatToS15_16(coords[0]), FloatToS15_16(coords[1]), color);
        break;
      case 1: 
        int color = (int)coords[2] << 24 | 
          (int)coords[3] << 16 | 
          (int)coords[4] << 8 | 
          (int)coords[5];
        lsink.lineJoin();
        lsink.lineTo(FloatToS15_16(coords[0]), FloatToS15_16(coords[1]), color);
        break;
      case 2: 
        lsink.lineJoin();
        lsink.close();
        break;
      default: 
        throw new InternalError("unknown flattened segment type");
      }
      pi.next();
    }
    lsink.end();
  }
  





  public static float[] copyOf(float[] source, int length)
  {
    float[] target = new float[length];
    for (int i = 0; i < target.length; i++) {
      if (i > source.length - 1) {
        target[i] = 0.0F;
      } else
        target[i] = source[i];
    }
    return target;
  }
  
  public static byte[] copyOf(byte[] source, int length)
  {
    byte[] target = new byte[length];
    for (int i = 0; i < target.length; i++) {
      if (i > source.length - 1) {
        target[i] = 0;
      } else
        target[i] = source[i];
    }
    return target;
  }
  
  public static int[] copyOf(int[] source, int length)
  {
    int[] target = new int[length];
    for (int i = 0; i < target.length; i++) {
      if (i > source.length - 1) {
        target[i] = 0;
      } else
        target[i] = source[i];
    }
    return target;
  }
  

  public static int isqrt(int x)
  {
    int fracbits = 16;
    
    int root = 0;
    int remHi = 0;
    int remLo = x;
    int count = 15 + fracbits / 2;
    do
    {
      remHi = remHi << 2 | remLo >>> 30;
      remLo <<= 2;
      root <<= 1;
      int testdiv = (root << 1) + 1;
      if (remHi >= testdiv) {
        remHi -= testdiv;
        root++;
      }
    } while (count-- != 0);
    
    return root;
  }
  
  public static long lsqrt(long x)
  {
    int fracbits = 16;
    
    long root = 0L;
    long remHi = 0L;
    long remLo = x;
    int count = 31 + fracbits / 2;
    do
    {
      remHi = remHi << 2 | remLo >>> 62;
      remLo <<= 2;
      root <<= 1;
      long testDiv = (root << 1) + 1L;
      if (remHi >= testDiv) {
        remHi -= testDiv;
        root += 1L;
      }
    } while (count-- != 0);
    
    return root;
  }
  
  public static double hypot(double x, double y)
  {
    return Math.sqrt(x * x + y * y);
  }
  
  public static int hypot(int x, int y)
  {
    return (int)(lsqrt(x * x + y * y) + 128L >> 8);
  }
  
  public static long hypot(long x, long y)
  {
    return lsqrt(x * x + y * y) + 128L >> 8;
  }
  
  static int FloatToS15_16(float flt)
  {
    flt = flt * 65536.0F + 0.5F;
    if (flt <= -4.2949673E9F)
      return Integer.MIN_VALUE;
    if (flt >= 4.2949673E9F) {
      return Integer.MAX_VALUE;
    }
    return (int)Math.floor(flt);
  }
  

  static float S15_16ToFloat(int fix)
  {
    return fix / 65536.0F;
  }
}
