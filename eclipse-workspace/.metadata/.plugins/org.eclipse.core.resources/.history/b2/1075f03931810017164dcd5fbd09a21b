package com.jogamp.opengl.util;

import com.jogamp.opengl.GLAutoDrawable;
import java.awt.Container;
import java.awt.EventQueue;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.IdentityHashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JComponent;
import javax.swing.RepaintManager;
import javax.swing.SwingUtilities;








































class AWTAnimatorImpl
  implements AnimatorBase.AnimatorImpl
{
  private final List<JComponent> lightweights = new ArrayList();
  private final Map<RepaintManager, RepaintManager> repaintManagers = new IdentityHashMap();
  private final Map<JComponent, Rectangle> dirtyRegions = new IdentityHashMap();
  
  AWTAnimatorImpl() {}
  
  public void display(ArrayList<GLAutoDrawable> paramArrayList, boolean paramBoolean1, boolean paramBoolean2) throws AnimatorBase.UncaughtAnimatorException
  {
    int i = 0;
    for (int j = 0; (i == 0) && (j < paramArrayList.size()); j++) {
      GLAutoDrawable localGLAutoDrawable = null;
      int k = 1;
      try {
        localGLAutoDrawable = (GLAutoDrawable)paramArrayList.get(j);
        k = 0;
        if ((localGLAutoDrawable instanceof JComponent))
        {



          lightweights.add((JComponent)localGLAutoDrawable);
        } else {
          localGLAutoDrawable.display();
        }
      } catch (Throwable localThrowable2) {
        if ((k != 0) && ((localThrowable2 instanceof IndexOutOfBoundsException)))
        {
          i = 1;
        } else if (paramBoolean1) {
          if (paramBoolean2) {
            localThrowable2.printStackTrace();
          }
        } else {
          throw new AnimatorBase.UncaughtAnimatorException(localGLAutoDrawable, localThrowable2);
        }
      }
    }
    if (lightweights.size() > 0) {
      try {
        SwingUtilities.invokeAndWait(drawWithRepaintManagerRunnable);
      } catch (Throwable localThrowable1) {
        localThrowable1.printStackTrace();
      }
      lightweights.clear();
    }
  }
  


  private final Runnable drawWithRepaintManagerRunnable = new Runnable()
  {
    public void run() {
      for (Iterator localIterator = lightweights.iterator(); localIterator.hasNext();) {
        localJComponent = (JComponent)localIterator.next();
        localObject1 = RepaintManager.currentManager(localJComponent);
        ((RepaintManager)localObject1).markCompletelyDirty(localJComponent);
        repaintManagers.put(localObject1, localObject1);
        











        localObject2 = localJComponent.getVisibleRect();
        int i = x;
        int j = y;
        while (localJComponent != null) {
          i += localJComponent.getX();
          j += localJComponent.getY();
          Container localContainer = localJComponent.getParent();
          if ((localContainer == null) || (!(localContainer instanceof JComponent))) {
            localJComponent = null;
          } else {
            localJComponent = (JComponent)localContainer;
            if (!localJComponent.isOptimizedDrawingEnabled()) {
              localObject1 = RepaintManager.currentManager(localJComponent);
              repaintManagers.put(localObject1, localObject1);
              
              Rectangle localRectangle = (Rectangle)dirtyRegions.get(localJComponent);
              if (localRectangle == null) {
                localRectangle = new Rectangle(i, j, width, height);
                dirtyRegions.put(localJComponent, localRectangle);


              }
              else
              {

                localRectangle.add(new Rectangle(i, j, width, height));
              }
            }
          }
        } }
      JComponent localJComponent;
      Object localObject1;
      Object localObject2;
      for (localIterator = dirtyRegions.keySet().iterator(); localIterator.hasNext();) {
        localJComponent = (JComponent)localIterator.next();
        localObject1 = (Rectangle)dirtyRegions.get(localJComponent);
        localObject2 = RepaintManager.currentManager(localJComponent);
        ((RepaintManager)localObject2).addDirtyRegion(localJComponent, x, y, width, height);
      }
      

      for (localIterator = repaintManagers.keySet().iterator(); localIterator.hasNext();) {
        ((RepaintManager)localIterator.next()).paintDirtyRegions();
      }
      dirtyRegions.clear();
      repaintManagers.clear();
    }
  };
  
  public boolean blockUntilDone(Thread paramThread)
  {
    return (Thread.currentThread() != paramThread) && (!EventQueue.isDispatchThread());
  }
}
