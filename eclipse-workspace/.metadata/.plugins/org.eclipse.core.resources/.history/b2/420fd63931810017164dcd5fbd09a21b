package jogamp.common.os.elf;

import com.jogamp.common.util.Bitstream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;






































public class SectionArmAttributes
  extends Section
{
  public static final byte FORMAT_VERSION_A = 65;
  public static final byte ABI_VFP_ARGS_IS_BASE_VARIANT = 0;
  public static final byte ABI_VFP_ARGS_IS_VFP_VARIANT = 1;
  public static final byte ABI_VFP_ARGS_IS_CUSTOM_VARIANT = 2;
  public static final byte ABI_VFP_ARGS_IS_BOTH_BASE_AND_VFP_VARIANT = 3;
  public final List<VendorAttributes> vendorAttributesList;
  
  public static enum Type
  {
    None, 
    
    SubSection, 
    
    NTBS, 
    ULEB128;
    





    private Type() {}
  }
  





  public static final boolean abiVFPArgsAcceptsVFPVariant(byte paramByte)
  {
    return (1 == paramByte) || (3 == paramByte);
  }
  
  public static enum Tag {
    None(0, SectionArmAttributes.Type.None), 
    File(1, SectionArmAttributes.Type.SubSection),  Section(2, SectionArmAttributes.Type.SubSection),  Symbol(3, SectionArmAttributes.Type.SubSection), 
    CPU_raw_name(4, SectionArmAttributes.Type.NTBS), 
    CPU_name(5, SectionArmAttributes.Type.NTBS), 
    CPU_arch(6, SectionArmAttributes.Type.ULEB128), 
    CPU_arch_profile(7, SectionArmAttributes.Type.ULEB128), 
    ARM_ISA_use(8, SectionArmAttributes.Type.ULEB128), 
    THUMB_ISA_use(9, SectionArmAttributes.Type.ULEB128), 
    FP_arch(10, SectionArmAttributes.Type.ULEB128), 
    WMMX_arch(11, SectionArmAttributes.Type.ULEB128), 
    Advanced_SIMD_arch(12, SectionArmAttributes.Type.ULEB128), 
    PCS_config(13, SectionArmAttributes.Type.ULEB128), 
    ABI_PCS_R9_use(14, SectionArmAttributes.Type.ULEB128), 
    ABI_PCS_RW_data(15, SectionArmAttributes.Type.ULEB128), 
    ABI_PCS_RO_data(16, SectionArmAttributes.Type.ULEB128), 
    ABI_PCS_GOT_use(17, SectionArmAttributes.Type.ULEB128), 
    ABI_PCS_wchar_t(18, SectionArmAttributes.Type.ULEB128), 
    ABI_FP_rounding(19, SectionArmAttributes.Type.ULEB128), 
    ABI_FP_denormal(20, SectionArmAttributes.Type.ULEB128), 
    ABI_FP_exceptions(21, SectionArmAttributes.Type.ULEB128), 
    ABI_FP_user_exceptions(22, SectionArmAttributes.Type.ULEB128), 
    ABI_FP_number_model(23, SectionArmAttributes.Type.ULEB128), 
    ABI_align_needed(24, SectionArmAttributes.Type.ULEB128), 
    ABI_align_preserved(25, SectionArmAttributes.Type.ULEB128), 
    ABI_enum_size(26, SectionArmAttributes.Type.ULEB128), 
    ABI_HardFP_use(27, SectionArmAttributes.Type.ULEB128), 
    ABI_VFP_args(28, SectionArmAttributes.Type.ULEB128), 
    ABI_WMMX_args(29, SectionArmAttributes.Type.ULEB128), 
    ABI_optimization_goals(30, SectionArmAttributes.Type.ULEB128), 
    ABI_FP_optimization_goals(31, SectionArmAttributes.Type.ULEB128), 
    compatibility(32, SectionArmAttributes.Type.NTBS), 
    CPU_unaligned_access(34, SectionArmAttributes.Type.ULEB128), 
    FP_HP_extension(36, SectionArmAttributes.Type.ULEB128), 
    ABI_FP_16bit_format(38, SectionArmAttributes.Type.ULEB128), 
    MPextension_use(42, SectionArmAttributes.Type.ULEB128), 
    DIV_use(44, SectionArmAttributes.Type.ULEB128), 
    nodefaults(64, SectionArmAttributes.Type.ULEB128), 
    also_compatible_with(65, SectionArmAttributes.Type.ULEB128), 
    T2EE_use(66, SectionArmAttributes.Type.ULEB128), 
    conformance(67, SectionArmAttributes.Type.NTBS), 
    Virtualization_use(68, SectionArmAttributes.Type.ULEB128), 
    undefined69(69, SectionArmAttributes.Type.None), 
    MPextension_use_legacy(70, SectionArmAttributes.Type.ULEB128);
    

    public final int id;
    public final SectionArmAttributes.Type type;
    
    public static Tag get(int paramInt)
    {
      Tag[] arrayOfTag = values();
      int i = arrayOfTag.length;
      for (int j = 0; j < i; j++) {
        if (id == paramInt) {
          return arrayOfTag[j];
        }
      }
      return null;
    }
    
    private Tag(int paramInt, SectionArmAttributes.Type paramType) {
      id = paramInt;
      type = paramType;
    }
  }
  
  public static class Attribute {
    public final SectionArmAttributes.Tag tag;
    private final Object value;
    
    Attribute(SectionArmAttributes.Tag paramTag, Object paramObject) {
      tag = paramTag;
      value = paramObject;
    }
    

    public final boolean isNTBS() { return SectionArmAttributes.Type.NTBS == tag.type; }
    
    public final String getNTBS() {
      if (SectionArmAttributes.Type.NTBS == tag.type) {
        return (String)value;
      }
      throw new IllegalArgumentException("Not NTBS but " + tag.type);
    }
    

    public final boolean isULEB128() { return SectionArmAttributes.Type.ULEB128 == tag.type; }
    
    public final byte getULEB128() {
      if (SectionArmAttributes.Type.ULEB128 == tag.type) {
        return ((Byte)value).byteValue();
      }
      throw new IllegalArgumentException("Not ULEB128 but " + tag.type);
    }
    
    public String toString()
    {
      return tag + " = " + value;
    }
  }
  
  public static class VendorAttributes {
    public final String vendor;
    public final List<SectionArmAttributes.Attribute> attributes;
    
    VendorAttributes(String paramString, List<SectionArmAttributes.Attribute> paramList) {
      vendor = paramString;
      attributes = paramList;
    }
    
    public String toString()
    {
      return vendor + attributes.toString();
    }
  }
  
  SectionArmAttributes(SectionHeader paramSectionHeader, byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws IndexOutOfBoundsException, IllegalArgumentException
  {
    super(paramSectionHeader, paramArrayOfByte, paramInt1, paramInt2);
    vendorAttributesList = parse(paramSectionHeader, paramArrayOfByte, paramInt1, paramInt2);
  }
  
  public String toString()
  {
    return "SectionArmAttributes[" + super.toSubString() + ", " + vendorAttributesList.toString() + "]";
  }
  
  public final Attribute get(Tag paramTag) {
    for (int i = 0; i < vendorAttributesList.size(); i++) {
      List localList = vendorAttributesList.get(i)).attributes;
      for (int j = 0; j < localList.size(); j++) {
        Attribute localAttribute = (Attribute)localList.get(j);
        if (tag == paramTag) {
          return localAttribute;
        }
      }
    }
    return null;
  }
  
  public final List<Attribute> get(String paramString) {
    return get(vendorAttributesList, paramString);
  }
  
  static final List<Attribute> get(List<VendorAttributes> paramList, String paramString) {
    for (int i = 0; i < paramList.size(); i++) {
      VendorAttributes localVendorAttributes = (VendorAttributes)paramList.get(i);
      if (vendor.equals(paramString)) {
        return attributes;
      }
    }
    return null;
  }
  







  static List<VendorAttributes> parse(SectionHeader paramSectionHeader, byte[] paramArrayOfByte, int paramInt1, int paramInt2)
    throws IndexOutOfBoundsException, IllegalArgumentException
  {
    Bitstream.checkBounds(paramArrayOfByte, paramInt1, paramInt2);
    int i = paramInt1;
    if (65 != paramArrayOfByte[i]) {
      throw new IllegalArgumentException("ShArmAttr: Not version A, but: " + IOUtils.toHexString(paramArrayOfByte[i]));
    }
    i++;
    
    ArrayList localArrayList = new ArrayList();
    boolean bool = eh2.eh1.isBigEndian();
    
    while (i < paramInt2) {
      int j = i;
      int k = IOUtils.readUInt32(bool, paramArrayOfByte, i);
      i += 4;
      


      Object localObject1 = { 0 };
      String str = IOUtils.getString(paramArrayOfByte, i, k - 4, (int[])localObject1);
      i = localObject1[0];
      

      localObject1 = new ArrayList();
      
      while (i < k) {
        localObject2 = new int[] { 0 };
        parseSub(bool, paramArrayOfByte, i, k - i, (int[])localObject2, (List)localObject1);
        i = localObject2[0];
      }
      
      if (j + k != i) {
        throw new IllegalArgumentException("ShArmAttr: Section length count mismatch, expected " + (j + k) + ", has " + i);
      }
      
      Object localObject2 = get(localArrayList, str);
      if (null != localObject2) {
        ((List)localObject2).addAll((Collection)localObject1);
      } else {
        localArrayList.add(new VendorAttributes(str, (List)localObject1));
      }
    }
    
    return localArrayList;
  }
  










  private static void parseSub(boolean paramBoolean, byte[] paramArrayOfByte, int paramInt1, int paramInt2, int[] paramArrayOfInt, List<Attribute> paramList)
    throws IndexOutOfBoundsException, IllegalArgumentException
  {
    Bitstream.checkBounds(paramArrayOfByte, paramInt1, paramInt2);
    

    int i = paramInt1;
    int j = paramArrayOfByte[(i++)];
    Tag localTag1 = Tag.get(j);
    if (null == localTag1) {
      throw new IllegalArgumentException("ShArmAttr: Invalid Sub-Section tag (NaT): " + j);
    }
    int k;
    switch (1.$SwitchMap$jogamp$common$os$elf$SectionArmAttributes$Tag[localTag1.ordinal()]) {
    case 1: 
    case 2: 
    case 3: 
      k = IOUtils.readUInt32(paramBoolean, paramArrayOfByte, i);
      i += 4;
      break;
    default: 
      throw new IllegalArgumentException("ShArmAttr: Invalid Sub-Section tag: " + localTag1);
    }
    if (Tag.File == localTag1) {
      while (i < paramInt1 + k) {
        int m = paramArrayOfByte[(i++)];
        Tag localTag2 = Tag.get(m);
        if (null == localTag2) {
          throw new IllegalArgumentException("ShArmAttr: Invalid Attribute tag (NaT): " + m);
        }
        switch (type)
        {
        case NTBS: 
          int[] arrayOfInt = { 0 };
          String str = IOUtils.getString(paramArrayOfByte, i, k + paramInt1 - i, arrayOfInt);
          paramList.add(new Attribute(localTag2, str));
          i = arrayOfInt[0];
          
          break;
        
        case ULEB128: 
          byte b = paramArrayOfByte[(i++)];
          paramList.add(new Attribute(localTag2, new Byte(b)));
          
          break;
        default: 
          throw new IllegalArgumentException("ShArmAttr: Invalid Attribute tag: " + localTag2);
        }
      }
    }
    paramArrayOfInt[0] = (paramInt1 + k);
  }
}
