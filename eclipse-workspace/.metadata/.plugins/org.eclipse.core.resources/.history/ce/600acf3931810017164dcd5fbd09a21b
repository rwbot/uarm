package com.jogamp.common.os;

import com.jogamp.common.ExceptionUtils;
import com.jogamp.common.util.IOUtil;
import com.jogamp.common.util.cache.TempJarCache;
import java.io.File;
import java.io.PrintStream;
import java.lang.reflect.Method;
import java.net.URISyntaxException;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;
import jogamp.common.os.BionicDynamicLinker32bitImpl;
import jogamp.common.os.BionicDynamicLinker64BitImpl;
import jogamp.common.os.MacOSXDynamicLinkerImpl;
import jogamp.common.os.PlatformPropsImpl;
import jogamp.common.os.PosixDynamicLinkerImpl;
import jogamp.common.os.WindowsDynamicLinkerImpl;

















































public final class NativeLibrary
  implements DynamicLookupHelper
{
  private static final String[] prefixes;
  private static final String[] suffixes;
  private static final boolean isOSX;
  private final DynamicLinker dynLink;
  private long libraryHandle;
  private final String libraryPath;
  private final boolean global;
  
  static
  {
    switch (5.$SwitchMap$com$jogamp$common$os$Platform$OSType[PlatformPropsImpl.OS_TYPE.ordinal()]) {
    case 1: 
      prefixes = new String[] { "" };
      suffixes = new String[] { ".dll" };
      isOSX = false;
      break;
    
    case 2: 
      prefixes = new String[] { "lib" };
      suffixes = new String[] { ".dylib", ".jnilib" };
      isOSX = true;
      break;
    







    default: 
      prefixes = new String[] { "lib" };
      suffixes = new String[] { ".so" };
      isOSX = false;
    }
    
  }
  












  private NativeLibrary(DynamicLinker paramDynamicLinker, long paramLong, String paramString, boolean paramBoolean)
  {
    dynLink = paramDynamicLinker;
    libraryHandle = paramLong;
    libraryPath = paramString;
    global = paramBoolean;
    if (DEBUG) {
      System.err.println("NativeLibrary.open(): Successfully loaded: " + this);
    }
  }
  
  public final String toString()
  {
    return "NativeLibrary[" + dynLink.getClass().getSimpleName() + ", " + libraryPath + ", 0x" + Long.toHexString(libraryHandle) + ", global " + global + "]";
  }
  




  public static final NativeLibrary open(String paramString, ClassLoader paramClassLoader)
    throws SecurityException
  {
    return open(paramString, paramString, paramString, true, paramClassLoader, true);
  }
  




  public static final NativeLibrary open(String paramString, ClassLoader paramClassLoader, boolean paramBoolean)
    throws SecurityException
  {
    return open(paramString, paramString, paramString, true, paramClassLoader, paramBoolean);
  }
  




















  public static final NativeLibrary open(String paramString1, String paramString2, String paramString3, boolean paramBoolean, ClassLoader paramClassLoader)
    throws SecurityException
  {
    return open(paramString1, paramString2, paramString3, paramBoolean, paramClassLoader, true);
  }
  






  public static final NativeLibrary open(String paramString1, String paramString2, String paramString3, boolean paramBoolean1, ClassLoader paramClassLoader, boolean paramBoolean2)
    throws SecurityException
  {
    List localList = enumerateLibraryPaths(paramString1, paramString2, paramString3, paramBoolean1, paramClassLoader);
    



    Platform.initSingleton();
    
    Object localObject1;
    switch (5.$SwitchMap$com$jogamp$common$os$Platform$OSType[PlatformPropsImpl.OS_TYPE.ordinal()]) {
    case 1: 
      localObject1 = new WindowsDynamicLinkerImpl();
      break;
    
    case 2: 
      localObject1 = new MacOSXDynamicLinkerImpl();
      break;
    
    case 3: 
      if (CPU_ARCHis32Bit) {
        localObject1 = new BionicDynamicLinker32bitImpl();
      } else {
        localObject1 = new BionicDynamicLinker64BitImpl();
      }
      break;
    
    default: 
      localObject1 = new PosixDynamicLinkerImpl();
    }
    
    

    for (Iterator localIterator = localList.iterator(); localIterator.hasNext();) {
      String str1 = (String)localIterator.next();
      if (DEBUG) {
        System.err.println("NativeLibrary.open(global " + paramBoolean2 + "): Trying to load " + str1);
      }
      
      Object localObject2 = null;
      long l;
      try { if (paramBoolean2) {
          l = ((DynamicLinker)localObject1).openLibraryGlobal(str1, DEBUG);
        } else {
          l = ((DynamicLinker)localObject1).openLibraryLocal(str1, DEBUG);
        }
      } catch (Throwable localThrowable1) {
        localObject2 = localThrowable1;
        l = 0L;
      }
      if (0L != l)
        return new NativeLibrary((DynamicLinker)localObject1, l, str1, paramBoolean2);
      if (DEBUG) {
        if (null != localObject2) {
          System.err.println("NativeLibrary.open: Caught " + localObject2.getClass().getSimpleName() + ": " + localObject2.getMessage());
        }
        String str2;
        try {
          str2 = ((DynamicLinker)localObject1).getLastError();
        } catch (Throwable localThrowable2) { str2 = null; }
        System.err.println("NativeLibrary.open: Last error " + str2);
        if (null != localObject2) {
          localObject2.printStackTrace();
        }
      }
    }
    
    if (DEBUG) {
      System.err.println("NativeLibrary.open(global " + paramBoolean2 + "): Did not succeed in loading (" + paramString1 + ", " + paramString2 + ", " + paramString3 + ")");
    }
    



    return null;
  }
  
  public final void claimAllLinkPermission() throws SecurityException
  {
    dynLink.claimAllLinkPermission();
  }
  
  public final void releaseAllLinkPermission() throws SecurityException {
    dynLink.releaseAllLinkPermission();
  }
  
  public final long dynamicLookupFunction(String paramString) throws SecurityException
  {
    if (0L == libraryHandle) {
      throw new RuntimeException("Library is not open");
    }
    return dynLink.lookupSymbol(libraryHandle, paramString);
  }
  
  public final boolean isFunctionAvailable(String paramString) throws SecurityException
  {
    if (0L == libraryHandle) {
      throw new RuntimeException("Library is not open");
    }
    return 0L != dynLink.lookupSymbol(libraryHandle, paramString);
  }
  

  public final long dynamicLookupFunctionGlobal(String paramString)
    throws SecurityException
  {
    return dynLink.lookupSymbolGlobal(paramString);
  }
  
  final DynamicLinker getDynamicLinker() { return dynLink; }
  


  public final long getLibraryHandle()
  {
    return libraryHandle;
  }
  
  public final String getLibraryPath()
  {
    return libraryPath;
  }
  


  public final void close()
    throws SecurityException
  {
    if (DEBUG) {
      System.err.println("NativeLibrary.close(): closing " + this);
    }
    if (0L == libraryHandle) {
      throw new RuntimeException("Library already closed");
    }
    long l = libraryHandle;
    libraryHandle = 0L;
    dynLink.closeLibrary(l, DEBUG);
    if (DEBUG) {
      System.err.println("NativeLibrary.close(): Successfully closed " + this);
      ExceptionUtils.dumpStack(System.err);
    }
  }
  




  public static final String isValidNativeLibraryName(String paramString, boolean paramBoolean)
  {
    String str1;
    


    try
    {
      str1 = IOUtil.getBasename(paramString);
    } catch (URISyntaxException localURISyntaxException) {
      throw new IllegalArgumentException(localURISyntaxException);
    }
    String str2 = paramBoolean ? str1 : str1.toLowerCase();
    int i = -1;
    for (int j = 0; (j < prefixes.length) && (0 > i); j++) {
      if (str2.startsWith(prefixes[j])) {
        i = j;
      }
    }
    if (0 <= i) {
      for (j = 0; j < suffixes.length; j++) {
        if (str2.endsWith(suffixes[j])) {
          int k = prefixes[i].length();
          int m = suffixes[j].length();
          return str1.substring(k, str1.length() - m);
        }
      }
    }
    return null;
  }
  





  public static final List<String> enumerateLibraryPaths(String paramString1, String paramString2, String paramString3, ClassLoader paramClassLoader)
  {
    return enumerateLibraryPaths(paramString1, paramString2, paramString3, false, false, paramClassLoader);
  }
  







  public static final List<String> enumerateLibraryPaths(String paramString1, String paramString2, String paramString3, boolean paramBoolean, ClassLoader paramClassLoader)
  {
    return enumerateLibraryPaths(paramString1, paramString2, paramString3, true, paramBoolean, paramClassLoader);
  }
  





  private static final List<String> enumerateLibraryPaths(String paramString1, String paramString2, String paramString3, boolean paramBoolean1, final boolean paramBoolean2, ClassLoader paramClassLoader)
  {
    ArrayList localArrayList = new ArrayList();
    String str1 = selectName(paramString1, paramString2, paramString3);
    if (str1 == null) {
      return localArrayList;
    }
    

    File localFile = new File(str1);
    if (localFile.isAbsolute()) {
      localArrayList.add(str1);
      return localArrayList;
    }
    
    String[] arrayOfString1 = buildNames(str1);
    
    if ((paramBoolean1) && (paramBoolean2))
    {
      for (int i = 0; i < arrayOfString1.length; i++) {
        localArrayList.add(arrayOfString1[i]);
      }
      
      if (isOSX)
      {
        addPaths("/Library/Frameworks/" + str1 + ".Framework", arrayOfString1, localArrayList);
        
        addPaths("/System/Library/Frameworks/" + str1 + ".Framework", arrayOfString1, localArrayList);
      }
    }
    


    String str2 = findLibrary(str1, paramClassLoader);
    if (str2 != null) {
      localArrayList.add(str2);
    }
    


    String[] arrayOfString2 = (String[])AccessController.doPrivileged(new PrivilegedAction()
    {
      public String[] run() {
        int i = 0;
        String str1 = System.getProperty("java.library.path");
        if (null != str1) {
          i++;
        }
        String str2;
        if (val$searchSystemPath) {
          str2 = System.getProperty("sun.boot.library.path");
          if (null != str2) {
            i++;
          }
        } else {
          str2 = null;
        }
        String[] arrayOfString = new String[i];
        int j = 0;
        if ((null != str2) && (paramBoolean2)) {
          arrayOfString[(j++)] = str2;
        }
        if (null != str1) {
          arrayOfString[(j++)] = str1;
        }
        if ((null != str2) && (!paramBoolean2)) {
          arrayOfString[(j++)] = str2;
        }
        return arrayOfString;
      }
    });
    if (null != arrayOfString2) {
      for (int j = 0; j < arrayOfString2.length; j++) {
        StringTokenizer localStringTokenizer = new StringTokenizer(arrayOfString2[j], File.pathSeparator);
        while (localStringTokenizer.hasMoreTokens()) {
          addPaths(localStringTokenizer.nextToken(), arrayOfString1, localArrayList);
        }
      }
    }
    


    String str3 = (String)AccessController.doPrivileged(new PrivilegedAction()
    {
      public String run() {
        return System.getProperty("user.dir");
      }
    });
    addPaths(str3, arrayOfString1, localArrayList);
    


    addPaths(str3 + File.separator + "natives" + File.separator + PlatformPropsImpl.os_and_arch + File.separator, arrayOfString1, localArrayList);
    
    if ((paramBoolean1) && (!paramBoolean2))
    {
      for (int k = 0; k < arrayOfString1.length; k++) {
        localArrayList.add(arrayOfString1[k]);
      }
      
      if (isOSX)
      {
        addPaths("/Library/Frameworks/" + str1 + ".Framework", arrayOfString1, localArrayList);
        
        addPaths("/System/Library/Frameworks/" + str1 + ".Framework", arrayOfString1, localArrayList);
      }
    }
    
    return localArrayList;
  }
  


  private static final String selectName(String paramString1, String paramString2, String paramString3)
  {
    switch (5.$SwitchMap$com$jogamp$common$os$Platform$OSType[PlatformPropsImpl.OS_TYPE.ordinal()]) {
    case 1: 
      return paramString1;
    
    case 2: 
      return paramString3;
    }
    
    return paramString2;
  }
  

  private static final String[] buildNames(String paramString)
  {
    String str;
    
    try
    {
      str = IOUtil.getBasename(paramString).toLowerCase();
    } catch (URISyntaxException localURISyntaxException) {
      throw new IllegalArgumentException(localURISyntaxException);
    }
    
    int i = -1;
    for (int j = 0; (j < prefixes.length) && (0 > i); j++) {
      if (str.startsWith(prefixes[j]))
        i = j;
    }
    int n;
    if (0 <= i) {
      for (j = 0; j < suffixes.length; j++) {
        if (str.endsWith(suffixes[j])) {
          return new String[] { paramString };
        }
      }
      j = -1;
      for (k = 0; (k < suffixes.length) && (0 > j); k++) {
        j = str.indexOf(suffixes[k]);
      }
      k = 1;
      if (j >= 0)
      {
        for (m = j + suffixes[0].length(); 
            m < paramString.length(); 
            m++) {
          n = paramString.charAt(m);
          if ((n != 46) && ((n < 48) || (n > 57))) {
            k = 0;
            break;
          }
        }
        if (k != 0) {
          return new String[] { paramString };
        }
      }
    }
    
    String[] arrayOfString = new String[prefixes.length * suffixes.length + (isOSX ? 1 : 0)];
    int k = 0;
    for (int m = 0; m < prefixes.length; m++) {
      for (n = 0; n < suffixes.length; n++) {
        arrayOfString[(k++)] = (prefixes[m] + paramString + suffixes[n]);
      }
    }
    if (isOSX)
    {
      arrayOfString[(k++)] = paramString;
    }
    return arrayOfString;
  }
  
  private static final void addPaths(String paramString, String[] paramArrayOfString, List<String> paramList) {
    for (int i = 0; i < paramArrayOfString.length; i++) {
      paramList.add(paramString + File.separator + paramArrayOfString[i]);
    }
  }
  
  private static boolean initializedFindLibraryMethod = false;
  private static Method findLibraryMethod = null;
  
  private static final String findLibraryImpl(final String paramString, ClassLoader paramClassLoader) { if (paramClassLoader == null) {
      return null;
    }
    if (!initializedFindLibraryMethod) {
      AccessController.doPrivileged(new PrivilegedAction()
      {
        public Object run() {
          try {
            NativeLibrary.access$002(ClassLoader.class.getDeclaredMethod("findLibrary", new Class[] { String.class }));
            
            NativeLibrary.findLibraryMethod.setAccessible(true);
          }
          catch (Exception localException) {}
          
          NativeLibrary.access$102(true);
          return null;
        }
      });
    }
    if (findLibraryMethod != null) {
      try {
        (String)AccessController.doPrivileged(new PrivilegedAction()
        {
          public String run() {
            try {
              return (String)NativeLibrary.findLibraryMethod.invoke(val$loader, new Object[] { paramString });
            } catch (Exception localException) {
              throw new RuntimeException(localException);
            }
          }
        });
      } catch (Exception localException) {
        if (DEBUG) {
          localException.printStackTrace();
        }
      }
    }
    
    return null;
  }
  
  public static final String findLibrary(String paramString, ClassLoader paramClassLoader) { String str = null;
    if (TempJarCache.isInitialized()) {
      str = TempJarCache.findLibrary(paramString);
      if (DEBUG) {
        System.err.println("NativeLibrary.findLibrary(<" + paramString + ">) (TempJarCache): " + str);
      }
    }
    if (null == str) {
      str = findLibraryImpl(paramString, paramClassLoader);
      if (DEBUG) {
        System.err.println("NativeLibrary.findLibrary(<" + paramString + ">, " + paramClassLoader + ") (CL): " + str);
      }
    }
    return str;
  }
}
