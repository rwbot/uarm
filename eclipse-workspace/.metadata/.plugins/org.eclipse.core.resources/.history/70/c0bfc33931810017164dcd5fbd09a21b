package g4p_controls;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.font.FontRenderContext;
import java.awt.font.ImageGraphicAttribute;
import java.awt.font.LineBreakMeasurer;
import java.awt.font.TextAttribute;
import java.awt.font.TextHitInfo;
import java.awt.font.TextLayout;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.Serializable;
import java.text.AttributedCharacterIterator;
import java.text.AttributedCharacterIterator.Attribute;
import java.text.AttributedString;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import processing.core.PApplet;

public final class StyledString
  implements GConstantsInternal, Serializable
{
  private static final long serialVersionUID = -8272976313009558508L;
  private transient AttributedString styledText = null;
  private transient ImageGraphicAttribute spacer = null;
  private transient LineBreakMeasurer lineMeasurer = null;
  private transient LinkedList<TextLayoutInfo> linesInfo = new LinkedList();
  private transient Font font = null;
  private static final char EOL = '\n';
  private String plainText = "";
  private LinkedList<AttributeRun> baseStyle = new LinkedList();
  private LinkedList<AttributeRun> atrun = new LinkedList();
  private int wrapWidth = Integer.MAX_VALUE;
  private boolean invalidLayout = true;
  private boolean invalidText = true;
  private boolean justify = false;
  private float justifyRatio = 0.7F;
  private float textHeight = 0.0F;
  private float maxLineLength = 0.0F;
  private float maxLineHeight = 0.0F;
  private int nbrLines;
  int startIdx = -1;
  int endIdx = -1;
  
  public StyledString(String paramString)
  {
    plainText = removeSingleSpacingFromPlainText(paramString);
    spacer = getParagraghSpacer(1);
    styledText = new AttributedString(plainText);
    clearAttributes();
    applyAttributes();
    invalidText = true;
    invalidLayout = true;
  }
  
  public StyledString(String paramString, int paramInt)
  {
    if ((paramInt > 0) && (paramInt < Integer.MAX_VALUE)) {
      wrapWidth = paramInt;
    }
    plainText = (paramInt == Integer.MAX_VALUE ? removeSingleSpacingFromPlainText(paramString) : removeDoubleSpacingFromPlainText(paramString));
    spacer = getParagraghSpacer(wrapWidth);
    styledText = new AttributedString(plainText);
    styledText = insertParagraphMarkers(plainText, styledText);
    clearAttributes();
    applyAttributes();
    invalidText = true;
    invalidLayout = true;
  }
  
  public void setText(String paramString)
  {
    setText(paramString, Integer.MAX_VALUE);
  }
  
  public void setText(String paramString, int paramInt)
  {
    setWrapWidth(paramInt);
    if ((paramString != null) && (!paramString.equals(plainText)))
    {
      plainText = paramString;
      if (wrapWidth == Integer.MAX_VALUE)
      {
        removeSingleSpacingFromPlainText(plainText);
        spacer = getParagraghSpacer(1);
        styledText = new AttributedString(plainText);
      }
      else
      {
        removeDoubleSpacingFromPlainText(plainText);
        spacer = getParagraghSpacer(wrapWidth);
        styledText = new AttributedString(plainText);
        styledText = insertParagraphMarkers(plainText, styledText);
      }
      clearAttributes();
      applyAttributes();
      invalidText = true;
      invalidLayout = true;
    }
  }
  
  StyledString convertToSingleLineText()
  {
    if ((styledText == null) || (plainText == null))
    {
      plainText = "";
      styledText = new AttributedString(plainText);
    }
    else
    {
      int i = plainText.indexOf('\n', 0);
      if (i >= 0)
      {
        for (;;)
        {
          if (i >= 0) {
            try
            {
              styledText.addAttribute(TextAttribute.CHAR_REPLACEMENT, Character.valueOf(' '), i, i + 1);
              i = plainText.indexOf('\n', i + 1);
            }
            catch (Exception localException) {}
          }
        }
        plainText = plainText.replace('\n', ' ');
      }
    }
    wrapWidth = Integer.MAX_VALUE;
    return this;
  }
  
  public String getPlainText()
  {
    return plainText;
  }
  
  public String getPlainText(int paramInt1, int paramInt2)
  {
    if (paramInt1 < 0) {
      paramInt1 = 0;
    }
    if (paramInt2 > plainText.length()) {
      paramInt2 = plainText.length();
    }
    return plainText.substring(paramInt1, paramInt2);
  }
  
  public String getPlainText(int paramInt)
  {
    Point localPoint = getPlainTextLinePosImpl(paramInt, null);
    return localPoint == null ? "" : plainText.substring(x, y);
  }
  
  private Point getPlainTextLinePosImpl(int paramInt, Point paramPoint)
  {
    if (paramInt < 0) {
      return null;
    }
    int i = 0;
    int j = 0;
    int k = paramInt;
    while ((k > 0) && (i < plainText.length()))
    {
      if (plainText.charAt(i) == '\n') {
        k--;
      }
      i++;
    }
    if (k > 0) {
      return null;
    }
    j = i;
    while ((i < plainText.length()) && (plainText.charAt(i) != '\n')) {
      i++;
    }
    if (paramPoint == null)
    {
      paramPoint = new Point();
    }
    else
    {
      x = j;
      y = i;
    }
    return paramPoint;
  }
  
  public String[] getPlainTextAsArray()
  {
    return plainText.split("\n");
  }
  
  public int length()
  {
    return plainText.length();
  }
  
  public void setJustify(boolean paramBoolean)
  {
    if (justify != paramBoolean)
    {
      justify = paramBoolean;
      invalidLayout = true;
    }
  }
  
  public void setJustifyRatio(float paramFloat)
  {
    if (justifyRatio != paramFloat)
    {
      justifyRatio = paramFloat;
      if (justify) {
        invalidLayout = true;
      }
    }
  }
  
  private AttributedString insertParagraphMarkers(String paramString, AttributedString paramAttributedString)
  {
    if ((paramString != null) && (paramString.length() > 0)) {
      plainText = paramString;
    }
    int i = paramString.indexOf('\n', 0);
    for (;;)
    {
      if (i >= 0) {
        try
        {
          paramAttributedString.addAttribute(TextAttribute.CHAR_REPLACEMENT, spacer, i, i + 1);
          i = paramString.indexOf('\n', i + 1);
        }
        catch (Exception localException) {}
      }
    }
    return paramAttributedString;
  }
  
  private Object validateTextAttributeColor(TextAttribute paramTextAttribute, Object paramObject)
  {
    if (((paramTextAttribute == TextAttribute.BACKGROUND) || (paramTextAttribute == TextAttribute.FOREGROUND)) && (!(paramObject instanceof Color))) {
      return new Color(((Integer)paramObject).intValue());
    }
    return paramObject;
  }
  
  public void addAttribute(AttributedCharacterIterator.Attribute paramAttribute, Object paramObject)
  {
    addAttribute(paramAttribute, paramObject, Integer.MIN_VALUE, Integer.MAX_VALUE);
  }
  
  public void addAttribute(AttributedCharacterIterator.Attribute paramAttribute, Object paramObject, int paramInt1, int paramInt2, int paramInt3)
  {
    if ((paramInt1 >= 0) && (paramInt1 < linesInfo.size()))
    {
      TextLayoutInfo localTextLayoutInfo = (TextLayoutInfo)linesInfo.get(paramInt1);
      int i = startCharIndex;
      paramInt3 = Math.min(paramInt3, nbrChars);
      addAttribute(paramAttribute, paramObject, i + paramInt2, i + paramInt3);
    }
  }
  
  public void addAttribute(AttributedCharacterIterator.Attribute paramAttribute, Object paramObject, int paramInt)
  {
    if ((paramInt >= 0) && (paramInt < linesInfo.size()))
    {
      TextLayoutInfo localTextLayoutInfo = (TextLayoutInfo)linesInfo.get(paramInt);
      addAttribute(paramAttribute, paramObject, startCharIndex, startCharIndex + nbrChars);
    }
  }
  
  public void addAttribute(AttributedCharacterIterator.Attribute paramAttribute, Object paramObject, int paramInt1, int paramInt2)
  {
    paramObject = validateTextAttributeColor((TextAttribute)paramAttribute, paramObject);
    AttributeRun localAttributeRun1 = new AttributeRun(paramAttribute, paramObject, paramInt1, paramInt2);
    if (atrun.size() > 0)
    {
      ListIterator localListIterator = atrun.listIterator(atrun.size());
      while (localListIterator.hasPrevious())
      {
        AttributeRun localAttributeRun2 = (AttributeRun)localListIterator.previous();
        int i = localAttributeRun1.intersectionWith(localAttributeRun2);
        int j = i & 0x3F;
        int k = i & 0x300;
        if (k == 256) {
          switch (j)
          {
          case 1: 
          case 4: 
            start = start;
            localListIterator.remove();
            break;
          case 2: 
          case 8: 
            end = end;
            localListIterator.remove();
          }
        } else if (k == 512) {
          switch (j)
          {
          case 4: 
            end = start;
            break;
          case 8: 
            start = end;
          }
        }
        switch (j)
        {
        case 16: 
          localListIterator.remove();
          break;
        case 32: 
          localAttributeRun1 = null;
        }
      }
    }
    if (localAttributeRun1 != null) {
      atrun.addLast(localAttributeRun1);
    }
    applyAttributes();
    invalidLayout = true;
  }
  
  public void clearAttributes(int paramInt1, int paramInt2, int paramInt3)
  {
    if ((paramInt1 >= 0) && (paramInt1 < linesInfo.size()))
    {
      TextLayoutInfo localTextLayoutInfo = (TextLayoutInfo)linesInfo.get(paramInt1);
      int i = startCharIndex;
      paramInt3 = Math.min(paramInt3, nbrChars);
      clearAttributes(i + paramInt2, i + paramInt3);
    }
  }
  
  public void clearAttributes(int paramInt)
  {
    if ((paramInt >= 0) && (paramInt < linesInfo.size()))
    {
      TextLayoutInfo localTextLayoutInfo = (TextLayoutInfo)linesInfo.get(paramInt);
      clearAttributes(startCharIndex, startCharIndex + nbrChars);
    }
  }
  
  public void clearAttributes(int paramInt1, int paramInt2)
  {
    ListIterator localListIterator = atrun.listIterator();
    while (localListIterator.hasNext())
    {
      AttributeRun localAttributeRun1 = (AttributeRun)localListIterator.next();
      if ((paramInt1 < end.intValue()) || (paramInt2 < start.intValue()))
      {
        int i = Math.max(paramInt1, start.intValue());
        int j = Math.min(paramInt2, end.intValue());
        if ((start.intValue() == i) && (end.intValue() == j))
        {
          localListIterator.remove();
        }
        else if (start.intValue() == i)
        {
          start = Integer.valueOf(j);
        }
        else if (end.intValue() == j)
        {
          end = Integer.valueOf(i);
        }
        else
        {
          AttributeRun localAttributeRun2 = new AttributeRun(atype, value, j, end.intValue());
          localListIterator.add(localAttributeRun2);
          end = Integer.valueOf(i);
        }
      }
    }
    invalidText = true;
  }
  
  public void clearAttributes()
  {
    atrun.clear();
    invalidText = true;
  }
  
  private void applyAttributes()
  {
    if (plainText.length() > 0)
    {
      Iterator localIterator = baseStyle.iterator();
      AttributeRun localAttributeRun;
      while (localIterator.hasNext())
      {
        localAttributeRun = (AttributeRun)localIterator.next();
        styledText.addAttribute(atype, value);
      }
      localIterator = atrun.iterator();
      while (localIterator.hasNext())
      {
        localAttributeRun = (AttributeRun)localIterator.next();
        if (end.intValue() == Integer.MAX_VALUE) {
          styledText.addAttribute(atype, value);
        } else {
          try
          {
            styledText.addAttribute(atype, value, start.intValue(), end.intValue());
          }
          catch (Exception localException)
          {
            System.out.println("Dumping " + localAttributeRun);
            localException.printStackTrace();
            localIterator.remove();
          }
        }
      }
    }
    invalidLayout = true;
  }
  
  public int insertCharacters(String paramString, int paramInt1, int paramInt2, boolean paramBoolean1, boolean paramBoolean2)
  {
    if ((paramInt1 >= 0) && (paramInt1 < linesInfo.size()))
    {
      TextLayoutInfo localTextLayoutInfo = (TextLayoutInfo)linesInfo.get(paramInt1);
      int i = startCharIndex + Math.min(paramInt2, nbrChars);
      return insertCharactersImpl(i, paramString, paramBoolean1, paramBoolean2);
    }
    return 0;
  }
  
  public int insertCharacters(String paramString, int paramInt)
  {
    return insertCharactersImpl(paramInt, paramString, false, false);
  }
  
  public int insertCharacters(String paramString, int paramInt, boolean paramBoolean1, boolean paramBoolean2)
  {
    return insertCharactersImpl(paramInt, paramString, paramBoolean1, paramBoolean2);
  }
  
  private int insertCharactersImpl(int paramInt, String paramString, boolean paramBoolean1, boolean paramBoolean2)
  {
    paramString = makeStringSafeForInsert(paramString);
    int i = paramString.length();
    int j = i;
    if (i > 0)
    {
      plainText = (plainText.substring(0, paramInt) + paramString + plainText.substring(paramInt));
      if ((paramBoolean2) && (plainText.charAt(paramInt + i) != '\n')) {
        j += (insertEOL(paramInt + i) ? 1 : 0);
      }
      if ((paramBoolean1) && (paramInt > 0)) {
        j += (insertEOL(paramInt) ? 1 : 0);
      }
      insertParagraphMarkers(plainText, styledText);
      Iterator localIterator = atrun.iterator();
      while (localIterator.hasNext())
      {
        AttributeRun localAttributeRun1 = (AttributeRun)localIterator.next();
        if ((end.intValue() < Integer.MAX_VALUE) && (end.intValue() >= paramInt))
        {
          AttributeRun localAttributeRun2 = localAttributeRun1;
          (localAttributeRun2.end = Integer.valueOf(end.intValue() + i));
          if (start.intValue() >= paramInt)
          {
            localAttributeRun2 = localAttributeRun1;
            (localAttributeRun2.start = Integer.valueOf(start.intValue() + i));
          }
        }
      }
      invalidText = true;
    }
    return j;
  }
  
  private String makeStringSafeForInsert(String paramString)
  {
    if (paramString.length() > 0) {
      if (wrapWidth == Integer.MAX_VALUE)
      {
        paramString = removeSingleSpacingFromPlainText(paramString);
      }
      else
      {
        for (paramString = removeDoubleSpacingFromPlainText(paramString); (paramString.length() > 0) && (paramString.charAt(0) == '\n'); paramString = paramString.substring(1)) {}
        while ((paramString.length() > 0) && (paramString.charAt(paramString.length() - 1) == '\n')) {
          paramString = paramString.substring(0, paramString.length() - 1);
        }
      }
    }
    return paramString;
  }
  
  public boolean insertEOL(int paramInt)
  {
    if (wrapWidth != Integer.MAX_VALUE)
    {
      if (paramInt == 0) {
        return false;
      }
      if ((paramInt > 0) && (plainText.charAt(paramInt - 1) == '\n')) {
        return false;
      }
      if ((paramInt < plainText.length() - 1) && (plainText.charAt(paramInt + 1) == '\n')) {
        return false;
      }
      plainText = (plainText.substring(0, paramInt) + "\n" + plainText.substring(paramInt));
      insertParagraphMarkers(plainText, styledText);
      Iterator localIterator = atrun.iterator();
      while (localIterator.hasNext())
      {
        AttributeRun localAttributeRun1 = (AttributeRun)localIterator.next();
        if ((end.intValue() < Integer.MAX_VALUE) && (end.intValue() >= paramInt))
        {
          AttributeRun localAttributeRun2 = localAttributeRun1;
          (localAttributeRun2.end = Integer.valueOf(end.intValue() + 1));
          if (start.intValue() >= paramInt)
          {
            localAttributeRun2 = localAttributeRun1;
            (localAttributeRun2.start = Integer.valueOf(start.intValue() + 1));
          }
        }
      }
      invalidText = true;
      return true;
    }
    return false;
  }
  
  public boolean deleteCharacters(int paramInt1, int paramInt2)
  {
    if ((paramInt1 < 0) || (paramInt1 + paramInt2 > plainText.length())) {
      return false;
    }
    if ((wrapWidth != Integer.MAX_VALUE) && (paramInt1 > 0) && (paramInt1 + paramInt2 < plainText.length() - 1) && (plainText.charAt(paramInt1) == '\n') && (plainText.charAt(paramInt1 + paramInt2) == '\n')) {
      paramInt2++;
    }
    if (paramInt1 != 0) {
      plainText = (plainText.substring(0, paramInt1) + plainText.substring(paramInt1 + paramInt2));
    } else {
      plainText = plainText.substring(paramInt1 + paramInt2);
    }
    if (plainText.length() == 0)
    {
      atrun.clear();
      styledText = null;
    }
    else
    {
      ListIterator localListIterator = atrun.listIterator(atrun.size());
      while (localListIterator.hasPrevious())
      {
        AttributeRun localAttributeRun1 = (AttributeRun)localListIterator.previous();
        if ((end.intValue() < Integer.MAX_VALUE) && (end.intValue() >= paramInt1))
        {
          int i = paramInt1 + paramInt2;
          if ((paramInt1 <= start.intValue()) && (i >= end.intValue()))
          {
            localListIterator.remove();
          }
          else
          {
            AttributeRun localAttributeRun2;
            if ((paramInt1 > start.intValue()) && (i < end.intValue()))
            {
              localAttributeRun2 = localAttributeRun1;
              (localAttributeRun2.end = Integer.valueOf(end.intValue() - paramInt2));
            }
            else if (paramInt1 <= start.intValue())
            {
              start = Integer.valueOf(paramInt1);
              localAttributeRun2 = localAttributeRun1;
              (localAttributeRun2.end = Integer.valueOf(end.intValue() - paramInt2));
            }
            else if (i >= end.intValue())
            {
              end = Integer.valueOf(paramInt1);
            }
            else
            {
              System.out.println("This run was not modified");
              System.out.println("Run from " + start + " to " + end);
              System.out.println("Delete from " + paramInt1 + " To " + i + "  (" + paramInt2 + " to remove)");
            }
          }
        }
      }
    }
    invalidText = true;
    return true;
  }
  
  private void setFont(Font paramFont)
  {
    if ((paramFont != null) && (paramFont != font))
    {
      font = paramFont;
      baseStyle.clear();
      baseStyle.add(new AttributeRun(TextAttribute.FAMILY, font.getFamily()));
      baseStyle.add(new AttributeRun(TextAttribute.SIZE, Integer.valueOf(font.getSize())));
      baseStyle.add(new AttributeRun(TextAttribute.WIDTH, TextAttribute.WIDTH_REGULAR));
      if (font.isBold()) {
        baseStyle.add(new AttributeRun(TextAttribute.WEIGHT, TextAttribute.WEIGHT_REGULAR));
      } else {
        baseStyle.add(new AttributeRun(TextAttribute.WEIGHT, TextAttribute.WEIGHT_REGULAR));
      }
      if (font.isItalic()) {
        baseStyle.add(new AttributeRun(TextAttribute.POSTURE, TextAttribute.POSTURE_OBLIQUE));
      } else {
        baseStyle.add(new AttributeRun(TextAttribute.POSTURE, TextAttribute.POSTURE_REGULAR));
      }
      invalidText = true;
    }
  }
  
  public void invalidateText()
  {
    invalidText = true;
  }
  
  public LinkedList<TextLayoutInfo> getLines(Graphics2D paramGraphics2D)
  {
    if (font != paramGraphics2D.getFont())
    {
      setFont(paramGraphics2D.getFont());
      invalidText = true;
    }
    if (invalidText)
    {
      styledText = new AttributedString(plainText);
      styledText = insertParagraphMarkers(plainText, styledText);
      setFont(font);
      applyAttributes();
      invalidText = false;
      invalidLayout = true;
    }
    if (invalidLayout)
    {
      linesInfo.clear();
      if (plainText.length() > 0)
      {
        textHeight = 0.0F;
        maxLineLength = 0.0F;
        maxLineHeight = 0.0F;
        nbrLines = 0;
        AttributedCharacterIterator localAttributedCharacterIterator = styledText.getIterator(null, 0, plainText.length());
        FontRenderContext localFontRenderContext = paramGraphics2D.getFontRenderContext();
        lineMeasurer = new LineBreakMeasurer(localAttributedCharacterIterator, localFontRenderContext);
        float f1 = 0.0F;
        int i = 0;
        while (lineMeasurer.getPosition() < plainText.length())
        {
          TextLayout localTextLayout = lineMeasurer.nextLayout(wrapWidth);
          float f2 = localTextLayout.getVisibleAdvance();
          if ((justify) && (justify) && (f2 > justifyRatio * wrapWidth))
          {
            f3 = f2 > wrapWidth ? f2 - wrapWidth : wrapWidth;
            localTextLayout = localTextLayout.getJustifiedLayout(f3);
          }
          float f3 = getHeight(localTextLayout);
          if (f3 > maxLineHeight) {
            maxLineHeight = f3;
          }
          textHeight += f3;
          if ((f2 <= wrapWidth) && (f2 > maxLineLength)) {
            maxLineLength = f2;
          }
          linesInfo.add(new TextLayoutInfo(nbrLines, localTextLayout, i, localTextLayout.getCharacterCount(), f1));
          i += localTextLayout.getCharacterCount();
          f1 += f3;
          nbrLines += 1;
        }
      }
      invalidLayout = false;
    }
    return linesInfo;
  }
  
  public int getNbrLines()
  {
    return nbrLines;
  }
  
  public float getTextAreaHeight()
  {
    return textHeight;
  }
  
  public float getMaxLineLength()
  {
    return maxLineLength;
  }
  
  public float getMaxLineHeight()
  {
    return maxLineHeight;
  }
  
  private float getHeight(TextLayout paramTextLayout)
  {
    return paramTextLayout.getAscent() + paramTextLayout.getDescent() + paramTextLayout.getLeading();
  }
  
  public int getWrapWidth()
  {
    return wrapWidth;
  }
  
  public void setWrapWidth(int paramInt)
  {
    if (wrapWidth != paramInt)
    {
      wrapWidth = paramInt;
      invalidLayout = true;
    }
  }
  
  TextLayoutHitInfo calculateFromXY(Graphics2D paramGraphics2D, float paramFloat1, float paramFloat2)
  {
    TextHitInfo localTextHitInfo = null;
    TextLayoutInfo localTextLayoutInfo = null;
    TextLayoutHitInfo localTextLayoutHitInfo = null;
    if (invalidLayout) {
      getLines(paramGraphics2D);
    }
    if (paramFloat1 < 0.0F) {
      paramFloat1 = 0.0F;
    }
    if (paramFloat2 < 0.0F) {
      paramFloat2 = 0.0F;
    }
    localTextLayoutInfo = getTLIforYpos(paramFloat2);
    paramFloat2 -= yPosInPara;
    localTextHitInfo = layout.hitTestChar(paramFloat1, paramFloat2);
    localTextLayoutHitInfo = new TextLayoutHitInfo(localTextLayoutInfo, localTextHitInfo);
    return localTextLayoutHitInfo;
  }
  
  TextLayoutInfo getTLIforLineNo(int paramInt)
  {
    if ((paramInt >= 0) || (paramInt < linesInfo.size())) {
      return (TextLayoutInfo)linesInfo.get(paramInt);
    }
    return null;
  }
  
  TextLayoutInfo getTLIforYpos(float paramFloat)
  {
    TextLayoutInfo localTextLayoutInfo = null;
    if (!linesInfo.isEmpty()) {
      for (int i = linesInfo.size() - 1; i >= 0; i--)
      {
        localTextLayoutInfo = (TextLayoutInfo)linesInfo.get(i);
        if (yPosInPara <= paramFloat) {
          break;
        }
      }
    }
    return localTextLayoutInfo;
  }
  
  TextLayoutInfo getTLIforCharNo(int paramInt)
  {
    TextLayoutInfo localTextLayoutInfo = null;
    if (!linesInfo.isEmpty()) {
      for (int i = linesInfo.size() - 1; i >= 0; i--)
      {
        localTextLayoutInfo = (TextLayoutInfo)linesInfo.get(i);
        if (startCharIndex < paramInt) {
          break;
        }
      }
    }
    return localTextLayoutInfo;
  }
  
  TextLayoutHitInfo getTLHIforCharPosition(int paramInt1, int paramInt2)
  {
    TextLayoutHitInfo localTextLayoutHitInfo = null;
    TextHitInfo localTextHitInfo = null;
    TextLayoutInfo localTextLayoutInfo = getTLIforLineNo(paramInt1);
    if (localTextLayoutInfo != null)
    {
      paramInt2 = PApplet.constrain(paramInt2, 0, nbrChars - 2);
      localTextHitInfo = layout.getNextRightHit(paramInt2);
      if (localTextHitInfo != null) {
        localTextLayoutHitInfo = new TextLayoutHitInfo(localTextLayoutInfo, localTextHitInfo);
      }
    }
    return localTextLayoutHitInfo;
  }
  
  TextLayoutHitInfo getTLHIforCharPosition(int paramInt)
  {
    if ((paramInt < 0) || (paramInt >= plainText.length())) {
      return null;
    }
    int i = 0;
    int j = paramInt;
    for (i = linesInfo.size() - 1; i >= 0; i--)
    {
      TextLayoutInfo localTextLayoutInfo = getTLIforLineNo(i);
      j = paramInt - startCharIndex;
      if (startCharIndex <= paramInt) {
        break;
      }
    }
    return getTLHIforCharPosition(i, j);
  }
  
  int getPos(int paramInt1, int paramInt2)
  {
    TextLayoutInfo localTextLayoutInfo = getTLIforLineNo(paramInt1);
    if (localTextLayoutInfo != null) {
      return startCharIndex + paramInt2;
    }
    return -1;
  }
  
  private String removeDoubleSpacingFromPlainText(String paramString)
  {
    while (paramString.indexOf("\n\n") >= 0)
    {
      invalidText = true;
      paramString = paramString.replaceAll("\n\n", "\n");
    }
    return paramString;
  }
  
  private String removeSingleSpacingFromPlainText(String paramString)
  {
    while (paramString.indexOf("\n") >= 0)
    {
      invalidText = true;
      paramString = paramString.replaceAll("\n", "");
    }
    return paramString;
  }
  
  private ImageGraphicAttribute getParagraghSpacer(int paramInt)
  {
    if (paramInt == Integer.MAX_VALUE) {
      paramInt = 1;
    }
    BufferedImage localBufferedImage = new BufferedImage(paramInt, 10, 2);
    Graphics localGraphics = localBufferedImage.getGraphics();
    localGraphics.setColor(new Color(255, 255, 255, 0));
    localGraphics.fillRect(0, 0, localBufferedImage.getWidth(), localBufferedImage.getHeight());
    return new ImageGraphicAttribute(localBufferedImage, -1);
  }
  
  public static void save(PApplet paramPApplet, StyledString paramStyledString, String paramString)
  {
    try
    {
      OutputStream localOutputStream = paramPApplet.createOutput(paramString);
      ObjectOutputStream localObjectOutputStream = new ObjectOutputStream(localOutputStream);
      localObjectOutputStream.writeObject(paramStyledString);
      localOutputStream.close();
      localObjectOutputStream.close();
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
  
  public static StyledString load(PApplet paramPApplet, String paramString)
  {
    StyledString localStyledString = null;
    try
    {
      InputStream localInputStream = paramPApplet.createInput(paramString);
      ObjectInputStream localObjectInputStream = new ObjectInputStream(localInputStream);
      localStyledString = (StyledString)localObjectInputStream.readObject();
      localInputStream.close();
      localObjectInputStream.close();
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
    catch (ClassNotFoundException localClassNotFoundException)
    {
      localClassNotFoundException.printStackTrace();
    }
    return localStyledString;
  }
  
  private void readObject(ObjectInputStream paramObjectInputStream)
    throws ClassNotFoundException, IOException
  {
    paramObjectInputStream.defaultReadObject();
    spacer = getParagraghSpacer(wrapWidth);
    styledText = new AttributedString(plainText);
    styledText = insertParagraphMarkers(plainText, styledText);
    linesInfo = new LinkedList();
    applyAttributes();
  }
  
  private class AttributeRun
    implements Serializable
  {
    private static final long serialVersionUID = -8401062069478890163L;
    public AttributedCharacterIterator.Attribute atype;
    public Object value;
    public Integer start;
    public Integer end;
    
    public AttributeRun(AttributedCharacterIterator.Attribute paramAttribute, Object paramObject)
    {
      atype = paramAttribute;
      value = paramObject;
      start = Integer.valueOf(Integer.MIN_VALUE);
      end = Integer.valueOf(Integer.MAX_VALUE);
    }
    
    public AttributeRun(AttributedCharacterIterator.Attribute paramAttribute, Object paramObject, int paramInt1, int paramInt2)
    {
      atype = paramAttribute;
      value = paramObject;
      start = Integer.valueOf(paramInt1);
      end = Integer.valueOf(paramInt2);
    }
    
    private int intersectionWith(AttributeRun paramAttributeRun)
    {
      if (atype != atype) {
        return 0;
      }
      int i = value.equals(value) ? 256 : 512;
      int j = 4;
      int k = 0;
      if (start.intValue() < start.intValue()) {
        j = 0;
      } else if (start == start) {
        j = 1;
      } else if (start.intValue() < end.intValue()) {
        j = 2;
      } else if (start == end) {
        j = 3;
      }
      if (j < 4) {
        if (end.intValue() > end.intValue()) {
          k = 4;
        } else if (end == end) {
          k = 3;
        } else if (end.intValue() > start.intValue()) {
          k = 2;
        } else if (end == start) {
          k = 1;
        }
      }
      i |= GConstantsInternal.grid[j][k];
      return i;
    }
    
    public String toString()
    {
      String str = atype.toString() + "  value = " + value.toString() + "  from " + start + "   to " + end;
      return str;
    }
  }
  
  public static class TextLayoutInfo
    implements Comparable<TextLayoutInfo>
  {
    public TextLayout layout;
    public int lineNo;
    public int startCharIndex;
    public int nbrChars;
    public float yPosInPara;
    
    public TextLayoutInfo(int paramInt1, TextLayout paramTextLayout, int paramInt2, int paramInt3, float paramFloat)
    {
      lineNo = paramInt1;
      layout = paramTextLayout;
      startCharIndex = paramInt2;
      nbrChars = paramInt3;
      yPosInPara = paramFloat;
    }
    
    public int compareTo(TextLayoutInfo paramTextLayoutInfo)
    {
      if (lineNo == lineNo) {
        return 0;
      }
      return startCharIndex < startCharIndex ? -1 : 1;
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder("{ Line no = " + lineNo + "    starts @ char pos " + startCharIndex);
      localStringBuilder.append("  last index " + (startCharIndex + nbrChars + 1));
      localStringBuilder.append("  (" + nbrChars + ")  ");
      return new String(localStringBuilder);
    }
  }
  
  public static class TextLayoutHitInfo
    implements Comparable<TextLayoutHitInfo>
  {
    public StyledString.TextLayoutInfo tli;
    public TextHitInfo thi;
    
    public TextLayoutHitInfo()
    {
      tli = null;
      thi = null;
    }
    
    public TextLayoutHitInfo(StyledString.TextLayoutInfo paramTextLayoutInfo)
    {
      tli = paramTextLayoutInfo;
      thi = null;
    }
    
    public TextLayoutHitInfo(StyledString.TextLayoutInfo paramTextLayoutInfo, TextHitInfo paramTextHitInfo)
    {
      tli = paramTextLayoutInfo;
      thi = paramTextHitInfo;
    }
    
    public TextLayoutHitInfo(TextLayoutHitInfo paramTextLayoutHitInfo)
    {
      tli = tli;
      thi = thi;
    }
    
    public void copyFrom(TextLayoutHitInfo paramTextLayoutHitInfo)
    {
      tli = tli;
      thi = thi;
    }
    
    public void setInfo(StyledString.TextLayoutInfo paramTextLayoutInfo, TextHitInfo paramTextHitInfo)
    {
      tli = paramTextLayoutInfo;
      thi = paramTextHitInfo;
    }
    
    public int compareTo(TextLayoutHitInfo paramTextLayoutHitInfo)
    {
      if ((tli == null) || (tli == null)) {
        return 0;
      }
      int i = tli.compareTo(tli);
      if (i != 0) {
        return i;
      }
      if ((thi == null) || (thi == null) || (thi.equals(thi))) {
        return 0;
      }
      if (thi.getCharIndex() != thi.getCharIndex()) {
        return thi.getCharIndex() < thi.getCharIndex() ? -1 : 1;
      }
      return thi.isLeadingEdge() ? -1 : 1;
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder(tli.toString());
      localStringBuilder.append("  Hit char = " + thi.getCharIndex());
      return new String(localStringBuilder);
    }
  }
}
