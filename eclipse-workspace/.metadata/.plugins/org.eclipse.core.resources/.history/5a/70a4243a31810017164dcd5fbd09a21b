package jogamp.opengl.glu.gl2.nurbs;

import com.jogamp.opengl.GL2;
import com.jogamp.opengl.glu.gl2.GLUgl2;
import jogamp.opengl.glu.nurbs.CArrayOfFloats;
import jogamp.opengl.glu.nurbs.CurveEvaluator;




































class GL2CurveEvaluator
  implements CurveEvaluator
{
  private boolean output_triangles;
  private final GL2 gl;
  private int vertex_flag;
  private int normal_flag;
  private int color_flag;
  private int texcoord_flag;
  private int poradi;
  
  public GL2CurveEvaluator()
  {
    gl = GLUgl2.getCurrentGL2();
  }
  




  public void bgnmap1f()
  {
    if (output_triangles) {
      vertex_flag = 0;
      normal_flag = 0;
      color_flag = 0;
      texcoord_flag = 0;
    } else {
      gl.glPushAttrib(65536);
    }
  }
  





  public void endmap1f()
  {
    if (!output_triangles)
    {

      gl.glPopAttrib();
    }
  }
  











  public void map1f(int paramInt1, float paramFloat1, float paramFloat2, int paramInt2, int paramInt3, CArrayOfFloats paramCArrayOfFloats)
  {
    if (!output_triangles)
    {


      gl.glMap1f(paramInt1, paramFloat1, paramFloat2, paramInt2, paramInt3, paramCArrayOfFloats.getArray(), paramCArrayOfFloats
        .getPointer());
    }
  }
  
















  public void enable(int paramInt)
  {
    gl.glEnable(paramInt);
  }
  






  public void mapgrid1f(int paramInt, float paramFloat1, float paramFloat2)
  {
    if (!output_triangles)
    {

      gl.glMapGrid1f(paramInt, paramFloat1, paramFloat2);
    }
  }
  














  public void mapmesh1f(int paramInt1, int paramInt2, int paramInt3)
  {
    if (!output_triangles)
    {


      switch (paramInt1) {
      case 0: 
      case 1: 
        gl.glEvalMesh1(6913, paramInt2, paramInt3);
        break;
      case 2: 
        gl.glEvalMesh1(6912, paramInt2, paramInt3);
      }
    }
  }
}
