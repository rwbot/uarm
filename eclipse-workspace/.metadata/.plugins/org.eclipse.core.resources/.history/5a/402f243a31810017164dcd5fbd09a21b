package jogamp.opengl.glu;

import com.jogamp.opengl.GL;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.glu.GLUquadric;
import com.jogamp.opengl.util.ImmModeSink;
import com.jogamp.opengl.util.glsl.ShaderState;
import java.io.PrintStream;






























































































































public class GLUquadricImpl
  implements GLUquadric
{
  private final boolean useGLSL;
  private int drawStyle;
  private int orientation;
  private boolean textureFlag;
  private int normals;
  private boolean immModeSinkEnabled;
  private boolean immModeSinkImmediate;
  public int normalType;
  public GL gl;
  public ShaderState shaderState;
  public int shaderProgram;
  public static final boolean USE_NORM = true;
  public static final boolean USE_TEXT = false;
  private ImmModeSink immModeSink = null;
  private static final float PI = 3.1415927F;
  
  public GLUquadricImpl(GL paramGL, boolean paramBoolean, ShaderState paramShaderState, int paramInt) { gl = paramGL;
    useGLSL = paramBoolean;
    drawStyle = 100012;
    orientation = 100020;
    textureFlag = false;
    normals = 100000;
    normalType = (paramGL.isGLES1() ? 5120 : 5126);
    immModeSinkImmediate = true;
    immModeSinkEnabled = (!paramGL.isGL2());
    shaderState = paramShaderState;
    shaderProgram = paramInt;
    replaceImmModeSink();
  }
  
  public void enableImmModeSink(boolean paramBoolean)
  {
    if (gl.isGL2()) {
      immModeSinkEnabled = paramBoolean;
    } else {
      immModeSinkEnabled = true;
    }
    if ((null == immModeSink) && (immModeSinkEnabled)) {
      replaceImmModeSink();
    }
  }
  
  public boolean isImmModeSinkEnabled()
  {
    return immModeSinkEnabled;
  }
  
  public void setImmMode(boolean paramBoolean)
  {
    if (immModeSinkEnabled) {
      immModeSinkImmediate = paramBoolean;
    } else {
      immModeSinkImmediate = true;
    }
  }
  
  public boolean getImmMode()
  {
    return immModeSinkImmediate;
  }
  
  public ImmModeSink replaceImmModeSink()
  {
    if (!immModeSinkEnabled) { return null;
    }
    ImmModeSink localImmModeSink = immModeSink;
    if (useGLSL) {
      if (null != shaderState) {
        immModeSink = ImmModeSink.createGLSL(32, 3, 5126, 0, 5126, 3, normalType, 0, 5126, 35044, shaderState);


      }
      else
      {

        immModeSink = ImmModeSink.createGLSL(32, 3, 5126, 0, 5126, 3, normalType, 0, 5126, 35044, shaderProgram);

      }
      

    }
    else
    {
      immModeSink = ImmModeSink.createFixed(32, 3, 5126, 0, 5126, 3, normalType, 0, 5126, 35044);
    }
    




    return localImmModeSink;
  }
  
  public void resetImmModeSink(GL paramGL)
  {
    if (immModeSinkEnabled) {
      immModeSink.reset(paramGL);
    }
  }
  

















  public void setDrawStyle(int paramInt)
  {
    drawStyle = paramInt;
  }
  












  public void setNormals(int paramInt)
  {
    normals = paramInt;
  }
  












  public void setOrientation(int paramInt)
  {
    orientation = paramInt;
  }
  










  public void setTextureFlag(boolean paramBoolean)
  {
    textureFlag = paramBoolean;
  }
  



  public int getDrawStyle()
  {
    return drawStyle;
  }
  



  public int getNormals()
  {
    return normals;
  }
  



  public int getOrientation()
  {
    return orientation;
  }
  



  public boolean getTextureFlag()
  {
    return textureFlag;
  }
  















  public void drawCylinder(GL paramGL, float paramFloat1, float paramFloat2, float paramFloat3, int paramInt1, int paramInt2)
  {
    float f9;
    













    if (orientation == 100021) {
      f9 = -1.0F;
    } else {
      f9 = 1.0F;
    }
    
    float f1 = 6.2831855F / paramInt1;
    float f3 = (paramFloat2 - paramFloat1) / paramInt2;
    float f4 = paramFloat3 / paramInt2;
    float f8 = (paramFloat1 - paramFloat2) / paramFloat3;
    int i;
    float f5;
    float f6; float f7; float f2; int j; if (drawStyle == 100010) {
      glBegin(paramGL, 0);
      for (i = 0; i < paramInt1; i++) {
        f5 = cos(i * f1);
        f6 = sin(i * f1);
        normal3f(paramGL, f5 * f9, f6 * f9, f8 * f9);
        
        f7 = 0.0F;
        f2 = paramFloat1;
        for (j = 0; j <= paramInt2; j++) {
          glVertex3f(paramGL, f5 * f2, f6 * f2, f7);
          f7 += f4;
          f2 += f3;
        }
      }
      glEnd(paramGL);
    } else if ((drawStyle == 100011) || (drawStyle == 100013))
    {
      if (drawStyle == 100011) {
        f7 = 0.0F;
        f2 = paramFloat1;
        for (j = 0; j <= paramInt2; j++) {
          glBegin(paramGL, 2);
          for (i = 0; i < paramInt1; i++) {
            f5 = cos(i * f1);
            f6 = sin(i * f1);
            normal3f(paramGL, f5 * f9, f6 * f9, f8 * f9);
            glVertex3f(paramGL, f5 * f2, f6 * f2, f7);
          }
          glEnd(paramGL);
          f7 += f4;
          f2 += f3;
        }
      }
      
      if (paramFloat1 != 0.0D) {
        glBegin(paramGL, 2);
        for (i = 0; i < paramInt1; i++) {
          f5 = cos(i * f1);
          f6 = sin(i * f1);
          normal3f(paramGL, f5 * f9, f6 * f9, f8 * f9);
          glVertex3f(paramGL, f5 * paramFloat1, f6 * paramFloat1, 0.0F);
        }
        glEnd(paramGL);
        glBegin(paramGL, 2);
        for (i = 0; i < paramInt1; i++) {
          f5 = cos(i * f1);
          f6 = sin(i * f1);
          normal3f(paramGL, f5 * f9, f6 * f9, f8 * f9);
          glVertex3f(paramGL, f5 * paramFloat2, f6 * paramFloat2, paramFloat3);
        }
        glEnd(paramGL);
      }
      

      glBegin(paramGL, 1);
      for (i = 0; i < paramInt1; i++) {
        f5 = cos(i * f1);
        f6 = sin(i * f1);
        normal3f(paramGL, f5 * f9, f6 * f9, f8 * f9);
        glVertex3f(paramGL, f5 * paramFloat1, f6 * paramFloat1, 0.0F);
        glVertex3f(paramGL, f5 * paramFloat2, f6 * paramFloat2, paramFloat3);
      }
      glEnd(paramGL);
    } else if (drawStyle == 100012) {
      float f10 = 1.0F / paramInt1;
      float f11 = 1.0F / paramInt2;
      float f12 = 0.0F;
      f7 = 0.0F;
      f2 = paramFloat1;
      for (j = 0; j < paramInt2; j++) {
        float f13 = 0.0F;
        glBegin(paramGL, 8);
        for (i = 0; i <= paramInt1; i++) {
          if (i == paramInt1) {
            f5 = sin(0.0F);
            f6 = cos(0.0F);
          } else {
            f5 = sin(i * f1);
            f6 = cos(i * f1);
          }
          
          normal3f(paramGL, f5 * f9, f6 * f9, f8 * f9);
          TXTR_COORD(paramGL, f13, f12);
          glVertex3f(paramGL, f5 * f2, f6 * f2, f7);
          normal3f(paramGL, f5 * f9, f6 * f9, f8 * f9);
          TXTR_COORD(paramGL, f13, f12 + f11);
          glVertex3f(paramGL, f5 * (f2 + f3), f6 * (f2 + f3), f7 + f4);
          







          f13 += f10;
        }
        glEnd(paramGL);
        f2 += f3;
        f12 += f11;
        f7 += f4;
      }
    }
  }
  







  private static final float PI_2 = 6.2831855F;
  





  private static final int CACHE_SIZE = 240;
  





  public void drawDisk(GL paramGL, float paramFloat1, float paramFloat2, int paramInt1, int paramInt2)
  {
    if (normals != 100002) {
      if (orientation == 100020) {
        glNormal3f(paramGL, 0.0F, 0.0F, 1.0F);
      }
      else {
        glNormal3f(paramGL, 0.0F, 0.0F, -1.0F);
      }
    }
    
    float f1 = 6.2831855F / paramInt1;
    float f2 = (paramFloat2 - paramFloat1) / paramInt2;
    float f3;
    float f8; int k; switch (drawStyle)
    {




    case 100012: 
      f3 = 2.0F * paramFloat2;
      
      f8 = paramFloat1;
      
      for (k = 0; k < paramInt2;) {
        f10 = f8 + f2;
        int n; float f11; float f5; if (orientation == 100020)
        {
          glBegin(paramGL, 8);
          for (n = 0; n <= paramInt1; n++)
          {
            if (n == paramInt1) {
              f11 = 0.0F;
            } else
              f11 = n * f1;
            f5 = sin(f11);
            f7 = cos(f11);
            TXTR_COORD(paramGL, 0.5F + f5 * f10 / f3, 0.5F + f7 * f10 / f3);
            glVertex2f(paramGL, f10 * f5, f10 * f7);
            TXTR_COORD(paramGL, 0.5F + f5 * f8 / f3, 0.5F + f7 * f8 / f3);
            glVertex2f(paramGL, f8 * f5, f8 * f7);
          }
          glEnd(paramGL);
        }
        else
        {
          glBegin(paramGL, 8);
          for (n = paramInt1; n >= 0; n--)
          {
            if (n == paramInt1) {
              f11 = 0.0F;
            } else
              f11 = n * f1;
            f5 = sin(f11);
            f7 = cos(f11);
            TXTR_COORD(paramGL, 0.5F - f5 * f10 / f3, 0.5F + f7 * f10 / f3);
            glVertex2f(paramGL, f10 * f5, f10 * f7);
            TXTR_COORD(paramGL, 0.5F - f5 * f8 / f3, 0.5F + f7 * f8 / f3);
            glVertex2f(paramGL, f8 * f5, f8 * f7);
          }
          glEnd(paramGL);
        }
        f8 = f10;k++; continue;
        






        for (i = 0; i <= paramInt2; i++) {
          f7 = paramFloat1 + i * f2;
          glBegin(paramGL, 2);
          for (j = 0; j < paramInt1; j++) {
            f8 = j * f1;
            glVertex2f(paramGL, f7 * sin(f8), f7 * cos(f8));
          }
          glEnd(paramGL);
        }
        
        for (j = 0; j < paramInt1;) {
          f7 = j * f1;
          f8 = sin(f7);
          float f9 = cos(f7);
          glBegin(paramGL, 3);
          for (i = 0; i <= paramInt2; i++) {
            f10 = paramFloat1 + i * f2;
            glVertex2f(paramGL, f10 * f8, f10 * f9);
          }
          glEnd(paramGL);j++; continue;
          





          glBegin(paramGL, 0);
          float f6; for (i = 0; i < paramInt1; i++) {
            f6 = i * f1;
            f7 = sin(f6);
            f8 = cos(f6);
            
            for (int m = 0; m <= paramInt2; m++) {
              f10 = paramFloat1 * m * f2;
              glVertex2f(paramGL, f10 * f7, f10 * f8);
            }
          }
          glEnd(paramGL);
          break;
          


          if (paramFloat1 != 0.0D)
          {
            glBegin(paramGL, 2);
            for (f4 = 0.0F; f4 < 6.2831855F; f4 += f1) {
              f6 = paramFloat1 * sin(f4);
              f7 = paramFloat1 * cos(f4);
              glVertex2f(paramGL, f6, f7);
            }
            glEnd(paramGL);
          }
          

          glBegin(paramGL, 2);
          for (float f4 = 0.0F; f4 < 6.2831855F; f4 += f1) {
            f6 = paramFloat2 * sin(f4);
            f7 = paramFloat2 * cos(f4);
            glVertex2f(paramGL, f6, f7);
          }
          glEnd(paramGL);
          
          break; return;
        }
      }
    }
    
    




    float f10;
    




    float f7;
    




    int i;
    




    int j;
  }
  





  public void drawPartialDisk(GL paramGL, float paramFloat1, float paramFloat2, int paramInt1, int paramInt2, float paramFloat3, float paramFloat4)
  {
    float[] arrayOfFloat1 = new float['ð'];
    float[] arrayOfFloat2 = new float['ð'];
    



    float f7 = 0.0F;float f8 = 0.0F;
    



    if (paramInt1 >= 240)
      paramInt1 = 239;
    if ((paramInt1 < 2) || (paramInt2 < 1) || (paramFloat2 <= 0.0F) || (paramFloat1 < 0.0F) || (paramFloat1 > paramFloat2))
    {




      System.err.println("PartialDisk: GLU_INVALID_VALUE");
      return;
    }
    
    if (paramFloat4 < -360.0F)
      paramFloat4 = 360.0F;
    if (paramFloat4 > 360.0F)
      paramFloat4 = 360.0F;
    if (paramFloat4 < 0.0F) {
      paramFloat3 += paramFloat4;
      paramFloat4 = -paramFloat4;
    }
    int k;
    if (paramFloat4 == 360.0F) {
      k = paramInt1;
    } else {
      k = paramInt1 + 1;
    }
    

    float f4 = paramFloat2 - paramFloat1;
    


    float f9 = paramFloat3 / 180.0F * 3.1415927F;
    for (int i = 0; i <= paramInt1; i++) {
      float f1 = f9 + 3.1415927F * paramFloat4 / 180.0F * i / paramInt1;
      arrayOfFloat1[i] = sin(f1);
      arrayOfFloat2[i] = cos(f1);
    }
    
    if (paramFloat4 == 360.0F) {
      arrayOfFloat1[paramInt1] = arrayOfFloat1[0];
      arrayOfFloat2[paramInt1] = arrayOfFloat2[0];
    }
    
    switch (normals) {
    case 100000: 
    case 100001: 
      if (orientation == 100020) {
        glNormal3f(paramGL, 0.0F, 0.0F, 1.0F);
      } else {
        glNormal3f(paramGL, 0.0F, 0.0F, -1.0F);
      }
      break;
    }
    
    
    float f5;
    int j;
    switch (drawStyle) {
    case 100012:  int m;
      if (paramFloat1 == 0.0F) {
        m = paramInt2 - 1;
        
        glBegin(paramGL, 6);
        if (textureFlag) {
          glTexCoord2f(paramGL, 0.5F, 0.5F);
        }
        glVertex3f(paramGL, 0.0F, 0.0F, 0.0F);
        f5 = paramFloat2 - f4 * ((paramInt2 - 1) / paramInt2);
        if (textureFlag) {
          f7 = f5 / paramFloat2 / 2.0F;
        }
        
        if (orientation == 100020) {
          for (i = paramInt1; i >= 0; i--) {
            if (textureFlag) {
              glTexCoord2f(paramGL, f7 * arrayOfFloat1[i] + 0.5F, f7 * arrayOfFloat2[i] + 0.5F);
            }
            
            glVertex3f(paramGL, f5 * arrayOfFloat1[i], f5 * arrayOfFloat2[i], 0.0F);
          }
        }
        for (i = 0; i <= paramInt1; i++) {
          if (textureFlag) {
            glTexCoord2f(paramGL, f7 * arrayOfFloat1[i] + 0.5F, f7 * arrayOfFloat2[i] + 0.5F);
          }
          
          glVertex3f(paramGL, f5 * arrayOfFloat1[i], f5 * arrayOfFloat2[i], 0.0F);
        }
        
        glEnd(paramGL);
      } else {
        m = paramInt2;
      }
      for (j = 0; j < m;) {
        f5 = paramFloat2 - f4 * (j / paramInt2);
        float f6 = paramFloat2 - f4 * ((j + 1) / paramInt2);
        if (textureFlag) {
          f7 = f5 / paramFloat2 / 2.0F;
          f8 = f6 / paramFloat2 / 2.0F;
        }
        
        glBegin(paramGL, 8);
        for (i = 0; i <= paramInt1; i++) {
          if (orientation == 100020) {
            if (textureFlag) {
              glTexCoord2f(paramGL, f7 * arrayOfFloat1[i] + 0.5F, f7 * arrayOfFloat2[i] + 0.5F);
            }
            
            glVertex3f(paramGL, f5 * arrayOfFloat1[i], f5 * arrayOfFloat2[i], 0.0F);
            
            if (textureFlag) {
              glTexCoord2f(paramGL, f8 * arrayOfFloat1[i] + 0.5F, f8 * arrayOfFloat2[i] + 0.5F);
            }
            
            glVertex3f(paramGL, f6 * arrayOfFloat1[i], f6 * arrayOfFloat2[i], 0.0F);
          }
          else
          {
            if (textureFlag) {
              glTexCoord2f(paramGL, f8 * arrayOfFloat1[i] + 0.5F, f8 * arrayOfFloat2[i] + 0.5F);
            }
            
            glVertex3f(paramGL, f6 * arrayOfFloat1[i], f6 * arrayOfFloat2[i], 0.0F);
            


            if (textureFlag) {
              glTexCoord2f(paramGL, f7 * arrayOfFloat1[i] + 0.5F, f7 * arrayOfFloat2[i] + 0.5F);
            }
            
            glVertex3f(paramGL, f5 * arrayOfFloat1[i], f5 * arrayOfFloat2[i], 0.0F);
          }
        }
        glEnd(paramGL);j++; continue;
        


        glBegin(paramGL, 0);
        for (i = 0; i < k; i++) {
          f2 = arrayOfFloat1[i];
          f3 = arrayOfFloat2[i];
          for (j = 0; j <= paramInt2; j++) {
            f5 = paramFloat2 - f4 * (j / paramInt2);
            
            if (textureFlag) {
              f7 = f5 / paramFloat2 / 2.0F;
              
              glTexCoord2f(paramGL, f7 * arrayOfFloat1[i] + 0.5F, f7 * arrayOfFloat2[i] + 0.5F);
            }
            
            glVertex3f(paramGL, f5 * f2, f5 * f3, 0.0F);
          }
        }
        glEnd(paramGL);
        break;
        
        if (paramFloat1 == paramFloat2) {
          glBegin(paramGL, 3);
          
          for (i = 0; i <= paramInt1; i++) {
            if (textureFlag) {
              glTexCoord2f(paramGL, arrayOfFloat1[i] / 2.0F + 0.5F, arrayOfFloat2[i] / 2.0F + 0.5F);
            }
            glVertex3f(paramGL, paramFloat1 * arrayOfFloat1[i], paramFloat1 * arrayOfFloat2[i], 0.0F);
          }
          glEnd(paramGL);
        }
        else {
          for (j = 0; j <= paramInt2; j++) {
            f5 = paramFloat2 - f4 * (j / paramInt2);
            if (textureFlag) {
              f7 = f5 / paramFloat2 / 2.0F;
            }
            
            glBegin(paramGL, 3);
            for (i = 0; i <= paramInt1; i++) {
              if (textureFlag) {
                glTexCoord2f(paramGL, f7 * arrayOfFloat1[i] + 0.5F, f7 * arrayOfFloat2[i] + 0.5F);
              }
              
              glVertex3f(paramGL, f5 * arrayOfFloat1[i], f5 * arrayOfFloat2[i], 0.0F);
            }
            glEnd(paramGL);
          }
          for (i = 0; i < k;) {
            f2 = arrayOfFloat1[i];
            f3 = arrayOfFloat2[i];
            glBegin(paramGL, 3);
            for (j = 0; j <= paramInt2; j++) {
              f5 = paramFloat2 - f4 * (j / paramInt2);
              if (textureFlag) {
                f7 = f5 / paramFloat2 / 2.0F;
              }
              
              if (textureFlag) {
                glTexCoord2f(paramGL, f7 * arrayOfFloat1[i] + 0.5F, f7 * arrayOfFloat2[i] + 0.5F);
              }
              
              glVertex3f(paramGL, f5 * f2, f5 * f3, 0.0F);
            }
            glEnd(paramGL);i++; continue;
            


            if (paramFloat4 < 360.0F) {
              for (i = 0; i <= paramInt1; i += paramInt1) {
                f2 = arrayOfFloat1[i];
                f3 = arrayOfFloat2[i];
                glBegin(paramGL, 3);
                for (j = 0; j <= paramInt2; j++) {
                  f5 = paramFloat2 - f4 * (j / paramInt2);
                  
                  if (textureFlag) {
                    f7 = f5 / paramFloat2 / 2.0F;
                    glTexCoord2f(paramGL, f7 * arrayOfFloat1[i] + 0.5F, f7 * arrayOfFloat2[i] + 0.5F);
                  }
                  
                  glVertex3f(paramGL, f5 * f2, f5 * f3, 0.0F);
                }
                glEnd(paramGL);
              }
            }
            for (j = 0; j <= paramInt2; j += paramInt2) {
              f5 = paramFloat2 - f4 * (j / paramInt2);
              if (textureFlag) {
                f7 = f5 / paramFloat2 / 2.0F;
              }
              
              glBegin(paramGL, 3);
              for (i = 0; i <= paramInt1; i++) {
                if (textureFlag) {
                  glTexCoord2f(paramGL, f7 * arrayOfFloat1[i] + 0.5F, f7 * arrayOfFloat2[i] + 0.5F);
                }
                
                glVertex3f(paramGL, f5 * arrayOfFloat1[i], f5 * arrayOfFloat2[i], 0.0F);
              }
              glEnd(paramGL);
              if (paramFloat1 == paramFloat2) {
                break;
              }
            }
          }
        }
      }
    }
    
    






    float f2;
    





    float f3;
  }
  






  public void drawSphere(GL paramGL, float paramFloat, int paramInt1, int paramInt2)
  {
    int n = normals != 100002 ? 1 : 0;
    float f12;
    if (orientation == 100021) {
      f12 = -1.0F;
    } else {
      f12 = 1.0F;
    }
    
    float f2 = 3.1415927F / paramInt2;
    float f4 = 6.2831855F / paramInt1;
    int j;
    float f3; float f5; float f6; float f7; int i; float f1; if (drawStyle == 100012) {
      if (!textureFlag)
      {
        glBegin(paramGL, 6);
        glNormal3f(paramGL, 0.0F, 0.0F, 1.0F);
        glVertex3f(paramGL, 0.0F, 0.0F, f12 * paramFloat);
        for (j = 0; j <= paramInt1; j++) {
          f3 = j == paramInt1 ? 0.0F : j * f4;
          f5 = -sin(f3) * sin(f2);
          f6 = cos(f3) * sin(f2);
          f7 = f12 * cos(f2);
          if (n != 0) {
            glNormal3f(paramGL, f5 * f12, f6 * f12, f7 * f12);
          }
          glVertex3f(paramGL, f5 * paramFloat, f6 * paramFloat, f7 * paramFloat);
        }
        glEnd(paramGL);
      }
      
      float f10 = 1.0F / paramInt1;
      float f11 = 1.0F / paramInt2;
      float f9 = 1.0F;
      int k; int m; if (textureFlag) {
        k = 0;
        m = paramInt2;
      } else {
        k = 1;
        m = paramInt2 - 1;
      }
      
      float f8;
      for (i = k; i < m; i++) {
        f1 = i * f2;
        glBegin(paramGL, 8);
        f8 = 0.0F;
        for (j = 0; j <= paramInt1; j++) {
          f3 = j == paramInt1 ? 0.0F : j * f4;
          f5 = -sin(f3) * sin(f1);
          f6 = cos(f3) * sin(f1);
          f7 = f12 * cos(f1);
          if (n != 0) {
            glNormal3f(paramGL, f5 * f12, f6 * f12, f7 * f12);
          }
          TXTR_COORD(paramGL, f8, f9);
          glVertex3f(paramGL, f5 * paramFloat, f6 * paramFloat, f7 * paramFloat);
          f5 = -sin(f3) * sin(f1 + f2);
          f6 = cos(f3) * sin(f1 + f2);
          f7 = f12 * cos(f1 + f2);
          if (n != 0) {
            glNormal3f(paramGL, f5 * f12, f6 * f12, f7 * f12);
          }
          TXTR_COORD(paramGL, f8, f9 - f11);
          f8 += f10;
          glVertex3f(paramGL, f5 * paramFloat, f6 * paramFloat, f7 * paramFloat);
        }
        glEnd(paramGL);
        f9 -= f11;
      }
      
      if (!textureFlag)
      {
        glBegin(paramGL, 6);
        glNormal3f(paramGL, 0.0F, 0.0F, -1.0F);
        glVertex3f(paramGL, 0.0F, 0.0F, -paramFloat * f12);
        f1 = 3.1415927F - f2;
        f8 = 1.0F;
        for (j = paramInt1; j >= 0; j--) {
          f3 = j == paramInt1 ? 0.0F : j * f4;
          f5 = -sin(f3) * sin(f1);
          f6 = cos(f3) * sin(f1);
          f7 = f12 * cos(f1);
          if (n != 0)
            glNormal3f(paramGL, f5 * f12, f6 * f12, f7 * f12);
          f8 -= f10;
          glVertex3f(paramGL, f5 * paramFloat, f6 * paramFloat, f7 * paramFloat);
        }
        glEnd(paramGL);
      }
    } else if ((drawStyle == 100011) || (drawStyle == 100013))
    {


      for (i = 1; 
          i < paramInt2; 
          i++) {
        f1 = i * f2;
        glBegin(paramGL, 2);
        for (j = 0; j < paramInt1; j++) {
          f3 = j * f4;
          f5 = cos(f3) * sin(f1);
          f6 = sin(f3) * sin(f1);
          f7 = cos(f1);
          if (n != 0)
            glNormal3f(paramGL, f5 * f12, f6 * f12, f7 * f12);
          glVertex3f(paramGL, f5 * paramFloat, f6 * paramFloat, f7 * paramFloat);
        }
        glEnd(paramGL);
      }
      
      for (j = 0; j < paramInt1;) {
        f3 = j * f4;
        glBegin(paramGL, 3);
        for (i = 0; i <= paramInt2; i++) {
          f1 = i * f2;
          f5 = cos(f3) * sin(f1);
          f6 = sin(f3) * sin(f1);
          f7 = cos(f1);
          if (n != 0)
            glNormal3f(paramGL, f5 * f12, f6 * f12, f7 * f12);
          glVertex3f(paramGL, f5 * paramFloat, f6 * paramFloat, f7 * paramFloat);
        }
        glEnd(paramGL);j++; continue;
        
        if (drawStyle == 100010)
        {
          glBegin(paramGL, 0);
          if (n != 0)
            glNormal3f(paramGL, 0.0F, 0.0F, f12);
          glVertex3f(paramGL, 0.0F, 0.0F, paramFloat);
          if (n != 0)
            glNormal3f(paramGL, 0.0F, 0.0F, -f12);
          glVertex3f(paramGL, 0.0F, 0.0F, -paramFloat);
          

          for (i = 1; i < paramInt2 - 1; i++) {
            f1 = i * f2;
            for (j = 0; j < paramInt1; j++) {
              f3 = j * f4;
              f5 = cos(f3) * sin(f1);
              f6 = sin(f3) * sin(f1);
              f7 = cos(f1);
              if (n != 0)
                glNormal3f(paramGL, f5 * f12, f6 * f12, f7 * f12);
              glVertex3f(paramGL, f5 * paramFloat, f6 * paramFloat, f7 * paramFloat);
            }
          }
          glEnd(paramGL);
        }
      }
    }
  }
  






  private final void glBegin(GL paramGL, int paramInt)
  {
    if (immModeSinkEnabled) {
      immModeSink.glBegin(paramInt);
    } else {
      paramGL.getGL2().glBegin(paramInt);
    }
  }
  
  private final void glEnd(GL paramGL) {
    if (immModeSinkEnabled) {
      immModeSink.glEnd(paramGL, immModeSinkImmediate);
    } else {
      paramGL.getGL2().glEnd();
    }
  }
  
  private final void glVertex2f(GL paramGL, float paramFloat1, float paramFloat2) {
    if (immModeSinkEnabled) {
      immModeSink.glVertex2f(paramFloat1, paramFloat2);
    } else {
      paramGL.getGL2().glVertex2f(paramFloat1, paramFloat2);
    }
  }
  
  private final void glVertex3f(GL paramGL, float paramFloat1, float paramFloat2, float paramFloat3) {
    if (immModeSinkEnabled) {
      immModeSink.glVertex3f(paramFloat1, paramFloat2, paramFloat3);
    } else {
      paramGL.getGL2().glVertex3f(paramFloat1, paramFloat2, paramFloat3);
    }
  }
  
  private final void glNormal3f_s(GL paramGL, float paramFloat1, float paramFloat2, float paramFloat3) {
    short s1 = (short)(int)(paramFloat1 * 65535.0F);
    short s2 = (short)(int)(paramFloat2 * 65535.0F);
    short s3 = (short)(int)(paramFloat3 * 65535.0F);
    if (immModeSinkEnabled) {
      immModeSink.glNormal3s(s1, s2, s3);
    } else {
      paramGL.getGL2().glNormal3s(s1, s2, s3);
    }
  }
  
  private final void glNormal3f_b(GL paramGL, float paramFloat1, float paramFloat2, float paramFloat3) {
    byte b1 = (byte)(int)(paramFloat1 * 255.0F);
    byte b2 = (byte)(int)(paramFloat2 * 255.0F);
    byte b3 = (byte)(int)(paramFloat3 * 255.0F);
    if (immModeSinkEnabled) {
      immModeSink.glNormal3b(b1, b2, b3);
    } else {
      paramGL.getGL2().glNormal3b(b1, b2, b3);
    }
  }
  
  private final void glNormal3f(GL paramGL, float paramFloat1, float paramFloat2, float paramFloat3) {
    switch (normalType) {
    case 5126: 
      if (immModeSinkEnabled) {
        immModeSink.glNormal3f(paramFloat1, paramFloat2, paramFloat3);
      } else {
        paramGL.getGL2().glNormal3f(paramFloat1, paramFloat2, paramFloat3);
      }
      break;
    case 5122: 
      glNormal3f_s(paramGL, paramFloat1, paramFloat2, paramFloat3);
      break;
    case 5120: 
      glNormal3f_b(paramGL, paramFloat1, paramFloat2, paramFloat3);
    }
  }
  
  private final void glTexCoord2f(GL paramGL, float paramFloat1, float paramFloat2)
  {
    if (immModeSinkEnabled) {
      immModeSink.glTexCoord2f(paramFloat1, paramFloat2);
    } else {
      paramGL.getGL2().glTexCoord2f(paramFloat1, paramFloat2);
    }
  }
  








  private void normal3f(GL paramGL, float paramFloat1, float paramFloat2, float paramFloat3)
  {
    float f = (float)Math.sqrt(paramFloat1 * paramFloat1 + paramFloat2 * paramFloat2 + paramFloat3 * paramFloat3);
    if (f > 1.0E-5F) {
      paramFloat1 /= f;
      paramFloat2 /= f;
      paramFloat3 /= f;
    }
    glNormal3f(paramGL, paramFloat1, paramFloat2, paramFloat3);
  }
  
  private final void TXTR_COORD(GL paramGL, float paramFloat1, float paramFloat2) {
    if (textureFlag) glTexCoord2f(paramGL, paramFloat1, paramFloat2);
  }
  
  private float sin(float paramFloat) {
    return (float)Math.sin(paramFloat);
  }
  
  private float cos(float paramFloat) {
    return (float)Math.cos(paramFloat);
  }
}
