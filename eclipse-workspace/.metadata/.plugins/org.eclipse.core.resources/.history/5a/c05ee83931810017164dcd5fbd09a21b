package com.jogamp.newt.opengl;

import com.jogamp.common.GlueGenVersion;
import com.jogamp.common.util.VersionUtil;
import com.jogamp.common.util.locks.RecursiveLock;
import com.jogamp.nativewindow.AbstractGraphicsConfiguration;
import com.jogamp.nativewindow.CapabilitiesChooser;
import com.jogamp.nativewindow.CapabilitiesImmutable;
import com.jogamp.nativewindow.NativeSurface;
import com.jogamp.nativewindow.NativeWindow;
import com.jogamp.nativewindow.NativeWindowException;
import com.jogamp.nativewindow.SurfaceUpdatedListener;
import com.jogamp.nativewindow.WindowClosingProtocol.WindowClosingMode;
import com.jogamp.nativewindow.util.InsetsImmutable;
import com.jogamp.nativewindow.util.Point;
import com.jogamp.nativewindow.util.Rectangle;
import com.jogamp.newt.Display.PointerIcon;
import com.jogamp.newt.MonitorDevice;
import com.jogamp.newt.NewtFactory;
import com.jogamp.newt.Screen;
import com.jogamp.newt.Window;
import com.jogamp.newt.Window.FocusRunnable;
import com.jogamp.newt.Window.ReparentOperation;
import com.jogamp.newt.event.GestureHandler;
import com.jogamp.newt.event.GestureHandler.GestureListener;
import com.jogamp.newt.event.KeyListener;
import com.jogamp.newt.event.MouseListener;
import com.jogamp.newt.event.NEWTEvent;
import com.jogamp.newt.event.NEWTEventConsumer;
import com.jogamp.newt.event.WindowAdapter;
import com.jogamp.newt.event.WindowEvent;
import com.jogamp.newt.event.WindowListener;
import com.jogamp.newt.event.WindowUpdateEvent;
import com.jogamp.opengl.FPSCounter;
import com.jogamp.opengl.GL;
import com.jogamp.opengl.GLAnimatorControl;
import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.GLCapabilities;
import com.jogamp.opengl.GLCapabilitiesImmutable;
import com.jogamp.opengl.GLContext;
import com.jogamp.opengl.GLDrawable;
import com.jogamp.opengl.GLDrawableFactory;
import com.jogamp.opengl.GLEventListener;
import com.jogamp.opengl.GLException;
import com.jogamp.opengl.GLProfile;
import com.jogamp.opengl.JoglVersion;
import java.io.PrintStream;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.List;
import jogamp.newt.WindowImpl;
import jogamp.newt.WindowImpl.LifecycleHook;
import jogamp.opengl.GLAutoDrawableBase;
import jogamp.opengl.GLContextImpl;
import jogamp.opengl.GLDrawableHelper;
import jogamp.opengl.GLDrawableImpl;




























































public class GLWindow
  extends GLAutoDrawableBase
  implements GLAutoDrawable, Window, NEWTEventConsumer, FPSCounter
{
  private final WindowImpl window;
  private GLDrawableFactory factory;
  
  protected GLWindow(Window paramWindow)
  {
    super(null, null, false);
    window = ((WindowImpl)paramWindow);
    window.setWindowDestroyNotifyAction(new Runnable()
    {

      public void run() { defaultWindowDestroyNotifyOp(); }
    });
    paramWindow.addWindowListener(new WindowAdapter()
    {
      public void windowRepaint(WindowUpdateEvent paramAnonymousWindowUpdateEvent) {
        defaultWindowRepaintOp();
      }
      
      public void windowResized(WindowEvent paramAnonymousWindowEvent)
      {
        defaultWindowResizedOp(getSurfaceWidth(), getSurfaceHeight());
      }
      
    });
    window.setLifecycleHook(new GLLifecycleHook());
  }
  
  public final Object getUpstreamWidget()
  {
    return window;
  }
  
  public final RecursiveLock getUpstreamLock()
  {
    return window.getLock();
  }
  








  public static GLWindow create(GLCapabilitiesImmutable paramGLCapabilitiesImmutable)
  {
    return new GLWindow(NewtFactory.createWindow(paramGLCapabilitiesImmutable));
  }
  







  public static GLWindow create(Screen paramScreen, GLCapabilitiesImmutable paramGLCapabilitiesImmutable)
  {
    return new GLWindow(NewtFactory.createWindow(paramScreen, paramGLCapabilitiesImmutable));
  }
  






  public static GLWindow create(Window paramWindow)
  {
    return new GLWindow(paramWindow);
  }
  












  public static GLWindow create(NativeWindow paramNativeWindow, GLCapabilitiesImmutable paramGLCapabilitiesImmutable)
  {
    return new GLWindow(NewtFactory.createWindow(paramNativeWindow, paramGLCapabilitiesImmutable));
  }
  



  public WindowClosingProtocol.WindowClosingMode getDefaultCloseOperation()
  {
    return window.getDefaultCloseOperation();
  }
  
  public WindowClosingProtocol.WindowClosingMode setDefaultCloseOperation(WindowClosingProtocol.WindowClosingMode paramWindowClosingMode)
  {
    return window.setDefaultCloseOperation(paramWindowClosingMode);
  }
  




  public final int getStatePublicBitCount()
  {
    return window.getStatePublicBitCount();
  }
  
  public final int getStatePublicBitmask()
  {
    return window.getStatePublicBitmask();
  }
  
  public final int getStateMask()
  {
    return window.getStateMask();
  }
  
  public final String getStateMaskString()
  {
    return window.getStateMaskString();
  }
  
  public final int getSupportedStateMask()
  {
    return window.getSupportedStateMask();
  }
  
  public final String getSupportedStateMaskString()
  {
    return window.getSupportedStateMaskString();
  }
  
  public CapabilitiesChooser setCapabilitiesChooser(CapabilitiesChooser paramCapabilitiesChooser)
  {
    return window.setCapabilitiesChooser(paramCapabilitiesChooser);
  }
  
  public final CapabilitiesImmutable getChosenCapabilities()
  {
    GLDrawableImpl localGLDrawableImpl = drawable;
    return null != localGLDrawableImpl ? localGLDrawableImpl.getChosenGLCapabilities() : window.getChosenCapabilities();
  }
  
  public final CapabilitiesImmutable getRequestedCapabilities()
  {
    return window.getRequestedCapabilities();
  }
  
  public final Window getDelegatedWindow()
  {
    return window.getDelegatedWindow();
  }
  
  public final NativeWindow getParent()
  {
    return window.getParent();
  }
  
  public final Screen getScreen()
  {
    return window.getScreen();
  }
  
  public final MonitorDevice getMainMonitor()
  {
    return window.getMainMonitor();
  }
  
  public final void setTitle(String paramString)
  {
    window.setTitle(paramString);
  }
  
  public final String getTitle()
  {
    return window.getTitle();
  }
  
  public final boolean isPointerVisible()
  {
    return window.isPointerVisible();
  }
  
  public final void setPointerVisible(boolean paramBoolean)
  {
    window.setPointerVisible(paramBoolean);
  }
  
  public final Display.PointerIcon getPointerIcon()
  {
    return window.getPointerIcon();
  }
  
  public final void setPointerIcon(Display.PointerIcon paramPointerIcon)
  {
    window.setPointerIcon(paramPointerIcon);
  }
  
  public final boolean isPointerConfined()
  {
    return window.isPointerConfined();
  }
  
  public final void confinePointer(boolean paramBoolean)
  {
    window.confinePointer(paramBoolean);
  }
  
  public final void setUndecorated(boolean paramBoolean)
  {
    window.setUndecorated(paramBoolean);
  }
  
  public final void warpPointer(int paramInt1, int paramInt2)
  {
    window.warpPointer(paramInt1, paramInt2);
  }
  
  public final boolean isUndecorated() {
    return window.isUndecorated();
  }
  
  public final void setAlwaysOnTop(boolean paramBoolean)
  {
    window.setAlwaysOnTop(paramBoolean);
  }
  
  public final boolean isAlwaysOnTop()
  {
    return window.isAlwaysOnTop();
  }
  
  public final void setAlwaysOnBottom(boolean paramBoolean)
  {
    window.setAlwaysOnBottom(paramBoolean);
  }
  
  public final boolean isAlwaysOnBottom()
  {
    return window.isAlwaysOnBottom();
  }
  
  public final void setResizable(boolean paramBoolean)
  {
    window.setResizable(paramBoolean);
  }
  
  public final boolean isResizable()
  {
    return window.isResizable();
  }
  
  public final void setSticky(boolean paramBoolean)
  {
    window.setSticky(paramBoolean);
  }
  
  public final boolean isSticky()
  {
    return window.isSticky();
  }
  
  public final void setMaximized(boolean paramBoolean1, boolean paramBoolean2)
  {
    window.setMaximized(paramBoolean1, paramBoolean2);
  }
  
  public final boolean isMaximizedVert()
  {
    return window.isMaximizedVert();
  }
  
  public final boolean isMaximizedHorz()
  {
    return window.isMaximizedHorz();
  }
  
  public final void setFocusAction(Window.FocusRunnable paramFocusRunnable)
  {
    window.setFocusAction(paramFocusRunnable);
  }
  
  public void setKeyboardFocusHandler(KeyListener paramKeyListener)
  {
    window.setKeyboardFocusHandler(paramKeyListener);
  }
  
  public final void requestFocus()
  {
    window.requestFocus();
  }
  
  public final void requestFocus(boolean paramBoolean)
  {
    window.requestFocus(paramBoolean);
  }
  
  public boolean hasFocus()
  {
    return window.hasFocus();
  }
  
  public final InsetsImmutable getInsets()
  {
    return window.getInsets();
  }
  
  public final int getX()
  {
    return window.getX();
  }
  
  public final int getY()
  {
    return window.getY();
  }
  
  public final int getWidth()
  {
    return window.getWidth();
  }
  
  public final int getHeight()
  {
    return window.getHeight();
  }
  
  public final Rectangle getBounds()
  {
    return window.getBounds();
  }
  
  public final int getSurfaceWidth()
  {
    return window.getSurfaceWidth();
  }
  
  public final int getSurfaceHeight()
  {
    return window.getSurfaceHeight();
  }
  
  public final int[] convertToWindowUnits(int[] paramArrayOfInt)
  {
    return window.convertToWindowUnits(paramArrayOfInt);
  }
  
  public final int[] convertToPixelUnits(int[] paramArrayOfInt)
  {
    return window.convertToPixelUnits(paramArrayOfInt);
  }
  
  public final boolean setSurfaceScale(float[] paramArrayOfFloat)
  {
    return window.setSurfaceScale(paramArrayOfFloat);
  }
  
  public final float[] getRequestedSurfaceScale(float[] paramArrayOfFloat)
  {
    return window.getRequestedSurfaceScale(paramArrayOfFloat);
  }
  
  public final float[] getCurrentSurfaceScale(float[] paramArrayOfFloat)
  {
    return window.getCurrentSurfaceScale(paramArrayOfFloat);
  }
  
  public final float[] getMinimumSurfaceScale(float[] paramArrayOfFloat)
  {
    return window.getMinimumSurfaceScale(paramArrayOfFloat);
  }
  
  public final float[] getMaximumSurfaceScale(float[] paramArrayOfFloat)
  {
    return window.getMaximumSurfaceScale(paramArrayOfFloat);
  }
  
  public final float[] getPixelsPerMM(float[] paramArrayOfFloat)
  {
    return window.getPixelsPerMM(paramArrayOfFloat);
  }
  
  public final void setPosition(int paramInt1, int paramInt2)
  {
    window.setPosition(paramInt1, paramInt2);
  }
  
  public void setTopLevelPosition(int paramInt1, int paramInt2) {
    window.setTopLevelPosition(paramInt1, paramInt2);
  }
  
  public final boolean setFullscreen(boolean paramBoolean)
  {
    return window.setFullscreen(paramBoolean);
  }
  
  public boolean setFullscreen(List<MonitorDevice> paramList)
  {
    return window.setFullscreen(paramList);
  }
  
  public final boolean isFullscreen()
  {
    return window.isFullscreen();
  }
  
  public final boolean isVisible()
  {
    return window.isVisible();
  }
  
  public final String toString()
  {
    return "NEWT-GLWindow[ \n\tHelper: " + helper + ", \n\tDrawable: " + drawable + ", \n\tContext: " + context + ", \n\tWindow: " + window + "]";
  }
  

  public final Window.ReparentOperation reparentWindow(NativeWindow paramNativeWindow, int paramInt1, int paramInt2, int paramInt3)
  {
    return window.reparentWindow(paramNativeWindow, paramInt1, paramInt2, paramInt3);
  }
  
  public final boolean isChildWindow() {
    return window.isChildWindow();
  }
  
  public final boolean removeChild(NativeWindow paramNativeWindow)
  {
    return window.removeChild(paramNativeWindow);
  }
  
  public final boolean addChild(NativeWindow paramNativeWindow)
  {
    return window.addChild(paramNativeWindow);
  }
  




  public final void destroy()
  {
    window.destroy();
  }
  
  public void setWindowDestroyNotifyAction(Runnable paramRunnable)
  {
    window.setWindowDestroyNotifyAction(paramRunnable);
  }
  
  public final void setVisible(boolean paramBoolean)
  {
    window.setVisible(paramBoolean);
  }
  
  public void setVisible(boolean paramBoolean1, boolean paramBoolean2)
  {
    window.setVisible(paramBoolean1, paramBoolean2);
  }
  
  public final void setSize(int paramInt1, int paramInt2)
  {
    window.setSize(paramInt1, paramInt2);
  }
  
  public final void setSurfaceSize(int paramInt1, int paramInt2) {
    window.setSurfaceSize(paramInt1, paramInt2);
  }
  
  public void setTopLevelSize(int paramInt1, int paramInt2) {
    window.setTopLevelSize(paramInt1, paramInt2);
  }
  
  public final boolean isNativeValid()
  {
    return window.isNativeValid();
  }
  
  public Point getLocationOnScreen(Point paramPoint)
  {
    return window.getLocationOnScreen(paramPoint);
  }
  
  protected class GLLifecycleHook implements WindowImpl.LifecycleHook
  {
    protected GLLifecycleHook() {}
    
    public void preserveGLStateAtDestroy(boolean paramBoolean) {
      preserveGLStateAtDestroy(paramBoolean);
    }
    


    public synchronized void destroyActionPreLock() {}
    

    public synchronized void destroyActionInLock()
    {
      if (Window.DEBUG_IMPLEMENTATION) {
        String str = "GLWindow.destroy() " + WindowImpl.getThreadName() + ", start";
        System.err.println(str);
      }
      


      destroyImplInLock();
      
      if (Window.DEBUG_IMPLEMENTATION) {
        System.err.println("GLWindow.destroy() " + WindowImpl.getThreadName() + ", fin");
      }
    }
    
    public synchronized void resetCounter()
    {
      if (Window.DEBUG_IMPLEMENTATION) {
        System.err.println("GLWindow.resetCounter() " + WindowImpl.getThreadName());
      }
      resetFPSCounter();
      GLAnimatorControl localGLAnimatorControl = getAnimator();
      if (null != localGLAnimatorControl) {
        localGLAnimatorControl.resetFPSCounter();
      }
    }
    
    public synchronized void setVisibleActionPost(boolean paramBoolean1, boolean paramBoolean2)
    {
      long l;
      if (Window.DEBUG_IMPLEMENTATION) {
        l = System.nanoTime();
        System.err.println("GLWindow.setVisibleActionPost(" + paramBoolean1 + ", " + paramBoolean2 + ") " + WindowImpl.getThreadName() + ", start");
      } else {
        l = 0L;
      }
      
      if ((null == drawable) && (paramBoolean1) && (0L != window.getWindowHandle()) && (0 < getSurfaceWidth() * getSurfaceHeight())) {
        if (null != context) {
          throw new InternalError("GLWindow.LifecycleHook.setVisiblePost: " + WindowImpl.getThreadName() + " - Null drawable, but valid context - " + GLWindow.this);
        }
        GLContext[] arrayOfGLContext = { null };
        if (!helper.isSharedGLContextPending(arrayOfGLContext))
        {

          Object localObject = window.getWrappedSurface();
          WindowImpl localWindowImpl = null != localObject ? localObject : window;
          
          localObject = (GLCapabilitiesImmutable)localWindowImpl.getGraphicsConfiguration().getChosenCapabilities();
          if (null == factory) {
            factory = GLDrawableFactory.getFactory(((GLCapabilitiesImmutable)localObject).getGLProfile());
          }
          drawable = ((GLDrawableImpl)factory.createGLDrawable(localWindowImpl));
          drawable.setRealized(true);
          
          if (!restoreGLEventListenerState()) {
            context = ((GLContextImpl)drawable.createContext(arrayOfGLContext[0]));
            context.setContextCreationFlags(additionalCtxCreationFlags);
          }
        }
      }
      if (Window.DEBUG_IMPLEMENTATION) {
        System.err.println("GLWindow.setVisibleActionPost(" + paramBoolean1 + ", " + paramBoolean2 + ") " + WindowImpl.getThreadName() + ", fin: dt " + (System.nanoTime() - l) / 1000000.0D + "ms");
      }
    }
    
    private GLAnimatorControl savedAnimator = null;
    

    public synchronized boolean pauseRenderingAction()
    {
      savedAnimator = getAnimator();
      boolean bool; if (null != savedAnimator) {
        bool = savedAnimator.pause();
      } else {
        bool = false;
      }
      return bool;
    }
    
    public synchronized void resumeRenderingAction()
    {
      if ((null != savedAnimator) && (savedAnimator.isPaused())) {
        savedAnimator.resume();
      }
    }
    

    public void shutdownRenderingAction()
    {
      final GLAnimatorControl localGLAnimatorControl = getAnimator();
      if ((null != localGLAnimatorControl) && (localGLAnimatorControl.isAnimating())) {
        final Thread localThread = localGLAnimatorControl.getThread();
        if (localThread == Thread.currentThread()) {
          localGLAnimatorControl.stop();
        } else {
          AccessController.doPrivileged(new PrivilegedAction()
          {
            public Object run() {
              if ((localGLAnimatorControl.isAnimating()) && (null != localThread)) {
                try {
                  localThread.stop();
                } catch (Throwable localThrowable) {
                  if (GLAutoDrawableBase.DEBUG) {
                    System.err.println("Caught " + localThrowable.getClass().getName() + ": " + localThrowable.getMessage());
                    localThrowable.printStackTrace();
                  }
                }
              }
              return null;
            }
          });
        }
      }
    }
  }
  



  public void display()
  {
    if ((!isNativeValid()) || (!isVisible())) { return;
    }
    if ((sendDestroy) || ((window.hasDeviceChanged()) && (GLAutoDrawable.SCREEN_CHANGE_ACTION_ENABLED))) {
      sendDestroy = false;
      destroy();
      return;
    }
    

    RecursiveLock localRecursiveLock = window.getLock();
    localRecursiveLock.lock();
    int i;
    try { if (null != context)
      {
        helper.invokeGL(drawable, context, defaultDisplayAction, defaultInitAction);
        i = 1;
      } else {
        i = 0;
      }
      
      localRecursiveLock.unlock(); } finally { localRecursiveLock.unlock();
    }
    if ((0 < getSurfaceWidth()) && (0 < getSurfaceHeight()))
    {
      setVisible(true);
    }
  }
  





  public final boolean isGLStatePreservationSupported()
  {
    return true;
  }
  




  public final GLDrawableFactory getFactory()
  {
    return factory;
  }
  
  public final void swapBuffers() throws GLException
  {
    defaultSwapBuffers();
  }
  



  public boolean consumeEvent(NEWTEvent paramNEWTEvent)
  {
    return window.consumeEvent(paramNEWTEvent);
  }
  



  public final void windowRepaint(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    window.windowRepaint(paramInt1, paramInt2, paramInt3, paramInt4);
  }
  
  public final void enqueueEvent(boolean paramBoolean, NEWTEvent paramNEWTEvent)
  {
    window.enqueueEvent(paramBoolean, paramNEWTEvent);
  }
  
  public final void runOnEDTIfAvail(boolean paramBoolean, Runnable paramRunnable)
  {
    window.runOnEDTIfAvail(paramBoolean, paramRunnable);
  }
  
  public void sendWindowEvent(int paramInt)
  {
    window.sendWindowEvent(paramInt);
  }
  
  public final WindowListener getWindowListener(int paramInt)
  {
    return window.getWindowListener(paramInt);
  }
  
  public final WindowListener[] getWindowListeners()
  {
    return window.getWindowListeners();
  }
  
  public final void removeWindowListener(WindowListener paramWindowListener)
  {
    window.removeWindowListener(paramWindowListener);
  }
  
  public final void addWindowListener(WindowListener paramWindowListener)
  {
    window.addWindowListener(paramWindowListener);
  }
  
  public final void addWindowListener(int paramInt, WindowListener paramWindowListener) throws IndexOutOfBoundsException
  {
    window.addWindowListener(paramInt, paramWindowListener);
  }
  
  public final void setKeyboardVisible(boolean paramBoolean)
  {
    window.setKeyboardVisible(paramBoolean);
  }
  
  public final boolean isKeyboardVisible()
  {
    return window.isKeyboardVisible();
  }
  
  public final void addKeyListener(KeyListener paramKeyListener)
  {
    window.addKeyListener(paramKeyListener);
  }
  
  public final void addKeyListener(int paramInt, KeyListener paramKeyListener)
  {
    window.addKeyListener(paramInt, paramKeyListener);
  }
  
  public final void removeKeyListener(KeyListener paramKeyListener)
  {
    window.removeKeyListener(paramKeyListener);
  }
  
  public final KeyListener getKeyListener(int paramInt)
  {
    return window.getKeyListener(paramInt);
  }
  
  public final KeyListener[] getKeyListeners()
  {
    return window.getKeyListeners();
  }
  
  public final void addMouseListener(MouseListener paramMouseListener)
  {
    window.addMouseListener(paramMouseListener);
  }
  
  public final void addMouseListener(int paramInt, MouseListener paramMouseListener)
  {
    window.addMouseListener(paramInt, paramMouseListener);
  }
  
  public final void removeMouseListener(MouseListener paramMouseListener)
  {
    window.removeMouseListener(paramMouseListener);
  }
  
  public final MouseListener getMouseListener(int paramInt)
  {
    return window.getMouseListener(paramInt);
  }
  
  public final MouseListener[] getMouseListeners()
  {
    return window.getMouseListeners();
  }
  
  public void setDefaultGesturesEnabled(boolean paramBoolean)
  {
    window.setDefaultGesturesEnabled(paramBoolean);
  }
  
  public boolean areDefaultGesturesEnabled() {
    return window.areDefaultGesturesEnabled();
  }
  
  public final void addGestureHandler(GestureHandler paramGestureHandler) {
    window.addGestureHandler(paramGestureHandler);
  }
  
  public final void addGestureHandler(int paramInt, GestureHandler paramGestureHandler) {
    window.addGestureHandler(paramInt, paramGestureHandler);
  }
  
  public final void removeGestureHandler(GestureHandler paramGestureHandler) {
    window.removeGestureHandler(paramGestureHandler);
  }
  
  public final void addGestureListener(GestureHandler.GestureListener paramGestureListener) {
    window.addGestureListener(-1, paramGestureListener);
  }
  
  public final void addGestureListener(int paramInt, GestureHandler.GestureListener paramGestureListener) {
    window.addGestureListener(paramInt, paramGestureListener);
  }
  
  public final void removeGestureListener(GestureHandler.GestureListener paramGestureListener) {
    window.removeGestureListener(paramGestureListener);
  }
  



  public final int lockSurface()
    throws NativeWindowException, RuntimeException
  {
    return window.lockSurface();
  }
  
  public final void unlockSurface()
  {
    window.unlockSurface();
  }
  
  public final boolean isSurfaceLockedByOtherThread()
  {
    return window.isSurfaceLockedByOtherThread();
  }
  
  public final Thread getSurfaceLockOwner()
  {
    return window.getSurfaceLockOwner();
  }
  

  public final boolean surfaceSwap()
  {
    return window.surfaceSwap();
  }
  
  public final void removeSurfaceUpdatedListener(SurfaceUpdatedListener paramSurfaceUpdatedListener)
  {
    window.removeSurfaceUpdatedListener(paramSurfaceUpdatedListener);
  }
  
  public final void addSurfaceUpdatedListener(SurfaceUpdatedListener paramSurfaceUpdatedListener)
  {
    window.addSurfaceUpdatedListener(paramSurfaceUpdatedListener);
  }
  
  public final void addSurfaceUpdatedListener(int paramInt, SurfaceUpdatedListener paramSurfaceUpdatedListener) throws IndexOutOfBoundsException
  {
    window.addSurfaceUpdatedListener(paramInt, paramSurfaceUpdatedListener);
  }
  
  public final void surfaceUpdated(Object paramObject, NativeSurface paramNativeSurface, long paramLong)
  {
    window.surfaceUpdated(paramObject, paramNativeSurface, paramLong);
  }
  
  public final long getWindowHandle()
  {
    return window.getWindowHandle();
  }
  

  public final long getSurfaceHandle()
  {
    return window.getSurfaceHandle();
  }
  

  public final AbstractGraphicsConfiguration getGraphicsConfiguration()
  {
    return window.getGraphicsConfiguration();
  }
  
  public final long getDisplayHandle()
  {
    return window.getDisplayHandle();
  }
  
  public final int getScreenIndex()
  {
    return window.getScreenIndex();
  }
  







  public static void main(String[] paramArrayOfString)
  {
    boolean bool5 = false;
    boolean bool6 = false;
    boolean bool7 = false;
    boolean bool8 = false;
    if (null != paramArrayOfString) {
      for (int i = 0; i < paramArrayOfString.length; i++) {
        if (paramArrayOfString[i].equals("-es2")) {
          bool5 = true;
        } else if (paramArrayOfString[i].equals("-es3")) {
          bool6 = true;
        } else if (paramArrayOfString[i].equals("-gl3")) {
          bool7 = true;
        } else if (paramArrayOfString[i].equals("-gl4es3")) {
          bool8 = true;
        }
      }
    }
    boolean bool1 = bool5;
    boolean bool2 = bool6;
    boolean bool3 = bool7;
    boolean bool4 = bool8;
    
    System.err.println("forceES2    " + bool1);
    System.err.println("forceES3    " + bool2);
    System.err.println("forceGL3    " + bool3);
    System.err.println("forceGL4ES3 " + bool4);
    
    System.err.println(VersionUtil.getPlatformInfo());
    System.err.println(GlueGenVersion.getInstance());
    System.err.println(JoglVersion.getInstance());
    
    System.err.println(JoglVersion.getDefaultOpenGLInfo(null, null, true).toString());
    
    GLProfile localGLProfile;
    if (bool4) {
      localGLProfile = GLProfile.get("GL4ES3");
    } else if (bool3) {
      localGLProfile = GLProfile.get("GL3");
    } else if (bool2) {
      localGLProfile = GLProfile.get("GLES3");
    } else if (bool1) {
      localGLProfile = GLProfile.get("GLES2");
    } else {
      localGLProfile = GLProfile.getDefault();
    }
    GLCapabilities localGLCapabilities = new GLCapabilities(localGLProfile);
    System.err.println("Requesting: " + localGLCapabilities);
    
    GLWindow localGLWindow = create(localGLCapabilities);
    localGLWindow.setSize(128, 128);
    
    localGLWindow.addGLEventListener(new GLEventListener()
    {
      public void init(GLAutoDrawable paramAnonymousGLAutoDrawable) {
        MonitorDevice localMonitorDevice = val$glWindow.getMainMonitor();
        System.err.println("Main Monitor: " + localMonitorDevice);
        float[] arrayOfFloat = localMonitorDevice.getPixelsPerMM(new float[2]);
        System.err.println("    pixel/mm [" + arrayOfFloat[0] + ", " + arrayOfFloat[1] + "]");
        System.err.println("    pixel/in [" + arrayOfFloat[0] * 25.4F + ", " + arrayOfFloat[1] * 25.4F + "]");
        GL localGL = paramAnonymousGLAutoDrawable.getGL();
        System.err.println(JoglVersion.getGLInfo(localGL, null));
        System.err.println("Requested: " + paramAnonymousGLAutoDrawable.getNativeSurface().getGraphicsConfiguration().getRequestedCapabilities());
        System.err.println("Chosen   : " + paramAnonymousGLAutoDrawable.getChosenGLCapabilities());
        System.err.println("GL impl. class " + localGL.getClass().getName());
        Object localObject; if (localGL.isGL4ES3()) {
          localObject = localGL.getGL4ES3();
          System.err.println("GL4ES3 retrieved, impl. class " + localObject.getClass().getName());
        }
        if (localGL.isGL3()) {
          localObject = localGL.getGL3();
          System.err.println("GL3 retrieved, impl. class " + localObject.getClass().getName());
        }
        if (localGL.isGLES3()) {
          localObject = localGL.getGLES3();
          System.err.println("GLES3 retrieved, impl. class " + localObject.getClass().getName());
        }
        if (localGL.isGLES2()) {
          localObject = localGL.getGLES2();
          System.err.println("GLES2 retrieved, impl. class " + localObject.getClass().getName());
        }
      }
      



      public void reshape(GLAutoDrawable paramAnonymousGLAutoDrawable, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3, int paramAnonymousInt4) {}
      


      public void display(GLAutoDrawable paramAnonymousGLAutoDrawable) {}
      


      public void dispose(GLAutoDrawable paramAnonymousGLAutoDrawable) {}
    });
    localGLWindow.setVisible(true);
    localGLWindow.destroy();
  }
}
