package com.leapmotion.leap;

import java.util.Iterator;



public class ScreenList
  extends Interface
  implements Iterable<Screen>
{
  private long swigCPtr;
  
  public ScreenList(long paramLong, boolean paramBoolean)
  {
    super(LeapJNI.ScreenList_SWIGUpcast(paramLong), paramBoolean);
    swigCPtr = paramLong;
  }
  
  public static long getCPtr(ScreenList paramScreenList) {
    return paramScreenList == null ? 0L : swigCPtr;
  }
  
  protected void finalize() {
    delete();
  }
  
  public synchronized void delete() {
    if (swigCPtr != 0L) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        LeapJNI.delete_ScreenList(swigCPtr);
      }
      swigCPtr = 0L;
    }
    super.delete(); }
  
  public class ScreenListIterator implements Iterator<Screen> { public ScreenListIterator() {}
    
    int index = 0;
    
    public boolean hasNext() { return index < count(); }
    
    public Screen next() {
      return get(index++);
    }
    
    public void remove() {}
  }
  
  public Iterator<Screen> iterator() { return new ScreenListIterator(); }
  
  public ScreenList()
  {
    this(LeapJNI.new_ScreenList(), true);
  }
  
  public int count() {
    return LeapJNI.ScreenList_count(swigCPtr, this);
  }
  
  public boolean isEmpty() {
    return LeapJNI.ScreenList_isEmpty(swigCPtr, this);
  }
  
  public Screen get(int paramInt) {
    return new Screen(LeapJNI.ScreenList_get(swigCPtr, this, paramInt), true);
  }
  
  public Screen closestScreenHit(Pointable paramPointable) {
    return new Screen(LeapJNI.ScreenList_closestScreenHit__SWIG_0(swigCPtr, this, Pointable.getCPtr(paramPointable), paramPointable), true);
  }
  
  public Screen closestScreenHit(Vector paramVector1, Vector paramVector2) {
    return new Screen(LeapJNI.ScreenList_closestScreenHit__SWIG_1(swigCPtr, this, Vector.getCPtr(paramVector1), paramVector1, Vector.getCPtr(paramVector2), paramVector2), true);
  }
  
  public Screen closestScreen(Vector paramVector) {
    return new Screen(LeapJNI.ScreenList_closestScreen(swigCPtr, this, Vector.getCPtr(paramVector), paramVector), true);
  }
}
