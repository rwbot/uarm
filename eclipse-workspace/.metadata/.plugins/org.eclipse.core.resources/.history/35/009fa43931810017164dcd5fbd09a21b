package processing.data;

import java.io.BufferedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Iterator;
import processing.core.PApplet;












public class IntDict
{
  protected int count;
  protected String[] keys;
  protected int[] values;
  private HashMap<String, Integer> indices = new HashMap();
  
  public IntDict()
  {
    count = 0;
    keys = new String[10];
    values = new int[10];
  }
  






  public IntDict(int length)
  {
    count = 0;
    keys = new String[length];
    values = new int[length];
  }
  






  public IntDict(BufferedReader reader)
  {
    String[] lines = PApplet.loadStrings(reader);
    keys = new String[lines.length];
    values = new int[lines.length];
    
    for (int i = 0; i < lines.length; i++) {
      String[] pieces = PApplet.split(lines[i], '\t');
      if (pieces.length == 2) {
        keys[count] = pieces[0];
        values[count] = PApplet.parseInt(pieces[1]);
        indices.put(pieces[0], Integer.valueOf(count));
        count += 1;
      }
    }
  }
  


  public IntDict(String[] keys, int[] values)
  {
    if (keys.length != values.length) {
      throw new IllegalArgumentException("key and value arrays must be the same length");
    }
    this.keys = keys;
    this.values = values;
    count = keys.length;
    for (int i = 0; i < count; i++) {
      indices.put(keys[i], Integer.valueOf(i));
    }
  }
  









  public IntDict(Object[][] pairs)
  {
    count = pairs.length;
    keys = new String[count];
    values = new int[count];
    for (int i = 0; i < count; i++) {
      keys[i] = ((String)pairs[i][0]);
      values[i] = ((Integer)pairs[i][1]).intValue();
      indices.put(keys[i], Integer.valueOf(i));
    }
  }
  






  public int size()
  {
    return count;
  }
  






  public void clear()
  {
    count = 0;
    indices = new HashMap();
  }
  
  public String key(int index)
  {
    return keys[index];
  }
  
  protected void crop()
  {
    if (count != keys.length) {
      keys = PApplet.subset(keys, 0, count);
      values = PApplet.subset(values, 0, count);
    }
  }
  
  public Iterable<String> keys()
  {
    new Iterable()
    {
      public Iterator<String> iterator()
      {
        return keyIterator();
      }
    };
  }
  

  public Iterator<String> keyIterator()
  {
    new Iterator() {
      int index = -1;
      
      public void remove() {
        removeIndex(index);
        index -= 1;
      }
      
      public String next() {
        return key(++index);
      }
      
      public boolean hasNext() {
        return index + 1 < size();
      }
    };
  }
  






  public String[] keyArray()
  {
    crop();
    return keyArray(null);
  }
  
  public String[] keyArray(String[] outgoing)
  {
    if ((outgoing == null) || (outgoing.length != count)) {
      outgoing = new String[count];
    }
    System.arraycopy(keys, 0, outgoing, 0, count);
    return outgoing;
  }
  
  public int value(int index)
  {
    return values[index];
  }
  




  public Iterable<Integer> values()
  {
    new Iterable()
    {
      public Iterator<Integer> iterator()
      {
        return valueIterator();
      }
    };
  }
  
  public Iterator<Integer> valueIterator()
  {
    new Iterator() {
      int index = -1;
      
      public void remove() {
        removeIndex(index);
        index -= 1;
      }
      
      public Integer next() {
        return Integer.valueOf(value(++index));
      }
      
      public boolean hasNext() {
        return index + 1 < size();
      }
    };
  }
  






  public int[] valueArray()
  {
    crop();
    return valueArray(null);
  }
  







  public int[] valueArray(int[] array)
  {
    if ((array == null) || (array.length != size())) {
      array = new int[count];
    }
    System.arraycopy(values, 0, array, 0, count);
    return array;
  }
  






  public int get(String key)
  {
    int index = index(key);
    if (index == -1) {
      throw new IllegalArgumentException("No key named '" + key + "'");
    }
    return values[index];
  }
  
  public int get(String key, int alternate)
  {
    int index = index(key);
    if (index == -1) return alternate;
    return values[index];
  }
  






  public void set(String key, int amount)
  {
    int index = index(key);
    if (index == -1) {
      create(key, amount);
    } else {
      values[index] = amount;
    }
  }
  



  public boolean hasKey(String key)
  {
    return index(key) != -1;
  }
  






  public void increment(String key)
  {
    add(key, 1);
  }
  




  public void add(String key, int amount)
  {
    int index = index(key);
    if (index == -1) {
      create(key, amount);
    } else {
      values[index] += amount;
    }
  }
  




  public void sub(String key, int amount)
  {
    add(key, -amount);
  }
  




  public void mult(String key, int amount)
  {
    int index = index(key);
    if (index != -1) {
      values[index] *= amount;
    }
  }
  




  public void div(String key, int amount)
  {
    int index = index(key);
    if (index != -1) {
      values[index] /= amount;
    }
  }
  
  private void checkMinMax(String functionName)
  {
    if (count == 0) {
      String msg = 
        String.format("Cannot use %s() on an empty %s.", new Object[] {
        functionName, getClass().getSimpleName() });
      throw new RuntimeException(msg);
    }
  }
  


  public int minIndex()
  {
    if (count == 0) { return -1;
    }
    int index = 0;
    int value = values[0];
    for (int i = 1; i < count; i++) {
      if (values[i] < value) {
        index = i;
        value = values[i];
      }
    }
    return index;
  }
  

  public String minKey()
  {
    checkMinMax("minKey");
    int index = minIndex();
    if (index == -1) {
      return null;
    }
    return keys[index];
  }
  

  public int minValue()
  {
    checkMinMax("minValue");
    return values[minIndex()];
  }
  


  public int maxIndex()
  {
    if (count == 0) {
      return -1;
    }
    int index = 0;
    int value = values[0];
    for (int i = 1; i < count; i++) {
      if (values[i] > value) {
        index = i;
        value = values[i];
      }
    }
    return index;
  }
  


  public String maxKey()
  {
    int index = maxIndex();
    if (index == -1) {
      return null;
    }
    return keys[index];
  }
  

  public int maxValue()
  {
    checkMinMax("maxIndex");
    return values[maxIndex()];
  }
  
  public int index(String what)
  {
    Integer found = (Integer)indices.get(what);
    return found == null ? -1 : found.intValue();
  }
  
  protected void create(String what, int much)
  {
    if (count == keys.length) {
      keys = PApplet.expand(keys);
      values = PApplet.expand(values);
    }
    indices.put(what, Integer.valueOf(count));
    keys[count] = what;
    values[count] = much;
    count += 1;
  }
  



  public int remove(String key)
  {
    int index = index(key);
    if (index != -1) {
      removeIndex(index);
    }
    return index;
  }
  
  public String removeIndex(int index)
  {
    if ((index < 0) || (index >= count)) {
      throw new ArrayIndexOutOfBoundsException(index);
    }
    
    String key = keys[index];
    indices.remove(keys[index]);
    for (int i = index; i < count - 1; i++) {
      keys[i] = keys[(i + 1)];
      values[i] = values[(i + 1)];
      indices.put(keys[i], Integer.valueOf(i));
    }
    count -= 1;
    keys[count] = null;
    values[count] = 0;
    return key;
  }
  
  public void swap(int a, int b)
  {
    String tkey = keys[a];
    int tvalue = values[a];
    keys[a] = keys[b];
    values[a] = values[b];
    keys[b] = tkey;
    values[b] = tvalue;
  }
  










  public void sortKeys()
  {
    sortImpl(true, false, true);
  }
  






  public void sortKeysReverse()
  {
    sortImpl(true, true, true);
  }
  






  public void sortValues()
  {
    sortValues(true);
  }
  





  public void sortValues(boolean stable)
  {
    sortImpl(false, false, stable);
  }
  






  public void sortValuesReverse()
  {
    sortValuesReverse(true);
  }
  
  public void sortValuesReverse(boolean stable)
  {
    sortImpl(false, true, stable);
  }
  

  protected void sortImpl(final boolean useKeys, final boolean reverse, final boolean stable)
  {
    Sort s = new Sort()
    {
      public int size() {
        return count;
      }
      
      public float compare(int a, int b)
      {
        int diff = 0;
        if (useKeys) {
          diff = keys[a].compareToIgnoreCase(keys[b]);
          if (diff == 0) {
            diff = values[a] - values[b];
          }
        } else {
          diff = values[a] - values[b];
          if ((diff == 0) && (stable)) {
            diff = keys[a].compareToIgnoreCase(keys[b]);
          }
        }
        return reverse ? -diff : diff;
      }
      
      public void swap(int a, int b)
      {
        IntDict.this.swap(a, b);
      }
    };
    s.run();
    

    indices = new HashMap();
    for (int i = 0; i < count; i++) {
      indices.put(keys[i], Integer.valueOf(i));
    }
  }
  





  public FloatDict getPercent()
  {
    double sum = 0.0D;
    for (int i = 0; i < count; i++) {
      sum += values[i];
    }
    FloatDict outgoing = new FloatDict();
    for (int i = 0; i < size(); i++) {
      double percent = value(i) / sum;
      outgoing.set(key(i), (float)percent);
    }
    return outgoing;
  }
  

  public IntDict copy()
  {
    IntDict outgoing = new IntDict(count);
    System.arraycopy(keys, 0, keys, 0, count);
    System.arraycopy(values, 0, values, 0, count);
    for (int i = 0; i < count; i++) {
      indices.put(keys[i], Integer.valueOf(i));
    }
    count = count;
    return outgoing;
  }
  
  public void print()
  {
    for (int i = 0; i < size(); i++) {
      System.out.println(keys[i] + " = " + values[i]);
    }
  }
  




  public void write(PrintWriter writer)
  {
    for (int i = 0; i < count; i++) {
      writer.println(keys[i] + "\t" + values[i]);
    }
    writer.flush();
  }
  



  public String toJSON()
  {
    StringList items = new StringList();
    for (int i = 0; i < size(); i++) {
      items.append("\"" + JSONObject.quote(keys[i]) + "\": " + values[i]);
    }
    return "{ " + items.join(", ") + " }";
  }
  

  public String toString()
  {
    return getClass().getSimpleName() + " size=" + size() + " " + toJSON();
  }
}
