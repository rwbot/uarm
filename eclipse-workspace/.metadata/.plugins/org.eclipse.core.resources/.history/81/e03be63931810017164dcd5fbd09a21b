package com.jogamp.newt.awt.applet;

import com.jogamp.common.util.awt.AWTEDTExecutor;
import com.jogamp.nativewindow.WindowClosingProtocol.WindowClosingMode;
import com.jogamp.newt.awt.NewtCanvasAWT;
import com.jogamp.newt.opengl.GLWindow;
import com.jogamp.newt.util.applet.JOGLNewtAppletBase;
import com.jogamp.opengl.GLCapabilities;
import com.jogamp.opengl.GLEventListener;
import com.jogamp.opengl.GLProfile;
import java.applet.Applet;
import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Component;
import java.awt.Container;
import java.awt.EventQueue;
import java.awt.Point;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.PrintStream;
import java.util.Arrays;
import jogamp.nativewindow.jawt.JAWTUtil;










































































public class JOGLNewtApplet1Run
  extends Applet
{
  public static final boolean DEBUG = JOGLNewtAppletBase.DEBUG;
  
  GLWindow glWindow = null;
  NewtCanvasAWT newtCanvasAWT = null;
  JOGLNewtAppletBase base = null;
  
  int glXd = Integer.MAX_VALUE; int glYd = Integer.MAX_VALUE; int glWidth = Integer.MAX_VALUE; int glHeight = Integer.MAX_VALUE;
  
  public JOGLNewtApplet1Run() {}
  
  public void init() { if (DEBUG) {
      System.err.println("JOGLNewtApplet1Run.init() START - " + currentThreadName());
    }
    final JOGLNewtApplet1Run localJOGLNewtApplet1Run = this;
    
    String str1 = null;
    String str2 = null;
    int i = 1;
    boolean bool1 = false;
    boolean bool2 = false;
    boolean bool3 = false;
    boolean bool4 = false;
    boolean bool5 = false;
    boolean bool6 = true;
    int j = 0;
    int k = 0;
    boolean bool7 = false;
    boolean bool8 = false;
    try {
      str1 = getParameter("gl_event_listener_class");
      str2 = getParameter("gl_profile");
      i = JOGLNewtAppletBase.str2Int(getParameter("gl_swap_interval"), i);
      bool1 = JOGLNewtAppletBase.str2Bool(getParameter("gl_debug"), bool1);
      bool2 = JOGLNewtAppletBase.str2Bool(getParameter("gl_trace"), bool2);
      bool3 = JOGLNewtAppletBase.str2Bool(getParameter("gl_undecorated"), bool3);
      bool4 = JOGLNewtAppletBase.str2Bool(getParameter("gl_alwaysontop"), bool4);
      bool5 = JOGLNewtAppletBase.str2Bool(getParameter("gl_closeable"), bool5);
      bool6 = JOGLNewtAppletBase.str2Bool(getParameter("gl_opaque"), bool6);
      j = JOGLNewtAppletBase.str2Int(getParameter("gl_alpha"), j);
      k = JOGLNewtAppletBase.str2Int(getParameter("gl_multisamplebuffer"), k);
      glXd = JOGLNewtAppletBase.str2Int(getParameter("gl_dx"), glXd);
      glYd = JOGLNewtAppletBase.str2Int(getParameter("gl_dy"), glYd);
      glWidth = JOGLNewtAppletBase.str2Int(getParameter("gl_width"), glWidth);
      glHeight = JOGLNewtAppletBase.str2Int(getParameter("gl_height"), glHeight);
      bool7 = JOGLNewtAppletBase.str2Bool(getParameter("gl_nodefaultkeyListener"), bool7);
      bool8 = JOGLNewtAppletBase.str2Bool(getParameter("appletDebugTestBorder"), bool8);
    } catch (Exception localException) {
      localException.printStackTrace();
    }
    if (null == str1) {
      throw new RuntimeException("No applet parameter 'gl_event_listener_class'");
    }
    boolean bool9 = (Integer.MAX_VALUE > glXd) && (Integer.MAX_VALUE > glYd) && (Integer.MAX_VALUE > glWidth) && (Integer.MAX_VALUE > glHeight);
    if (DEBUG) {
      System.err.println("JOGLNewtApplet1Run Configuration:");
      System.err.println("glStandalone: " + bool9);
      if (bool9) {
        System.err.println("pos-size: " + glXd + "/" + glYd + " " + glWidth + "x" + glHeight);
      }
      System.err.println("glEventListenerClazzName: " + str1);
      System.err.println("glProfileName: " + str2);
      System.err.println("glSwapInterval: " + i);
      System.err.println("glDebug: " + bool1);
      System.err.println("glTrace: " + bool2);
      System.err.println("glUndecorated: " + bool3);
      System.err.println("glAlwaysOnTop: " + bool4);
      System.err.println("glCloseable: " + bool5);
      System.err.println("glOpaque: " + bool6);
      System.err.println("glAlphaBits: " + j);
      System.err.println("glNumMultisampleBuffer: " + k);
      System.err.println("glNoDefaultKeyListener: " + bool7);
    }
    
    base = new JOGLNewtAppletBase(str1, i, bool7, bool5, bool1, bool2);
    




    try
    {
      GLCapabilities localGLCapabilities = new GLCapabilities(GLProfile.get(str2));
      localGLCapabilities.setAlphaBits(j);
      if (0 < k) {
        localGLCapabilities.setSampleBuffers(true);
        localGLCapabilities.setNumSamples(k);
      }
      localGLCapabilities.setBackgroundOpaque(bool6);
      glWindow = GLWindow.create(localGLCapabilities);
      glWindow.setUpdateFPSFrames(300, System.err);
      glWindow.setUndecorated(bool3);
      glWindow.setAlwaysOnTop(bool4);
      glWindow.setDefaultCloseOperation(bool5 ? WindowClosingProtocol.WindowClosingMode.DISPOSE_ON_CLOSE : WindowClosingProtocol.WindowClosingMode.DO_NOTHING_ON_CLOSE);
      localJOGLNewtApplet1Run.setLayout(new BorderLayout());
      if (bool8)
        AWTEDTExecutor.singleton.invoke(true, new Runnable() {
          public void run() {
            localJOGLNewtApplet1Run.add(new Button("North"), "North");
            localJOGLNewtApplet1Run.add(new Button("South"), "South");
            localJOGLNewtApplet1Run.add(new Button("East"), "East");
            localJOGLNewtApplet1Run.add(new Button("West"), "West");
          }
        });
      base.init(glWindow);
      if (base.isValid()) {
        GLEventListener localGLEventListener = base.getGLEventListener();
        
        if ((localGLEventListener instanceof MouseListener)) {
          addMouseListener((MouseListener)localGLEventListener);
        }
        if ((localGLEventListener instanceof MouseMotionListener)) {
          addMouseMotionListener((MouseMotionListener)localGLEventListener);
        }
        if ((localGLEventListener instanceof KeyListener)) {
          addKeyListener((KeyListener)localGLEventListener);
        }
      }
      if (!bool9)
        AWTEDTExecutor.singleton.invoke(true, new Runnable() {
          public void run() {
            newtCanvasAWT = new NewtCanvasAWT(glWindow);
            newtCanvasAWT.setSkipJAWTDestroy(true);
            localJOGLNewtApplet1Run.add(newtCanvasAWT, "Center");
            localJOGLNewtApplet1Run.validate();
          }
        });
    } catch (Throwable localThrowable) {
      throw new RuntimeException(localThrowable);
    }
    if (DEBUG)
      System.err.println("JOGLNewtApplet1Run.init() END - " + currentThreadName());
  }
  
  private static String currentThreadName() {
    return "[" + Thread.currentThread().getName() + ", isAWT-EDT " + EventQueue.isDispatchThread() + "]";
  }
  
  public void start() {
    if (DEBUG) {
      System.err.println("JOGLNewtApplet1Run.start() START (isVisible " + isVisible() + ", isDisplayable " + isDisplayable() + ") - " + currentThreadName());
    }
    final Point[] arrayOfPoint = { null };
    AWTEDTExecutor.singleton.invoke(true, new Runnable() {
      public void run() {
        setVisible(true);
        arrayOfPoint[0] = getLocationOnScreen();
        if (null != newtCanvasAWT) {
          newtCanvasAWT.setFocusable(true);
          newtCanvasAWT.requestFocus();
        }
      }
    });
    if (null == newtCanvasAWT) {
      glWindow.requestFocus();
      glWindow.setSize(glWidth, glHeight);
      glWindow.setPosition(0x + glXd, 0y + glYd);
    }
    if (DEBUG) {
      Object localObject = this;
      while (null != ((Component)localObject).getParent()) {
        localObject = ((Component)localObject).getParent();
      }
      System.err.println("JOGLNewtApplet1Run start:");
      System.err.println("TopComponent: " + ((Component)localObject).getLocation() + " rel, " + ((Component)localObject).getLocationOnScreen() + " screen, visible " + ((Component)localObject).isVisible() + ", " + localObject);
      System.err.println("Applet Pos: " + getLocation() + " rel, " + Arrays.toString(arrayOfPoint) + " screen, visible " + isVisible() + ", " + this);
      if (null != newtCanvasAWT) {
        System.err.println("NewtCanvasAWT Pos: " + newtCanvasAWT.getLocation() + " rel, " + newtCanvasAWT.getLocationOnScreen() + " screen, visible " + newtCanvasAWT.isVisible() + ", " + newtCanvasAWT);
      }
      System.err.println("GLWindow Pos: " + glWindow.getX() + "/" + glWindow.getY() + " rel, " + glWindow.getLocationOnScreen(null) + " screen");
      System.err.println("GLWindow: " + glWindow);
    }
    base.start();
    if ((null != newtCanvasAWT) && 
      (newtCanvasAWT.isOffscreenLayerSurfaceEnabled()) && 
      (0 != (0x2 & JAWTUtil.getOSXCALayerQuirks())))
    {
      AWTEDTExecutor.singleton.invoke(true, new Runnable() {
        public void run() {
          int i = newtCanvasAWT.getWidth();
          int j = newtCanvasAWT.getHeight();
          newtCanvasAWT.setSize(i + 1, j + 1);
          newtCanvasAWT.setSize(i, j);
        }
      }); }
    if (DEBUG) {
      System.err.println("JOGLNewtApplet1Run.start() END - " + currentThreadName());
    }
  }
  
  public void stop()
  {
    if (DEBUG) {
      System.err.println("JOGLNewtApplet1Run.stop() START - " + currentThreadName());
    }
    base.stop();
    if (DEBUG) {
      System.err.println("JOGLNewtApplet1Run.stop() END - " + currentThreadName());
    }
  }
  
  public void destroy()
  {
    if (DEBUG) {
      System.err.println("JOGLNewtApplet1Run.destroy() START - " + currentThreadName());
    }
    AWTEDTExecutor.singleton.invoke(true, new Runnable() {
      public void run() {
        glWindow.setVisible(false);
        if (null != newtCanvasAWT) {
          newtCanvasAWT.setSkipJAWTDestroy(false);
          remove(newtCanvasAWT);
          newtCanvasAWT.destroy();
        }
      } });
    base.destroy();
    base = null;
    glWindow = null;
    newtCanvasAWT = null;
    if (DEBUG) {
      System.err.println("JOGLNewtApplet1Run.destroy() END - " + currentThreadName());
    }
  }
}
