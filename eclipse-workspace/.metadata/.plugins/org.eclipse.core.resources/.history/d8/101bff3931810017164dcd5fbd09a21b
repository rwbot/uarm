package jogamp.graph.font.typecast.ot.table;

import java.io.DataInput;
import java.io.IOException;
import jogamp.graph.font.typecast.ot.Fixed;

















public class PostTable
  implements Table
{
  private static final String[] macGlyphName = { ".notdef", "null", "CR", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", "egrave", "ecircumflex", "edieresis", "iacute", "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral'", "ordfeminine", "ordmasculine", "Omega", "ae", "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "increment", "guillemotleft", "guillemotright", "ellipsis", "nbspace", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "middot", "quotesinglbase", "quotedblbase", "perthousand", "Acircumflex", "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "overscore", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "Lslash", "lslash", "Scaron", "scaron", "Zcaron", "zcaron", "brokenbar", "Eth", "eth", "Yacute", "yacute", "Thorn", "thorn", "minus", "multiply", "onesuperior", "twosuperior", "threesuperior", "onehalf", "onequarter", "threequarters", "franc", "Gbreve", "gbreve", "Idot", "Scedilla", "scedilla", "Cacute", "cacute", "Ccaron", "ccaron", "" };
  


















  private final DirectoryEntry de;
  


















  private final int version;
  


















  private final int italicAngle;
  


















  private final short underlinePosition;
  


















  private final short underlineThickness;
  


















  private final int isFixedPitch;
  


















  private final int minMemType42;
  


















  private final int maxMemType42;
  


















  private final int minMemType1;
  

















  private final int maxMemType1;
  

















  private int numGlyphs;
  

















  private int[] glyphNameIndex;
  

















  private String[] psGlyphName;
  


















  protected PostTable(DirectoryEntry paramDirectoryEntry, DataInput paramDataInput)
    throws IOException
  {
    de = ((DirectoryEntry)paramDirectoryEntry.clone());
    version = paramDataInput.readInt();
    italicAngle = paramDataInput.readInt();
    underlinePosition = paramDataInput.readShort();
    underlineThickness = paramDataInput.readShort();
    isFixedPitch = paramDataInput.readInt();
    minMemType42 = paramDataInput.readInt();
    maxMemType42 = paramDataInput.readInt();
    minMemType1 = paramDataInput.readInt();
    maxMemType1 = paramDataInput.readInt();
    
    if (version == 131072) {
      numGlyphs = paramDataInput.readUnsignedShort();
      glyphNameIndex = new int[numGlyphs];
      for (int i = 0; i < numGlyphs; i++) {
        glyphNameIndex[i] = paramDataInput.readUnsignedShort();
      }
      i = highestGlyphNameIndex();
      if (i > 257) {
        i -= 257;
        psGlyphName = new String[i];
        for (int j = 0; j < i; j++) {
          int k = paramDataInput.readUnsignedByte();
          byte[] arrayOfByte = new byte[k];
          paramDataInput.readFully(arrayOfByte);
          psGlyphName[j] = new String(arrayOfByte);
        }
      }
    }
  }
  

  public int getVersion()
  {
    return version;
  }
  
  private int highestGlyphNameIndex() {
    int i = 0;
    for (int j = 0; j < numGlyphs; j++) {
      if (i < glyphNameIndex[j]) {
        i = glyphNameIndex[j];
      }
    }
    return i;
  }
  
  public String getGlyphName(int paramInt) {
    if (version == 131072) {
      return glyphNameIndex[paramInt] > 257 ? psGlyphName[(glyphNameIndex[paramInt] - 258)] : macGlyphName[glyphNameIndex[paramInt]];
    }
    

    return null;
  }
  
  private boolean isMacGlyphName(int paramInt)
  {
    if (version == 131072) {
      return glyphNameIndex[paramInt] <= 257;
    }
    return false;
  }
  




  public int getType()
  {
    return 1886352244;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("'post' Table - PostScript Metrics\n---------------------------------\n")
      .append("\n        'post' version:        ").append(Fixed.floatValue(version))
      .append("\n        italicAngle:           ").append(Fixed.floatValue(italicAngle))
      .append("\n        underlinePosition:     ").append(underlinePosition)
      .append("\n        underlineThickness:    ").append(underlineThickness)
      .append("\n        isFixedPitch:          ").append(isFixedPitch)
      .append("\n        minMemType42:          ").append(minMemType42)
      .append("\n        maxMemType42:          ").append(maxMemType42)
      .append("\n        minMemType1:           ").append(minMemType1)
      .append("\n        maxMemType1:           ").append(maxMemType1);
    
    if (version == 131072) {
      localStringBuilder.append("\n\n        Format 2.0:  Non-Standard (for PostScript) TrueType Glyph Set.\n");
      localStringBuilder.append("        numGlyphs:      ").append(numGlyphs).append("\n");
      for (int i = 0; i < numGlyphs; i++) {
        localStringBuilder.append("        Glyf ").append(i).append(" -> ");
        if (isMacGlyphName(i))
        {
          localStringBuilder.append("Mac Glyph # ").append(glyphNameIndex[i]).append(", '").append(macGlyphName[glyphNameIndex[i]]).append("'\n");
        }
        else {
          localStringBuilder.append("PSGlyf Name # ").append(glyphNameIndex[i] - 257).append(", name= '").append(psGlyphName[(glyphNameIndex[i] - 258)]).append("'\n");
        }
      }
      localStringBuilder.append("\n        Full List of PSGlyf Names\n        ------------------------\n");
      for (i = 0; i < psGlyphName.length; i++)
      {

        localStringBuilder.append("        PSGlyf Name # ").append(i + 1).append(": ").append(psGlyphName[i]).append("\n");
      }
    }
    return localStringBuilder.toString();
  }
  






  public DirectoryEntry getDirectoryEntry()
  {
    return de;
  }
}
