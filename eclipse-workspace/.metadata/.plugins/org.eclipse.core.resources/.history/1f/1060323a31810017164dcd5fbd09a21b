package jogamp.opengl.windows.wgl;

import java.lang.reflect.Field;

public final class WGLProcAddressTable extends com.jogamp.gluegen.runtime.ProcAddressTable {
  long _addressof_wglCopyContext;
  long _addressof_wglCreateContext;
  long _addressof_wglDeleteContext;
  long _addressof_wglGetCurrentContext;
  long _addressof_wglGetCurrentDC;
  long _addressof_wglMakeCurrent;
  long _addressof_wglShareLists;
  long _addressof_wglGetProcAddress;
  long _addressof_wglSwapLayerBuffers;
  long _addressof_wglChoosePixelFormat;
  long _addressof_wglDescribePixelFormat;
  long _addressof_wglGetPixelFormat;
  long _addressof_wglSetPixelFormat;
  long _addressof_wglSwapBuffers;
  
  public WGLProcAddressTable() {}
  
  public WGLProcAddressTable(com.jogamp.gluegen.runtime.FunctionAddressResolver paramFunctionAddressResolver) { super(paramFunctionAddressResolver); }
  













  protected boolean isFunctionAvailableImpl(String paramString)
    throws IllegalArgumentException
  {
    String str1 = com.jogamp.gluegen.runtime.opengl.GLNameResolver.normalizeVEN(com.jogamp.gluegen.runtime.opengl.GLNameResolver.normalizeARB(paramString, true), true);
    final String str2 = "_addressof_" + str1;
    final int i = com.jogamp.gluegen.runtime.opengl.GLNameResolver.getFuncNamePermutationNumber(str1);
    Field localField = (Field)java.security.AccessController.doPrivileged(new java.security.PrivilegedAction() {
      public final Field run() {
        Field localField = null;
        for (int i = 0; i < i; i++) {
          String str = com.jogamp.gluegen.runtime.opengl.GLNameResolver.getFuncNamePermutation(str2, i);
          try {
            localField = WGLProcAddressTable.class.getDeclaredField(str);
            localField.setAccessible(true);
            return localField;
          } catch (NoSuchFieldException localNoSuchFieldException) {}
        }
        return null;
      }
    });
    if (null == localField)
    {

      throw new RuntimeException("WARNING: Address field query failed for \"" + str1 + "\"/\"" + paramString + "\"; it's either statically linked or address field is not a known " + "function");
    }
    

    try
    {
      return 0L != localField.getLong(this);
    } catch (Exception localException) {
      throw new RuntimeException("WARNING: Address query failed for \"" + str1 + "\"/\"" + paramString + "\"; it's either statically linked or is not a known " + "function", localException);
    }
  }
  

  public long getAddressFor(String paramString)
    throws SecurityException, IllegalArgumentException
  {
    com.jogamp.common.util.SecurityUtil.checkAllLinkPermission();
    String str1 = com.jogamp.gluegen.runtime.opengl.GLNameResolver.normalizeVEN(com.jogamp.gluegen.runtime.opengl.GLNameResolver.normalizeARB(paramString, true), true);
    final String str2 = "_addressof_" + str1;
    final int i = com.jogamp.gluegen.runtime.opengl.GLNameResolver.getFuncNamePermutationNumber(str1);
    Field localField = (Field)java.security.AccessController.doPrivileged(new java.security.PrivilegedAction() {
      public final Field run() {
        Field localField = null;
        for (int i = 0; i < i; i++) {
          String str = com.jogamp.gluegen.runtime.opengl.GLNameResolver.getFuncNamePermutation(str2, i);
          try {
            localField = WGLProcAddressTable.class.getDeclaredField(str);
            localField.setAccessible(true);
            return localField;
          } catch (NoSuchFieldException localNoSuchFieldException) {}
        }
        return null;
      }
    });
    if (null == localField)
    {

      throw new RuntimeException("WARNING: Address field query failed for \"" + str1 + "\"/\"" + paramString + "\"; it's either statically linked or address field is not a known " + "function");
    }
    

    try
    {
      return localField.getLong(this);
    } catch (Exception localException) {
      throw new RuntimeException("WARNING: Address query failed for \"" + str1 + "\"/\"" + paramString + "\"; it's either statically linked or is not a known " + "function", localException);
    }
  }
}
