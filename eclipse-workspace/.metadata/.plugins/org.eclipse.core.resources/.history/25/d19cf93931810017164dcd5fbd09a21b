package jogamp.graph.font.typecast.ot;



























public class Fixed
{
  private static int[] t = { 0, 1, 3, 4, 6, 7, 9, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 28, 29, 31, 33, 34, 36, 37, 39, 41, 42, 44, 46, 47, 49, 50, 52, 54, 55, 57, 59, 60, 62, 64, 65, 67, 69, 70, 72, 74, 75, 77, 79, 81, 82, 84, 86, 88, 89, 91, 93, 95, 96, 98, 100, 102, 104, 106, 107, 109, 111, 113, 115, 117, 119, 121, 123, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 145, 147, 149, 151, 153, 155, 157, 159, 162, 164, 166, 168, 171, 173, 175, 177, 180, 182, 185, 187, 189, 192, 194, 197, 199, 202, 204, 207, 210, 212, 215, 218, 220, 223, 226, 229, 232, 234, 237, 240, 243, 246, 249, 252, 256, 259, 262, 265, 268, 272, 275, 278, 282, 285, 289, 293, 296, 300, 304, 308, 311, 315, 319, 323, 328, 332, 336, 340, 345, 349, 354, 358, 363, 368, 373, 378, 383, 388, 393, 398, 404, 409, 415, 421, 427, 433, 439, 445, 451, 458, 465, 471, 478, 486, 493, 500, 508, 516, 524, 532, 541, 549, 558, 568, 577, 587, 597, 607, 618, 628, 640, 651, 663, 675, 688, 701, 715, 729, 744, 759, 774, 791, 808, 825, 843, 862, 882, 903, 925, 947, 971, 996, 1022, 1049, 1077, 1108, 1140, 1173, 1209, 1246, 1286, 1329, 1374, 1423, 1475, 1531, 1591, 1655, 1725, 1801, 1884, 1975, 2075, 2185, 2308, 2445, 2599, 2773, 2972, 3202, 3470, 3787, 4166, 4631, 5210, 5956, 6950, 8341, 10428, 13905, 20859, 41720 };
  


































































































































































































































































  private static int[] s = { 0, 1, 3, 4, 6, 7, 9, 10, 12, 14, 15, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 32, 34, 36, 37, 39, 40, 42, 43, 45, 46, 48, 49, 51, 53, 54, 56, 57, 59, 60, 62, 63, 65, 66, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 97, 99, 100, 102, 103, 105, 106, 108, 109, 110, 112, 113, 115, 116, 117, 119, 120, 122, 123, 124, 126, 127, 128, 130, 131, 132, 134, 135, 136, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 211, 212, 213, 214, 215, 216, 217, 217, 218, 219, 220, 221, 221, 222, 223, 224, 225, 225, 226, 227, 227, 228, 229, 230, 230, 231, 232, 232, 233, 234, 234, 235, 235, 236, 237, 237, 238, 238, 239, 239, 240, 241, 241, 242, 242, 243, 243, 244, 244, 244, 245, 245, 246, 246, 247, 247, 247, 248, 248, 249, 249, 249, 250, 250, 250, 251, 251, 251, 251, 252, 252, 252, 252, 253, 253, 253, 253, 254, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 };
  


































































































































































































































































  private static int[] c = { 256, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 254, 254, 254, 253, 253, 253, 253, 252, 252, 252, 252, 251, 251, 251, 251, 250, 250, 250, 249, 249, 249, 248, 248, 247, 247, 247, 246, 246, 245, 245, 244, 244, 244, 243, 243, 242, 242, 241, 241, 240, 239, 239, 238, 238, 237, 237, 236, 235, 235, 234, 234, 233, 232, 232, 231, 230, 230, 229, 228, 227, 227, 226, 225, 225, 224, 223, 222, 221, 221, 220, 219, 218, 217, 217, 216, 215, 214, 213, 212, 211, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 179, 178, 177, 176, 175, 174, 173, 171, 170, 169, 168, 167, 166, 164, 163, 162, 161, 159, 158, 157, 156, 155, 153, 152, 151, 149, 148, 147, 146, 144, 143, 142, 140, 139, 138, 136, 135, 134, 132, 131, 130, 128, 127, 126, 124, 123, 122, 120, 119, 117, 116, 115, 113, 112, 110, 109, 108, 106, 105, 103, 102, 100, 99, 97, 96, 95, 93, 92, 90, 89, 87, 86, 84, 83, 81, 80, 78, 77, 75, 74, 72, 71, 69, 68, 66, 65, 63, 62, 60, 59, 57, 56, 54, 53, 51, 49, 48, 46, 45, 43, 42, 40, 39, 37, 36, 34, 32, 31, 29, 28, 26, 25, 23, 21, 20, 18, 17, 15, 14, 12, 10, 9, 7, 6, 4, 3, 1 };
  


































































































































  public Fixed() {}
  

































































































































  public static int arctan(int paramInt)
  {
    return 0;
  }
  





  public static int squareRoot(int paramInt)
  {
    int i = paramInt;
    int j = paramInt;
    

    while (j != 0) {
      j /= 2;
      int k = i * i >> 6;
      if (k == paramInt)
        break;
      if (k > paramInt) {
        i -= j;
      } else {
        i += j;
      }
    }
    return i;
  }
  
  public static float floatValue(long paramLong) {
    return (float)(paramLong >> 16) + (float)(paramLong & 0xFFFF) / 65536.0F;
  }
  
  public static float roundedFloatValue(long paramLong, int paramInt) {
    int i = 10 * paramInt;
    return (int)(floatValue(paramLong) * i) / i;
  }
}
