package com.leapmotion.leap;




public class CircleGesture
  extends Gesture
{
  private long swigCPtr;
  


  public CircleGesture(long paramLong, boolean paramBoolean)
  {
    super(LeapJNI.CircleGesture_SWIGUpcast(paramLong), paramBoolean);
    swigCPtr = paramLong;
  }
  
  public static long getCPtr(CircleGesture paramCircleGesture) {
    return paramCircleGesture == null ? 0L : swigCPtr;
  }
  
  protected void finalize() {
    delete();
  }
  
  public synchronized void delete() {
    if (swigCPtr != 0L) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        LeapJNI.delete_CircleGesture(swigCPtr);
      }
      swigCPtr = 0L;
    }
    super.delete();
  }
  
  public static Gesture.Type classType() {
    return Gesture.Type.swigToEnum(LeapJNI.CircleGesture_classType());
  }
  
  public CircleGesture() {
    this(LeapJNI.new_CircleGesture__SWIG_0(), true);
  }
  
  public CircleGesture(Gesture paramGesture) {
    this(LeapJNI.new_CircleGesture__SWIG_1(Gesture.getCPtr(paramGesture), paramGesture), true);
  }
  
  public Vector center() {
    return new Vector(LeapJNI.CircleGesture_center(swigCPtr, this), true);
  }
  
  public Vector normal() {
    return new Vector(LeapJNI.CircleGesture_normal(swigCPtr, this), true);
  }
  
  public float progress() {
    return LeapJNI.CircleGesture_progress(swigCPtr, this);
  }
  
  public float radius() {
    return LeapJNI.CircleGesture_radius(swigCPtr, this);
  }
  
  public Pointable pointable() {
    return new Pointable(LeapJNI.CircleGesture_pointable(swigCPtr, this), true);
  }
}
