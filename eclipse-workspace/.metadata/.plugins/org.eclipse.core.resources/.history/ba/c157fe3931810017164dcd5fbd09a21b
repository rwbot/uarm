package jogamp.graph.font.typecast.ot.table;

import java.io.DataInput;
import java.io.IOException;
import jogamp.graph.font.typecast.ot.Fixed;











public class MaxpTable
  implements Table
{
  private final DirectoryEntry de;
  private final int versionNumber;
  private int numGlyphs;
  private int maxPoints;
  private int maxContours;
  private int maxCompositePoints;
  private int maxCompositeContours;
  private int maxZones;
  private int maxTwilightPoints;
  private int maxStorage;
  private int maxFunctionDefs;
  private int maxInstructionDefs;
  private int maxStackElements;
  private int maxSizeOfInstructions;
  private int maxComponentElements;
  private int maxComponentDepth;
  
  protected MaxpTable(DirectoryEntry paramDirectoryEntry, DataInput paramDataInput)
    throws IOException
  {
    de = ((DirectoryEntry)paramDirectoryEntry.clone());
    versionNumber = paramDataInput.readInt();
    

    if (versionNumber == 20480) {
      numGlyphs = paramDataInput.readUnsignedShort();
    } else if (versionNumber == 65536) {
      numGlyphs = paramDataInput.readUnsignedShort();
      maxPoints = paramDataInput.readUnsignedShort();
      maxContours = paramDataInput.readUnsignedShort();
      maxCompositePoints = paramDataInput.readUnsignedShort();
      maxCompositeContours = paramDataInput.readUnsignedShort();
      maxZones = paramDataInput.readUnsignedShort();
      maxTwilightPoints = paramDataInput.readUnsignedShort();
      maxStorage = paramDataInput.readUnsignedShort();
      maxFunctionDefs = paramDataInput.readUnsignedShort();
      maxInstructionDefs = paramDataInput.readUnsignedShort();
      maxStackElements = paramDataInput.readUnsignedShort();
      maxSizeOfInstructions = paramDataInput.readUnsignedShort();
      maxComponentElements = paramDataInput.readUnsignedShort();
      maxComponentDepth = paramDataInput.readUnsignedShort();
    }
  }
  
  public int getVersionNumber() {
    return versionNumber;
  }
  
  public int getMaxComponentDepth() {
    return maxComponentDepth;
  }
  
  public int getMaxComponentElements() {
    return maxComponentElements;
  }
  
  public int getMaxCompositeContours() {
    return maxCompositeContours;
  }
  
  public int getMaxCompositePoints() {
    return maxCompositePoints;
  }
  
  public int getMaxContours() {
    return maxContours;
  }
  
  public int getMaxFunctionDefs() {
    return maxFunctionDefs;
  }
  
  public int getMaxInstructionDefs() {
    return maxInstructionDefs;
  }
  
  public int getMaxPoints() {
    return maxPoints;
  }
  
  public int getMaxSizeOfInstructions() {
    return maxSizeOfInstructions;
  }
  
  public int getMaxStackElements() {
    return maxStackElements;
  }
  
  public int getMaxStorage() {
    return maxStorage;
  }
  
  public int getMaxTwilightPoints() {
    return maxTwilightPoints;
  }
  
  public int getMaxZones() {
    return maxZones;
  }
  
  public int getNumGlyphs() {
    return numGlyphs;
  }
  
  public int getType()
  {
    return 1835104368;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("'maxp' Table - Maximum Profile\n------------------------------")
      .append("\n        'maxp' version:         ").append(Fixed.floatValue(versionNumber))
      .append("\n        numGlyphs:              ").append(numGlyphs);
    if (versionNumber == 65536)
    {











      localStringBuilder.append("\n        maxPoints:              ").append(maxPoints).append("\n        maxContours:            ").append(maxContours).append("\n        maxCompositePoints:     ").append(maxCompositePoints).append("\n        maxCompositeContours:   ").append(maxCompositeContours).append("\n        maxZones:               ").append(maxZones).append("\n        maxTwilightPoints:      ").append(maxTwilightPoints).append("\n        maxStorage:             ").append(maxStorage).append("\n        maxFunctionDefs:        ").append(maxFunctionDefs).append("\n        maxInstructionDefs:     ").append(maxInstructionDefs).append("\n        maxStackElements:       ").append(maxStackElements).append("\n        maxSizeOfInstructions:  ").append(maxSizeOfInstructions).append("\n        maxComponentElements:   ").append(maxComponentElements).append("\n        maxComponentDepth:      ").append(maxComponentDepth);
    } else {
      localStringBuilder.append("\n");
    }
    return localStringBuilder.toString();
  }
  






  public DirectoryEntry getDirectoryEntry()
  {
    return de;
  }
}
