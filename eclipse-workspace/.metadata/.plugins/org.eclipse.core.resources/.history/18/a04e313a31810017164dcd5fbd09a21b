package jogamp.opengl.util.stereo;

import com.jogamp.nativewindow.util.DimensionImmutable;
import com.jogamp.nativewindow.util.RectangleImmutable;
import com.jogamp.opengl.math.FovHVHalves;
import com.jogamp.opengl.math.VectorUtil;






































public final class ScaleAndOffset2D
{
  final float[] scale;
  final float[] offset;
  private static final float[] vec2Half = { 0.5F, 0.5F };
  
  public String toString() {
    return "[offset " + offset[0] + " / " + offset[1] + ", scale " + scale[0] + " x " + scale[1] + "]";
  }
  
  public ScaleAndOffset2D(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2) {
    scale = paramArrayOfFloat1;
    offset = paramArrayOfFloat2;
  }
  



  public ScaleAndOffset2D(FovHVHalves paramFovHVHalves)
  {
    FovHVHalves localFovHVHalves = paramFovHVHalves.toTangents();
    float f1 = 2.0F / (left + right);
    float f2 = 2.0F / (top + bottom);
    float f3 = (left - right) * f1 * 0.5F;
    float f4 = (top - bottom) * f2 * 0.5F;
    
    scale = new float[] { f1, f2 };
    offset = new float[] { f3, f4 };
  }
  



  public ScaleAndOffset2D(FovHVHalves paramFovHVHalves, DimensionImmutable paramDimensionImmutable, RectangleImmutable paramRectangleImmutable)
  {
    ScaleAndOffset2D localScaleAndOffset2D = new ScaleAndOffset2D(paramFovHVHalves);
    float[] arrayOfFloat1 = new float[2];
    float[] arrayOfFloat2 = new float[2];
    float[] arrayOfFloat3 = VectorUtil.scaleVec2(arrayOfFloat1, scale, 0.5F);
    float[] arrayOfFloat4 = VectorUtil.addVec2(arrayOfFloat2, VectorUtil.scaleVec2(arrayOfFloat2, offset, 0.5F), vec2Half);
    

    float[] arrayOfFloat5 = { paramRectangleImmutable.getWidth() / paramDimensionImmutable.getWidth(), paramRectangleImmutable.getHeight() / paramDimensionImmutable.getHeight() };
    

    float[] arrayOfFloat6 = { paramRectangleImmutable.getX() / paramDimensionImmutable.getWidth(), paramRectangleImmutable.getY() / paramDimensionImmutable.getHeight() };
    
    VectorUtil.scaleVec2(arrayOfFloat3, arrayOfFloat3, arrayOfFloat5);
    VectorUtil.addVec2(arrayOfFloat4, VectorUtil.scaleVec2(arrayOfFloat4, arrayOfFloat4, arrayOfFloat5), arrayOfFloat6);
    
    scale = arrayOfFloat3;
    offset = arrayOfFloat4;
  }
  


  public final float[] convertToTanFovSpace(float[] paramArrayOfFloat)
  {
    float[] arrayOfFloat = new float[2];
    return VectorUtil.divVec2(arrayOfFloat, VectorUtil.subVec2(arrayOfFloat, paramArrayOfFloat, offset), scale);
  }
}
