package processing.core;

import java.io.Serializable;





















































































































public class PVector
  implements Serializable
{
  public float x;
  public float y;
  public float z;
  protected transient float[] array;
  
  public PVector() {}
  
  public PVector(float x, float y, float z)
  {
    this.x = x;
    this.y = y;
    this.z = z;
  }
  



  public PVector(float x, float y)
  {
    this.x = x;
    this.y = y;
    z = 0.0F;
  }
  














  public PVector set(float x, float y, float z)
  {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  }
  




  public PVector set(float x, float y)
  {
    this.x = x;
    this.y = y;
    return this;
  }
  



  public PVector set(PVector v)
  {
    x = x;
    y = y;
    z = z;
    return this;
  }
  




  public PVector set(float[] source)
  {
    if (source.length >= 2) {
      x = source[0];
      y = source[1];
    }
    if (source.length >= 3) {
      z = source[2];
    }
    return this;
  }
  













  public static PVector random2D()
  {
    return random2D(null, null);
  }
  






  public static PVector random2D(PApplet parent)
  {
    return random2D(null, parent);
  }
  




  public static PVector random2D(PVector target)
  {
    return random2D(target, null);
  }
  






  public static PVector random2D(PVector target, PApplet parent)
  {
    return parent == null ? 
      fromAngle((float)(Math.random() * 3.141592653589793D * 2.0D), target) : 
      fromAngle(parent.random(6.2831855F), target);
  }
  













  public static PVector random3D()
  {
    return random3D(null, null);
  }
  






  public static PVector random3D(PApplet parent)
  {
    return random3D(null, parent);
  }
  





  public static PVector random3D(PVector target)
  {
    return random3D(target, null);
  }
  

  public static PVector random3D(PVector target, PApplet parent)
  {
    float vz;
    
    float angle;
    
    float vz;
    if (parent == null) {
      float angle = (float)(Math.random() * 3.141592653589793D * 2.0D);
      vz = (float)(Math.random() * 2.0D - 1.0D);
    } else {
      angle = parent.random(6.2831855F);
      vz = parent.random(-1.0F, 1.0F);
    }
    float vx = (float)(Math.sqrt(1.0F - vz * vz) * Math.cos(angle));
    float vy = (float)(Math.sqrt(1.0F - vz * vz) * Math.sin(angle));
    if (target == null) {
      target = new PVector(vx, vy, vz);
    }
    else {
      target.set(vx, vy, vz);
    }
    return target;
  }
  













  public static PVector fromAngle(float angle)
  {
    return fromAngle(angle, null);
  }
  






  public static PVector fromAngle(float angle, PVector target)
  {
    if (target == null) {
      target = new PVector((float)Math.cos(angle), (float)Math.sin(angle), 0.0F);
    } else {
      target.set((float)Math.cos(angle), (float)Math.sin(angle), 0.0F);
    }
    return target;
  }
  











  public PVector copy()
  {
    return new PVector(x, y, z);
  }
  
  @Deprecated
  public PVector get()
  {
    return copy();
  }
  



  public float[] get(float[] target)
  {
    if (target == null) {
      return new float[] { x, y, z };
    }
    if (target.length >= 2) {
      target[0] = x;
      target[1] = y;
    }
    if (target.length >= 3) {
      target[2] = z;
    }
    return target;
  }
  














  public float mag()
  {
    return (float)Math.sqrt(x * x + y * y + z * z);
  }
  
















  public float magSq()
  {
    return x * x + y * y + z * z;
  }
  
















  public PVector add(PVector v)
  {
    x += x;
    y += y;
    z += z;
    return this;
  }
  




  public PVector add(float x, float y)
  {
    this.x += x;
    this.y += y;
    return this;
  }
  



  public PVector add(float x, float y, float z)
  {
    this.x += x;
    this.y += y;
    this.z += z;
    return this;
  }
  





  public static PVector add(PVector v1, PVector v2)
  {
    return add(v1, v2, null);
  }
  




  public static PVector add(PVector v1, PVector v2, PVector target)
  {
    if (target == null) {
      target = new PVector(x + x, y + y, z + z);
    } else {
      target.set(x + x, y + y, z + z);
    }
    return target;
  }
  
















  public PVector sub(PVector v)
  {
    x -= x;
    y -= y;
    z -= z;
    return this;
  }
  




  public PVector sub(float x, float y)
  {
    this.x -= x;
    this.y -= y;
    return this;
  }
  



  public PVector sub(float x, float y, float z)
  {
    this.x -= x;
    this.y -= y;
    this.z -= z;
    return this;
  }
  





  public static PVector sub(PVector v1, PVector v2)
  {
    return sub(v1, v2, null);
  }
  




  public static PVector sub(PVector v1, PVector v2, PVector target)
  {
    if (target == null) {
      target = new PVector(x - x, y - y, z - z);
    } else {
      target.set(x - x, y - y, z - z);
    }
    return target;
  }
  












  public PVector mult(float n)
  {
    x *= n;
    y *= n;
    z *= n;
    return this;
  }
  



  public static PVector mult(PVector v, float n)
  {
    return mult(v, n, null);
  }
  




  public static PVector mult(PVector v, float n, PVector target)
  {
    if (target == null) {
      target = new PVector(x * n, y * n, z * n);
    } else {
      target.set(x * n, y * n, z * n);
    }
    return target;
  }
  












  public PVector div(float n)
  {
    x /= n;
    y /= n;
    z /= n;
    return this;
  }
  





  public static PVector div(PVector v, float n)
  {
    return div(v, n, null);
  }
  




  public static PVector div(PVector v, float n, PVector target)
  {
    if (target == null) {
      target = new PVector(x / n, y / n, z / n);
    } else {
      target.set(x / n, y / n, z / n);
    }
    return target;
  }
  













  public float dist(PVector v)
  {
    float dx = x - x;
    float dy = y - y;
    float dz = z - z;
    return (float)Math.sqrt(dx * dx + dy * dy + dz * dz);
  }
  





  public static float dist(PVector v1, PVector v2)
  {
    float dx = x - x;
    float dy = y - y;
    float dz = z - z;
    return (float)Math.sqrt(dx * dx + dy * dy + dz * dz);
  }
  













  public float dot(PVector v)
  {
    return x * x + y * y + z * z;
  }
  





  public float dot(float x, float y, float z)
  {
    return this.x * x + this.y * y + this.z * z;
  }
  




  public static float dot(PVector v1, PVector v2)
  {
    return x * x + y * y + z * z;
  }
  












  public PVector cross(PVector v)
  {
    return cross(v, null);
  }
  




  public PVector cross(PVector v, PVector target)
  {
    float crossX = y * z - y * z;
    float crossY = z * x - z * x;
    float crossZ = x * y - x * y;
    
    if (target == null) {
      target = new PVector(crossX, crossY, crossZ);
    } else {
      target.set(crossX, crossY, crossZ);
    }
    return target;
  }
  





  public static PVector cross(PVector v1, PVector v2, PVector target)
  {
    float crossX = y * z - y * z;
    float crossY = z * x - z * x;
    float crossZ = x * y - x * y;
    
    if (target == null) {
      target = new PVector(crossX, crossY, crossZ);
    } else {
      target.set(crossX, crossY, crossZ);
    }
    return target;
  }
  











  public PVector normalize()
  {
    float m = mag();
    if ((m != 0.0F) && (m != 1.0F)) {
      div(m);
    }
    return this;
  }
  




  public PVector normalize(PVector target)
  {
    if (target == null) {
      target = new PVector();
    }
    float m = mag();
    if (m > 0.0F) {
      target.set(x / m, y / m, z / m);
    } else {
      target.set(x, y, z);
    }
    return target;
  }
  












  public PVector limit(float max)
  {
    if (magSq() > max * max) {
      normalize();
      mult(max);
    }
    return this;
  }
  












  public PVector setMag(float len)
  {
    normalize();
    mult(len);
    return this;
  }
  






  public PVector setMag(PVector target, float len)
  {
    target = normalize(target);
    target.mult(len);
    return target;
  }
  












  public float heading()
  {
    float angle = (float)Math.atan2(y, x);
    return angle;
  }
  
  @Deprecated
  public float heading2D()
  {
    return heading();
  }
  












  public PVector rotate(float theta)
  {
    float temp = x;
    
    x = (x * PApplet.cos(theta) - y * PApplet.sin(theta));
    y = (temp * PApplet.sin(theta) + y * PApplet.cos(theta));
    return this;
  }
  














  public PVector lerp(PVector v, float amt)
  {
    x = PApplet.lerp(x, x, amt);
    y = PApplet.lerp(y, y, amt);
    z = PApplet.lerp(z, z, amt);
    return this;
  }
  





  public static PVector lerp(PVector v1, PVector v2, float amt)
  {
    PVector v = v1.copy();
    v.lerp(v2, amt);
    return v;
  }
  






  public PVector lerp(float x, float y, float z, float amt)
  {
    this.x = PApplet.lerp(this.x, x, amt);
    this.y = PApplet.lerp(this.y, y, amt);
    this.z = PApplet.lerp(this.z, z, amt);
    return this;
  }
  
















  public static float angleBetween(PVector v1, PVector v2)
  {
    if ((x == 0.0F) && (y == 0.0F) && (z == 0.0F)) return 0.0F;
    if ((x == 0.0F) && (y == 0.0F) && (z == 0.0F)) { return 0.0F;
    }
    double dot = x * x + y * y + z * z;
    double v1mag = Math.sqrt(x * x + y * y + z * z);
    double v2mag = Math.sqrt(x * x + y * y + z * z);
    
    double amt = dot / (v1mag * v2mag);
    



    if (amt <= -1.0D)
      return 3.1415927F;
    if (amt >= 1.0D)
    {
      return 0.0F;
    }
    return (float)Math.acos(amt);
  }
  

  public String toString()
  {
    return "[ " + x + ", " + y + ", " + z + " ]";
  }
  













  public float[] array()
  {
    if (array == null) {
      array = new float[3];
    }
    array[0] = x;
    array[1] = y;
    array[2] = z;
    return array;
  }
  

  public boolean equals(Object obj)
  {
    if (!(obj instanceof PVector)) {
      return false;
    }
    PVector p = (PVector)obj;
    return (x == x) && (y == y) && (z == z);
  }
  

  public int hashCode()
  {
    int result = 1;
    result = 31 * result + Float.floatToIntBits(x);
    result = 31 * result + Float.floatToIntBits(y);
    result = 31 * result + Float.floatToIntBits(z);
    return result;
  }
}
