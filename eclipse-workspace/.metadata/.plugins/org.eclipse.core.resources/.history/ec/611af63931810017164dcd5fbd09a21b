package com.jogamp.opengl.util.texture;

import com.jogamp.nativewindow.NativeWindowFactory;
import com.jogamp.opengl.GL;
import com.jogamp.opengl.GLException;
import com.jogamp.opengl.glu.GLU;
import com.jogamp.opengl.util.texture.spi.DDSImage;
import java.io.PrintStream;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import jogamp.opengl.Debug;




































































































































































public class Texture
{
  private int target;
  private int imageTarget;
  private int texID;
  private int texWidth;
  private int texHeight;
  private int imgWidth;
  private int imgHeight;
  private float aspectRatio;
  private boolean mustFlipVertically;
  private boolean usingAutoMipmapGeneration;
  private TextureCoords coords;
  private int estimatedMemorySize;
  
  public String toString()
  {
    String str = Integer.toHexString(target) + " - image " + Integer.toHexString(imageTarget);
    return "Texture[target " + str + ", name " + texID + ", " + imgWidth + "/" + texWidth + " x " + imgHeight + "/" + texHeight + ", y-flip " + mustFlipVertically + ", " + estimatedMemorySize + " bytes]";
  }
  





  private static final boolean DEBUG = Debug.debug("Texture");
  private static final boolean VERBOSE = Debug.verbose();
  

  private static final boolean disableNPOT = Debug.isPropertyDefined("jogl.texture.nonpot", true);
  private static final boolean disableTexRect = Debug.isPropertyDefined("jogl.texture.notexrect", true);
  
  public Texture(GL paramGL, TextureData paramTextureData) throws GLException {
    texID = 0;
    target = 0;
    imageTarget = 0;
    updateImage(paramGL, paramTextureData);
  }
  





  public Texture(int paramInt)
  {
    texID = 0;
    target = paramInt;
    imageTarget = paramInt;
  }
  

























  public Texture(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, boolean paramBoolean)
  {
    texID = paramInt1;
    target = paramInt2;
    imageTarget = paramInt2;
    mustFlipVertically = paramBoolean;
    texWidth = paramInt3;
    texHeight = paramInt4;
    aspectRatio = (paramInt5 / paramInt6);
    imgWidth = paramInt5;
    imgHeight = paramInt6;
    updateTexCoords();
  }
  



















  public void enable(GL paramGL)
    throws GLException
  {
    if ((!paramGL.isGLcore()) && (36197 != target)) {
      paramGL.glEnable(target);
    }
  }
  



















  public void disable(GL paramGL)
    throws GLException
  {
    if ((!paramGL.isGLcore()) && (36197 != target)) {
      paramGL.glDisable(target);
    }
  }
  












  public void bind(GL paramGL)
    throws GLException
  {
    validateTexID(paramGL, true);
    paramGL.glBindTexture(target, texID);
  }
  



  public void destroy(GL paramGL)
    throws GLException
  {
    if (0 != texID) {
      paramGL.glDeleteTextures(1, new int[] { texID }, 0);
      texID = 0;
    }
  }
  




  public int getTarget()
  {
    return target;
  }
  




  public int getImageTarget()
  {
    return imageTarget;
  }
  






  public int getWidth()
  {
    return texWidth;
  }
  






  public int getHeight()
  {
    return texHeight;
  }
  









  public int getImageWidth()
  {
    return imgWidth;
  }
  









  public int getImageHeight()
  {
    return imgHeight;
  }
  




  public float getAspectRatio()
  {
    return aspectRatio;
  }
  







  public TextureCoords getImageTexCoords()
  {
    return coords;
  }
  












  public TextureCoords getSubImageTexCoords(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if (34037 == imageTarget) {
      if (mustFlipVertically) {
        return new TextureCoords(paramInt1, texHeight - paramInt2, paramInt3, texHeight - paramInt4);
      }
      return new TextureCoords(paramInt1, paramInt2, paramInt3, paramInt4);
    }
    
    float f1 = paramInt1 / texWidth;
    float f2 = paramInt2 / texHeight;
    float f3 = paramInt3 / texWidth;
    float f4 = paramInt4 / texHeight;
    if (mustFlipVertically) {
      float f5 = imgHeight / texHeight;
      return new TextureCoords(f1, f5 - f2, f3, f5 - f4);
    }
    return new TextureCoords(f1, f2, f3, f4);
  }
  






  public void updateImage(GL paramGL, TextureData paramTextureData)
    throws GLException
  {
    updateImage(paramGL, paramTextureData, 0);
  }
  







  public boolean getMustFlipVertically()
  {
    return mustFlipVertically;
  }
  






  public void setMustFlipVertically(boolean paramBoolean)
  {
    if (paramBoolean != mustFlipVertically) {
      mustFlipVertically = paramBoolean;
      updateTexCoords();
    }
  }
  





  public void updateImage(GL paramGL, TextureData paramTextureData, int paramInt)
    throws GLException
  {
    validateTexID(paramGL, true);
    
    imgWidth = paramTextureData.getWidth();
    imgHeight = paramTextureData.getHeight();
    aspectRatio = (imgWidth / imgHeight);
    mustFlipVertically = paramTextureData.getMustFlipVertically();
    
    int i = 0;
    int j = target;
    



    int k = (paramGL.isExtensionAvailable("GL_VERSION_1_4")) || (paramGL.isExtensionAvailable("GL_SGIS_generate_mipmap")) ? 1 : 0;
    

    paramTextureData.setHaveEXTABGR(paramGL.isExtensionAvailable("GL_EXT_abgr"));
    paramTextureData.setHaveGL12(paramGL.isExtensionAvailable("GL_VERSION_1_2"));
    

    int m = (isPowerOfTwo(imgWidth)) && (isPowerOfTwo(imgHeight)) ? 1 : 0;
    


    if ((m == 0) && (!haveNPOT(paramGL))) {
      k = 0;
    }
    
    int n = 0;
    int i1 = 0;
    if ((paramTextureData.getMipmap()) && (k == 0))
    {



      imgWidth = nextPowerOfTwo(imgWidth);
      imgHeight = nextPowerOfTwo(imgHeight);
      texWidth = imgWidth;
      texHeight = imgHeight;
      i = 3553;
      i1 = 1;
    }
    
    if ((i1 == 0) && (preferTexRect(paramGL)) && (m == 0) && 
      (haveTexRect(paramGL)) && (!paramTextureData.isDataCompressed()) && (!paramGL.isGL3()) && (!paramGL.isGLES()))
    {
      if (DEBUG) {
        System.err.println("Using GL_ARB_texture_rectangle preferentially on this hardware");
      }
      
      texWidth = imgWidth;
      texHeight = imgHeight;
      i = 34037;
      i1 = 1;
    }
    
    if ((i1 == 0) && ((m != 0) || (haveNPOT(paramGL)))) {
      if (DEBUG) {
        if (m != 0) {
          System.err.println("Power-of-two texture");
        } else {
          System.err.println("Using GL_ARB_texture_non_power_of_two");
        }
      }
      
      texWidth = imgWidth;
      texHeight = imgHeight;
      i = 3553;
      i1 = 1;
    }
    
    if ((i1 == 0) && (haveTexRect(paramGL)) && (!paramTextureData.isDataCompressed()) && (!paramGL.isGL3()) && (!paramGL.isGLES()))
    {
      if (DEBUG) {
        System.err.println("Using GL_ARB_texture_rectangle");
      }
      
      texWidth = imgWidth;
      texHeight = imgHeight;
      i = 34037;
      i1 = 1;
    }
    
    if (i1 == 0)
    {





      if (paramTextureData.isDataCompressed()) {
        if (paramTextureData.getMipmapData() != null)
        {




          throw new GLException("Mipmapped non-power-of-two compressed textures only supported on OpenGL 2.0 hardware (GL_ARB_texture_non_power_of_two)");
        }
        
        n = 1;
      }
      
      if (DEBUG) {
        System.err.println("Expanding texture to power-of-two dimensions");
      }
      
      if (paramTextureData.getBorder() != 0) {
        throw new RuntimeException("Scaling up a non-power-of-two texture which has a border won't work");
      }
      texWidth = nextPowerOfTwo(imgWidth);
      texHeight = nextPowerOfTwo(imgHeight);
      i = 3553;
    }
    j = i;
    imageTarget = i;
    updateTexCoords();
    
    if (paramInt != 0)
    {

      if (target == 0) {
        throw new GLException("Override of target failed; no target specified yet");
      }
      i = paramInt;
      j = target;
      paramGL.glBindTexture(j, texID);
    } else {
      paramGL.glBindTexture(i, texID);
    }
    Object localObject1;
    if ((paramTextureData.getMipmap()) && (k == 0)) {
      localObject1 = new int[1];
      paramGL.glGetIntegerv(3317, (int[])localObject1, 0);
      paramGL.glPixelStorei(3317, paramTextureData.getAlignment());
      
      if (paramTextureData.isDataCompressed()) {
        throw new GLException("May not request mipmap generation for compressed textures");
      }
      
      try
      {
        GLU localGLU = GLU.createGLU(paramGL);
        localGLU.gluBuild2DMipmaps(i, paramTextureData.getInternalFormat(), paramTextureData
          .getWidth(), paramTextureData.getHeight(), paramTextureData
          .getPixelFormat(), paramTextureData.getPixelType(), paramTextureData.getBuffer());
      } finally {
        paramGL.glPixelStorei(3317, localObject1[0]);
      }
    } else {
      checkCompressedTextureExtensions(paramGL, paramTextureData);
      localObject1 = paramTextureData.getMipmapData();
      if (localObject1 != null) {
        int i3 = texWidth;
        i4 = texHeight;
        for (int i5 = 0; i5 < localObject1.length; i5++) {
          if (paramTextureData.isDataCompressed())
          {

            paramGL.glCompressedTexImage2D(i, i5, paramTextureData.getInternalFormat(), i3, i4, paramTextureData
              .getBorder(), localObject1[i5]
              .remaining(), localObject1[i5]);
          }
          else {
            paramGL.glTexImage2D(i, i5, paramTextureData.getInternalFormat(), i3, i4, paramTextureData
              .getBorder(), paramTextureData
              .getPixelFormat(), paramTextureData.getPixelType(), null);
            updateSubImageImpl(paramGL, paramTextureData, i, i5, 0, 0, 0, 0, paramTextureData.getWidth(), paramTextureData.getHeight());
          }
          
          i3 = Math.max(i3 / 2, 1);
          i4 = Math.max(i4 / 2, 1);
        }
      }
      else if (paramTextureData.isDataCompressed()) {
        if (n == 0)
        {

          paramGL.glCompressedTexImage2D(i, 0, paramTextureData.getInternalFormat(), texWidth, texHeight, paramTextureData
            .getBorder(), paramTextureData
            .getBuffer().capacity(), paramTextureData.getBuffer());
        } else {
          ByteBuffer localByteBuffer = DDSImage.allocateBlankBuffer(texWidth, texHeight, paramTextureData
          
            .getInternalFormat());
          paramGL.glCompressedTexImage2D(i, 0, paramTextureData.getInternalFormat(), texWidth, texHeight, paramTextureData
            .getBorder(), localByteBuffer
            .capacity(), localByteBuffer);
          updateSubImageImpl(paramGL, paramTextureData, i, 0, 0, 0, 0, 0, paramTextureData.getWidth(), paramTextureData.getHeight());
        }
      } else {
        if ((paramTextureData.getMipmap()) && (k != 0) && (paramGL.isGL2ES1()))
        {



          paramGL.glTexParameteri(j, 33169, 1);
          usingAutoMipmapGeneration = true;
        }
        
        paramGL.glTexImage2D(i, 0, paramTextureData.getInternalFormat(), texWidth, texHeight, paramTextureData
          .getBorder(), paramTextureData
          .getPixelFormat(), paramTextureData.getPixelType(), null);
        updateSubImageImpl(paramGL, paramTextureData, i, 0, 0, 0, 0, 0, paramTextureData.getWidth(), paramTextureData.getHeight());
      }
    }
    

    int i2 = paramTextureData.getMipmap() ? 9987 : 9729;
    
    int i4 = (paramGL.isExtensionAvailable("GL_VERSION_1_2")) || (!paramGL.isGL2()) ? 33071 : 10496;
    

    if (i != 34037) {
      paramGL.glTexParameteri(j, 10241, i2);
      paramGL.glTexParameteri(j, 10240, 9729);
      paramGL.glTexParameteri(j, 10242, i4);
      paramGL.glTexParameteri(j, 10243, i4);
      if (target == 34067) {
        paramGL.glTexParameteri(j, 32882, i4);
      }
    }
    


    if ((target == 0) || (target == 3553) || (target == 34037))
    {

      target = i;
    }
    

    estimatedMemorySize = paramTextureData.getEstimatedMemorySize();
  }
  



















  public void updateSubImage(GL paramGL, TextureData paramTextureData, int paramInt1, int paramInt2, int paramInt3)
    throws GLException
  {
    if ((usingAutoMipmapGeneration) && (paramInt1 != 0))
    {

      return;
    }
    bind(paramGL);
    updateSubImageImpl(paramGL, paramTextureData, target, paramInt1, paramInt2, paramInt3, 0, 0, paramTextureData.getWidth(), paramTextureData.getHeight());
  }
  































  public void updateSubImage(GL paramGL, TextureData paramTextureData, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7)
    throws GLException
  {
    if (paramTextureData.isDataCompressed()) {
      throw new GLException("updateSubImage specifying a sub-rectangle is not supported for compressed TextureData");
    }
    if ((usingAutoMipmapGeneration) && (paramInt1 != 0))
    {

      return;
    }
    bind(paramGL);
    updateSubImageImpl(paramGL, paramTextureData, target, paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7);
  }
  









  public void setTexParameterf(GL paramGL, int paramInt, float paramFloat)
  {
    bind(paramGL);
    paramGL.glTexParameterf(target, paramInt, paramFloat);
  }
  







  public void setTexParameterfv(GL paramGL, int paramInt, FloatBuffer paramFloatBuffer)
  {
    bind(paramGL);
    paramGL.glTexParameterfv(target, paramInt, paramFloatBuffer);
  }
  







  public void setTexParameterfv(GL paramGL, int paramInt1, float[] paramArrayOfFloat, int paramInt2)
  {
    bind(paramGL);
    paramGL.glTexParameterfv(target, paramInt1, paramArrayOfFloat, paramInt2);
  }
  










  public void setTexParameteri(GL paramGL, int paramInt1, int paramInt2)
  {
    bind(paramGL);
    paramGL.glTexParameteri(target, paramInt1, paramInt2);
  }
  







  public void setTexParameteriv(GL paramGL, int paramInt, IntBuffer paramIntBuffer)
  {
    bind(paramGL);
    paramGL.glTexParameteriv(target, paramInt, paramIntBuffer);
  }
  







  public void setTexParameteriv(GL paramGL, int paramInt1, int[] paramArrayOfInt, int paramInt2)
  {
    bind(paramGL);
    paramGL.glTexParameteriv(target, paramInt1, paramArrayOfInt, paramInt2);
  }
  










  public int getTextureObject(GL paramGL)
  {
    validateTexID(paramGL, false);
    return texID;
  }
  








  public int getTextureObject()
  {
    return texID;
  }
  




  public int getEstimatedMemorySize()
  {
    return estimatedMemorySize;
  }
  








  public boolean isUsingAutoMipmapGeneration()
  {
    return usingAutoMipmapGeneration;
  }
  








  private static boolean isPowerOfTwo(int paramInt)
  {
    return (paramInt & paramInt - 1) == 0;
  }
  







  private static int nextPowerOfTwo(int paramInt)
  {
    int i = 1;
    while (i < paramInt) {
      i <<= 1;
    }
    return i;
  }
  
  private void updateTexCoords() {
    if (34037 == imageTarget) {
      if (mustFlipVertically) {
        coords = new TextureCoords(0.0F, imgHeight, imgWidth, 0.0F);
      } else {
        coords = new TextureCoords(0.0F, 0.0F, imgWidth, imgHeight);
      }
    }
    else if (mustFlipVertically) {
      coords = new TextureCoords(0.0F, imgHeight / texHeight, imgWidth / texWidth, 0.0F);

    }
    else
    {

      coords = new TextureCoords(0.0F, 0.0F, imgWidth / texWidth, imgHeight / texHeight);
    }
  }
  





  private void updateSubImageImpl(GL paramGL, TextureData paramTextureData, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8)
    throws GLException
  {
    paramTextureData.setHaveEXTABGR(paramGL.isExtensionAvailable("GL_EXT_abgr"));
    paramTextureData.setHaveGL12(paramGL.isExtensionAvailable("GL_VERSION_1_2"));
    
    Buffer localBuffer = paramTextureData.getBuffer();
    if ((localBuffer == null) && (paramTextureData.getMipmapData() == null))
    {
      return;
    }
    
    int i = paramTextureData.getRowLength();
    int j = paramTextureData.getWidth();
    int k = paramTextureData.getHeight();
    if (paramTextureData.getMipmapData() != null)
    {


      for (int m = 0; m < paramInt2; m++) {
        paramInt7 = Math.max(paramInt7 / 2, 1);
        paramInt8 = Math.max(paramInt8 / 2, 1);
        
        j = Math.max(j / 2, 1);
        k = Math.max(k / 2, 1);
      }
      i = 0;
      localBuffer = paramTextureData.getMipmapData()[paramInt2];
    }
    


    if (paramInt5 < 0) {
      paramInt7 += paramInt5;
      paramInt5 = 0;
    }
    if (paramInt6 < 0) {
      paramInt8 += paramInt6;
      paramInt6 = 0;
    }
    
    if (paramInt3 < 0) {
      paramInt7 += paramInt3;
      paramInt3 = 0;
    }
    if (paramInt4 < 0) {
      paramInt8 += paramInt4;
      paramInt4 = 0;
    }
    
    if (paramInt5 + paramInt7 > j) {
      paramInt7 = j - paramInt5;
    }
    if (paramInt6 + paramInt8 > k) {
      paramInt8 = k - paramInt6;
    }
    if (paramInt3 + paramInt7 > texWidth) {
      paramInt7 = texWidth - paramInt3;
    }
    if (paramInt4 + paramInt8 > texHeight) {
      paramInt8 = texHeight - paramInt4;
    }
    
    checkCompressedTextureExtensions(paramGL, paramTextureData);
    
    if (paramTextureData.isDataCompressed()) {
      paramGL.glCompressedTexSubImage2D(paramInt1, paramInt2, paramInt3, paramInt4, paramInt7, paramInt8, paramTextureData
      
        .getInternalFormat(), localBuffer
        .remaining(), localBuffer);
    } else {
      int[] arrayOfInt1 = { 0 };
      int[] arrayOfInt2 = { 0 };
      int[] arrayOfInt3 = { 0 };
      int[] arrayOfInt4 = { 0 };
      paramGL.glGetIntegerv(3317, arrayOfInt1, 0);
      if (paramGL.isGL2GL3()) {
        paramGL.glGetIntegerv(3314, arrayOfInt2, 0);
        paramGL.glGetIntegerv(3315, arrayOfInt3, 0);
        paramGL.glGetIntegerv(3316, arrayOfInt4, 0);
      }
      paramGL.glPixelStorei(3317, paramTextureData.getAlignment());
      if ((DEBUG) && (VERBOSE)) {
        System.out.println("Row length  = " + i);
        System.out.println("skip pixels = " + paramInt5);
        System.out.println("skip rows   = " + paramInt6);
        System.out.println("dstx        = " + paramInt3);
        System.out.println("dsty        = " + paramInt4);
        System.out.println("width       = " + paramInt7);
        System.out.println("height      = " + paramInt8);
      }
      if (paramGL.isGL2GL3()) {
        paramGL.glPixelStorei(3314, i);
        paramGL.glPixelStorei(3315, paramInt6);
        paramGL.glPixelStorei(3316, paramInt5);
      }
      else if ((i != 0) && (i != paramInt7) && (paramInt6 != 0) && (paramInt5 != 0))
      {
        throw new GLException("rowlen and/or x/y offset only available for GL2");
      }
      

      paramGL.glTexSubImage2D(paramInt1, paramInt2, paramInt3, paramInt4, paramInt7, paramInt8, paramTextureData
      
        .getPixelFormat(), paramTextureData.getPixelType(), localBuffer);
      
      paramGL.glPixelStorei(3317, arrayOfInt1[0]);
      if (paramGL.isGL2GL3()) {
        paramGL.glPixelStorei(3314, arrayOfInt2[0]);
        paramGL.glPixelStorei(3315, arrayOfInt3[0]);
        paramGL.glPixelStorei(3316, arrayOfInt4[0]);
      }
    }
  }
  
  private void checkCompressedTextureExtensions(GL paramGL, TextureData paramTextureData) {
    if (paramTextureData.isDataCompressed()) {
      switch (paramTextureData.getInternalFormat()) {
      case 33776: 
      case 33777: 
      case 33778: 
      case 33779: 
        if ((!paramGL.isExtensionAvailable("GL_EXT_texture_compression_s3tc")) && 
          (!paramGL.isExtensionAvailable("GL_NV_texture_compression_vtc"))) {
          throw new GLException("DXTn compressed textures not supported by this graphics card");
        }
        
        break;
      }
      
    }
  }
  

  private boolean validateTexID(GL paramGL, boolean paramBoolean)
  {
    if (0 == texID) {
      if (null != paramGL) {
        int[] arrayOfInt = new int[1];
        paramGL.glGenTextures(1, arrayOfInt, 0);
        texID = arrayOfInt[0];
        if ((0 == texID) && (paramBoolean)) {
          throw new GLException("Create texture ID invalid: texID " + texID + ", glerr 0x" + Integer.toHexString(paramGL.glGetError()));
        }
      } else if (paramBoolean) {
        throw new GLException("No GL context given, can't create texture ID");
      }
    }
    return 0 != texID;
  }
  
  private static boolean haveNPOT(GL paramGL)
  {
    return (!disableNPOT) && (paramGL.isNPOTTextureAvailable());
  }
  

  private static boolean haveTexRect(GL paramGL)
  {
    return (!disableTexRect) && (TextureIO.isTexRectEnabled()) && (paramGL.isExtensionAvailable("GL_ARB_texture_rectangle"));
  }
  


  private static boolean preferTexRect(GL paramGL)
  {
    if (NativeWindowFactory.TYPE_MACOSX == NativeWindowFactory.getNativeWindowType(false)) {
      String str = paramGL.glGetString(7936);
      if ((str != null) && (str.startsWith("ATI"))) {
        return true;
      }
    }
    
    return false;
  }
}
