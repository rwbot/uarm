package jogamp.common.os.elf;

import com.jogamp.common.nio.Buffers;
import com.jogamp.common.nio.StructAccessor;
import com.jogamp.common.os.MachineDataInfo;
import com.jogamp.common.os.MachineDataInfo.StaticConfig;
import java.nio.ByteBuffer;








public class Shdr
{
  StructAccessor accessor;
  private final int mdIdx;
  private final MachineDataInfo md;
  private static final int[] Shdr_size = { 40, 40, 40, 40, 40, 40, 64, 64 };
  private static final int[] sh_name_offset = { 0, 0, 0, 0, 0, 0, 0, 0 };
  
  private static final int[] sh_type_offset = { 4, 4, 4, 4, 4, 4, 4, 4 };
  
  private static final int[] sh_flags_offset = { 8, 8, 8, 8, 8, 8, 8, 8 };
  
  private static final int[] sh_addr_offset = { 12, 12, 12, 12, 12, 12, 16, 16 };
  
  private static final int[] sh_offset_offset = { 16, 16, 16, 16, 16, 16, 24, 24 };
  
  private static final int[] sh_size_offset = { 20, 20, 20, 20, 20, 20, 32, 32 };
  
  private static final int[] sh_link_offset = { 24, 24, 24, 24, 24, 24, 40, 40 };
  
  private static final int[] sh_info_offset = { 28, 28, 28, 28, 28, 28, 44, 44 };
  
  private static final int[] sh_addralign_offset = { 32, 32, 32, 32, 32, 32, 48, 48 };
  
  private static final int[] sh_entsize_offset = { 36, 36, 36, 36, 36, 36, 56, 56 };
  
  public ByteBuffer getBuffer()
  {
    return accessor.getBuffer();
  }
  
  public Shdr setSh_name(int paramInt)
  {
    accessor.setIntAt(sh_name_offset[mdIdx], paramInt);
    return this;
  }
  
  public int getSh_name()
  {
    return accessor.getIntAt(sh_name_offset[mdIdx]);
  }
  
  public Shdr setSh_type(int paramInt)
  {
    accessor.setIntAt(sh_type_offset[mdIdx], paramInt);
    return this;
  }
  
  public int getSh_type()
  {
    return accessor.getIntAt(sh_type_offset[mdIdx]);
  }
  
  public Shdr setSh_flags(long paramLong)
  {
    accessor.setLongAt(sh_flags_offset[mdIdx], paramLong, md.longSizeInBytes());
    return this;
  }
  
  public long getSh_flags()
  {
    return accessor.getLongAt(sh_flags_offset[mdIdx], md.longSizeInBytes());
  }
  
  public Shdr setSh_addr(long paramLong)
  {
    accessor.setLongAt(sh_addr_offset[mdIdx], paramLong, md.longSizeInBytes());
    return this;
  }
  
  public long getSh_addr()
  {
    return accessor.getLongAt(sh_addr_offset[mdIdx], md.longSizeInBytes());
  }
  
  public Shdr setSh_offset(long paramLong)
  {
    accessor.setLongAt(sh_offset_offset[mdIdx], paramLong, md.longSizeInBytes());
    return this;
  }
  
  public long getSh_offset()
  {
    return accessor.getLongAt(sh_offset_offset[mdIdx], md.longSizeInBytes());
  }
  
  public Shdr setSh_size(long paramLong)
  {
    accessor.setLongAt(sh_size_offset[mdIdx], paramLong, md.longSizeInBytes());
    return this;
  }
  
  public long getSh_size()
  {
    return accessor.getLongAt(sh_size_offset[mdIdx], md.longSizeInBytes());
  }
  
  public Shdr setSh_link(int paramInt)
  {
    accessor.setIntAt(sh_link_offset[mdIdx], paramInt);
    return this;
  }
  
  public int getSh_link()
  {
    return accessor.getIntAt(sh_link_offset[mdIdx]);
  }
  
  public Shdr setSh_info(int paramInt)
  {
    accessor.setIntAt(sh_info_offset[mdIdx], paramInt);
    return this;
  }
  
  public int getSh_info()
  {
    return accessor.getIntAt(sh_info_offset[mdIdx]);
  }
  
  public Shdr setSh_addralign(long paramLong)
  {
    accessor.setLongAt(sh_addralign_offset[mdIdx], paramLong, md.longSizeInBytes());
    return this;
  }
  
  public long getSh_addralign()
  {
    return accessor.getLongAt(sh_addralign_offset[mdIdx], md.longSizeInBytes());
  }
  
  public Shdr setSh_entsize(long paramLong)
  {
    accessor.setLongAt(sh_entsize_offset[mdIdx], paramLong, md.longSizeInBytes());
    return this;
  }
  
  public long getSh_entsize()
  {
    return accessor.getLongAt(sh_entsize_offset[mdIdx], md.longSizeInBytes());
  }
  
  public static int size(int paramInt)
  {
    return Shdr_size[paramInt];
  }
  
  public static Shdr create(int paramInt) {
    return create(paramInt, Buffers.newDirectByteBuffer(size(paramInt)));
  }
  
  public static Shdr create(int paramInt, ByteBuffer paramByteBuffer) {
    return new Shdr(paramInt, paramByteBuffer);
  }
  
  Shdr(int paramInt, ByteBuffer paramByteBuffer) {
    mdIdx = paramInt;
    md = valuesmd;
    accessor = new StructAccessor(paramByteBuffer);
  }
}
