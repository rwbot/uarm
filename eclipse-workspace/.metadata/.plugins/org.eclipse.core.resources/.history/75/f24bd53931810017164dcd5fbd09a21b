package jogamp.common.os;

import com.jogamp.common.nio.Buffers;
import com.jogamp.common.os.AndroidVersion;
import com.jogamp.common.os.NativeLibrary;
import com.jogamp.common.os.Platform.ABIType;
import com.jogamp.common.os.Platform.CPUFamily;
import com.jogamp.common.os.Platform.CPUType;
import com.jogamp.common.os.Platform.OSType;
import com.jogamp.common.util.VersionNumber;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.List;
import jogamp.common.Debug;
import jogamp.common.os.elf.ElfHeaderPart1;
import jogamp.common.os.elf.ElfHeaderPart2;













public abstract class PlatformPropsImpl
{
  static final boolean DEBUG = Debug.debug("Platform");
  

  public static class OSXVersion
  {
    public static final VersionNumber Tiger = new VersionNumber(10, 4, 0);
    
    public static final VersionNumber Lion = new VersionNumber(10, 7, 0);
    
    public static final VersionNumber Mavericks = new VersionNumber(10, 9, 0);
    
    public OSXVersion() {}
  }
  
  public static final boolean isCompatible(Platform.CPUType paramCPUType1, Platform.ABIType paramABIType1, Platform.CPUType paramCPUType2, Platform.ABIType paramABIType2)
  {
    return (paramCPUType1.isCompatible(paramCPUType2)) && (paramABIType1.isCompatible(paramABIType2));
  }
  
















































  public static final VersionNumber Version16 = new VersionNumber(1, 6, 0);
  public static final VersionNumber Version17 = new VersionNumber(1, 7, 0);
  public static final VersionNumber Version18 = new VersionNumber(1, 8, 0);
  public static final VersionNumber Version19 = new VersionNumber(1, 9, 0);
  public static final String OS;
  public static final String OS_lower;
  public static final String OS_VERSION; public static final VersionNumber OS_VERSION_NUMBER; public static final String ARCH; public static final String ARCH_lower; public static final String JAVA_VENDOR; public static final String JAVA_VENDOR_URL; public static final String JAVA_VERSION; public static final VersionNumber JAVA_VERSION_NUMBER; public static final int JAVA_VERSION_UPDATE; public static final String JAVA_VM_NAME; public static final String JAVA_RUNTIME_NAME; public static final boolean JAVA_SE; public static final boolean JAVA_6;
  static { boolean bool1 = AndroidVersion.isAvailable;
    JAVA_VENDOR = System.getProperty("java.vendor");
    JAVA_VENDOR_URL = System.getProperty("java.vendor.url");
    JAVA_VERSION = System.getProperty("java.version");
    JAVA_VERSION_NUMBER = new VersionNumber(JAVA_VERSION);
    
    int i = JAVA_VERSION.lastIndexOf("-u");
    int j;
    if (0 < i) {
      j = 2;
    } else {
      i = JAVA_VERSION.lastIndexOf("_");
      j = 1;
    }
    if (0 < i) {
      str2 = JAVA_VERSION.substring(i + j);
      VersionNumber localVersionNumber = new VersionNumber(str2);
      JAVA_VERSION_UPDATE = localVersionNumber.getMajor();
    } else {
      JAVA_VERSION_UPDATE = 0;
    }
    
    JAVA_VM_NAME = System.getProperty("java.vm.name");
    JAVA_RUNTIME_NAME = getJavaRuntimeNameImpl();
    JAVA_SE = initIsJavaSE();
    JAVA_6 = (JAVA_SE) && ((bool1) || (JAVA_VERSION_NUMBER.compareTo(Version16) >= 0));
    
    NEWLINE = System.getProperty("line.separator");
    
    OS = System.getProperty("os.name");
    OS_lower = OS.toLowerCase();
    OS_VERSION = System.getProperty("os.version");
    OS_VERSION_NUMBER = new VersionNumber(OS_VERSION);
    OS_TYPE = getOSTypeImpl(OS_lower, bool1);
    







    String[] arrayOfString = { null };
    Object localObject2 = { null };
    Object localObject3 = { null };
    Object localObject4 = { 0 };
    Object localObject5 = { false };
    AccessController.doPrivileged(new PrivilegedAction()
    {
      public Object run() {
        RandomAccessFile localRandomAccessFile = null;
        try {
          File localFile = PlatformPropsImpl.queryElfFile(PlatformPropsImpl.OS_TYPE);
          if (PlatformPropsImpl.DEBUG) {
            System.err.println("ELF-1: Using " + localFile);
          }
          localRandomAccessFile = new RandomAccessFile(localFile, "r");
          ElfHeaderPart1 localElfHeaderPart1 = PlatformPropsImpl.readElfHeaderPart1(PlatformPropsImpl.OS_TYPE, localRandomAccessFile);
          if (PlatformPropsImpl.DEBUG) {
            System.err.println("ELF-1: Got " + localElfHeaderPart1);
          }
          if (null != localElfHeaderPart1) {
            ElfHeaderPart2 localElfHeaderPart2 = PlatformPropsImpl.readElfHeaderPart2(localElfHeaderPart1, localRandomAccessFile);
            if (PlatformPropsImpl.DEBUG) {
              System.err.println("ELF-2: Got " + localElfHeaderPart2);
            }
            if (null != localElfHeaderPart2) {
              val$_elfCpuName[0] = cpuName;
              val$_elfCpuType[0] = cpuType;
              val$_elfAbiType[0] = abiType;
              if (localElfHeaderPart1.isLittleEndian()) {
                val$_elfLittleEndian[0] = 1;
              } else if (localElfHeaderPart1.isBigEndian()) {
                val$_elfLittleEndian[0] = 2;
              }
              val$_elfValid[0] = true;
            }
          }
          










          return null;
        }
        catch (Throwable localThrowable)
        {
          if (PlatformPropsImpl.DEBUG) {
            localThrowable.printStackTrace();
          }
        } finally {
          if (null != localRandomAccessFile) {
            try {
              localRandomAccessFile.close();
            } catch (IOException localIOException3) {}
          }
        }
      }
    });
    String str1 = arrayOfString[0];
    Object localObject1 = localObject2[0];
    String str2 = localObject3[0];
    int k = localObject4[0];
    int m = localObject5[0];
    if (DEBUG) {
      System.err.println("Platform.Elf: valid " + m + ", elfCpuName " + str1 + ", cpuType " + localObject1 + ", abiType " + str2 + ", elfLittleEndian " + k);
    }
    


    boolean bool2 = queryIsLittleEndianImpl();
    if (m != 0) {
      switch (k) {
      case 1: 
        LITTLE_ENDIAN = true;
        break;
      case 2: 
        LITTLE_ENDIAN = false;
        break;
      default: 
        LITTLE_ENDIAN = bool2;
        break;
      }
    } else {
      LITTLE_ENDIAN = bool2;
    }
    if (DEBUG) {
      System.err.println("Platform.Endian: test-little " + bool2 + ", elf[valid " + m + ", val " + k + "] -> LITTLE_ENDIAN " + LITTLE_ENDIAN);
    }
    



    localObject2 = System.getProperty("os.arch");
    localObject3 = ((String)localObject2).toLowerCase();
    localObject4 = Platform.CPUType.query((String)localObject3);
    localObject5 = Platform.ABIType.query((Platform.CPUType)localObject4, (String)localObject3);
    if (DEBUG) {
      System.err.println("Platform.Property: ARCH " + (String)localObject2 + ", CpuType " + localObject4 + ", ABIType " + localObject5);
    }
    
    int n;
    if (bool1) {
      if (DEBUG) {
        System.err.println("Android: CPU_ABI1 str " + AndroidVersion.CPU_ABI + ", CPU_TYPE " + AndroidVersion.CPU_TYPE + ", ABI_TYPE " + AndroidVersion.ABI_TYPE);
        System.err.println("Android: CPU_ABI2 str " + AndroidVersion.CPU_ABI2 + ", CPU_TYPE2 " + AndroidVersion.CPU_TYPE2 + ", ABI_TYPE2 " + AndroidVersion.ABI_TYPE2);
      }
      if (m != 0) {
        if ((null != AndroidVersion.CPU_TYPE) && 
          (isCompatible(localObject1, str2, AndroidVersion.CPU_TYPE, AndroidVersion.ABI_TYPE)))
        {

          ARCH = AndroidVersion.CPU_ABI;
          ARCH_lower = ARCH;
          CPU_ARCH = AndroidVersion.CPU_TYPE;
          n = 110;
        } else if ((null != AndroidVersion.CPU_TYPE2) && 
          (isCompatible(localObject1, str2, AndroidVersion.CPU_TYPE2, AndroidVersion.ABI_TYPE2)))
        {

          ARCH = AndroidVersion.CPU_ABI2;
          ARCH_lower = ARCH;
          CPU_ARCH = AndroidVersion.CPU_TYPE2;
          n = 111;
        }
        else {
          ARCH = localObject1.toString();
          ARCH_lower = ARCH.toLowerCase();
          CPU_ARCH = localObject1;
          n = 112;
        }
        ABI_TYPE = str2;
      }
      else if ((CPU_TYPEfamily == Platform.CPUFamily.ARM) || (null == AndroidVersion.CPU_TYPE2))
      {

        ARCH = AndroidVersion.CPU_ABI;
        ARCH_lower = ARCH;
        CPU_ARCH = AndroidVersion.CPU_TYPE;
        ABI_TYPE = AndroidVersion.ABI_TYPE;
        n = 120;
      }
      else {
        ARCH = AndroidVersion.CPU_ABI2;
        ARCH_lower = ARCH;
        CPU_ARCH = AndroidVersion.CPU_TYPE2;
        ABI_TYPE = AndroidVersion.ABI_TYPE2;
        n = 121;
      }
      
    }
    else if (m != 0) {
      if (isCompatible(localObject1, str2, (Platform.CPUType)localObject4, (Platform.ABIType)localObject5))
      {
        ARCH = (String)localObject2;
        ARCH_lower = (String)localObject3;
        CPU_ARCH = (Platform.CPUType)localObject4;
        ABI_TYPE = (Platform.ABIType)localObject5;
        n = 210;
      }
      else {
        ARCH = str1;
        ARCH_lower = str1;
        CPU_ARCH = localObject1;
        ABI_TYPE = str2;
        n = 211;
      }
    }
    else {
      ARCH = (String)localObject2;
      ARCH_lower = (String)localObject3;
      CPU_ARCH = (Platform.CPUType)localObject4;
      ABI_TYPE = (Platform.ABIType)localObject5;
      n = 220;
    }
    
    if (DEBUG)
      System.err.println("Platform.Hard: ARCH " + ARCH + ", CPU_ARCH " + CPU_ARCH + ", ABI_TYPE " + ABI_TYPE + " - strategy " + n + "(isAndroid " + bool1 + ", elfValid " + m + ")"); }
  
  public static final String NEWLINE; public static final boolean LITTLE_ENDIAN; public static final Platform.CPUType CPU_ARCH; public static final Platform.ABIType ABI_TYPE; public static final Platform.OSType OS_TYPE; public static final String os_and_arch = getOSAndArch(OS_TYPE, CPU_ARCH, ABI_TYPE, LITTLE_ENDIAN);
  



  private static final String getJavaRuntimeNameImpl()
  {
    (String)AccessController.doPrivileged(new PrivilegedAction()
    {
      public String run() {
        return System.getProperty("java.runtime.name");
      }
    });
  }
  
  private static final boolean initIsJavaSE() {
    if ((null != JAVA_RUNTIME_NAME) && (JAVA_RUNTIME_NAME.indexOf("Java SE") != -1)) {
      return true;
    }
    
    try
    {
      Class.forName("java.nio.LongBuffer");
      Class.forName("java.nio.DoubleBuffer");
      return true;
    }
    catch (ClassNotFoundException localClassNotFoundException) {}
    

    return false;
  }
  
  private static final boolean queryIsLittleEndianImpl() {
    ByteBuffer localByteBuffer = Buffers.newDirectByteBuffer(4);
    IntBuffer localIntBuffer = localByteBuffer.asIntBuffer();
    ShortBuffer localShortBuffer = localByteBuffer.asShortBuffer();
    localIntBuffer.put(0, 168496141);
    return 3085 == localShortBuffer.get(0);
  }
  
  private static final boolean contains(String paramString, String[] paramArrayOfString)
  {
    if ((null != paramString) && (null != paramArrayOfString)) {
      for (int i = 0; i < paramArrayOfString.length; i++) {
        if (paramString.indexOf(paramArrayOfString[i]) >= 0) {
          return true;
        }
      }
    }
    return false;
  }
  














  private static final File queryElfFile(Platform.OSType paramOSType)
  {
    File localFile = null;
    try {
      if (Platform.OSType.ANDROID == paramOSType) {
        localFile = new File(NativeLibrary.findLibrary("gluegen-rt", PlatformPropsImpl.class.getClassLoader()));
      } else {
        if (Platform.OSType.LINUX == paramOSType) {
          localFile = new File("/proc/self/exe");
          if (!checkFileReadAccess(localFile)) {
            localFile = null;
          }
        }
        if (null == localFile) {
          localFile = findSysLib("java");
        }
        if (null == localFile) {
          localFile = findSysLib("jvm");
        }
      }
    } catch (Throwable localThrowable) {
      if (DEBUG) {
        localThrowable.printStackTrace();
      }
    }
    return localFile;
  }
  
  private static final ElfHeaderPart1 readElfHeaderPart1(Platform.OSType paramOSType, RandomAccessFile paramRandomAccessFile) { ElfHeaderPart1 localElfHeaderPart1 = null;
    try {
      localElfHeaderPart1 = ElfHeaderPart1.read(paramOSType, paramRandomAccessFile);
    } catch (Throwable localThrowable) {
      if (DEBUG) {
        System.err.println("Caught: " + localThrowable.getMessage());
        localThrowable.printStackTrace();
      }
    }
    return localElfHeaderPart1;
  }
  
  private static final ElfHeaderPart2 readElfHeaderPart2(ElfHeaderPart1 paramElfHeaderPart1, RandomAccessFile paramRandomAccessFile) { ElfHeaderPart2 localElfHeaderPart2 = null;
    try {
      localElfHeaderPart2 = ElfHeaderPart2.read(paramElfHeaderPart1, paramRandomAccessFile);
    } catch (Throwable localThrowable) {
      if (DEBUG) {
        System.err.println("Caught: " + localThrowable.getMessage());
        localThrowable.printStackTrace();
      }
    }
    return localElfHeaderPart2;
  }
  
  private static boolean checkFileReadAccess(File paramFile) {
    try { return (paramFile.isFile()) && (paramFile.canRead());
    } catch (Throwable localThrowable) {}
    return false;
  }
  
  private static File findSysLib(String paramString) { ClassLoader localClassLoader = PlatformPropsImpl.class.getClassLoader();
    List localList = NativeLibrary.enumerateLibraryPaths(paramString, paramString, paramString, true, localClassLoader);
    for (int i = 0; i < localList.size(); i++) {
      String str = (String)localList.get(i);
      File localFile = new File(str);
      if (DEBUG) {
        System.err.println("findSysLib #" + i + ": test " + localFile);
      }
      if (checkFileReadAccess(localFile)) {
        return localFile;
      }
      if (DEBUG) {
        System.err.println("findSysLib #" + i + ": " + localFile + " not readable");
      }
    }
    return null;
  }
  
  private static final Platform.OSType getOSTypeImpl(String paramString, boolean paramBoolean) throws RuntimeException {
    if (paramBoolean) {
      return Platform.OSType.ANDROID;
    }
    if (paramString.startsWith("linux")) {
      return Platform.OSType.LINUX;
    }
    if (paramString.startsWith("freebsd")) {
      return Platform.OSType.FREEBSD;
    }
    if (paramString.startsWith("android")) {
      return Platform.OSType.ANDROID;
    }
    if ((paramString.startsWith("mac os x")) || 
      (paramString.startsWith("darwin"))) {
      return Platform.OSType.MACOS;
    }
    if (paramString.startsWith("sunos")) {
      return Platform.OSType.SUNOS;
    }
    if (paramString.startsWith("hp-ux")) {
      return Platform.OSType.HPUX;
    }
    if (paramString.startsWith("windows")) {
      return Platform.OSType.WINDOWS;
    }
    if (paramString.startsWith("kd")) {
      return Platform.OSType.OPENKODE;
    }
    throw new RuntimeException("Please port OS detection to your platform (" + OS_lower + "/" + ARCH_lower + ")");
  }
  























  public static final String getOSAndArch(Platform.OSType paramOSType, Platform.CPUType paramCPUType, Platform.ABIType paramABIType, boolean paramBoolean)
  {
    String str2;
    





















    switch (3.$SwitchMap$com$jogamp$common$os$Platform$CPUType[paramCPUType.ordinal()]) {
    case 1: 
    case 2: 
    case 3: 
    case 4: 
      if (Platform.ABIType.EABI_GNU_ARMHF == paramABIType) {
        str2 = "armv6hf";
      } else {
        str2 = "armv6";
      }
      break;
    case 5: 
      str2 = "i586";
      break;
    case 6: 
      str2 = "ppc";
      break;
    case 7: 
      str2 = paramBoolean ? "mipsel" : "mips";
      break;
    case 8: 
      str2 = "superh";
      break;
    case 9: 
      str2 = "sparc";
      break;
    
    case 10: 
    case 11: 
      str2 = "aarch64";
      break;
    case 12: 
      str2 = "amd64";
      break;
    case 13: 
      str2 = "ppc64";
      break;
    case 14: 
      str2 = "mips64";
      break;
    case 15: 
      str2 = "ia64";
      break;
    case 16: 
      str2 = "sparcv9";
      break;
    case 17: 
      str2 = "risc2.0";
      break;
    default: 
      throw new InternalError("Unhandled CPUType: " + paramCPUType); }
    String str1;
    String str3;
    switch (3.$SwitchMap$com$jogamp$common$os$Platform$OSType[paramOSType.ordinal()]) {
    case 1: 
      str1 = "android";
      str3 = str2;
      break;
    case 2: 
      str1 = "macosx";
      str3 = "universal";
      break;
    case 3: 
      str1 = "windows";
      str3 = str2;
      break;
    case 4: 
      str1 = "openkode";
      str3 = str2;
      break;
    case 5: 
      str1 = "linux";
      str3 = str2;
      break;
    case 6: 
      str1 = "freebsd";
      str3 = str2;
      break;
    case 7: 
      str1 = "solaris";
      str3 = str2;
      break;
    case 8: 
      str1 = "hpux";
      str3 = "hppa";
      break;
    default: 
      throw new InternalError("Unhandled OSType: " + paramOSType);
    }
    return str1 + "-" + str3;
  }
  
  protected PlatformPropsImpl() {}
  
  public static void initSingleton() {}
}
