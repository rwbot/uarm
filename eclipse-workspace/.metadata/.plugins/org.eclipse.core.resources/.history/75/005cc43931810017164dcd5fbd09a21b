package g4p_controls;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import processing.core.PApplet;
import processing.core.PImage;

public class GAnimIcon
  extends GIcon
{
  protected GTimer timer;
  protected Map<String, AnimClip> clips = new HashMap();
  protected AnimClip anim_clip = null;
  
  protected GAnimIcon() {}
  
  public GAnimIcon(PApplet paramPApplet, String paramString, int paramInt1, int paramInt2, int paramInt3)
  {
    super(paramPApplet, paramString, paramInt1, paramInt2);
    anim_clip = new AnimClip("ALL", 0, img.length - 1, paramInt3);
    clips.put(anim_clip.id, anim_clip);
    timer = new GTimer(app, this, "advanceAnimationFrame", 10, paramInt3);
  }
  
  public GAnimIcon(PApplet paramPApplet, PImage paramPImage, int paramInt1, int paramInt2, int paramInt3)
  {
    super(paramPApplet, paramPImage, paramInt1, paramInt2);
    anim_clip = new AnimClip("ALL", 0, img.length - 1, paramInt3);
    clips.put(anim_clip.id, anim_clip);
    timer = new GTimer(app, this, "advanceAnimationFrame", 10, paramInt3);
  }
  
  GAnimIcon me()
  {
    return this;
  }
  
  boolean hasClip(String paramString)
  {
    return clips.containsKey(paramString);
  }
  
  public GAnimIcon copy()
  {
    GAnimIcon localGAnimIcon = new GAnimIcon();
    app = app;
    img = img;
    width = width;
    height = height;
    nbrFrames = nbrFrames;
    clips = new HashMap();
    Iterator localIterator = clips.keySet().iterator();
    while (localIterator.hasNext())
    {
      String str = (String)localIterator.next();
      clips.put(str, ((AnimClip)clips.get(str)).copy());
    }
    anim_clip = ((AnimClip)clips.get(anim_clip.id));
    timer = new GTimer(app, localGAnimIcon, "advanceAnimationFrame", 10, anim_clip.interval);
    return localGAnimIcon;
  }
  
  public GAnimIcon storeAnim(String paramString, int paramInt1, int paramInt2, int paramInt3)
  {
    return storeAnim(paramString, paramInt1, paramInt2, paramInt3, 0);
  }
  
  public GAnimIcon storeAnim(String paramString, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    AnimClip localAnimClip = new AnimClip(paramString, paramInt1, paramInt2, paramInt3, paramInt4);
    clips.put(paramString, localAnimClip);
    return this;
  }
  
  public GAnimIcon animate()
  {
    if (hasClip("ALL")) {
      animate("ALL");
    }
    return this;
  }
  
  public GAnimIcon animate(String paramString)
  {
    AnimClip localAnimClip = (AnimClip)clips.get(paramString);
    if (localAnimClip != null)
    {
      timer.stop();
      anim_clip = localAnimClip;
      currFrame = anim_clip.start;
      timer.setDelay(anim_clip.interval);
      timer.setNbrRepeats(anim_clip.size);
      timer.start(size);
    }
    return this;
  }
  
  public GAnimIcon setInterval(int paramInt)
  {
    if (anim_clip != null)
    {
      anim_clip.interval = paramInt;
      timer.setDelay(paramInt);
    }
    return this;
  }
  
  public GAnimIcon setInterval(String paramString, int paramInt)
  {
    AnimClip localAnimClip = (AnimClip)clips.get(paramString);
    if (localAnimClip != null)
    {
      interval = paramInt;
      if (localAnimClip == anim_clip) {
        timer.setDelay(paramInt);
      }
    }
    return this;
  }
  
  public GAnimIcon start()
  {
    if (!timer.isRunning()) {
      timer.start();
    }
    return this;
  }
  
  public GAnimIcon stop()
  {
    timer.stop();
    return this;
  }
  
  public GAnimIcon setFrame(int paramInt)
  {
    if (!timer.isRunning()) {
      currFrame = (Math.abs(paramInt) % nbrFrames);
    }
    return this;
  }
  
  public void advanceAnimationFrame(GTimer paramGTimer)
  {
    currFrame = (currFrame == anim_clip.end ? anim_clip.start : currFrame + anim_clip.dir);
    if (owner != null) {
      owner.bufferInvalid = true;
    }
  }
  
  protected class AnimClip
  {
    String id;
    int start;
    int end;
    int interval;
    int dir;
    int nLoops;
    int size;
    
    AnimClip copy()
    {
      return new AnimClip(GAnimIcon.this, id, start, end, interval, nLoops);
    }
    
    public AnimClip(String paramString, int paramInt1, int paramInt2, int paramInt3)
    {
      this(paramString, paramInt1, paramInt2, paramInt3, 0);
    }
    
    public AnimClip(String paramString, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      paramInt1 = Math.abs(paramInt1) % nbrFrames;
      paramInt2 = Math.abs(paramInt2) % nbrFrames;
      id = paramString;
      start = paramInt1;
      end = paramInt2;
      interval = paramInt3;
      nLoops = paramInt4;
      dir = (paramInt2 - paramInt1 > 0 ? 1 : paramInt2 == paramInt1 ? 0 : -1);
      size = (Math.abs(paramInt2 - paramInt1) + 1);
      size = (paramInt4 <= 0 ? 0 : paramInt4 * size - 1);
    }
    
    public String toString()
    {
      return id + "  [ " + start + " > " + end + "   step " + dir + "   interval " + interval + "ms ]";
    }
  }
}
