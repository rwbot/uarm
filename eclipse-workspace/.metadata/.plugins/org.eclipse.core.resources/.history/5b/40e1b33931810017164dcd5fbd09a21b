package com.leapmotion.leap;

import java.util.Iterator;



public class ToolList
  extends Interface
  implements Iterable<Tool>
{
  private long swigCPtr;
  
  public ToolList(long paramLong, boolean paramBoolean)
  {
    super(LeapJNI.ToolList_SWIGUpcast(paramLong), paramBoolean);
    swigCPtr = paramLong;
  }
  
  public static long getCPtr(ToolList paramToolList) {
    return paramToolList == null ? 0L : swigCPtr;
  }
  
  protected void finalize() {
    delete();
  }
  
  public synchronized void delete() {
    if (swigCPtr != 0L) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        LeapJNI.delete_ToolList(swigCPtr);
      }
      swigCPtr = 0L;
    }
    super.delete(); }
  
  public class ToolListIterator implements Iterator<Tool> { public ToolListIterator() {}
    
    int index = 0;
    
    public boolean hasNext() { return index < count(); }
    
    public Tool next() {
      return get(index++);
    }
    
    public void remove() {}
  }
  
  public Iterator<Tool> iterator() { return new ToolListIterator(); }
  
  public ToolList()
  {
    this(LeapJNI.new_ToolList(), true);
  }
  
  public int count() {
    return LeapJNI.ToolList_count(swigCPtr, this);
  }
  
  public boolean isEmpty() {
    return LeapJNI.ToolList_isEmpty(swigCPtr, this);
  }
  
  public Tool get(int paramInt) {
    return new Tool(LeapJNI.ToolList_get(swigCPtr, this, paramInt), true);
  }
  
  public ToolList append(ToolList paramToolList) {
    return new ToolList(LeapJNI.ToolList_append(swigCPtr, this, getCPtr(paramToolList), paramToolList), false);
  }
  
  public Tool leftmost() {
    return new Tool(LeapJNI.ToolList_leftmost(swigCPtr, this), true);
  }
  
  public Tool rightmost() {
    return new Tool(LeapJNI.ToolList_rightmost(swigCPtr, this), true);
  }
  
  public Tool frontmost() {
    return new Tool(LeapJNI.ToolList_frontmost(swigCPtr, this), true);
  }
}
