package jogamp.common.util;

import com.jogamp.common.util.Bitfield;
import com.jogamp.common.util.Bitfield.Util;































public class Int32Bitfield
  implements Bitfield
{
  private static final int UNIT_SIZE = 32;
  private int storage;
  
  public Int32Bitfield()
  {
    storage = 0;
  }
  
  public int size()
  {
    return 32;
  }
  
  public final void clearField(boolean paramBoolean)
  {
    if (paramBoolean) {
      storage = -1;
    } else {
      storage = 0;
    }
  }
  
  private static final void check(int paramInt1, int paramInt2) throws IndexOutOfBoundsException {
    if ((0 > paramInt2) || (paramInt2 >= paramInt1)) {
      throw new IndexOutOfBoundsException("Bitnum should be within [0.." + (paramInt1 - 1) + "], but is " + paramInt2);
    }
  }
  
  public final int get32(int paramInt1, int paramInt2) throws IndexOutOfBoundsException
  {
    if ((0 > paramInt2) || (paramInt2 > 32)) {
      throw new IndexOutOfBoundsException("length should be within [0..32], but is " + paramInt2);
    }
    check(32 - paramInt2 + 1, paramInt1);
    int i = 32 - paramInt1;
    if (32 == i)
    {
      j = Bitfield.Util.getBitMask(paramInt2);
      return j & storage;
    }
    
    int j = Math.min(paramInt2, i);
    int k = (1 << j) - 1;
    return k & storage >>> paramInt1;
  }
  
  public final void put32(int paramInt1, int paramInt2, int paramInt3) throws IndexOutOfBoundsException
  {
    if ((0 > paramInt2) || (paramInt2 > 32)) {
      throw new IndexOutOfBoundsException("length should be within [0..32], but is " + paramInt2);
    }
    check(32 - paramInt2 + 1, paramInt1);
    int i = 32 - paramInt1;
    int j; if (32 == i)
    {
      j = Bitfield.Util.getBitMask(paramInt2);
      storage = ((j ^ 0xFFFFFFFF) & storage | j & paramInt3);
    }
    else
    {
      j = Math.min(paramInt2, i);
      int k = (1 << j) - 1;
      storage = ((k << paramInt1 ^ 0xFFFFFFFF) & storage | (k & paramInt3) << paramInt1);
    }
  }
  
  public final int copy32(int paramInt1, int paramInt2, int paramInt3) throws IndexOutOfBoundsException
  {
    int i = get32(paramInt1, paramInt3);
    put32(paramInt2, paramInt3, i);
    return i;
  }
  
  public final boolean get(int paramInt) throws IndexOutOfBoundsException
  {
    check(32, paramInt);
    return 0 != (storage & 1 << paramInt);
  }
  
  public final boolean put(int paramInt, boolean paramBoolean) throws IndexOutOfBoundsException {
    check(32, paramInt);
    int i = 1 << paramInt;
    boolean bool = 0 != (storage & i);
    if (bool != paramBoolean) {
      if (paramBoolean) {
        storage |= i;
      } else {
        storage &= (i ^ 0xFFFFFFFF);
      }
    }
    return bool;
  }
  
  public final void set(int paramInt) throws IndexOutOfBoundsException {
    check(32, paramInt);
    int i = 1 << paramInt;
    storage |= i;
  }
  
  public final void clear(int paramInt) throws IndexOutOfBoundsException {
    check(32, paramInt);
    int i = 1 << paramInt;
    storage &= (i ^ 0xFFFFFFFF);
  }
  
  public final boolean copy(int paramInt1, int paramInt2) throws IndexOutOfBoundsException {
    check(32, paramInt1);
    check(32, paramInt2);
    
    boolean bool = 0 != (storage & 1 << paramInt1);
    
    int i = 1 << paramInt2;
    if (bool) {
      storage |= i;
    } else {
      storage &= (i ^ 0xFFFFFFFF);
    }
    return bool;
  }
  
  public int bitCount()
  {
    return Bitfield.Util.bitCount(storage);
  }
}
