package processing.core;

import java.io.BufferedReader;
import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;













public class PShapeOBJ
  extends PShape
{
  public PShapeOBJ(PApplet parent, String filename)
  {
    this(parent, parent.createReader(filename), getBasePath(parent, filename));
  }
  
  public PShapeOBJ(PApplet parent, BufferedReader reader) {
    this(parent, reader, "");
  }
  
  public PShapeOBJ(PApplet parent, BufferedReader reader, String basePath) {
    ArrayList<OBJFace> faces = new ArrayList();
    ArrayList<OBJMaterial> materials = new ArrayList();
    ArrayList<PVector> coords = new ArrayList();
    ArrayList<PVector> normals = new ArrayList();
    ArrayList<PVector> texcoords = new ArrayList();
    parseOBJ(parent, basePath, reader, 
      faces, materials, coords, normals, texcoords);
    

    parent = null;
    family = 0;
    addChildren(faces, materials, coords, normals, texcoords);
  }
  



  protected PShapeOBJ(OBJFace face, OBJMaterial mtl, ArrayList<PVector> coords, ArrayList<PVector> normals, ArrayList<PVector> texcoords)
  {
    family = 103;
    if (vertIdx.size() == 3) {
      kind = 9;
    } else if (vertIdx.size() == 4) {
      kind = 17;
    } else {
      kind = 20;
    }
    
    stroke = false;
    fill = true;
    

    fillColor = rgbaValue(kd);
    ambientColor = rgbaValue(ka);
    specularColor = rgbaValue(ks);
    shininess = ns;
    if (kdMap != null)
    {

      tintColor = rgbaValue(kd, d);
    }
    
    vertexCount = vertIdx.size();
    vertices = new float[vertexCount][12];
    for (int j = 0; j < vertIdx.size(); j++)
    {
      PVector tex;
      PVector norms;
      PVector vert = norms = tex = null;
      
      int vertIdx = ((Integer)vertIdx.get(j)).intValue() - 1;
      vert = (PVector)coords.get(vertIdx);
      
      if (j < normIdx.size()) {
        int normIdx = ((Integer)normIdx.get(j)).intValue() - 1;
        if (-1 < normIdx) {
          norms = (PVector)normals.get(normIdx);
        }
      }
      
      if (j < texIdx.size()) {
        int texIdx = ((Integer)texIdx.get(j)).intValue() - 1;
        if (-1 < texIdx) {
          tex = (PVector)texcoords.get(texIdx);
        }
      }
      
      vertices[j][0] = x;
      vertices[j][1] = y;
      vertices[j][2] = z;
      
      vertices[j][3] = kd.x;
      vertices[j][4] = kd.y;
      vertices[j][5] = kd.z;
      vertices[j][6] = 1.0F;
      
      if (norms != null) {
        vertices[j][9] = x;
        vertices[j][10] = y;
        vertices[j][11] = z;
      }
      
      if (tex != null) {
        vertices[j][7] = x;
        vertices[j][8] = y;
      }
      
      if ((mtl != null) && (kdMap != null)) {
        image = kdMap;
      }
    }
  }
  




  protected void addChildren(ArrayList<OBJFace> faces, ArrayList<OBJMaterial> materials, ArrayList<PVector> coords, ArrayList<PVector> normals, ArrayList<PVector> texcoords)
  {
    int mtlIdxCur = -1;
    OBJMaterial mtl = null;
    for (int i = 0; i < faces.size(); i++) {
      OBJFace face = (OBJFace)faces.get(i);
      

      if ((mtlIdxCur != matIdx) || (matIdx == -1))
      {
        mtlIdxCur = PApplet.max(0, matIdx);
        mtl = (OBJMaterial)materials.get(mtlIdxCur);
      }
      

      PShape child = new PShapeOBJ(face, mtl, coords, normals, texcoords);
      addChild(child);
    }
  }
  






  protected static void parseOBJ(PApplet parent, String path, BufferedReader reader, ArrayList<OBJFace> faces, ArrayList<OBJMaterial> materials, ArrayList<PVector> coords, ArrayList<PVector> normals, ArrayList<PVector> texcoords)
  {
    Map<String, Integer> mtlTable = new HashMap();
    int mtlIdxCur = -1;
    try {
      boolean readvt;
      boolean readvn;
      boolean readv = readvn = readvt = 0;
      
      String gname = "object";
      String line; while ((line = reader.readLine()) != null)
      {
        String line = line.trim();
        if (!line.equals("")) { if (line.indexOf('#') == 0) {
            continue;
          }
          












          while (line.contains("\\")) {
            line = line.split("\\\\")[0];
            String s = reader.readLine();
            if (s != null) {
              line = line + s;
            }
          }
          
          String[] parts = line.split("\\s+");
          
          if (parts.length > 0)
            if (parts[0].equals("v"))
            {
              PVector tempv = new PVector(Float.valueOf(parts[1]).floatValue(), 
                Float.valueOf(parts[2]).floatValue(), 
                Float.valueOf(parts[3]).floatValue());
              coords.add(tempv);
              readv = true;
            } else if (parts[0].equals("vn"))
            {
              PVector tempn = new PVector(Float.valueOf(parts[1]).floatValue(), 
                Float.valueOf(parts[2]).floatValue(), 
                Float.valueOf(parts[3]).floatValue());
              normals.add(tempn);
              readvn = true;
            } else if (parts[0].equals("vt"))
            {

              PVector tempv = new PVector(Float.valueOf(parts[1]).floatValue(), 
                1.0F - Float.valueOf(parts[2])
                .floatValue());
              texcoords.add(tempv);
              readvt = true;
            } else if (!parts[0].equals("o"))
            {
              if (parts[0].equals("mtllib")) {
                if (parts[1] != null) {
                  String fn = parts[1];
                  if ((fn.indexOf(File.separator) == -1) && (!path.equals("")))
                  {
                    fn = path + File.separator + fn;
                  }
                  BufferedReader mreader = parent.createReader(fn);
                  if (mreader != null) {
                    parseMTL(parent, fn, path, mreader, materials, mtlTable);
                    mreader.close();
                  }
                }
              } else if (parts[0].equals("g")) {
                gname = 1 < parts.length ? parts[1] : "";
              } else if (parts[0].equals("usemtl"))
              {

                if (parts[1] != null) {
                  String mtlname = parts[1];
                  if (mtlTable.containsKey(mtlname)) {
                    Integer tempInt = (Integer)mtlTable.get(mtlname);
                    mtlIdxCur = tempInt.intValue();
                  } else {
                    mtlIdxCur = -1;
                  }
                }
              } else if (parts[0].equals("f"))
              {
                OBJFace face = new OBJFace();
                matIdx = mtlIdxCur;
                name = gname;
                
                for (int i = 1; i < parts.length; i++) {
                  String seg = parts[i];
                  
                  if (seg.indexOf("/") > 0) {
                    String[] forder = seg.split("/");
                    
                    if (forder.length > 2)
                    {
                      if ((forder[0].length() > 0) && (readv)) {
                        vertIdx.add(Integer.valueOf(forder[0]));
                      }
                      
                      if ((forder[1].length() > 0) && (readvt)) {
                        texIdx.add(Integer.valueOf(forder[1]));
                      }
                      
                      if ((forder[2].length() > 0) && (readvn)) {
                        normIdx.add(Integer.valueOf(forder[2]));
                      }
                    } else if (forder.length > 1)
                    {
                      if ((forder[0].length() > 0) && (readv)) {
                        vertIdx.add(Integer.valueOf(forder[0]));
                      }
                      
                      if (forder[1].length() > 0) {
                        if (readvt) {
                          texIdx.add(Integer.valueOf(forder[1]));
                        } else if (readvn) {
                          normIdx.add(Integer.valueOf(forder[1]));
                        }
                        
                      }
                    }
                    else if (forder.length > 0)
                    {
                      if ((forder[0].length() > 0) && (readv)) {
                        vertIdx.add(Integer.valueOf(forder[0]));
                      }
                      
                    }
                  }
                  else if ((seg.length() > 0) && (readv)) {
                    vertIdx.add(Integer.valueOf(seg));
                  }
                }
                

                faces.add(face);
              }
            }
        }
      }
      if (materials.size() == 0)
      {
        OBJMaterial defMtl = new OBJMaterial();
        materials.add(defMtl);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }
  



  protected static void parseMTL(PApplet parent, String mtlfn, String path, BufferedReader reader, ArrayList<OBJMaterial> materials, Map<String, Integer> materialsHash)
  {
    try
    {
      OBJMaterial currentMtl = null;
      String line; while ((line = reader.readLine()) != null)
      {
        String line = line.trim();
        String[] parts = line.split("\\s+");
        if (parts.length > 0)
        {
          if (parts[0].equals("newmtl"))
          {
            String mtlname = parts[1];
            currentMtl = addMaterial(mtlname, materials, materialsHash);
          } else {
            if (currentMtl == null) {
              currentMtl = addMaterial("material" + materials.size(), 
                materials, materialsHash);
            }
            if ((parts[0].equals("map_Kd")) && (parts.length > 1))
            {
              String texname = parts[1];
              if ((texname.indexOf(File.separator) == -1) && (!path.equals("")))
              {
                texname = path + File.separator + texname;
              }
              
              File file = new File(parent.dataPath(texname));
              if (file.exists()) {
                kdMap = parent.loadImage(texname);
              } else {
                System.err.println("The texture map \"" + texname + "\" " + 
                  "in the materials definition file \"" + mtlfn + "\" " + 
                  "is missing or inaccessible, make sure " + 
                  "the URL is valid or that the file has been " + 
                  "added to your sketch and is readable.");
              }
            } else if ((parts[0].equals("Ka")) && (parts.length > 3))
            {
              ka.x = Float.valueOf(parts[1]).floatValue();
              ka.y = Float.valueOf(parts[2]).floatValue();
              ka.z = Float.valueOf(parts[3]).floatValue();
            } else if ((parts[0].equals("Kd")) && (parts.length > 3))
            {
              kd.x = Float.valueOf(parts[1]).floatValue();
              kd.y = Float.valueOf(parts[2]).floatValue();
              kd.z = Float.valueOf(parts[3]).floatValue();
            } else if ((parts[0].equals("Ks")) && (parts.length > 3))
            {
              ks.x = Float.valueOf(parts[1]).floatValue();
              ks.y = Float.valueOf(parts[2]).floatValue();
              ks.z = Float.valueOf(parts[3]).floatValue();
            } else if (((parts[0].equals("d")) || 
              (parts[0].equals("Tr"))) && (parts.length > 1))
            {
              d = Float.valueOf(parts[1]).floatValue();
            } else if ((parts[0].equals("Ns")) && (parts.length > 1))
            {
              ns = Float.valueOf(parts[1]).floatValue();
            }
          }
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
  

  protected static OBJMaterial addMaterial(String mtlname, ArrayList<OBJMaterial> materials, Map<String, Integer> materialsHash)
  {
    OBJMaterial currentMtl = new OBJMaterial(mtlname);
    materialsHash.put(mtlname, Integer.valueOf(materials.size()));
    materials.add(currentMtl);
    return currentMtl;
  }
  
  protected static int rgbaValue(PVector color) {
    return 0xFF000000 | (int)(x * 255.0F) << 16 | 
      (int)(y * 255.0F) << 8 | 
      (int)(z * 255.0F);
  }
  
  protected static int rgbaValue(PVector color, float alpha)
  {
    return (int)(alpha * 255.0F) << 24 | 
      (int)(x * 255.0F) << 16 | 
      (int)(y * 255.0F) << 8 | 
      (int)(z * 255.0F);
  }
  
  protected static class OBJFace
  {
    ArrayList<Integer> vertIdx;
    ArrayList<Integer> texIdx;
    ArrayList<Integer> normIdx;
    int matIdx;
    String name;
    
    OBJFace()
    {
      vertIdx = new ArrayList();
      texIdx = new ArrayList();
      normIdx = new ArrayList();
      matIdx = -1;
      name = "";
    }
  }
  

  protected static String getBasePath(PApplet parent, String filename)
  {
    File file = new File(parent.dataPath(filename));
    if (!file.exists()) {
      file = parent.sketchFile(filename);
    }
    String absolutePath = file.getAbsolutePath();
    return absolutePath.substring(0, 
      absolutePath.lastIndexOf(File.separator));
  }
  
  protected static class OBJMaterial
  {
    String name;
    PVector ka;
    PVector kd;
    PVector ks;
    float d;
    float ns;
    PImage kdMap;
    
    OBJMaterial()
    {
      this("default");
    }
    
    OBJMaterial(String name) {
      this.name = name;
      ka = new PVector(0.5F, 0.5F, 0.5F);
      kd = new PVector(0.5F, 0.5F, 0.5F);
      ks = new PVector(0.5F, 0.5F, 0.5F);
      d = 1.0F;
      ns = 0.0F;
      kdMap = null;
    }
  }
}
