package com.jogamp.opengl.glu.gl2;

import com.jogamp.common.nio.Buffers;
import com.jogamp.gluegen.runtime.opengl.GLProcAddressResolver;
import com.jogamp.opengl.GL;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.GLContext;
import com.jogamp.opengl.GLException;
import com.jogamp.opengl.glu.GLU;
import com.jogamp.opengl.glu.GLUnurbs;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;
import java.security.AccessController;
import java.security.PrivilegedAction;
import jogamp.opengl.GLContextImpl;
import jogamp.opengl.GLDynamicLookupHelper;
import jogamp.opengl.gl2.ProjectDouble;
import jogamp.opengl.glu.gl2.nurbs.GLUgl2nurbsImpl;
import jogamp.opengl.glu.mipmap.Mipmap;


public class GLUgl2
  extends GLU
{
  private int gluBuild1DMipmapLevelsC(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, Buffer paramBuffer)
  {
    boolean bool = Buffers.isDirect(paramBuffer);
    long l = getGLUProcAddressTable_addressof_gluBuild1DMipmapLevels;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "gluBuild1DMipmapLevels" }));
    }
    return dispatch_gluBuild1DMipmapLevelsC1(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8, bool ? paramBuffer : Buffers.getArray(paramBuffer), bool ? Buffers.getDirectBufferByteOffset(paramBuffer) : Buffers.getIndirectBufferByteOffset(paramBuffer), bool, l);
  }
  






  private int gluBuild1DMipmapsC(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, Buffer paramBuffer)
  {
    boolean bool = Buffers.isDirect(paramBuffer);
    long l = getGLUProcAddressTable_addressof_gluBuild1DMipmaps;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "gluBuild1DMipmaps" }));
    }
    return dispatch_gluBuild1DMipmapsC1(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, bool ? paramBuffer : Buffers.getArray(paramBuffer), bool ? Buffers.getDirectBufferByteOffset(paramBuffer) : Buffers.getIndirectBufferByteOffset(paramBuffer), bool, l);
  }
  






  private int gluBuild2DMipmapLevelsC(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, int paramInt9, Buffer paramBuffer)
  {
    boolean bool = Buffers.isDirect(paramBuffer);
    long l = getGLUProcAddressTable_addressof_gluBuild2DMipmapLevels;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "gluBuild2DMipmapLevels" }));
    }
    return dispatch_gluBuild2DMipmapLevelsC1(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8, paramInt9, bool ? paramBuffer : Buffers.getArray(paramBuffer), bool ? Buffers.getDirectBufferByteOffset(paramBuffer) : Buffers.getIndirectBufferByteOffset(paramBuffer), bool, l);
  }
  






  private int gluBuild2DMipmapsC(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, Buffer paramBuffer)
  {
    boolean bool = Buffers.isDirect(paramBuffer);
    long l = getGLUProcAddressTable_addressof_gluBuild2DMipmaps;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "gluBuild2DMipmaps" }));
    }
    return dispatch_gluBuild2DMipmapsC1(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, bool ? paramBuffer : Buffers.getArray(paramBuffer), bool ? Buffers.getDirectBufferByteOffset(paramBuffer) : Buffers.getIndirectBufferByteOffset(paramBuffer), bool, l);
  }
  






  private int gluBuild3DMipmapLevelsC(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, int paramInt9, int paramInt10, Buffer paramBuffer)
  {
    boolean bool = Buffers.isDirect(paramBuffer);
    long l = getGLUProcAddressTable_addressof_gluBuild3DMipmapLevels;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "gluBuild3DMipmapLevels" }));
    }
    return dispatch_gluBuild3DMipmapLevelsC1(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8, paramInt9, paramInt10, bool ? paramBuffer : Buffers.getArray(paramBuffer), bool ? Buffers.getDirectBufferByteOffset(paramBuffer) : Buffers.getIndirectBufferByteOffset(paramBuffer), bool, l);
  }
  






  private int gluBuild3DMipmapsC(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, Buffer paramBuffer)
  {
    boolean bool = Buffers.isDirect(paramBuffer);
    long l = getGLUProcAddressTable_addressof_gluBuild3DMipmaps;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "gluBuild3DMipmaps" }));
    }
    return dispatch_gluBuild3DMipmapsC1(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, bool ? paramBuffer : Buffers.getArray(paramBuffer), bool ? Buffers.getDirectBufferByteOffset(paramBuffer) : Buffers.getIndirectBufferByteOffset(paramBuffer), bool, l);
  }
  







  private int gluScaleImageC(int paramInt1, int paramInt2, int paramInt3, int paramInt4, Buffer paramBuffer1, int paramInt5, int paramInt6, int paramInt7, Buffer paramBuffer2)
  {
    boolean bool1 = Buffers.isDirect(paramBuffer1);
    boolean bool2 = Buffers.isDirect(paramBuffer2);
    long l = getGLUProcAddressTable_addressof_gluScaleImage;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "gluScaleImage" }));
    }
    return dispatch_gluScaleImageC1(paramInt1, paramInt2, paramInt3, paramInt4, bool1 ? paramBuffer1 : Buffers.getArray(paramBuffer1), bool1 ? Buffers.getDirectBufferByteOffset(paramBuffer1) : Buffers.getIndirectBufferByteOffset(paramBuffer1), bool1, paramInt5, paramInt6, paramInt7, bool2 ? paramBuffer2 : Buffers.getArray(paramBuffer2), bool2 ? Buffers.getDirectBufferByteOffset(paramBuffer2) : Buffers.getIndirectBufferByteOffset(paramBuffer2), bool2, l);
  }
  







  private static boolean useJavaMipmapCode = true;
  private final ProjectDouble project;
  
  static { AccessController.doPrivileged(new PrivilegedAction() {
      public Object run() {
        String str = System.getProperty("jogl.glu.nojava");
        if ((str != null) && (!str.toLowerCase().equals("false"))) {
          GLUgl2.access$002(false);
        }
        



        return null;
      }
    }); }
  


















  public GLUgl2()
  {
    project = new ProjectDouble();
  }
  


  public static final GL2 getCurrentGL2()
    throws GLException
  {
    GLContext localGLContext = GLContext.getCurrent();
    if (localGLContext == null) {
      throw new GLException("No OpenGL context current on this thread");
    }
    return localGLContext.getGL().getGL2();
  }
  
































  private static GLUgl2ProcAddressTable gluProcAddressTable;
  






























  public final boolean isFunctionAvailable(String paramString)
  {
    if (useJavaMipmapCode)
    {
      return true;
    }
    return gluProcAddressTable.getAddressFor(paramString) != 0L;
  }
  





  public final void gluOrtho2D(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4)
  {
    project.gluOrtho2D(getCurrentGL2(), paramFloat1, paramFloat2, paramFloat3, paramFloat4);
  }
  
  public final void gluOrtho2D(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4)
  {
    project.gluOrtho2D(getCurrentGL2(), paramDouble1, paramDouble2, paramDouble3, paramDouble4);
  }
  
  public final void gluPerspective(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4) {
    project.gluPerspective(getCurrentGL2(), paramFloat1, paramFloat2, paramFloat3, paramFloat4);
  }
  
  public final void gluPerspective(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4) {
    project.gluPerspective(getCurrentGL2(), paramDouble1, paramDouble2, paramDouble3, paramDouble4);
  }
  
  public final void gluLookAt(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, float paramFloat5, float paramFloat6, float paramFloat7, float paramFloat8, float paramFloat9) {
    project.gluLookAt(getCurrentGL2(), paramFloat1, paramFloat2, paramFloat3, paramFloat4, paramFloat5, paramFloat6, paramFloat7, paramFloat8, paramFloat9);
  }
  
  public final void gluLookAt(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, double paramDouble5, double paramDouble6, double paramDouble7, double paramDouble8, double paramDouble9) {
    project.gluLookAt(getCurrentGL2(), paramDouble1, paramDouble2, paramDouble3, paramDouble4, paramDouble5, paramDouble6, paramDouble7, paramDouble8, paramDouble9);
  }
  


  public final boolean gluProject(double paramDouble1, double paramDouble2, double paramDouble3, double[] paramArrayOfDouble1, int paramInt1, double[] paramArrayOfDouble2, int paramInt2, int[] paramArrayOfInt, int paramInt3, double[] paramArrayOfDouble3, int paramInt4)
  {
    return project.gluProject(paramDouble1, paramDouble2, paramDouble3, paramArrayOfDouble1, paramInt1, paramArrayOfDouble2, paramInt2, paramArrayOfInt, paramInt3, paramArrayOfDouble3, paramInt4);
  }
  


  public final boolean gluProject(double paramDouble1, double paramDouble2, double paramDouble3, DoubleBuffer paramDoubleBuffer1, DoubleBuffer paramDoubleBuffer2, IntBuffer paramIntBuffer, DoubleBuffer paramDoubleBuffer3)
  {
    return project.gluProject(paramDouble1, paramDouble2, paramDouble3, paramDoubleBuffer1, paramDoubleBuffer2, paramIntBuffer, paramDoubleBuffer3);
  }
  


  public final boolean gluUnProject(double paramDouble1, double paramDouble2, double paramDouble3, double[] paramArrayOfDouble1, int paramInt1, double[] paramArrayOfDouble2, int paramInt2, int[] paramArrayOfInt, int paramInt3, double[] paramArrayOfDouble3, int paramInt4)
  {
    return project.gluUnProject(paramDouble1, paramDouble2, paramDouble3, paramArrayOfDouble1, paramInt1, paramArrayOfDouble2, paramInt2, paramArrayOfInt, paramInt3, paramArrayOfDouble3, paramInt4);
  }
  


  public final boolean gluUnProject(double paramDouble1, double paramDouble2, double paramDouble3, DoubleBuffer paramDoubleBuffer1, DoubleBuffer paramDoubleBuffer2, IntBuffer paramIntBuffer, DoubleBuffer paramDoubleBuffer3)
  {
    return project.gluUnProject(paramDouble1, paramDouble2, paramDouble3, paramDoubleBuffer1, paramDoubleBuffer2, paramIntBuffer, paramDoubleBuffer3);
  }
  


  public final boolean gluUnProject4(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, double[] paramArrayOfDouble1, int paramInt1, double[] paramArrayOfDouble2, int paramInt2, int[] paramArrayOfInt, int paramInt3, double paramDouble5, double paramDouble6, double[] paramArrayOfDouble3, int paramInt4)
  {
    return project.gluUnProject4(paramDouble1, paramDouble2, paramDouble3, paramDouble4, paramArrayOfDouble1, paramInt1, paramArrayOfDouble2, paramInt2, paramArrayOfInt, paramInt3, paramDouble5, paramDouble6, paramArrayOfDouble3, paramInt4);
  }
  


  public final boolean gluUnProject4(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, DoubleBuffer paramDoubleBuffer1, DoubleBuffer paramDoubleBuffer2, IntBuffer paramIntBuffer, double paramDouble5, double paramDouble6, DoubleBuffer paramDoubleBuffer3)
  {
    return project.gluUnProject4(paramDouble1, paramDouble2, paramDouble3, paramDouble4, paramDoubleBuffer1, paramDoubleBuffer2, paramIntBuffer, paramDouble5, paramDouble6, paramDoubleBuffer3);
  }
  
  public final void gluPickMatrix(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, int[] paramArrayOfInt, int paramInt) {
    project.gluPickMatrix(getCurrentGL2(), paramDouble1, paramDouble2, paramDouble3, paramDouble4, paramArrayOfInt, paramInt);
  }
  
  public final void gluPickMatrix(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, IntBuffer paramIntBuffer) {
    project.gluPickMatrix(getCurrentGL2(), paramDouble1, paramDouble2, paramDouble3, paramDouble4, paramIntBuffer);
  }
  



  private final ByteBuffer copyToByteBuffer(Buffer paramBuffer)
  {
    if ((paramBuffer instanceof ByteBuffer)) {
      if (paramBuffer.position() == 0) {
        return (ByteBuffer)paramBuffer;
      }
      return Buffers.copyByteBuffer((ByteBuffer)paramBuffer); }
    if ((paramBuffer instanceof ShortBuffer))
      return Buffers.copyShortBufferAsByteBuffer((ShortBuffer)paramBuffer);
    if ((paramBuffer instanceof IntBuffer))
      return Buffers.copyIntBufferAsByteBuffer((IntBuffer)paramBuffer);
    if ((paramBuffer instanceof FloatBuffer)) {
      return Buffers.copyFloatBufferAsByteBuffer((FloatBuffer)paramBuffer);
    }
    throw new IllegalArgumentException("Unsupported buffer type (must be one of byte, short, int, or float)");
  }
  


  private final int gluScaleImageJava(int paramInt1, int paramInt2, int paramInt3, int paramInt4, Buffer paramBuffer1, int paramInt5, int paramInt6, int paramInt7, Buffer paramBuffer2)
  {
    ByteBuffer localByteBuffer1 = null;
    ByteBuffer localByteBuffer2 = null;
    localByteBuffer1 = copyToByteBuffer(paramBuffer1);
    if ((paramBuffer2 instanceof ByteBuffer)) {
      localByteBuffer2 = (ByteBuffer)paramBuffer2;
    } else if ((paramBuffer2 instanceof ShortBuffer)) {
      localByteBuffer2 = Buffers.newDirectByteBuffer(paramBuffer2.remaining() * 2);
    } else if ((paramBuffer2 instanceof IntBuffer)) {
      localByteBuffer2 = Buffers.newDirectByteBuffer(paramBuffer2.remaining() * 4);
    } else if ((paramBuffer2 instanceof FloatBuffer)) {
      localByteBuffer2 = Buffers.newDirectByteBuffer(paramBuffer2.remaining() * 4);
    } else {
      throw new IllegalArgumentException("Unsupported destination buffer type (must be byte, short, int, or float)");
    }
    int i = Mipmap.gluScaleImage(getCurrentGL2(), paramInt1, paramInt2, paramInt3, paramInt4, localByteBuffer1, paramInt5, paramInt6, paramInt7, localByteBuffer2);
    
    if (i == 0) {
      localByteBuffer2.rewind();
      if (localByteBuffer2 != paramBuffer2) {
        if ((paramBuffer2 instanceof ShortBuffer)) {
          ((ShortBuffer)paramBuffer2).put(localByteBuffer2.asShortBuffer());
        } else if ((paramBuffer2 instanceof IntBuffer)) {
          ((IntBuffer)paramBuffer2).put(localByteBuffer2.asIntBuffer());
        } else if ((paramBuffer2 instanceof FloatBuffer)) {
          ((FloatBuffer)paramBuffer2).put(localByteBuffer2.asFloatBuffer());
        } else {
          throw new RuntimeException("Should not reach here");
        }
      }
    }
    return i;
  }
  


  private final int gluBuild1DMipmapLevelsJava(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, Buffer paramBuffer)
  {
    ByteBuffer localByteBuffer = copyToByteBuffer(paramBuffer);
    return Mipmap.gluBuild1DMipmapLevels(getCurrentGL2(), paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8, localByteBuffer);
  }
  


  private final int gluBuild1DMipmapsJava(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, Buffer paramBuffer)
  {
    ByteBuffer localByteBuffer = copyToByteBuffer(paramBuffer);
    return Mipmap.gluBuild1DMipmaps(getCurrentGL2(), paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, localByteBuffer);
  }
  




  private final int gluBuild2DMipmapLevelsJava(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, int paramInt9, Buffer paramBuffer)
  {
    paramBuffer = copyToByteBuffer(paramBuffer);
    return Mipmap.gluBuild2DMipmapLevels(getCurrentGL2(), paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8, paramInt9, paramBuffer);
  }
  


  private final int gluBuild2DMipmapsJava(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, Buffer paramBuffer)
  {
    paramBuffer = copyToByteBuffer(paramBuffer);
    return Mipmap.gluBuild2DMipmaps(getCurrentGL2(), paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramBuffer);
  }
  


  private final int gluBuild3DMipmapLevelsJava(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, int paramInt9, int paramInt10, Buffer paramBuffer)
  {
    ByteBuffer localByteBuffer = copyToByteBuffer(paramBuffer);
    return Mipmap.gluBuild3DMipmapLevels(getCurrentGL2(), paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8, paramInt9, paramInt10, localByteBuffer);
  }
  

  private final int gluBuild3DMipmapsJava(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, Buffer paramBuffer)
  {
    ByteBuffer localByteBuffer = copyToByteBuffer(paramBuffer);
    return Mipmap.gluBuild3DMipmaps(getCurrentGL2(), paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, localByteBuffer);
  }
  







  public final int gluBuild1DMipmapLevels(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, Buffer paramBuffer)
  {
    if (useJavaMipmapCode) {
      return gluBuild1DMipmapLevelsJava(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8, paramBuffer);
    }
    return gluBuild1DMipmapLevelsC(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8, paramBuffer);
  }
  

  public final int gluBuild1DMipmaps(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, Buffer paramBuffer)
  {
    if (useJavaMipmapCode) {
      return gluBuild1DMipmapsJava(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramBuffer);
    }
    return gluBuild1DMipmapsC(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramBuffer);
  }
  

  public final int gluBuild2DMipmapLevels(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, int paramInt9, Buffer paramBuffer)
  {
    if (useJavaMipmapCode) {
      return gluBuild2DMipmapLevelsJava(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8, paramInt9, paramBuffer);
    }
    return gluBuild2DMipmapLevelsC(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8, paramInt9, paramBuffer);
  }
  


  public final int gluBuild2DMipmaps(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, Buffer paramBuffer)
  {
    if (useJavaMipmapCode) {
      return gluBuild2DMipmapsJava(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramBuffer);
    }
    return gluBuild2DMipmapsC(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramBuffer);
  }
  


  public final int gluBuild3DMipmapLevels(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, int paramInt9, int paramInt10, Buffer paramBuffer)
  {
    if (useJavaMipmapCode) {
      return gluBuild3DMipmapLevelsJava(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8, paramInt9, paramInt10, paramBuffer);
    }
    return gluBuild3DMipmapLevelsC(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8, paramInt9, paramInt10, paramBuffer);
  }
  

  public final int gluBuild3DMipmaps(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, Buffer paramBuffer)
  {
    if (useJavaMipmapCode) {
      return gluBuild3DMipmapsJava(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramBuffer);
    }
    return gluBuild3DMipmapsC(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramBuffer);
  }
  


  public final int gluScaleImage(int paramInt1, int paramInt2, int paramInt3, int paramInt4, Buffer paramBuffer1, int paramInt5, int paramInt6, int paramInt7, Buffer paramBuffer2)
  {
    if (useJavaMipmapCode) {
      return gluScaleImageJava(paramInt1, paramInt2, paramInt3, paramInt4, paramBuffer1, paramInt5, paramInt6, paramInt7, paramBuffer2);
    }
    return gluScaleImageC(paramInt1, paramInt2, paramInt3, paramInt4, paramBuffer1, paramInt5, paramInt6, paramInt7, paramBuffer2);
  }
  

















  public final void gluNurbsProperty(GLUnurbs paramGLUnurbs, int paramInt, float paramFloat)
  {
    switch (paramInt)
    {
    }
    
  }
  






  public final GLUnurbs gluNewNurbsRenderer()
  {
    return new GLUgl2nurbsImpl();
  }
  






  public final void gluBeginCurve(GLUnurbs paramGLUnurbs)
  {
    ((GLUgl2nurbsImpl)paramGLUnurbs).bgncurve();
  }
  






  public final void gluBeginSurface(GLUnurbs paramGLUnurbs)
  {
    ((GLUgl2nurbsImpl)paramGLUnurbs).bgnsurface();
  }
  






  public final void gluEndSurface(GLUnurbs paramGLUnurbs)
  {
    ((GLUgl2nurbsImpl)paramGLUnurbs).endsurface();
  }
  




























  public final void gluNurbsSurface(GLUnurbs paramGLUnurbs, int paramInt1, float[] paramArrayOfFloat1, int paramInt2, float[] paramArrayOfFloat2, int paramInt3, int paramInt4, float[] paramArrayOfFloat3, int paramInt5, int paramInt6, int paramInt7)
  {
    ((GLUgl2nurbsImpl)paramGLUnurbs).nurbssurface(paramInt1, paramArrayOfFloat1, paramInt2, paramArrayOfFloat2, paramInt3, paramInt4, paramArrayOfFloat3, paramInt5, paramInt6, paramInt7);
  }
  




















  public final void gluNurbsCurve(GLUnurbs paramGLUnurbs, int paramInt1, float[] paramArrayOfFloat1, int paramInt2, float[] paramArrayOfFloat2, int paramInt3, int paramInt4)
  {
    switch (paramInt4)
    {
    }
    int i = paramInt4;
    

    ((GLUgl2nurbsImpl)paramGLUnurbs).nurbscurve(paramInt1, paramArrayOfFloat1, paramInt2, paramArrayOfFloat2, paramInt3, i);
  }
  






  public final void gluEndCurve(GLUnurbs paramGLUnurbs)
  {
    ((GLUgl2nurbsImpl)paramGLUnurbs).endcurve();
  }
  





  private static final GLUgl2ProcAddressTable getGLUProcAddressTable()
  {
    if (gluProcAddressTable == null) {
      GLContext localGLContext = GLContext.getCurrent();
      if (localGLContext == null) {
        throw new GLException("No OpenGL context current on this thread");
      }
      GLDynamicLookupHelper localGLDynamicLookupHelper = ((GLContextImpl)localGLContext).getGLDynamicLookupHelper();
      localGLDynamicLookupHelper.loadGLULibrary();
      GLUgl2ProcAddressTable localGLUgl2ProcAddressTable = new GLUgl2ProcAddressTable(new GLProcAddressResolver());
      localGLUgl2ProcAddressTable.reset(localGLDynamicLookupHelper);
      gluProcAddressTable = localGLUgl2ProcAddressTable;
    }
    return gluProcAddressTable;
  }
  
  private native int dispatch_gluBuild1DMipmapLevelsC1(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, Object paramObject, int paramInt9, boolean paramBoolean, long paramLong);
  
  private native int dispatch_gluBuild1DMipmapsC1(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, Object paramObject, int paramInt6, boolean paramBoolean, long paramLong);
  
  private native int dispatch_gluBuild2DMipmapLevelsC1(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, int paramInt9, Object paramObject, int paramInt10, boolean paramBoolean, long paramLong);
  
  private native int dispatch_gluBuild2DMipmapsC1(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, Object paramObject, int paramInt7, boolean paramBoolean, long paramLong);
  
  private native int dispatch_gluBuild3DMipmapLevelsC1(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, int paramInt9, int paramInt10, Object paramObject, int paramInt11, boolean paramBoolean, long paramLong);
  
  private native int dispatch_gluBuild3DMipmapsC1(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, Object paramObject, int paramInt8, boolean paramBoolean, long paramLong);
  
  private native int dispatch_gluScaleImageC1(int paramInt1, int paramInt2, int paramInt3, int paramInt4, Object paramObject1, int paramInt5, boolean paramBoolean1, int paramInt6, int paramInt7, int paramInt8, Object paramObject2, int paramInt9, boolean paramBoolean2, long paramLong);
}
