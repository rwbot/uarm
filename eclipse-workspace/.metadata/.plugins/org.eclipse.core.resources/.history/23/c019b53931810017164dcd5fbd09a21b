package com.leapmotion.leap;




public class Hand
  extends Interface
{
  private long swigCPtr;
  


  public Hand(long paramLong, boolean paramBoolean)
  {
    super(LeapJNI.Hand_SWIGUpcast(paramLong), paramBoolean);
    swigCPtr = paramLong;
  }
  
  public static long getCPtr(Hand paramHand) {
    return paramHand == null ? 0L : swigCPtr;
  }
  
  protected void finalize() {
    delete();
  }
  
  public synchronized void delete() {
    if (swigCPtr != 0L) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        LeapJNI.delete_Hand(swigCPtr);
      }
      swigCPtr = 0L;
    }
    super.delete();
  }
  
  public Hand() {
    this(LeapJNI.new_Hand(), true);
  }
  
  public int id() {
    return LeapJNI.Hand_id(swigCPtr, this);
  }
  
  public Frame frame() {
    return new Frame(LeapJNI.Hand_frame(swigCPtr, this), true);
  }
  
  public PointableList pointables() {
    return new PointableList(LeapJNI.Hand_pointables(swigCPtr, this), true);
  }
  
  public Pointable pointable(int paramInt) {
    return new Pointable(LeapJNI.Hand_pointable(swigCPtr, this, paramInt), true);
  }
  
  public FingerList fingers() {
    return new FingerList(LeapJNI.Hand_fingers(swigCPtr, this), true);
  }
  
  public Finger finger(int paramInt) {
    return new Finger(LeapJNI.Hand_finger(swigCPtr, this, paramInt), true);
  }
  
  public ToolList tools() {
    return new ToolList(LeapJNI.Hand_tools(swigCPtr, this), true);
  }
  
  public Tool tool(int paramInt) {
    return new Tool(LeapJNI.Hand_tool(swigCPtr, this, paramInt), true);
  }
  
  public Vector palmPosition() {
    return new Vector(LeapJNI.Hand_palmPosition(swigCPtr, this), true);
  }
  
  public Vector stabilizedPalmPosition() {
    return new Vector(LeapJNI.Hand_stabilizedPalmPosition(swigCPtr, this), true);
  }
  
  public Vector palmVelocity() {
    return new Vector(LeapJNI.Hand_palmVelocity(swigCPtr, this), true);
  }
  
  public Vector palmNormal() {
    return new Vector(LeapJNI.Hand_palmNormal(swigCPtr, this), true);
  }
  
  public float palmWidth() {
    return LeapJNI.Hand_palmWidth(swigCPtr, this);
  }
  
  public Vector direction() {
    return new Vector(LeapJNI.Hand_direction(swigCPtr, this), true);
  }
  
  public Matrix basis() {
    return new Matrix(LeapJNI.Hand_basis(swigCPtr, this), true);
  }
  
  public Arm arm() {
    return new Arm(LeapJNI.Hand_arm(swigCPtr, this), true);
  }
  
  public Vector wristPosition() {
    return new Vector(LeapJNI.Hand_wristPosition(swigCPtr, this), true);
  }
  
  public Vector sphereCenter() {
    return new Vector(LeapJNI.Hand_sphereCenter(swigCPtr, this), true);
  }
  
  public float sphereRadius() {
    return LeapJNI.Hand_sphereRadius(swigCPtr, this);
  }
  
  public float pinchStrength() {
    return LeapJNI.Hand_pinchStrength(swigCPtr, this);
  }
  
  public float grabStrength() {
    return LeapJNI.Hand_grabStrength(swigCPtr, this);
  }
  
  public Vector translation(Frame paramFrame) {
    return new Vector(LeapJNI.Hand_translation(swigCPtr, this, Frame.getCPtr(paramFrame), paramFrame), true);
  }
  
  public float translationProbability(Frame paramFrame) {
    return LeapJNI.Hand_translationProbability(swigCPtr, this, Frame.getCPtr(paramFrame), paramFrame);
  }
  
  public Vector rotationAxis(Frame paramFrame) {
    return new Vector(LeapJNI.Hand_rotationAxis(swigCPtr, this, Frame.getCPtr(paramFrame), paramFrame), true);
  }
  
  public float rotationAngle(Frame paramFrame) {
    return LeapJNI.Hand_rotationAngle__SWIG_0(swigCPtr, this, Frame.getCPtr(paramFrame), paramFrame);
  }
  
  public float rotationAngle(Frame paramFrame, Vector paramVector) {
    return LeapJNI.Hand_rotationAngle__SWIG_1(swigCPtr, this, Frame.getCPtr(paramFrame), paramFrame, Vector.getCPtr(paramVector), paramVector);
  }
  
  public Matrix rotationMatrix(Frame paramFrame) {
    return new Matrix(LeapJNI.Hand_rotationMatrix(swigCPtr, this, Frame.getCPtr(paramFrame), paramFrame), true);
  }
  
  public float rotationProbability(Frame paramFrame) {
    return LeapJNI.Hand_rotationProbability(swigCPtr, this, Frame.getCPtr(paramFrame), paramFrame);
  }
  
  public float scaleFactor(Frame paramFrame) {
    return LeapJNI.Hand_scaleFactor(swigCPtr, this, Frame.getCPtr(paramFrame), paramFrame);
  }
  
  public float scaleProbability(Frame paramFrame) {
    return LeapJNI.Hand_scaleProbability(swigCPtr, this, Frame.getCPtr(paramFrame), paramFrame);
  }
  
  public float timeVisible() {
    return LeapJNI.Hand_timeVisible(swigCPtr, this);
  }
  
  public float confidence() {
    return LeapJNI.Hand_confidence(swigCPtr, this);
  }
  
  public boolean isLeft() {
    return LeapJNI.Hand_isLeft(swigCPtr, this);
  }
  
  public boolean isRight() {
    return LeapJNI.Hand_isRight(swigCPtr, this);
  }
  
  public boolean isValid() {
    return LeapJNI.Hand_isValid(swigCPtr, this);
  }
  
  public static Hand invalid() {
    return new Hand(LeapJNI.Hand_invalid(), false);
  }
  
  public boolean equals(Hand paramHand) {
    return LeapJNI.Hand_equals(swigCPtr, this, getCPtr(paramHand), paramHand);
  }
  
  public String toString() {
    return LeapJNI.Hand_toString(swigCPtr, this);
  }
}
