package com.leapmotion.leap;



public class Listener
{
  private long swigCPtr;
  

  protected boolean swigCMemOwn;
  


  public Listener(long paramLong, boolean paramBoolean)
  {
    swigCMemOwn = paramBoolean;
    swigCPtr = paramLong;
  }
  
  public static long getCPtr(Listener paramListener) {
    return paramListener == null ? 0L : swigCPtr;
  }
  
  protected void finalize() {
    delete();
  }
  
  public synchronized void delete() {
    if (swigCPtr != 0L) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        LeapJNI.delete_Listener(swigCPtr);
      }
      swigCPtr = 0L;
    }
  }
  
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }
  
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    LeapJNI.Listener_change_ownership(this, swigCPtr, false);
  }
  
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    LeapJNI.Listener_change_ownership(this, swigCPtr, true);
  }
  
  public Listener() {
    this(LeapJNI.new_Listener(), true);
    LeapJNI.Listener_director_connect(this, swigCPtr, swigCMemOwn, true);
  }
  
  public void onInit(Controller paramController) {
    if (getClass() == Listener.class) LeapJNI.Listener_onInit(swigCPtr, this, Controller.getCPtr(paramController), paramController); else LeapJNI.Listener_onInitSwigExplicitListener(swigCPtr, this, Controller.getCPtr(paramController), paramController);
  }
  
  public void onConnect(Controller paramController) {
    if (getClass() == Listener.class) LeapJNI.Listener_onConnect(swigCPtr, this, Controller.getCPtr(paramController), paramController); else LeapJNI.Listener_onConnectSwigExplicitListener(swigCPtr, this, Controller.getCPtr(paramController), paramController);
  }
  
  public void onDisconnect(Controller paramController) {
    if (getClass() == Listener.class) LeapJNI.Listener_onDisconnect(swigCPtr, this, Controller.getCPtr(paramController), paramController); else LeapJNI.Listener_onDisconnectSwigExplicitListener(swigCPtr, this, Controller.getCPtr(paramController), paramController);
  }
  
  public void onExit(Controller paramController) {
    if (getClass() == Listener.class) LeapJNI.Listener_onExit(swigCPtr, this, Controller.getCPtr(paramController), paramController); else LeapJNI.Listener_onExitSwigExplicitListener(swigCPtr, this, Controller.getCPtr(paramController), paramController);
  }
  
  public void onFrame(Controller paramController) {
    if (getClass() == Listener.class) LeapJNI.Listener_onFrame(swigCPtr, this, Controller.getCPtr(paramController), paramController); else LeapJNI.Listener_onFrameSwigExplicitListener(swigCPtr, this, Controller.getCPtr(paramController), paramController);
  }
  
  public void onFocusGained(Controller paramController) {
    if (getClass() == Listener.class) LeapJNI.Listener_onFocusGained(swigCPtr, this, Controller.getCPtr(paramController), paramController); else LeapJNI.Listener_onFocusGainedSwigExplicitListener(swigCPtr, this, Controller.getCPtr(paramController), paramController);
  }
  
  public void onFocusLost(Controller paramController) {
    if (getClass() == Listener.class) LeapJNI.Listener_onFocusLost(swigCPtr, this, Controller.getCPtr(paramController), paramController); else LeapJNI.Listener_onFocusLostSwigExplicitListener(swigCPtr, this, Controller.getCPtr(paramController), paramController);
  }
  
  public void onServiceConnect(Controller paramController) {
    if (getClass() == Listener.class) LeapJNI.Listener_onServiceConnect(swigCPtr, this, Controller.getCPtr(paramController), paramController); else LeapJNI.Listener_onServiceConnectSwigExplicitListener(swigCPtr, this, Controller.getCPtr(paramController), paramController);
  }
  
  public void onServiceDisconnect(Controller paramController) {
    if (getClass() == Listener.class) LeapJNI.Listener_onServiceDisconnect(swigCPtr, this, Controller.getCPtr(paramController), paramController); else LeapJNI.Listener_onServiceDisconnectSwigExplicitListener(swigCPtr, this, Controller.getCPtr(paramController), paramController);
  }
  
  public void onDeviceChange(Controller paramController) {
    if (getClass() == Listener.class) LeapJNI.Listener_onDeviceChange(swigCPtr, this, Controller.getCPtr(paramController), paramController); else LeapJNI.Listener_onDeviceChangeSwigExplicitListener(swigCPtr, this, Controller.getCPtr(paramController), paramController);
  }
  
  public void onImages(Controller paramController) {
    if (getClass() == Listener.class) LeapJNI.Listener_onImages(swigCPtr, this, Controller.getCPtr(paramController), paramController); else LeapJNI.Listener_onImagesSwigExplicitListener(swigCPtr, this, Controller.getCPtr(paramController), paramController);
  }
}
