package com.jogamp.newt.util;

import com.jogamp.common.os.Platform;
import com.jogamp.common.os.Platform.OSType;
import com.jogamp.common.util.InterruptSource.Thread;
import com.jogamp.common.util.PropertyAccess;
import com.jogamp.common.util.ReflectionUtil;
import com.jogamp.nativewindow.NativeWindowFactory;
import java.io.PrintStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import jogamp.newt.Debug;
import jogamp.newt.NEWTJNILibLoader;




















































































public class MainThread
{
  private static final String MACOSXDisplayClassName = "jogamp.newt.driver.macosx.DisplayDriver";
  
  static
  {
    NativeWindowFactory.initSingleton();
    NEWTJNILibLoader.loadNEWT();
    
    HINT_USE_MAIN_THREAD = (!NativeWindowFactory.isAWTAvailable()) || (PropertyAccess.getBooleanProperty("newt.MainThread.force", true)); }
  private static final Platform.OSType osType = Platform.getOSType();
  private static final boolean isMacOSX = osType == Platform.OSType.MACOS;
  private static final ThreadGroup rootThreadGroup = getRootThreadGroup();
  
  public static final boolean HINT_USE_MAIN_THREAD;
  public static boolean useMainThread = false;
  
  protected static final boolean DEBUG = Debug.debug("MainThread");
  
  private static final MainThread singletonMainThread = new MainThread();
  private static UserApp mainAction;
  
  private static final ThreadGroup getRootThreadGroup() { Object localObject = Thread.currentThread().getThreadGroup();
    ThreadGroup localThreadGroup;
    while ((localThreadGroup = ((ThreadGroup)localObject).getParent()) != null) {
      localObject = localThreadGroup;
    }
    return localObject;
  }
  
  private static final Thread[] getAllThreads(int[] paramArrayOfInt)
  {
    Thread[] arrayOfThread = new Thread[rootThreadGroup.activeCount()];
    int i; while ((i = rootThreadGroup.enumerate(arrayOfThread, true)) == arrayOfThread.length) {
      arrayOfThread = new Thread[arrayOfThread.length * 2];
    }
    paramArrayOfInt[0] = i;
    return arrayOfThread;
  }
  
  private static final List<Thread> getNonDaemonThreads() { ArrayList localArrayList = new ArrayList();
    int[] arrayOfInt = { 0 };
    Thread[] arrayOfThread = getAllThreads(arrayOfInt);
    for (int i = arrayOfInt[0] - 1; i >= 0; i--) {
      Thread localThread = arrayOfThread[i];
      try {
        if ((localThread.isAlive()) && (!localThread.isDaemon())) {
          localArrayList.add(localThread);
          if (DEBUG) System.err.println("XXX0: " + localThread.getName() + ", " + localThread);
        }
      } catch (Throwable localThrowable) {
        localThrowable.printStackTrace();
      }
    }
    return localArrayList;
  }
  
  private static final int getNonDaemonThreadCount(List<Thread> paramList) { int i = 0;
    int[] arrayOfInt = { 0 };
    Thread[] arrayOfThread = getAllThreads(arrayOfInt);
    
    for (int j = arrayOfInt[0] - 1; j >= 0; j--) {
      Thread localThread = arrayOfThread[j];
      try {
        if ((localThread.isAlive()) && (!localThread.isDaemon()) && (!paramList.contains(localThread))) {
          i++;
          if (DEBUG) System.err.println("MainAction.run(): non daemon thread: " + localThread);
        }
      } catch (Throwable localThrowable) {
        localThrowable.printStackTrace();
      }
    }
    return i;
  }
  
  static class UserApp extends InterruptSource.Thread {
    private final String mainClassNameShort;
    private final String mainClassName;
    private final String[] mainClassArgs;
    private final Method mainClassMain;
    private List<Thread> nonDaemonThreadsAtStart;
    
    public UserApp(String paramString, String[] paramArrayOfString) throws SecurityException, NoSuchMethodException, ClassNotFoundException {
      mainClassName = paramString;
      mainClassArgs = paramArrayOfString;
      
      Class localClass = ReflectionUtil.getClass(paramString, true, getClass().getClassLoader());
      if (null == localClass) {
        throw new ClassNotFoundException("MainAction couldn't find main class " + paramString);
      }
      mainClassNameShort = localClass.getSimpleName();
      mainClassMain = localClass.getDeclaredMethod("main", new Class[] { [Ljava.lang.String.class });
      mainClassMain.setAccessible(true);
      
      setName(getName() + "-UserApp-" + mainClassNameShort);
      setDaemon(false);
      
      if (MainThread.DEBUG) System.err.println("MainAction(): instantiated: " + getName() + ", is daemon " + isDaemon() + ", main-class: " + localClass.getName());
    }
    
    public void run()
    {
      nonDaemonThreadsAtStart = MainThread.access$000();
      if (MainThread.DEBUG) System.err.println("MainAction.run(): " + Thread.currentThread().getName() + " start, nonDaemonThreadsAtStart " + nonDaemonThreadsAtStart);
      try
      {
        if (MainThread.DEBUG) System.err.println("MainAction.run(): " + Thread.currentThread().getName() + " invoke " + mainClassName);
        mainClassMain.invoke(null, new Object[] { mainClassArgs });
      } catch (InvocationTargetException localInvocationTargetException) {
        localInvocationTargetException.getTargetException().printStackTrace();
        return;
      } catch (Throwable localThrowable) {
        localThrowable.printStackTrace(); return;
      }
      

      int i;
      

      while (0 < (i = MainThread.getNonDaemonThreadCount(nonDaemonThreadsAtStart))) {
        if (MainThread.DEBUG) System.err.println("MainAction.run(): post user app, non daemon threads alive: " + i);
        try {
          Thread.sleep(1000L);
        } catch (InterruptedException localInterruptedException) {
          localInterruptedException.printStackTrace();
        }
      }
      if (MainThread.DEBUG) { System.err.println("MainAction.run(): " + Thread.currentThread().getName() + " user app fin: " + i);
      }
      
      if (MainThread.useMainThread) {
        if (MainThread.isMacOSX) {
          try {
            if (MainThread.DEBUG) {
              System.err.println("MainAction.main(): " + Thread.currentThread() + " MainAction fin - stopNSApp.0");
            }
            ReflectionUtil.callStaticMethod("jogamp.newt.driver.macosx.DisplayDriver", "stopNSApplication", null, null, MainThread.class
              .getClassLoader());
            if (MainThread.DEBUG) {
              System.err.println("MainAction.main(): " + Thread.currentThread() + " MainAction fin - stopNSApp.X");
            }
          } catch (Exception localException) {
            localException.printStackTrace();
          }
        } else {
          if (MainThread.DEBUG) System.err.println("MainAction.run(): " + Thread.currentThread().getName() + " MainAction fin - System.exit(0)");
          System.exit(0);
        }
      }
    }
  }
  



  public static void main(String[] paramArrayOfString)
    throws SecurityException, NoSuchMethodException, ClassNotFoundException
  {
    Thread localThread = Thread.currentThread();
    
    useMainThread = HINT_USE_MAIN_THREAD;
    
    if (DEBUG) {
      System.err.println("MainThread.main(): " + localThread.getName() + ", useMainThread " + useMainThread + ", HINT_USE_MAIN_THREAD " + HINT_USE_MAIN_THREAD + ", isAWTAvailable " + 
      

        NativeWindowFactory.isAWTAvailable() + ", ostype " + osType + ", isMacOSX " + isMacOSX);
    }
    
    if ((!useMainThread) && (!NativeWindowFactory.isAWTAvailable())) {
      throw new RuntimeException("!USE_MAIN_THREAD and no AWT available");
    }
    
    if (paramArrayOfString.length == 0) {
      return;
    }
    
    String str = paramArrayOfString[0];
    String[] arrayOfString = new String[paramArrayOfString.length - 1];
    if (paramArrayOfString.length > 1) {
      System.arraycopy(paramArrayOfString, 1, arrayOfString, 0, paramArrayOfString.length - 1);
    }
    
    mainAction = new UserApp(str, arrayOfString);
    
    if (isMacOSX) {
      ReflectionUtil.callStaticMethod("jogamp.newt.driver.macosx.DisplayDriver", "initSingleton", null, null, MainThread.class
        .getClassLoader());
    }
    
    if (useMainThread) {
      try {
        localThread.setName(localThread.getName() + "-MainThread");
      }
      catch (Exception localException1) {}
      
      mainAction.start();
      
      if (isMacOSX) {
        try {
          if (DEBUG) {
            System.err.println("MainThread.main(): " + localThread.getName() + "- runNSApp");
          }
          ReflectionUtil.callStaticMethod("jogamp.newt.driver.macosx.DisplayDriver", "runNSApplication", null, null, MainThread.class
            .getClassLoader());
        } catch (Exception localException2) {
          localException2.printStackTrace();
        }
      }
      if (DEBUG) System.err.println("MainThread - wait until last non daemon thread ends ...");
    }
    else {
      mainAction.run();
    }
  }
  
  public static MainThread getSingleton() {
    return singletonMainThread;
  }
  
  public MainThread() {}
}
