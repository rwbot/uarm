package jogamp.opengl;

import com.jogamp.common.ExceptionUtils;
import com.jogamp.common.os.Platform;
import com.jogamp.common.os.Platform.OSType;
import com.jogamp.gluegen.runtime.ProcAddressTable;
import com.jogamp.nativewindow.NativeWindowException;
import com.jogamp.opengl.GL;
import com.jogamp.opengl.GLDebugListener;
import com.jogamp.opengl.GLDebugMessage;
import com.jogamp.opengl.GLException;
import java.io.PrintStream;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import jogamp.common.os.PlatformPropsImpl;











































public class GLDebugMessageHandler
{
  private static final boolean DEBUG = Debug.debug("GLDebugMessageHandler");
  private static final int EXT_KHR = 1;
  private static final int EXT_ARB = 2;
  private static final int EXT_AMD = 3;
  
  static
  {
    if (!initIDs0()) {
      throw new NativeWindowException("Failed to initialize GLDebugMessageHandler jmethodIDs");
    }
  }
  

  private final GLContextImpl ctx;
  
  private final ListenerSyncedImplStub<GLDebugListener> listenerImpl;
  
  private String extName;
  
  private String extSuffix;
  
  private int extType;
  
  private long glDebugMessageCallbackProcAddress;
  
  private boolean extAvailable;
  
  private boolean synchronous;
  private long handle;
  public GLDebugMessageHandler(GLContextImpl paramGLContextImpl)
  {
    ctx = paramGLContextImpl;
    listenerImpl = new ListenerSyncedImplStub();
    glDebugMessageCallbackProcAddress = 0L;
    extName = null;
    extSuffix = null;
    extType = 0;
    extAvailable = false;
    handle = 0L;
    synchronous = true;
  }
  
  public void init(boolean paramBoolean) {
    if (DEBUG) {
      System.err.println("GLDebugMessageHandler.init(" + paramBoolean + ")");
    }
    init();
    if (isAvailable()) {
      enableImpl(paramBoolean);
    } else if (DEBUG) {
      System.err.println("GLDebugMessageHandler.init(" + paramBoolean + ") .. n/a");
    }
  }
  








  private final long getAddressFor(final ProcAddressTable paramProcAddressTable, final String paramString)
  {
    ((Long)AccessController.doPrivileged(new PrivilegedAction()
    {
      public Long run()
      {
        try
        {
          return Long.valueOf(paramProcAddressTable.getAddressFor(paramString));
        } catch (IllegalArgumentException localIllegalArgumentException) {}
        return Long.valueOf(0L);
      }
    })).longValue();
  }
  
  public void init()
  {
    ctx.validateCurrent();
    if (isAvailable()) {
      return;
    }
    
    if (!ctx.isGLDebugEnabled()) {
      if (DEBUG) {
        System.err.println("GLDebugMessageHandler: GL DEBUG not set in ARB ctx options: " + ctx.getGLVersion());
      }
      return;
    }
    if ((PlatformPropsImpl.OS_TYPE == Platform.OSType.WINDOWS) && (Platform.is32Bit()))
    {

      if (DEBUG) {
        System.err.println("GLDebugMessageHandler: Windows 32bit currently not supported!");
      }
      return;
    }
    if (ctx.isExtensionAvailable("GL_KHR_debug")) {
      extName = "GL_KHR_debug";
      extSuffix = (ctx.isGLES() ? "KHR" : "");
      extType = 1;
    } else if (ctx.isExtensionAvailable("GL_ARB_debug_output")) {
      extName = "GL_ARB_debug_output";
      extSuffix = "ARB";
      extType = 2;
    } else if (ctx.isExtensionAvailable("GL_AMD_debug_output")) {
      extName = "GL_AMD_debug_output";
      extSuffix = "AMD";
      extType = 3;
    }
    

    switch (extType) {
    case 1: 
      if (!ctx.isGL2ES2()) {
        if (DEBUG) {
          System.err.println("Non GL2ES2 context not supported, has " + ctx.getGLVersion());
        }
        extType = 0;
      }
      
      break;
    case 2: 
    case 3: 
      if (!ctx.isGL2GL3()) {
        if (DEBUG) {
          System.err.println("Non GL2GL3 context not supported, has " + ctx.getGLVersion());
        }
        extType = 0;
      }
      break;
    }
    
    if (0 == extType) {
      extName = null;
      extSuffix = null;
      if (DEBUG) {
        System.err.println("GLDebugMessageHandler: No extension available! " + ctx.getGLVersion());
        System.err.println("GL_EXTENSIONS  " + ctx.getGLExtensionCount());
        System.err.println(ctx.getGLExtensionsString());
      }
      return; }
    if (DEBUG) {
      System.err.println("GLDebugMessageHandler: Using extension: <" + extName + "> with suffix <" + extSuffix + ">");
    }
    
    ProcAddressTable localProcAddressTable = ctx.getGLProcAddressTable();
    switch (extType) {
    case 1: 
      glDebugMessageCallbackProcAddress = getAddressFor(localProcAddressTable, "glDebugMessageCallback" + extSuffix);
      break;
    case 2: 
      glDebugMessageCallbackProcAddress = getAddressFor(localProcAddressTable, "glDebugMessageCallback" + extSuffix);
      break;
    case 3: 
      glDebugMessageCallbackProcAddress = getAddressFor(localProcAddressTable, "glDebugMessageCallback" + extSuffix);
    }
    
    extAvailable = ((0 < extType) && (null != extName) && (null != extSuffix) && (0L != glDebugMessageCallbackProcAddress));
    
    if (DEBUG) {
      System.err.println("GLDebugMessageHandler: extAvailable: " + extAvailable + ", glDebugMessageCallback* : 0x" + Long.toHexString(glDebugMessageCallbackProcAddress));
    }
    
    if (!extAvailable) {
      glDebugMessageCallbackProcAddress = 0L;
    }
    
    handle = 0L;
  }
  
  public final boolean isAvailable() { return extAvailable; }
  




  public final String getExtension()
  {
    return extName;
  }
  
  public final boolean isExtensionKHRARB() {
    return (1 == extType) || (2 == extType);
  }
  
  public final boolean isExtensionKHR() {
    return 1 == extType;
  }
  
  public final boolean isExtensionARB() {
    return 2 == extType;
  }
  
  public final boolean isExtensionAMD() {
    return 3 == extType;
  }
  

  public final boolean isSynchronous()
  {
    return synchronous;
  }
  

  public final void setSynchronous(boolean paramBoolean)
  {
    synchronous = paramBoolean;
    if (isEnabled())
      setSynchronousImpl();
  }
  
  private final void setSynchronousImpl() {
    if (isExtensionKHRARB()) {
      if (synchronous) {
        ctx.getGL().glEnable(33346);
      } else {
        ctx.getGL().glDisable(33346);
      }
      if (DEBUG) {
        System.err.println("GLDebugMessageHandler: synchronous " + synchronous);
      }
    }
  }
  

  public final void enable(boolean paramBoolean)
    throws GLException
  {
    ctx.validateCurrent();
    if (!isAvailable()) {
      return;
    }
    enableImpl(paramBoolean);
  }
  
  final void enableImpl(boolean paramBoolean) throws GLException { if (paramBoolean) {
      if (0L == handle) {
        setSynchronousImpl();
        handle = register0(glDebugMessageCallbackProcAddress, extType);
        if (0L == handle) {
          throw new GLException("Failed to register via \"glDebugMessageCallback*\" using " + extName);
        }
      }
    }
    else if (0L != handle) {
      unregister0(glDebugMessageCallbackProcAddress, handle);
      handle = 0L;
    }
    
    if (DEBUG)
      System.err.println("GLDebugMessageHandler: enable(" + paramBoolean + ") -> 0x" + Long.toHexString(handle));
  }
  
  public final boolean isEnabled() {
    return 0L != handle;
  }
  
  public final int listenerSize() { return listenerImpl.size(); }
  
  public final void addListener(GLDebugListener paramGLDebugListener)
  {
    listenerImpl.addListener(-1, paramGLDebugListener);
  }
  
  public final void addListener(int paramInt, GLDebugListener paramGLDebugListener) {
    listenerImpl.addListener(paramInt, paramGLDebugListener);
  }
  
  public final void removeListener(GLDebugListener paramGLDebugListener) {
    listenerImpl.removeListener(paramGLDebugListener);
  }
  
  private final void sendMessage(GLDebugMessage paramGLDebugMessage) {
    synchronized (listenerImpl) {
      if (DEBUG) {
        System.err.println("GLDebugMessageHandler: " + paramGLDebugMessage);
      }
      ArrayList localArrayList = listenerImpl.getListeners();
      for (int i = 0; i < localArrayList.size(); i++) {
        ((GLDebugListener)localArrayList.get(i)).messageSent(paramGLDebugMessage);
      }
    }
  }
  
  public static class StdErrGLDebugListener implements GLDebugListener {
    boolean threadDump;
    
    public StdErrGLDebugListener(boolean paramBoolean) {
      threadDump = paramBoolean;
    }
    
    public void messageSent(GLDebugMessage paramGLDebugMessage) {
      System.err.println(paramGLDebugMessage);
      if (threadDump) {
        ExceptionUtils.dumpStack(System.err);
      }
    }
  }
  



  protected final void glDebugMessageARB(int paramInt1, int paramInt2, int paramInt3, int paramInt4, String paramString)
  {
    GLDebugMessage localGLDebugMessage = new GLDebugMessage(ctx, System.currentTimeMillis(), paramInt1, paramInt2, paramInt3, paramInt4, paramString);
    sendMessage(localGLDebugMessage);
  }
  
  protected final void glDebugMessageAMD(int paramInt1, int paramInt2, int paramInt3, String paramString) {
    GLDebugMessage localGLDebugMessage = GLDebugMessage.translateAMDEvent(ctx, System.currentTimeMillis(), paramInt1, paramInt2, paramInt3, paramString);
    sendMessage(localGLDebugMessage);
  }
  
  private static native boolean initIDs0();
  
  private native long register0(long paramLong, int paramInt);
  
  private native void unregister0(long paramLong1, long paramLong2);
}
