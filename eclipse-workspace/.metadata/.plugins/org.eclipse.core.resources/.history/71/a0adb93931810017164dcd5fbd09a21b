package com.leapmotion.leap;




public class Screen
  extends Interface
{
  private long swigCPtr;
  


  public Screen(long paramLong, boolean paramBoolean)
  {
    super(LeapJNI.Screen_SWIGUpcast(paramLong), paramBoolean);
    swigCPtr = paramLong;
  }
  
  public static long getCPtr(Screen paramScreen) {
    return paramScreen == null ? 0L : swigCPtr;
  }
  
  protected void finalize() {
    delete();
  }
  
  public synchronized void delete() {
    if (swigCPtr != 0L) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        LeapJNI.delete_Screen(swigCPtr);
      }
      swigCPtr = 0L;
    }
    super.delete();
  }
  
  public Screen() {
    this(LeapJNI.new_Screen(), true);
  }
  
  public int id() {
    return LeapJNI.Screen_id(swigCPtr, this);
  }
  
  public Vector intersect(Pointable paramPointable, boolean paramBoolean, float paramFloat) {
    return new Vector(LeapJNI.Screen_intersect__SWIG_0(swigCPtr, this, Pointable.getCPtr(paramPointable), paramPointable, paramBoolean, paramFloat), true);
  }
  
  public Vector intersect(Pointable paramPointable, boolean paramBoolean) {
    return new Vector(LeapJNI.Screen_intersect__SWIG_1(swigCPtr, this, Pointable.getCPtr(paramPointable), paramPointable, paramBoolean), true);
  }
  
  public Vector intersect(Vector paramVector1, Vector paramVector2, boolean paramBoolean, float paramFloat) {
    return new Vector(LeapJNI.Screen_intersect__SWIG_2(swigCPtr, this, Vector.getCPtr(paramVector1), paramVector1, Vector.getCPtr(paramVector2), paramVector2, paramBoolean, paramFloat), true);
  }
  
  public Vector intersect(Vector paramVector1, Vector paramVector2, boolean paramBoolean) {
    return new Vector(LeapJNI.Screen_intersect__SWIG_3(swigCPtr, this, Vector.getCPtr(paramVector1), paramVector1, Vector.getCPtr(paramVector2), paramVector2, paramBoolean), true);
  }
  
  public Vector project(Vector paramVector, boolean paramBoolean, float paramFloat) {
    return new Vector(LeapJNI.Screen_project__SWIG_0(swigCPtr, this, Vector.getCPtr(paramVector), paramVector, paramBoolean, paramFloat), true);
  }
  
  public Vector project(Vector paramVector, boolean paramBoolean) {
    return new Vector(LeapJNI.Screen_project__SWIG_1(swigCPtr, this, Vector.getCPtr(paramVector), paramVector, paramBoolean), true);
  }
  
  public Vector horizontalAxis() {
    return new Vector(LeapJNI.Screen_horizontalAxis(swigCPtr, this), true);
  }
  
  public Vector verticalAxis() {
    return new Vector(LeapJNI.Screen_verticalAxis(swigCPtr, this), true);
  }
  
  public Vector bottomLeftCorner() {
    return new Vector(LeapJNI.Screen_bottomLeftCorner(swigCPtr, this), true);
  }
  
  public Vector normal() {
    return new Vector(LeapJNI.Screen_normal(swigCPtr, this), true);
  }
  
  public int widthPixels() {
    return LeapJNI.Screen_widthPixels(swigCPtr, this);
  }
  
  public int heightPixels() {
    return LeapJNI.Screen_heightPixels(swigCPtr, this);
  }
  
  public float distanceToPoint(Vector paramVector) {
    return LeapJNI.Screen_distanceToPoint(swigCPtr, this, Vector.getCPtr(paramVector), paramVector);
  }
  
  public boolean isValid() {
    return LeapJNI.Screen_isValid(swigCPtr, this);
  }
  
  public static Screen invalid() {
    return new Screen(LeapJNI.Screen_invalid(), false);
  }
  
  public boolean equals(Screen paramScreen) {
    return LeapJNI.Screen_equals(swigCPtr, this, getCPtr(paramScreen), paramScreen);
  }
  
  public String toString() {
    return LeapJNI.Screen_toString(swigCPtr, this);
  }
}
