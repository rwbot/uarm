package com.jogamp.opengl.egl;

import com.jogamp.common.nio.Buffers;
import com.jogamp.common.nio.PointerBuffer;
import com.jogamp.common.os.DynamicLookupHelper;
import com.jogamp.gluegen.runtime.opengl.GLProcAddressResolver;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;




































































































































































public class EGL
{
  public static final int KHRONOS_FALSE = 0;
  public static final int KHRONOS_TRUE = 1;
  public static final int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 12470;
  public static final int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 12468;
  public static final int EGL_MULTISAMPLE_RESOLVE_DEFAULT = 12442;
  public static final int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 12472;
  public static final int EGL_GL_COLORSPACE = 12445;
  public static final int EGL_BAD_CURRENT_SURFACE = 12295;
  public static final int EGL_BIND_TO_TEXTURE_RGB = 12345;
  public static final int EGL_TEXTURE_FORMAT = 12416;
  public static final int EGL_COLOR_BUFFER_TYPE = 12351;
  public static final int EGL_ALPHA_FORMAT_NONPRE = 12427;
  public static final int EGL_MULTISAMPLE_RESOLVE_BOX = 12443;
  public static final int EGL_SURFACE_TYPE = 12339;
  public static final int EGL_CONTEXT_OPENGL_DEBUG = 12720;
  public static final int EGL_TRANSPARENT_TYPE = 12340;
  public static final int EGL_BACK_BUFFER = 12420;
  public static final int EGL_LUMINANCE_SIZE = 12349;
  public static final int EGL_MIN_SWAP_INTERVAL = 12347;
  public static final int EGL_CONTEXT_LOST = 12302;
  public static final int EGL_VG_ALPHA_FORMAT = 12424;
  public static final int EGL_SYNC_CL_EVENT_COMPLETE = 12543;
  public static final int EGL_VG_ALPHA_FORMAT_NONPRE = 12427;
  public static final int EGL_SAMPLE_BUFFERS = 12338;
  public static final int EGL_TRANSPARENT_BLUE_VALUE = 12341;
  public static final int EGL_ALPHA_MASK_SIZE = 12350;
  public static final int EGL_NO_RESET_NOTIFICATION = 12734;
  public static final int EGL_GL_RENDERBUFFER = 12473;
  public static final int EGL_SYNC_CL_EVENT = 12542;
  public static final int EGL_TRANSPARENT_RGB = 12370;
  public static final int EGL_WINDOW_BIT = 4;
  public static final int EGL_ALPHA_FORMAT = 12424;
  public static final int EGL_OPENGL_ES2_BIT = 4;
  public static final int EGL_BAD_DISPLAY = 12296;
  public static final int EGL_BAD_PARAMETER = 12300;
  public static final int EGL_BAD_CONTEXT = 12294;
  public static final int EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE = 12721;
  public static final int EGL_MULTISAMPLE_RESOLVE = 12441;
  public static final int EGL_SLOW_CONFIG = 12368;
  public static final int EGL_FALSE = 0;
  public static final int EGL_SINGLE_BUFFER = 12421;
  public static final int EGL_MULTISAMPLE_RESOLVE_BOX_BIT = 512;
  public static final int EGL_COLORSPACE_LINEAR = 12426;
  public static final int EGL_EXTENSIONS = 12373;
  public static final int EGL_ALPHA_FORMAT_PRE = 12428;
  public static final int EGL_CONFORMANT = 12354;
  public static final int EGL_SIGNALED = 12530;
  public static final int EGL_SAMPLES = 12337;
  public static final int EGL_LUMINANCE_BUFFER = 12431;
  public static final int EGL_LOSE_CONTEXT_ON_RESET = 12735;
  public static final int EGL_VG_COLORSPACE_LINEAR_BIT = 32;
  public static final int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X = 12467;
  public static final int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 12469;
  public static final int EGL_DEPTH_SIZE = 12325;
  public static final int EGL_MAX_PBUFFER_HEIGHT = 12330;
  public static final int EGL_BAD_CONFIG = 12293;
  public static final int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 12471;
  public static final int EGL_GL_TEXTURE_ZOFFSET = 12477;
  public static final int EGL_CONTEXT_CLIENT_VERSION = 12440;
  public static final int EGL_SWAP_BEHAVIOR_PRESERVED_BIT = 1024;
  public static final int EGL_SWAP_BEHAVIOR = 12435;
  public static final int EGL_CONDITION_SATISFIED = 12534;
  public static final int EGL_MIPMAP_TEXTURE = 12418;
  public static final int EGL_WIDTH = 12375;
  public static final int EGL_CL_EVENT_HANDLE = 12444;
  public static final int EGL_READ = 12378;
  public static final int EGL_SYNC_TYPE = 12535;
  public static final int EGL_RENDER_BUFFER = 12422;
  public static final int EGL_TRUE = 1;
  public static final int EGL_BUFFER_PRESERVED = 12436;
  public static final int EGL_OPENGL_ES3_BIT = 64;
  public static final int EGL_MATCH_NATIVE_PIXMAP = 12353;
  public static final int EGL_BUFFER_DESTROYED = 12437;
  public static final int EGL_GL_COLORSPACE_LINEAR = 12426;
  public static final int EGL_COLORSPACE = 12423;
  public static final int EGL_PBUFFER_BIT = 1;
  public static final int EGL_LEVEL = 12329;
  public static final int EGL_UNSIGNALED = 12531;
  public static final int EGL_CONTEXT_OPENGL_PROFILE_MASK = 12541;
  public static final int EGL_STENCIL_SIZE = 12326;
  public static final int EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY = 12733;
  public static final int EGL_GREEN_SIZE = 12323;
  public static final int EGL_TEXTURE_2D = 12383;
  public static final int EGL_BAD_ACCESS = 12290;
  public static final int EGL_DISPLAY_SCALING = 10000;
  public static final int EGL_BAD_SURFACE = 12301;
  public static final int EGL_MIPMAP_LEVEL = 12419;
  public static final int EGL_BLUE_SIZE = 12322;
  public static final int EGL_BAD_ATTRIBUTE = 12292;
  public static final int EGL_CONTEXT_MAJOR_VERSION = 12440;
  public static final int EGL_SYNC_STATUS = 12529;
  public static final int EGL_OPENGL_ES_API = 12448;
  public static final int EGL_CONTEXT_CLIENT_TYPE = 12439;
  public static final int EGL_BAD_NATIVE_PIXMAP = 12298;
  public static final int EGL_TIMEOUT_EXPIRED = 12533;
  public static final int EGL_SYNC_FLUSH_COMMANDS_BIT = 1;
  public static final int EGL_GL_COLORSPACE_SRGB = 12425;
  public static final int EGL_VERTICAL_RESOLUTION = 12433;
  public static final int EGL_VG_COLORSPACE = 12423;
  public static final int EGL_VG_COLORSPACE_LINEAR = 12426;
  public static final int EGL_CONFIG_CAVEAT = 12327;
  public static final int EGL_PIXEL_ASPECT_RATIO = 12434;
  public static final int EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT = 1;
  public static final int EGL_TEXTURE_TARGET = 12417;
  public static final int EGL_CLIENT_APIS = 12429;
  public static final int EGL_VG_ALPHA_FORMAT_PRE = 12428;
  public static final int EGL_BIND_TO_TEXTURE_RGBA = 12346;
  public static final int EGL_NATIVE_VISUAL_TYPE = 12335;
  public static final int EGL_BAD_MATCH = 12297;
  public static final int EGL_NON_CONFORMANT_CONFIG = 12369;
  public static final int EGL_TEXTURE_RGB = 12381;
  public static final int EGL_RGB_BUFFER = 12430;
  public static final int EGL_CONTEXT_MINOR_VERSION = 12539;
  public static final int EGL_HORIZONTAL_RESOLUTION = 12432;
  public static final int EGL_SYNC_PRIOR_COMMANDS_COMPLETE = 12528;
  public static final int EGL_SYNC_FENCE = 12537;
  public static final int EGL_BAD_ALLOC = 12291;
  public static final int EGL_OPENGL_ES_BIT = 1;
  public static final int EGL_NATIVE_VISUAL_ID = 12334;
  public static final int EGL_MAX_PBUFFER_PIXELS = 12331;
  public static final int EGL_MAX_SWAP_INTERVAL = 12348;
  public static final int EGL_BUFFER_SIZE = 12320;
  public static final int EGL_NATIVE_RENDERABLE = 12333;
  public static final int EGL_VERSION = 12372;
  public static final int EGL_CONFIG_ID = 12328;
  public static final int EGL_LARGEST_PBUFFER = 12376;
  public static final int EGL_TRANSPARENT_GREEN_VALUE = 12342;
  public static final int EGL_MAX_PBUFFER_WIDTH = 12332;
  public static final int EGL_HEIGHT = 12374;
  public static final int EGL_TRANSPARENT_RED_VALUE = 12343;
  public static final int EGL_TEXTURE_RGBA = 12382;
  public static final int EGL_ALPHA_SIZE = 12321;
  public static final int EGL_SYNC_CONDITION = 12536;
  public static final int EGL_IMAGE_PRESERVED = 12498;
  public static final int EGL_GL_TEXTURE_2D = 12465;
  public static final int EGL_BAD_NATIVE_WINDOW = 12299;
  public static final int EGL_PIXMAP_BIT = 2;
  public static final int EGL_COLORSPACE_sRGB = 12425;
  public static final int EGL_VG_ALPHA_FORMAT_PRE_BIT = 64;
  public static final int EGL_OPENVG_API = 12449;
  public static final int EGL_NOT_INITIALIZED = 12289;
  public static final int EGL_VG_COLORSPACE_sRGB = 12425;
  public static final int EGL_RED_SIZE = 12324;
  public static final int EGL_NO_TEXTURE = 12380;
  public static final int EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT = 2;
  public static final int EGL_OPENVG_BIT = 2;
  public static final int EGL_SUCCESS = 12288;
  public static final int EGL_CONTEXT_OPENGL_ROBUST_ACCESS = 12722;
  public static final int EGL_DRAW = 12377;
  public static final int EGL_CORE_NATIVE_ENGINE = 12379;
  public static final int EGL_OPENGL_BIT = 8;
  public static final int EGL_GL_TEXTURE_3D = 12466;
  public static final int EGL_NONE = 12344;
  public static final int EGL_OPENVG_IMAGE = 12438;
  public static final int EGL_RENDERABLE_TYPE = 12352;
  public static final int EGL_VENDOR = 12371;
  public static final int EGL_GL_TEXTURE_LEVEL = 12476;
  public static final int EGL_OPENGL_API = 12450;
  public static final long KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = 2147483647L;
  
  public EGL() {}
  
  public static boolean eglChooseConfig(long paramLong, IntBuffer paramIntBuffer1, PointerBuffer paramPointerBuffer, int paramInt, IntBuffer paramIntBuffer2)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"configs\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new RuntimeException("Argument \"num_config\" is not a direct buffer");
    long l = _table_addressof_eglChooseConfig;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglChooseConfig" }));
    }
    return dispatch_eglChooseConfig0(paramLong, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), paramInt, paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), l);
  }
  



  private static native boolean dispatch_eglChooseConfig0(long paramLong1, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, int paramInt3, Object paramObject3, int paramInt4, long paramLong2);
  


  public static boolean eglCopyBuffers(long paramLong1, long paramLong2, long paramLong3)
  {
    long l = _table_addressof_eglCopyBuffers;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCopyBuffers" }));
    }
    return dispatch_eglCopyBuffers0(paramLong1, paramLong2, paramLong3, l);
  }
  


  private static native boolean dispatch_eglCopyBuffers0(long paramLong1, long paramLong2, long paramLong3, long paramLong4);
  

  public static long eglCreateContext(long paramLong1, long paramLong2, long paramLong3, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table_addressof_eglCreateContext;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateContext" }));
    }
    return dispatch_eglCreateContext0(paramLong1, paramLong2, paramLong3, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private static native long dispatch_eglCreateContext0(long paramLong1, long paramLong2, long paramLong3, Object paramObject, int paramInt, long paramLong4);
  


  public static long eglCreatePbufferSurface(long paramLong1, long paramLong2, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table_addressof_eglCreatePbufferSurface;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreatePbufferSurface" }));
    }
    return dispatch_eglCreatePbufferSurface0(paramLong1, paramLong2, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private static native long dispatch_eglCreatePbufferSurface0(long paramLong1, long paramLong2, Object paramObject, int paramInt, long paramLong3);
  


  public static long eglCreatePixmapSurface(long paramLong1, long paramLong2, long paramLong3, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table_addressof_eglCreatePixmapSurface;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreatePixmapSurface" }));
    }
    return dispatch_eglCreatePixmapSurface0(paramLong1, paramLong2, paramLong3, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private static native long dispatch_eglCreatePixmapSurface0(long paramLong1, long paramLong2, long paramLong3, Object paramObject, int paramInt, long paramLong4);
  


  public static long eglCreateWindowSurface(long paramLong1, long paramLong2, long paramLong3, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table_addressof_eglCreateWindowSurface;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateWindowSurface" }));
    }
    return dispatch_eglCreateWindowSurface0(paramLong1, paramLong2, paramLong3, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private static native long dispatch_eglCreateWindowSurface0(long paramLong1, long paramLong2, long paramLong3, Object paramObject, int paramInt, long paramLong4);
  

  public static boolean eglDestroyContext(long paramLong1, long paramLong2)
  {
    long l = _table_addressof_eglDestroyContext;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglDestroyContext" }));
    }
    return dispatch_eglDestroyContext0(paramLong1, paramLong2, l);
  }
  

  private static native boolean dispatch_eglDestroyContext0(long paramLong1, long paramLong2, long paramLong3);
  

  public static boolean eglDestroySurface(long paramLong1, long paramLong2)
  {
    long l = _table_addressof_eglDestroySurface;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglDestroySurface" }));
    }
    return dispatch_eglDestroySurface0(paramLong1, paramLong2, l);
  }
  


  private static native boolean dispatch_eglDestroySurface0(long paramLong1, long paramLong2, long paramLong3);
  

  public static boolean eglGetConfigAttrib(long paramLong1, long paramLong2, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table_addressof_eglGetConfigAttrib;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetConfigAttrib" }));
    }
    return dispatch_eglGetConfigAttrib0(paramLong1, paramLong2, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  



  private static native boolean dispatch_eglGetConfigAttrib0(long paramLong1, long paramLong2, int paramInt1, Object paramObject, int paramInt2, long paramLong3);
  


  public static boolean eglGetConfigs(long paramLong, PointerBuffer paramPointerBuffer, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"configs\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"num_config\" is not a direct buffer");
    long l = _table_addressof_eglGetConfigs;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetConfigs" }));
    }
    return dispatch_eglGetConfigs0(paramLong, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private static native boolean dispatch_eglGetConfigs0(long paramLong1, Object paramObject1, int paramInt1, int paramInt2, Object paramObject2, int paramInt3, long paramLong2);
  


  public static long eglGetCurrentDisplay()
  {
    long l = _table_addressof_eglGetCurrentDisplay;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetCurrentDisplay" }));
    }
    return dispatch_eglGetCurrentDisplay0(l);
  }
  

  private static native long dispatch_eglGetCurrentDisplay0(long paramLong);
  

  public static long eglGetCurrentSurface(int paramInt)
  {
    long l = _table_addressof_eglGetCurrentSurface;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetCurrentSurface" }));
    }
    return dispatch_eglGetCurrentSurface0(paramInt, l);
  }
  

  private static native long dispatch_eglGetCurrentSurface0(int paramInt, long paramLong);
  

  public static long eglGetDisplay(long paramLong)
  {
    long l = _table_addressof_eglGetDisplay;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetDisplay" }));
    }
    return dispatch_eglGetDisplay0(paramLong, l);
  }
  

  private static native long dispatch_eglGetDisplay0(long paramLong1, long paramLong2);
  

  public static int eglGetError()
  {
    long l = _table_addressof_eglGetError;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetError" }));
    }
    return dispatch_eglGetError0(l);
  }
  


  private static native int dispatch_eglGetError0(long paramLong);
  


  public static boolean eglInitialize(long paramLong, IntBuffer paramIntBuffer1, IntBuffer paramIntBuffer2)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new RuntimeException("Argument \"major\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new RuntimeException("Argument \"minor\" is not a direct buffer");
    long l = _table_addressof_eglInitialize;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglInitialize" }));
    }
    return dispatch_eglInitialize0(paramLong, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), l);
  }
  


  private static native boolean dispatch_eglInitialize0(long paramLong1, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, long paramLong2);
  


  public static boolean eglMakeCurrent(long paramLong1, long paramLong2, long paramLong3, long paramLong4)
  {
    long l = _table_addressof_eglMakeCurrent;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglMakeCurrent" }));
    }
    return dispatch_eglMakeCurrent0(paramLong1, paramLong2, paramLong3, paramLong4, l);
  }
  


  private static native boolean dispatch_eglMakeCurrent0(long paramLong1, long paramLong2, long paramLong3, long paramLong4, long paramLong5);
  

  public static boolean eglQueryContext(long paramLong1, long paramLong2, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table_addressof_eglQueryContext;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryContext" }));
    }
    return dispatch_eglQueryContext0(paramLong1, paramLong2, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private static native boolean dispatch_eglQueryContext0(long paramLong1, long paramLong2, int paramInt1, Object paramObject, int paramInt2, long paramLong3);
  

  public static String eglQueryString(long paramLong, int paramInt)
  {
    long l = _table_addressof_eglQueryString;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryString" }));
    }
    return dispatch_eglQueryString0(paramLong, paramInt, l);
  }
  


  private static native String dispatch_eglQueryString0(long paramLong1, int paramInt, long paramLong2);
  

  public static boolean eglQuerySurface(long paramLong1, long paramLong2, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table_addressof_eglQuerySurface;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQuerySurface" }));
    }
    return dispatch_eglQuerySurface0(paramLong1, paramLong2, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private static native boolean dispatch_eglQuerySurface0(long paramLong1, long paramLong2, int paramInt1, Object paramObject, int paramInt2, long paramLong3);
  

  public static boolean eglSwapBuffers(long paramLong1, long paramLong2)
  {
    long l = _table_addressof_eglSwapBuffers;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglSwapBuffers" }));
    }
    return dispatch_eglSwapBuffers0(paramLong1, paramLong2, l);
  }
  

  private static native boolean dispatch_eglSwapBuffers0(long paramLong1, long paramLong2, long paramLong3);
  

  public static boolean eglTerminate(long paramLong)
  {
    long l = _table_addressof_eglTerminate;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglTerminate" }));
    }
    return dispatch_eglTerminate0(paramLong, l);
  }
  

  private static native boolean dispatch_eglTerminate0(long paramLong1, long paramLong2);
  

  public static boolean eglWaitGL()
  {
    long l = _table_addressof_eglWaitGL;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglWaitGL" }));
    }
    return dispatch_eglWaitGL0(l);
  }
  

  private static native boolean dispatch_eglWaitGL0(long paramLong);
  

  public static boolean eglWaitNative(int paramInt)
  {
    long l = _table_addressof_eglWaitNative;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglWaitNative" }));
    }
    return dispatch_eglWaitNative0(paramInt, l);
  }
  

  private static native boolean dispatch_eglWaitNative0(int paramInt, long paramLong);
  

  public static boolean eglBindTexImage(long paramLong1, long paramLong2, int paramInt)
  {
    long l = _table_addressof_eglBindTexImage;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglBindTexImage" }));
    }
    return dispatch_eglBindTexImage0(paramLong1, paramLong2, paramInt, l);
  }
  

  private static native boolean dispatch_eglBindTexImage0(long paramLong1, long paramLong2, int paramInt, long paramLong3);
  

  public static boolean eglReleaseTexImage(long paramLong1, long paramLong2, int paramInt)
  {
    long l = _table_addressof_eglReleaseTexImage;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglReleaseTexImage" }));
    }
    return dispatch_eglReleaseTexImage0(paramLong1, paramLong2, paramInt, l);
  }
  

  private static native boolean dispatch_eglReleaseTexImage0(long paramLong1, long paramLong2, int paramInt, long paramLong3);
  

  public static boolean eglSurfaceAttrib(long paramLong1, long paramLong2, int paramInt1, int paramInt2)
  {
    long l = _table_addressof_eglSurfaceAttrib;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglSurfaceAttrib" }));
    }
    return dispatch_eglSurfaceAttrib0(paramLong1, paramLong2, paramInt1, paramInt2, l);
  }
  

  private static native boolean dispatch_eglSurfaceAttrib0(long paramLong1, long paramLong2, int paramInt1, int paramInt2, long paramLong3);
  

  public static boolean eglSwapInterval(long paramLong, int paramInt)
  {
    long l = _table_addressof_eglSwapInterval;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglSwapInterval" }));
    }
    return dispatch_eglSwapInterval0(paramLong, paramInt, l);
  }
  

  private static native boolean dispatch_eglSwapInterval0(long paramLong1, int paramInt, long paramLong2);
  

  public static boolean eglBindAPI(int paramInt)
  {
    long l = _table_addressof_eglBindAPI;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglBindAPI" }));
    }
    return dispatch_eglBindAPI0(paramInt, l);
  }
  

  private static native boolean dispatch_eglBindAPI0(int paramInt, long paramLong);
  

  public static int eglQueryAPI()
  {
    long l = _table_addressof_eglQueryAPI;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglQueryAPI" }));
    }
    return dispatch_eglQueryAPI0(l);
  }
  


  private static native int dispatch_eglQueryAPI0(long paramLong);
  


  public static long eglCreatePbufferFromClientBuffer(long paramLong1, int paramInt, Buffer paramBuffer, long paramLong2, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"buffer\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table_addressof_eglCreatePbufferFromClientBuffer;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreatePbufferFromClientBuffer" }));
    }
    return dispatch_eglCreatePbufferFromClientBuffer0(paramLong1, paramInt, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramLong2, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private static native long dispatch_eglCreatePbufferFromClientBuffer0(long paramLong1, int paramInt1, Object paramObject1, int paramInt2, long paramLong2, Object paramObject2, int paramInt3, long paramLong3);
  


  public static boolean eglReleaseThread()
  {
    long l = _table_addressof_eglReleaseThread;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglReleaseThread" }));
    }
    return dispatch_eglReleaseThread0(l);
  }
  

  private static native boolean dispatch_eglReleaseThread0(long paramLong);
  

  public static boolean eglWaitClient()
  {
    long l = _table_addressof_eglWaitClient;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglWaitClient" }));
    }
    return dispatch_eglWaitClient0(l);
  }
  

  private static native boolean dispatch_eglWaitClient0(long paramLong);
  

  public static long eglGetCurrentContext()
  {
    long l = _table_addressof_eglGetCurrentContext;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetCurrentContext" }));
    }
    return dispatch_eglGetCurrentContext0(l);
  }
  


  private static native long dispatch_eglGetCurrentContext0(long paramLong);
  

  public static ByteBuffer eglCreateSync(long paramLong, int paramInt, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table_addressof_eglCreateSync;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateSync" }));
    }
    
    ByteBuffer localByteBuffer = dispatch_eglCreateSync0(paramLong, paramInt, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
    if (localByteBuffer == null) return null;
    Buffers.nativeOrder(localByteBuffer);
    return localByteBuffer;
  }
  


  private static native ByteBuffer dispatch_eglCreateSync0(long paramLong1, int paramInt1, Object paramObject, int paramInt2, long paramLong2);
  


  public static boolean eglDestroySync(long paramLong, Buffer paramBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"sync\" is not a direct buffer");
    long l = _table_addressof_eglDestroySync;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglDestroySync" }));
    }
    return dispatch_eglDestroySync0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), l);
  }
  


  private static native boolean dispatch_eglDestroySync0(long paramLong1, Object paramObject, int paramInt, long paramLong2);
  


  public static int eglClientWaitSync(long paramLong1, Buffer paramBuffer, int paramInt, long paramLong2)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"sync\" is not a direct buffer");
    long l = _table_addressof_eglClientWaitSync;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglClientWaitSync" }));
    }
    return dispatch_eglClientWaitSync0(paramLong1, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, paramLong2, l);
  }
  



  private static native int dispatch_eglClientWaitSync0(long paramLong1, Object paramObject, int paramInt1, int paramInt2, long paramLong2, long paramLong3);
  


  public static boolean eglGetSyncAttrib(long paramLong, Buffer paramBuffer, int paramInt, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"sync\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"value\" is not a direct buffer");
    long l = _table_addressof_eglGetSyncAttrib;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetSyncAttrib" }));
    }
    return dispatch_eglGetSyncAttrib0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  



  private static native boolean dispatch_eglGetSyncAttrib0(long paramLong1, Object paramObject1, int paramInt1, int paramInt2, Object paramObject2, int paramInt3, long paramLong2);
  



  public static ByteBuffer eglCreateImage(long paramLong1, long paramLong2, int paramInt, Buffer paramBuffer, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"buffer\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table_addressof_eglCreateImage;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreateImage" }));
    }
    
    ByteBuffer localByteBuffer = dispatch_eglCreateImage0(paramLong1, paramLong2, paramInt, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
    if (localByteBuffer == null) return null;
    Buffers.nativeOrder(localByteBuffer);
    return localByteBuffer;
  }
  



  private static native ByteBuffer dispatch_eglCreateImage0(long paramLong1, long paramLong2, int paramInt1, Object paramObject1, int paramInt2, Object paramObject2, int paramInt3, long paramLong3);
  


  public static boolean eglDestroyImage(long paramLong, Buffer paramBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"image\" is not a direct buffer");
    long l = _table_addressof_eglDestroyImage;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglDestroyImage" }));
    }
    return dispatch_eglDestroyImage0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), l);
  }
  



  private static native boolean dispatch_eglDestroyImage0(long paramLong1, Object paramObject, int paramInt, long paramLong2);
  


  public static long eglGetPlatformDisplay(int paramInt, Buffer paramBuffer, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"native_display\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table_addressof_eglGetPlatformDisplay;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglGetPlatformDisplay" }));
    }
    return dispatch_eglGetPlatformDisplay0(paramInt, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  



  private static native long dispatch_eglGetPlatformDisplay0(int paramInt1, Object paramObject1, int paramInt2, Object paramObject2, int paramInt3, long paramLong);
  



  public static long eglCreatePlatformWindowSurface(long paramLong1, long paramLong2, Buffer paramBuffer, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"native_window\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table_addressof_eglCreatePlatformWindowSurface;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreatePlatformWindowSurface" }));
    }
    return dispatch_eglCreatePlatformWindowSurface0(paramLong1, paramLong2, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  



  private static native long dispatch_eglCreatePlatformWindowSurface0(long paramLong1, long paramLong2, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, long paramLong3);
  



  public static long eglCreatePlatformPixmapSurface(long paramLong1, long paramLong2, Buffer paramBuffer, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"native_pixmap\" is not a direct buffer");
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new RuntimeException("Argument \"attrib_list\" is not a direct buffer");
    long l = _table_addressof_eglCreatePlatformPixmapSurface;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglCreatePlatformPixmapSurface" }));
    }
    return dispatch_eglCreatePlatformPixmapSurface0(paramLong1, paramLong2, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  



  private static native long dispatch_eglCreatePlatformPixmapSurface0(long paramLong1, long paramLong2, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, long paramLong3);
  


  public static boolean eglWaitSync(long paramLong, Buffer paramBuffer, int paramInt)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new RuntimeException("Argument \"sync\" is not a direct buffer");
    long l = _table_addressof_eglWaitSync;
    if (l == 0L) {
      throw new UnsupportedOperationException(String.format("Method \"%s\" not available", new Object[] { "eglWaitSync" }));
    }
    return dispatch_eglWaitSync0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt, l);
  }
  




  private static native boolean dispatch_eglWaitSync0(long paramLong1, Object paramObject, int paramInt1, int paramInt2, long paramLong2);
  



  private static EGLProcAddressTable _table = new EGLProcAddressTable(new GLProcAddressResolver());
  
  protected static boolean resetProcAddressTable(DynamicLookupHelper paramDynamicLookupHelper) { _table.reset(paramDynamicLookupHelper);
    return (0L != _table_addressof_eglGetDisplay) && (0L != _table_addressof_eglInitialize);
  }
  

  public static final long EGL_DEFAULT_DISPLAY = 0L;
  
  public static final long EGL_NO_CONTEXT = 0L;
  
  public static final long EGL_NO_DISPLAY = 0L;
  
  public static final long EGL_NO_SURFACE = 0L;
  
  public static final int EGL_DONT_CARE = -1;
  
  public static final int EGL_UNKNOWN = -1;
  
  public static void eglGetConfigAttributes(long paramLong1, long paramLong2, IntBuffer paramIntBuffer1, IntBuffer paramIntBuffer2)
  {
    if ((paramIntBuffer1 == null) || (paramIntBuffer2 == null)) {
      throw new RuntimeException("arrays buffers are null");
    }
    if ((!Buffers.isDirect(paramIntBuffer1)) || (!Buffers.isDirect(paramIntBuffer2))) {
      throw new RuntimeException("arrays buffers are not direct");
    }
    if (paramIntBuffer1.remaining() > paramIntBuffer2.remaining()) {
      throw new RuntimeException("not enough values " + paramIntBuffer2 + " for attributes " + paramIntBuffer1);
    }
    long l = _table_addressof_eglGetConfigAttrib;
    dispatch_eglGetConfigAttributes(paramLong1, paramLong2, paramIntBuffer1.remaining(), paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramIntBuffer2, 
      Buffers.getDirectBufferByteOffset(paramIntBuffer2), l);
  }
  
  private static native void dispatch_eglGetConfigAttributes(long paramLong1, long paramLong2, int paramInt1, Object paramObject1, int paramInt2, Object paramObject2, int paramInt3, long paramLong3);
}
