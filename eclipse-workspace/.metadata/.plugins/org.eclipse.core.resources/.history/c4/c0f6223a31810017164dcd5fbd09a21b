package jogamp.opengl.egl;

import com.jogamp.common.ExceptionUtils;
import com.jogamp.common.nio.Buffers;
import com.jogamp.common.util.VersionNumber;
import com.jogamp.gluegen.runtime.ProcAddressTable;
import com.jogamp.gluegen.runtime.opengl.GLProcAddressResolver;
import com.jogamp.nativewindow.AbstractGraphicsConfiguration;
import com.jogamp.nativewindow.AbstractGraphicsDevice;
import com.jogamp.nativewindow.AbstractGraphicsScreen;
import com.jogamp.nativewindow.NativeSurface;
import com.jogamp.nativewindow.egl.EGLGraphicsDevice;
import com.jogamp.opengl.GLCapabilitiesImmutable;
import com.jogamp.opengl.GLContext;
import com.jogamp.opengl.GLDrawableFactory;
import com.jogamp.opengl.GLException;
import com.jogamp.opengl.GLProfile;
import com.jogamp.opengl.GLRendererQuirks;
import com.jogamp.opengl.egl.EGL;
import com.jogamp.opengl.egl.EGLExt;
import java.io.PrintStream;
import java.nio.IntBuffer;
import java.util.HashMap;
import java.util.Map;
import jogamp.opengl.GLContextImpl;
import jogamp.opengl.GLContextImpl.MappedGLVersionListener;
import jogamp.opengl.GLDrawableImpl;
import jogamp.opengl.GLDynamicLookupHelper;


































public class EGLContext
  extends GLContextImpl
{
  private EGLExtProcAddressTable eglExtProcAddressTable;
  private EGLExtImpl eglExtImpl;
  static final int CTX_PROFILE_COMPAT = 2;
  static final int CTX_PROFILE_CORE = 4;
  static final int CTX_PROFILE_ES = 8;
  private static final int ctx_attribs_idx_major = 0;
  
  public static String getGLProfile(int paramInt1, int paramInt2, int paramInt3)
    throws GLException
  {
    return GLContext.getGLProfile(paramInt1, paramInt2, paramInt3);
  }
  
  EGLContext(GLDrawableImpl paramGLDrawableImpl, GLContext paramGLContext)
  {
    super(paramGLDrawableImpl, paramGLContext);
  }
  
  protected void resetStates(boolean paramBoolean)
  {
    eglExtProcAddressTable = null;
    eglExtImpl = null;
    super.resetStates(paramBoolean);
  }
  
  public Object getPlatformGLExtensions()
  {
    return getEGLExt();
  }
  
  public final EGLExt getEGLExt() {
    return eglExtImpl;
  }
  
  public final ProcAddressTable getPlatformExtProcAddressTable()
  {
    return eglExtProcAddressTable;
  }
  
  protected Map<String, String> getFunctionNameMap() {
    return null;
  }
  
  protected Map<String, String> getExtensionNameMap() { return null; }
  
  public final boolean isGLReadDrawableAvailable()
  {
    return true;
  }
  
  protected void makeCurrentImpl() throws GLException
  {
    long l = drawable.getNativeSurface().getDisplayHandle();
    if (!EGL.eglMakeCurrent(l, drawable.getHandle(), drawableRead.getHandle(), contextHandle))
    {




      throw new GLException("Error making context " + toHexString(contextHandle) + " current on Thread " + getThreadName() + " with display " + toHexString(l) + ", drawableWrite " + toHexString(drawable.getHandle()) + ", drawableRead " + toHexString(drawableRead.getHandle()) + " - Error code " + toHexString(EGL.eglGetError()) + ", " + this);
    }
  }
  
  protected void releaseImpl() throws GLException
  {
    if (!EGL.eglMakeCurrent(drawable.getNativeSurface().getDisplayHandle(), 0L, 0L, 0L))
    {
      throw new GLException("Error freeing OpenGL context " + toHexString(contextHandle) + ": error code " + toHexString(EGL.eglGetError()));
    }
  }
  
  protected void destroyImpl() throws GLException
  {
    destroyContextARBImpl(contextHandle);
  }
  
  protected void destroyContextARBImpl(long paramLong)
  {
    if (!EGL.eglDestroyContext(drawable.getNativeSurface().getDisplayHandle(), paramLong)) {
      int i = EGL.eglGetError();
      if (12288 != i)
      {
        throw new GLException("Error destroying OpenGL context " + toHexString(paramLong) + ": error code " + toHexString(i));
      }
    }
  }
  

  private static final int[] ctx_attribs_rom = { 12440, 0, 12344, 12344, 12344, 12344, 12344, 12344, 12344, 12344, 12344 };
  







  protected long createContextARBImpl(long paramLong, boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3)
  {
    EGLGraphicsConfiguration localEGLGraphicsConfiguration = (EGLGraphicsConfiguration)drawable.getNativeSurface().getGraphicsConfiguration();
    EGLGraphicsDevice localEGLGraphicsDevice = (EGLGraphicsDevice)localEGLGraphicsConfiguration.getScreen().getDevice();
    long l1 = localEGLGraphicsDevice.getHandle();
    long l2 = localEGLGraphicsConfiguration.getNativeConfig();
    EGLDrawableFactory localEGLDrawableFactory = (EGLDrawableFactory)drawable.getFactoryImpl();
    
    boolean bool1 = localEGLDrawableFactory.hasOpenGLDesktopSupport();
    boolean bool2 = localEGLDrawableFactory.hasDefaultDeviceKHRCreateContext();
    int i = 0 == (0x8 & paramInt1) ? 1 : 0;
    int j = 0 != (0x2 & paramInt1) ? 1 : 0;
    int k = 0 != (0x10 & paramInt1) ? 1 : 0;
    int m = 0 != (0x20 & paramInt1) ? 1 : 0;
    
    if (DEBUG) {
      System.err.println(getThreadName() + ": EGLContext.createContextARBImpl: Start " + getGLVersion(paramInt2, paramInt3, paramInt1, "@creation") + ", useKHRCreateContext " + bool2 + ", OpenGL API Support " + bool1 + ", device " + localEGLGraphicsDevice);
    }
    


    if (0L == l1) {
      throw new GLException("Error: attempted to create an OpenGL context without a display connection");
    }
    if (0L == l2) {
      throw new GLException("Error: attempted to create an OpenGL context without a graphics configuration");
    }
    













    if ((i != 0) && (!bool1)) {
      if (DEBUG) {
        System.err.println(getThreadName() + ": EGLContext.createContextARBImpl: DesktopGL not avail " + getGLVersion(paramInt2, paramInt3, paramInt1, "@creation"));
      }
      return 0L;
    }
    try
    {
      if ((bool1) && (localEGLGraphicsDevice.getEGLVersion().compareTo(Version1_2) >= 0)) {
        EGL.eglWaitClient();
      }
      if (!EGL.eglBindAPI(i != 0 ? 12450 : 12448)) {
        throw new GLException("Caught: eglBindAPI to " + (i != 0 ? "ES" : "GL") + " failed , error " + toHexString(EGL.eglGetError()) + " - " + getGLVersion(paramInt2, paramInt3, paramInt1, "@creation"));
      }
    } catch (GLException localGLException) {
      if (DEBUG) {
        ExceptionUtils.dumpThrowable("", localGLException);
      }
    }
    
    int n;
    if ((paramInt2 >= 3) && 
      (GLRendererQuirks.existStickyDeviceQuirk(GLDrawableFactory.getEGLFactory().getDefaultDevice(), 15))) {
      n = 2;
    } else {
      n = paramInt2;
    }
    
    IntBuffer localIntBuffer = Buffers.newDirectIntBuffer(ctx_attribs_rom);
    if (bool2) {
      localIntBuffer.put(1, n);
      
      int i1 = 2;
      
      if (paramInt3 >= 0) {
        localIntBuffer.put(i1 + 0, 12539);
        localIntBuffer.put(i1 + 1, paramInt3);
        i1 += 2;
      }
      
      if ((i != 0) && ((n > 3) || ((n == 3) && (paramInt3 >= 2)))) {
        localIntBuffer.put(i1 + 0, 12541);
        if (j != 0) {
          localIntBuffer.put(i1 + 1, 2);
        } else {
          localIntBuffer.put(i1 + 1, 1);
        }
        i1 += 2;
      }
      int i2 = 0;
      if ((i != 0) && (n >= 3) && (j == 0) && (k != 0)) {
        i2 |= 0x2;
      }
      if (m != 0) {
        i2 |= 0x1;
      }
      
      if (0 != i2) {
        localIntBuffer.put(i1 + 0, 12540);
        localIntBuffer.put(i1 + 1, i2);
        i1 += 2;
      }
      if (DEBUG) {
        System.err.println(getThreadName() + ": EGLContext.createContextARBImpl: attrs.1: major " + n + ", flags " + toHexString(i2) + ", index " + i1);
      }
    } else {
      localIntBuffer.put(1, n);
      if (DEBUG) {
        System.err.println(getThreadName() + ": EGLContext.createContextARBImpl: attrs.2: major " + n);
      }
    }
    
    long l3 = 0L;
    try {
      l3 = EGL.eglCreateContext(l1, l2, paramLong, localIntBuffer);
    } catch (RuntimeException localRuntimeException) {
      if (DEBUG) {
        System.err.println(getThreadName() + ": Info: EGLContext.createContextARBImpl glXCreateContextAttribsARB failed with " + getGLVersion(paramInt2, paramInt3, paramInt1, "@creation"));
        ExceptionUtils.dumpThrowable("", localRuntimeException);
      }
    }
    
    if (0L != l3) {
      if (!EGL.eglMakeCurrent(l1, drawable.getHandle(), drawableRead.getHandle(), l3)) {
        if (DEBUG) {
          System.err.println(getThreadName() + ": EGLContext.createContextARBImpl couldn't make current " + getGLVersion(paramInt2, paramInt3, paramInt1, "@creation") + " - error " + toHexString(EGL.eglGetError()));
        }
        
        EGL.eglMakeCurrent(l1, 0L, 0L, 0L);
        EGL.eglDestroyContext(l1, l3);
        l3 = 0L;
      } else if (DEBUG) {
        System.err.println(getThreadName() + ": EGLContext.createContextARBImpl: OK " + getGLVersion(paramInt2, paramInt3, paramInt1, "@creation") + ", share " + paramLong + ", direct " + paramBoolean);
      }
    } else if (DEBUG) {
      System.err.println(getThreadName() + ": EGLContext.createContextARBImpl: NO " + getGLVersion(paramInt2, paramInt3, paramInt1, "@creation") + " - error " + toHexString(EGL.eglGetError()));
    }
    
    return l3;
  }
  
  protected boolean createImpl(long paramLong) throws GLException
  {
    EGLGraphicsConfiguration localEGLGraphicsConfiguration = (EGLGraphicsConfiguration)drawable.getNativeSurface().getGraphicsConfiguration();
    AbstractGraphicsDevice localAbstractGraphicsDevice = localEGLGraphicsConfiguration.getScreen().getDevice();
    GLCapabilitiesImmutable localGLCapabilitiesImmutable = (GLCapabilitiesImmutable)localEGLGraphicsConfiguration.getChosenCapabilities();
    GLProfile localGLProfile = localGLCapabilitiesImmutable.getGLProfile();
    boolean bool = isCreateContextARBAvail(localAbstractGraphicsDevice);
    if (DEBUG) {
      System.err.println(getThreadName() + ": EGLContext.createImpl: START " + localGLCapabilitiesImmutable + ", share " + toHexString(paramLong));
      System.err.println(getThreadName() + ": Use ARB[avail[" + getCreateContextARBAvailStr(localAbstractGraphicsDevice) + "] -> " + bool + "]]");
    }
    
    if (bool) {
      contextHandle = createContextARB(paramLong, true);
      if (DEBUG) {
        if (0L != contextHandle) {
          System.err.println(getThreadName() + ": createImpl: OK (ARB) on eglDevice " + localAbstractGraphicsDevice + ", eglConfig " + localEGLGraphicsConfiguration + ", " + localGLProfile + ", shareWith " + 
            toHexString(paramLong) + ", error " + toHexString(EGL.eglGetError()));
        } else {
          System.err.println(getThreadName() + ": createImpl: NOT OK (ARB) - creation failed on eglDevice " + localAbstractGraphicsDevice + ", eglConfig " + localEGLGraphicsConfiguration + ", " + localGLProfile + ", shareWith " + 
            toHexString(paramLong) + ", error " + toHexString(EGL.eglGetError()));
        }
      }
    } else {
      contextHandle = 0L;
    }
    if (0L == contextHandle) {
      if (!localGLProfile.isGLES())
      {
        throw new GLException(getThreadName() + ": Unable to create desktop OpenGL context(ARB n/a) on eglDevice " + localAbstractGraphicsDevice + ", eglConfig " + localEGLGraphicsConfiguration + ", " + localGLProfile + ", shareWith " + toHexString(paramLong) + ", error " + toHexString(EGL.eglGetError()));
      }
      int[] arrayOfInt = { 0, 0 };
      GLContext.getRequestMajorAndCompat(localGLProfile, arrayOfInt);
      arrayOfInt[1] |= getContextCreationFlags();
      
      contextHandle = createContextARBImpl(paramLong, true, arrayOfInt[1], arrayOfInt[0], 0);
      if (0L == contextHandle)
      {
        throw new GLException(getThreadName() + ": Unable to create ES OpenGL context on eglDevice " + localAbstractGraphicsDevice + ", eglConfig " + localEGLGraphicsConfiguration + ", " + localGLProfile + ", shareWith " + toHexString(paramLong) + ", error " + toHexString(EGL.eglGetError()));
      }
      if (!setGLFunctionAvailability(true, arrayOfInt[0], 0, arrayOfInt[1], false, false)) {
        EGL.eglMakeCurrent(drawable.getNativeSurface().getDisplayHandle(), 0L, 0L, 0L);
        EGL.eglDestroyContext(drawable.getNativeSurface().getDisplayHandle(), contextHandle);
        contextHandle = 0L;
        throw new GLException("setGLFunctionAvailability !strictMatch failed");
      }
    }
    if (DEBUG) {
      System.err.println(getThreadName() + ": createImpl: Created OpenGL context 0x" + 
        Long.toHexString(contextHandle) + ",\n\twrite surface 0x" + 
        Long.toHexString(drawable.getHandle()) + ",\n\tread  surface 0x" + 
        Long.toHexString(drawableRead.getHandle()) + ",\n\t" + this + ",\n\tsharing with 0x" + 
        
        Long.toHexString(paramLong));
    }
    return true;
  }
  
  protected final void updateGLXProcAddressTable(String paramString, GLDynamicLookupHelper paramGLDynamicLookupHelper)
  {
    if (null == paramGLDynamicLookupHelper) {
      throw new GLException("No GLDynamicLookupHelper for " + this);
    }
    AbstractGraphicsConfiguration localAbstractGraphicsConfiguration = drawable.getNativeSurface().getGraphicsConfiguration();
    AbstractGraphicsDevice localAbstractGraphicsDevice = localAbstractGraphicsConfiguration.getScreen().getDevice();
    String str = "EGL-" + localAbstractGraphicsDevice.getUniqueID();
    
    if (DEBUG) {
      System.err.println(getThreadName() + ": Initializing EGLextension address table: " + str);
    }
    ProcAddressTable localProcAddressTable = null;
    synchronized (mappedContextTypeObjectLock) {
      localProcAddressTable = (ProcAddressTable)mappedGLXProcAddress.get(str);
    }
    if (null != localProcAddressTable) {
      eglExtProcAddressTable = ((EGLExtProcAddressTable)localProcAddressTable);
      if (DEBUG) {
        System.err.println(getThreadName() + ": GLContext EGL ProcAddressTable reusing key(" + str + ") -> " + toHexString(localProcAddressTable.hashCode()));
      }
      if ((null == eglExtImpl) || (eglExtImpl.getProcAdressTable() != eglExtProcAddressTable)) {
        eglExtImpl = new EGLExtImpl(this, eglExtProcAddressTable);
      }
    } else {
      eglExtProcAddressTable = new EGLExtProcAddressTable(new GLProcAddressResolver());
      resetProcAddressTable(eglExtProcAddressTable, paramGLDynamicLookupHelper);
      synchronized (mappedContextTypeObjectLock) {
        mappedGLXProcAddress.put(str, eglExtProcAddressTable);
        if (DEBUG) {
          System.err.println(getThreadName() + ": GLContext EGL ProcAddressTable mapping key(" + str + ") -> " + toHexString(eglExtProcAddressTable.hashCode()));
        }
      }
      eglExtImpl = new EGLExtImpl(this, eglExtProcAddressTable);
    }
  }
  
  protected final StringBuilder getPlatformExtensionsStringImpl()
  {
    EGLGraphicsDevice localEGLGraphicsDevice = (EGLGraphicsDevice)drawable.getNativeSurface().getGraphicsConfiguration().getScreen().getDevice();
    return getPlatformExtensionsStringImpl(localEGLGraphicsDevice);
  }
  
  static final StringBuilder getPlatformExtensionsStringImpl(EGLGraphicsDevice paramEGLGraphicsDevice) { StringBuilder localStringBuilder = new StringBuilder();
    paramEGLGraphicsDevice.lock();
    try {
      long l = paramEGLGraphicsDevice.getHandle();
      if (DEBUG) {
        System.err.println("EGL PlatformExtensions: Device " + paramEGLGraphicsDevice);
        EGLDrawableFactory.dumpEGLInfo("EGL PlatformExtensions: ", l); }
      String str;
      if (paramEGLGraphicsDevice.getEGLVersion().compareTo(Version1_5) >= 0) {
        str = EGL.eglQueryString(0L, 12373);
        if (DEBUG) {
          System.err.println("EGL extensions (Client): " + str);
        }
        localStringBuilder.append(str).append(" ");
      }
      if (0L != l) {
        str = EGL.eglQueryString(l, 12373);
        if (DEBUG) {
          System.err.println("EGL extensions (Server): " + str);
        }
        localStringBuilder.append(str).append(" ");
      }
    } finally {
      paramEGLGraphicsDevice.unlock();
    }
    return localStringBuilder;
  }
  
  protected final Integer setSwapIntervalImpl2(int paramInt)
  {
    if ((!drawable.getChosenGLCapabilities().isOnscreen()) || 
      (hasRendererQuirk(2))) {
      return null;
    }
    int i;
    if (0 > paramInt) {
      i = Math.abs(paramInt);
    } else {
      i = paramInt;
    }
    if (EGL.eglSwapInterval(drawable.getNativeSurface().getDisplayHandle(), i)) {
      return Integer.valueOf(i);
    }
    return null;
  }
  
  static long eglGetProcAddress(long paramLong, String paramString)
  {
    if (0L == paramLong) {
      throw new GLException("Passed null pointer for method \"eglGetProcAddress\"");
    }
    return dispatch_eglGetProcAddress0(paramString, paramLong);
  }
  



  private static native long dispatch_eglGetProcAddress0(String paramString, long paramLong);
  


  static final boolean isGLES1(int paramInt1, int paramInt2) { return (0 != (paramInt2 & 0x8)) && (paramInt1 == 1); }
  
  static final boolean isGLES2ES3(int paramInt1, int paramInt2) {
    if (0 != (paramInt2 & 0x8)) {
      return (2 == paramInt1) || (3 == paramInt1);
    }
    return false;
  }
  
  static final boolean isGLDesktop(int paramInt) {
    return 0 != (paramInt & 0x6);
  }
  
  protected static StringBuilder getGLProfile(StringBuilder paramStringBuilder, int paramInt) { return GLContext.getGLProfile(paramStringBuilder, paramInt); }
  
  int getContextOptions() { return ctxOptions; }
  
  protected static void remapAvailableGLVersions(AbstractGraphicsDevice paramAbstractGraphicsDevice1, AbstractGraphicsDevice paramAbstractGraphicsDevice2) { GLContextImpl.remapAvailableGLVersions(paramAbstractGraphicsDevice1, paramAbstractGraphicsDevice2); }
  
  protected static synchronized void setMappedGLVersionListener(GLContextImpl.MappedGLVersionListener paramMappedGLVersionListener) {
    GLContextImpl.setMappedGLVersionListener(paramMappedGLVersionListener);
  }
  
  protected static String getGLVersion(int paramInt1, int paramInt2, int paramInt3, String paramString) {
    return GLContext.getGLVersion(paramInt1, paramInt2, paramInt3, paramString);
  }
  
  protected static String toHexString(int paramInt) {
    return GLContext.toHexString(paramInt);
  }
  
  protected static String toHexString(long paramLong) { return GLContext.toHexString(paramLong); }
  




  protected void copyImpl(GLContext paramGLContext, int paramInt)
    throws GLException
  {
    throw new GLException("Not yet implemented");
  }
}
