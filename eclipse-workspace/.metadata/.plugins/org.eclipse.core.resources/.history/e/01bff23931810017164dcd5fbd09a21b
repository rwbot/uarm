package com.jogamp.opengl.util.gl2;

import com.jogamp.opengl.GL2;
import com.jogamp.opengl.GLException;
import com.jogamp.opengl.glu.GLUquadric;
import com.jogamp.opengl.glu.gl2.GLUgl2;

























































































public class GLUT
{
  public static final int STROKE_ROMAN = 0;
  public static final int STROKE_MONO_ROMAN = 1;
  public static final int BITMAP_9_BY_15 = 2;
  public static final int BITMAP_8_BY_13 = 3;
  public static final int BITMAP_TIMES_ROMAN_10 = 4;
  public static final int BITMAP_TIMES_ROMAN_24 = 5;
  public static final int BITMAP_HELVETICA_10 = 6;
  public static final int BITMAP_HELVETICA_12 = 7;
  public static final int BITMAP_HELVETICA_18 = 8;
  private final GLUgl2 glu = new GLUgl2();
  private GLUquadric quadObj;
  private static float[][] boxVertices;
  
  public GLUT() {}
  
  public void glutWireSphere(double paramDouble, int paramInt1, int paramInt2) {
    quadObjInit(glu);
    glu.gluQuadricDrawStyle(quadObj, 100011);
    glu.gluQuadricNormals(quadObj, 100000);
    


    glu.gluSphere(quadObj, paramDouble, paramInt1, paramInt2);
  }
  
  public void glutSolidSphere(double paramDouble, int paramInt1, int paramInt2) {
    quadObjInit(glu);
    glu.gluQuadricDrawStyle(quadObj, 100012);
    glu.gluQuadricNormals(quadObj, 100000);
    


    glu.gluSphere(quadObj, paramDouble, paramInt1, paramInt2);
  }
  
  public void glutWireCone(double paramDouble1, double paramDouble2, int paramInt1, int paramInt2)
  {
    quadObjInit(glu);
    glu.gluQuadricDrawStyle(quadObj, 100011);
    glu.gluQuadricNormals(quadObj, 100000);
    


    glu.gluCylinder(quadObj, paramDouble1, 0.0D, paramDouble2, paramInt1, paramInt2);
  }
  
  public void glutSolidCone(double paramDouble1, double paramDouble2, int paramInt1, int paramInt2)
  {
    quadObjInit(glu);
    glu.gluQuadricDrawStyle(quadObj, 100012);
    glu.gluQuadricNormals(quadObj, 100000);
    


    glu.gluCylinder(quadObj, paramDouble1, 0.0D, paramDouble2, paramInt1, paramInt2);
  }
  
  public void glutWireCylinder(double paramDouble1, double paramDouble2, int paramInt1, int paramInt2) {
    quadObjInit(glu);
    glu.gluQuadricDrawStyle(quadObj, 100011);
    glu.gluQuadricNormals(quadObj, 100000);
    


    glu.gluCylinder(quadObj, paramDouble1, paramDouble1, paramDouble2, paramInt1, paramInt2);
  }
  
  public void glutSolidCylinder(double paramDouble1, double paramDouble2, int paramInt1, int paramInt2) {
    GL2 localGL2 = GLUgl2.getCurrentGL2();
    

    double[] arrayOfDouble1 = new double[paramInt1];
    double[] arrayOfDouble2 = new double[paramInt1];
    double d1 = 6.283185307179586D / paramInt1;
    double d2 = 0.0D;
    for (int i = 0; i < paramInt1; i++) {
      d2 = i * d1;
      arrayOfDouble1[i] = (Math.cos(d2) * paramDouble1);
      arrayOfDouble2[i] = (Math.sin(d2) * paramDouble1);
    }
    

    localGL2.glBegin(6);
    localGL2.glNormal3d(0.0D, 0.0D, -1.0D);
    localGL2.glVertex3d(0.0D, 0.0D, 0.0D);
    for (i = 0; i < paramInt1; i++) {
      localGL2.glVertex3d(arrayOfDouble1[i], arrayOfDouble2[i], 0.0D);
    }
    localGL2.glVertex3d(arrayOfDouble1[0], arrayOfDouble2[0], 0.0D);
    localGL2.glEnd();
    

    localGL2.glBegin(6);
    localGL2.glNormal3d(0.0D, 0.0D, 1.0D);
    localGL2.glVertex3d(0.0D, 0.0D, paramDouble2);
    for (i = 0; i < paramInt1; i++) {
      localGL2.glVertex3d(arrayOfDouble1[i], arrayOfDouble2[i], paramDouble2);
    }
    localGL2.glVertex3d(arrayOfDouble1[0], arrayOfDouble2[0], paramDouble2);
    localGL2.glEnd();
    

    quadObjInit(glu);
    glu.gluQuadricDrawStyle(quadObj, 100012);
    glu.gluQuadricNormals(quadObj, 100000);
    


    glu.gluCylinder(quadObj, paramDouble1, paramDouble1, paramDouble2, paramInt1, paramInt2);
  }
  
  public void glutWireCube(float paramFloat) {
    drawBox(GLUgl2.getCurrentGL2(), paramFloat, 2);
  }
  
  public void glutSolidCube(float paramFloat) {
    drawBox(GLUgl2.getCurrentGL2(), paramFloat, 7);
  }
  
  public void glutWireTorus(double paramDouble1, double paramDouble2, int paramInt1, int paramInt2)
  {
    GL2 localGL2 = GLUgl2.getCurrentGL2();
    localGL2.glPushAttrib(8);
    localGL2.glPolygonMode(1032, 6913);
    doughnut(localGL2, paramDouble1, paramDouble2, paramInt1, paramInt2);
    localGL2.glPopAttrib();
  }
  
  public void glutSolidTorus(double paramDouble1, double paramDouble2, int paramInt1, int paramInt2)
  {
    doughnut(GLUgl2.getCurrentGL2(), paramDouble1, paramDouble2, paramInt1, paramInt2);
  }
  
  public void glutWireDodecahedron() {
    dodecahedron(GLUgl2.getCurrentGL2(), 2);
  }
  
  public void glutSolidDodecahedron() {
    dodecahedron(GLUgl2.getCurrentGL2(), 6);
  }
  
  public void glutWireOctahedron() {
    octahedron(GLUgl2.getCurrentGL2(), 2);
  }
  
  public void glutSolidOctahedron() {
    octahedron(GLUgl2.getCurrentGL2(), 4);
  }
  
  public void glutWireIcosahedron() {
    icosahedron(GLUgl2.getCurrentGL2(), 2);
  }
  
  public void glutSolidIcosahedron() {
    icosahedron(GLUgl2.getCurrentGL2(), 4);
  }
  
  public void glutWireTetrahedron() {
    tetrahedron(GLUgl2.getCurrentGL2(), 2);
  }
  
  public void glutSolidTetrahedron() {
    tetrahedron(GLUgl2.getCurrentGL2(), 4);
  }
  






  public void glutSolidTeapot(double paramDouble)
  {
    glutSolidTeapot(paramDouble, true);
  }
  














  public void glutSolidTeapot(double paramDouble, boolean paramBoolean)
  {
    teapot(GLUgl2.getCurrentGL2(), 14, paramDouble, 6914, paramBoolean);
  }
  






  public void glutWireTeapot(double paramDouble)
  {
    glutWireTeapot(paramDouble, true);
  }
  














  public void glutWireTeapot(double paramDouble, boolean paramBoolean)
  {
    teapot(GLUgl2.getCurrentGL2(), 10, paramDouble, 6913, paramBoolean);
  }
  



  public void glutBitmapCharacter(int paramInt, char paramChar)
  {
    GL2 localGL2 = GLUgl2.getCurrentGL2();
    int[] arrayOfInt1 = new int[1];
    int[] arrayOfInt2 = new int[1];
    int[] arrayOfInt3 = new int[1];
    int[] arrayOfInt4 = new int[1];
    int[] arrayOfInt5 = new int[1];
    int[] arrayOfInt6 = new int[1];
    beginBitmap(localGL2, arrayOfInt1, arrayOfInt2, arrayOfInt3, arrayOfInt4, arrayOfInt5, arrayOfInt6);
    





    bitmapCharacterImpl(localGL2, paramInt, paramChar);
    endBitmap(localGL2, arrayOfInt1, arrayOfInt2, arrayOfInt3, arrayOfInt4, arrayOfInt5, arrayOfInt6);
  }
  





  public void glutBitmapString(int paramInt, String paramString)
  {
    GL2 localGL2 = GLUgl2.getCurrentGL2();
    int[] arrayOfInt1 = new int[1];
    int[] arrayOfInt2 = new int[1];
    int[] arrayOfInt3 = new int[1];
    int[] arrayOfInt4 = new int[1];
    int[] arrayOfInt5 = new int[1];
    int[] arrayOfInt6 = new int[1];
    beginBitmap(localGL2, arrayOfInt1, arrayOfInt2, arrayOfInt3, arrayOfInt4, arrayOfInt5, arrayOfInt6);
    





    int i = paramString.length();
    for (int j = 0; j < i; j++) {
      bitmapCharacterImpl(localGL2, paramInt, paramString.charAt(j));
    }
    endBitmap(localGL2, arrayOfInt1, arrayOfInt2, arrayOfInt3, arrayOfInt4, arrayOfInt5, arrayOfInt6);
  }
  





  public int glutBitmapWidth(int paramInt, char paramChar)
  {
    BitmapFontRec localBitmapFontRec = getBitmapFont(paramInt);
    int i = paramChar & 0xFFFF;
    if ((i < first) || (i >= first + num_chars))
      return 0;
    BitmapCharRec localBitmapCharRec = ch[(i - first)];
    if (localBitmapCharRec != null) {
      return (int)advance;
    }
    return 0;
  }
  
  public void glutStrokeCharacter(int paramInt, char paramChar) {
    GL2 localGL2 = GLUgl2.getCurrentGL2();
    StrokeFontRec localStrokeFontRec = getStrokeFont(paramInt);
    int i = paramChar & 0xFFFF;
    if ((i < 0) || (i >= num_chars))
      return;
    StrokeCharRec localStrokeCharRec = ch[i];
    if (localStrokeCharRec != null) {
      for (int j = 0; j < num_strokes; j++) {
        StrokeRec localStrokeRec = stroke[j];
        localGL2.glBegin(3);
        for (int k = 0; k < num_coords; k++) {
          CoordRec localCoordRec = coord[k];
          localGL2.glVertex2f(x, y);
        }
        localGL2.glEnd();
      }
      localGL2.glTranslatef(right, 0.0F, 0.0F);
    }
  }
  
  public void glutStrokeString(int paramInt, String paramString) {
    GL2 localGL2 = GLUgl2.getCurrentGL2();
    StrokeFontRec localStrokeFontRec = getStrokeFont(paramInt);
    int i = paramString.length();
    for (int j = 0; j < i; j++) {
      int k = paramString.charAt(j) & 0xFFFF;
      if ((k >= 0) && (k < num_chars))
      {
        StrokeCharRec localStrokeCharRec = ch[k];
        if (localStrokeCharRec != null) {
          for (int m = 0; m < num_strokes; m++) {
            StrokeRec localStrokeRec = stroke[m];
            localGL2.glBegin(3);
            for (int n = 0; n < num_coords; n++) {
              CoordRec localCoordRec = coord[n];
              localGL2.glVertex2f(x, y);
            }
            localGL2.glEnd();
          }
          localGL2.glTranslatef(right, 0.0F, 0.0F);
        }
      }
    }
  }
  
  public int glutStrokeWidth(int paramInt, char paramChar) { return (int)glutStrokeWidthf(paramInt, paramChar); }
  
  public float glutStrokeWidthf(int paramInt, char paramChar)
  {
    StrokeFontRec localStrokeFontRec = getStrokeFont(paramInt);
    int i = paramChar & 0xFFFF;
    if ((i < 0) || (i >= num_chars))
      return 0.0F;
    StrokeCharRec localStrokeCharRec = ch[i];
    if (localStrokeCharRec != null) {
      return right;
    }
    return 0.0F;
  }
  
  public int glutBitmapLength(int paramInt, String paramString) {
    BitmapFontRec localBitmapFontRec = getBitmapFont(paramInt);
    int i = 0;
    int j = paramString.length();
    for (int k = 0; k < j; k++) {
      int m = paramString.charAt(k) & 0xFFFF;
      if ((m >= first) && (m < first + num_chars)) {
        BitmapCharRec localBitmapCharRec = ch[(m - first)];
        if (localBitmapCharRec != null)
          i = (int)(i + advance);
      }
    }
    return i;
  }
  
  public int glutStrokeLength(int paramInt, String paramString) {
    return (int)glutStrokeLengthf(paramInt, paramString);
  }
  
  public float glutStrokeLengthf(int paramInt, String paramString) {
    StrokeFontRec localStrokeFontRec = getStrokeFont(paramInt);
    float f = 0.0F;
    int i = paramString.length();
    for (int j = 0; j < i; j++) {
      int k = paramString.charAt(j);
      if ((k >= 0) && (k < num_chars)) {
        StrokeCharRec localStrokeCharRec = ch[k];
        if (localStrokeCharRec != null)
          f += right;
      }
    }
    return f;
  }
  






  public void glutWireRhombicDodecahedron()
  {
    GL2 localGL2 = GLUgl2.getCurrentGL2();
    for (int i = 0; i < 12; i++) {
      localGL2.glBegin(2);
      localGL2.glNormal3dv(rdod_n[i], 0);
      localGL2.glVertex3dv(rdod_r[rdod_v[i][0]], 0);
      localGL2.glVertex3dv(rdod_r[rdod_v[i][1]], 0);
      localGL2.glVertex3dv(rdod_r[rdod_v[i][2]], 0);
      localGL2.glVertex3dv(rdod_r[rdod_v[i][3]], 0);
      localGL2.glEnd();
    }
  }
  






  public void glutSolidRhombicDodecahedron()
  {
    GL2 localGL2 = GLUgl2.getCurrentGL2();
    localGL2.glBegin(7);
    for (int i = 0; i < 12; i++) {
      localGL2.glNormal3dv(rdod_n[i], 0);
      localGL2.glVertex3dv(rdod_r[rdod_v[i][0]], 0);
      localGL2.glVertex3dv(rdod_r[rdod_v[i][1]], 0);
      localGL2.glVertex3dv(rdod_r[rdod_v[i][2]], 0);
      localGL2.glVertex3dv(rdod_r[rdod_v[i][3]], 0);
    }
    localGL2.glEnd();
  }
  








  private void quadObjInit(GLUgl2 paramGLUgl2)
  {
    if (quadObj == null) {
      quadObj = paramGLUgl2.gluNewQuadric();
    }
    if (quadObj == null) {
      throw new GLException("Out of memory");
    }
  }
  





  private static void doughnut(GL2 paramGL2, double paramDouble1, double paramDouble2, int paramInt1, int paramInt2)
  {
    float f8 = (float)(6.283185307179586D / paramInt2);
    float f9 = (float)(6.283185307179586D / paramInt1);
    
    float f1 = 0.0F;
    float f4 = 1.0F;
    float f5 = 0.0F;
    for (int i = paramInt2 - 1; i >= 0; i--) {
      float f3 = f1 + f8;
      float f6 = (float)Math.cos(f3);
      float f7 = (float)Math.sin(f3);
      paramGL2.glBegin(8);
      float f2 = 0.0F;
      for (int j = paramInt1; j >= 0; j--)
      {

        f2 += f9;
        float f10 = (float)Math.cos(f2);
        float f11 = (float)Math.sin(f2);
        float f12 = (float)(paramDouble2 + paramDouble1 * f10);
        
        paramGL2.glNormal3f(f6 * f10, -f7 * f10, f11);
        paramGL2.glVertex3f(f6 * f12, -f7 * f12, (float)paramDouble1 * f11);
        paramGL2.glNormal3f(f4 * f10, -f5 * f10, f11);
        paramGL2.glVertex3f(f4 * f12, -f5 * f12, (float)paramDouble1 * f11);
      }
      paramGL2.glEnd();
      f1 = f3;
      f4 = f6;
      f5 = f7;
    }
  }
  

  private static final float[][] boxNormals = { { -1.0F, 0.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 1.0F, 0.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, 0.0F, 1.0F }, { 0.0F, 0.0F, -1.0F } };
  






  private static final int[][] boxFaces = { { 0, 1, 2, 3 }, { 3, 2, 6, 7 }, { 7, 6, 5, 4 }, { 4, 5, 1, 0 }, { 5, 6, 2, 1 }, { 7, 4, 0, 3 } };
  

  private float[][] dodec;
  


  private void drawBox(GL2 paramGL2, float paramFloat, int paramInt)
  {
    if (boxVertices == null) {
      localObject1 = new float[8][];
      for (int i = 0; i < 8; i++) {
        localObject1[i] = new float[3];
      }
      float tmp63_62 = (localObject1[2][0] = localObject1[3][0] = -0.5F);localObject1[1][0] = tmp63_62;localObject1[0][0] = tmp63_62; float 
        tmp94_93 = (localObject1[6][0] = localObject1[7][0] = 0.5F);localObject1[5][0] = tmp94_93;localObject1[4][0] = tmp94_93; float 
        tmp123_122 = (localObject1[4][1] = localObject1[5][1] = -0.5F);localObject1[1][1] = tmp123_122;localObject1[0][1] = tmp123_122; float 
        tmp154_153 = (localObject1[6][1] = localObject1[7][1] = 0.5F);localObject1[3][1] = tmp154_153;localObject1[2][1] = tmp154_153; float 
        tmp184_183 = (localObject1[4][2] = localObject1[7][2] = -0.5F);localObject1[3][2] = tmp184_183;localObject1[0][2] = tmp184_183; float 
        tmp214_213 = (localObject1[5][2] = localObject1[6][2] = 0.5F);localObject1[2][2] = tmp214_213;localObject1[1][2] = tmp214_213;
      boxVertices = (float[][])localObject1;
    }
    Object localObject1 = boxVertices;
    float[][] arrayOfFloat = boxNormals;
    int[][] arrayOfInt = boxFaces;
    for (int j = 5; j >= 0; j--) {
      paramGL2.glBegin(paramInt);
      paramGL2.glNormal3fv(arrayOfFloat[j], 0);
      Object localObject2 = localObject1[arrayOfInt[j][0]];
      paramGL2.glVertex3f(localObject2[0] * paramFloat, localObject2[1] * paramFloat, localObject2[2] * paramFloat);
      localObject2 = localObject1[arrayOfInt[j][1]];
      paramGL2.glVertex3f(localObject2[0] * paramFloat, localObject2[1] * paramFloat, localObject2[2] * paramFloat);
      localObject2 = localObject1[arrayOfInt[j][2]];
      paramGL2.glVertex3f(localObject2[0] * paramFloat, localObject2[1] * paramFloat, localObject2[2] * paramFloat);
      localObject2 = localObject1[arrayOfInt[j][3]];
      paramGL2.glVertex3f(localObject2[0] * paramFloat, localObject2[1] * paramFloat, localObject2[2] * paramFloat);
      paramGL2.glEnd();
    }
  }
  

  private void initDodecahedron()
  {
    dodec = new float[20][];
    for (int i = 0; i < dodec.length; i++) {
      dodec[i] = new float[3];
    }
    


    float f1 = (float)Math.sqrt(2.0D / (3.0D + Math.sqrt(5.0D)));
    float f2 = 1.0F + (float)Math.sqrt(6.0D / (3.0D + Math.sqrt(5.0D)) - 2.0D + 2.0D * 
      Math.sqrt(2.0D / (3.0D + Math.sqrt(5.0D))));
    dodec[0][0] = (-f1);dodec[0][1] = 0.0F;dodec[0][2] = f2;
    dodec[1][0] = f1;dodec[1][1] = 0.0F;dodec[1][2] = f2;
    dodec[2][0] = -1.0F;dodec[2][1] = -1.0F;dodec[2][2] = -1.0F;
    dodec[3][0] = -1.0F;dodec[3][1] = -1.0F;dodec[3][2] = 1.0F;
    dodec[4][0] = -1.0F;dodec[4][1] = 1.0F;dodec[4][2] = -1.0F;
    dodec[5][0] = -1.0F;dodec[5][1] = 1.0F;dodec[5][2] = 1.0F;
    dodec[6][0] = 1.0F;dodec[6][1] = -1.0F;dodec[6][2] = -1.0F;
    dodec[7][0] = 1.0F;dodec[7][1] = -1.0F;dodec[7][2] = 1.0F;
    dodec[8][0] = 1.0F;dodec[8][1] = 1.0F;dodec[8][2] = -1.0F;
    dodec[9][0] = 1.0F;dodec[9][1] = 1.0F;dodec[9][2] = 1.0F;
    dodec[10][0] = f2;dodec[10][1] = f1;dodec[10][2] = 0.0F;
    dodec[11][0] = f2;dodec[11][1] = (-f1);dodec[11][2] = 0.0F;
    dodec[12][0] = (-f2);dodec[12][1] = f1;dodec[12][2] = 0.0F;
    dodec[13][0] = (-f2);dodec[13][1] = (-f1);dodec[13][2] = 0.0F;
    dodec[14][0] = (-f1);dodec[14][1] = 0.0F;dodec[14][2] = (-f2);
    dodec[15][0] = f1;dodec[15][1] = 0.0F;dodec[15][2] = (-f2);
    dodec[16][0] = 0.0F;dodec[16][1] = f2;dodec[16][2] = f1;
    dodec[17][0] = 0.0F;dodec[17][1] = f2;dodec[17][2] = (-f1);
    dodec[18][0] = 0.0F;dodec[18][1] = (-f2);dodec[18][2] = f1;
    dodec[19][0] = 0.0F;dodec[19][1] = (-f2);dodec[19][2] = (-f1);
  }
  
  private static void diff3(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3) {
    paramArrayOfFloat1[0] -= paramArrayOfFloat2[0];
    paramArrayOfFloat1[1] -= paramArrayOfFloat2[1];
    paramArrayOfFloat1[2] -= paramArrayOfFloat2[2];
  }
  
  private static void crossprod(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3) {
    float[] arrayOfFloat = new float[3];
    
    arrayOfFloat[0] = (paramArrayOfFloat1[1] * paramArrayOfFloat2[2] - paramArrayOfFloat2[1] * paramArrayOfFloat1[2]);
    arrayOfFloat[1] = (paramArrayOfFloat1[2] * paramArrayOfFloat2[0] - paramArrayOfFloat2[2] * paramArrayOfFloat1[0]);
    arrayOfFloat[2] = (paramArrayOfFloat1[0] * paramArrayOfFloat2[1] - paramArrayOfFloat2[0] * paramArrayOfFloat1[1]);
    paramArrayOfFloat3[0] = arrayOfFloat[0];
    paramArrayOfFloat3[1] = arrayOfFloat[1];
    paramArrayOfFloat3[2] = arrayOfFloat[2];
  }
  

  private static void normalize(float[] paramArrayOfFloat)
  {
    float f = (float)Math.sqrt(paramArrayOfFloat[0] * paramArrayOfFloat[0] + paramArrayOfFloat[1] * paramArrayOfFloat[1] + paramArrayOfFloat[2] * paramArrayOfFloat[2]);
    if (f == 0.0D) {
      float tmp39_38 = 1.0F;f = tmp39_38;paramArrayOfFloat[0] = tmp39_38;
    }
    f = 1.0F / f;
    paramArrayOfFloat[0] *= f;
    paramArrayOfFloat[1] *= f;
    paramArrayOfFloat[2] *= f;
  }
  
  private void pentagon(GL2 paramGL2, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6) {
    float[] arrayOfFloat1 = new float[3];
    float[] arrayOfFloat2 = new float[3];
    float[] arrayOfFloat3 = new float[3];
    
    diff3(dodec[paramInt1], dodec[paramInt2], arrayOfFloat2);
    diff3(dodec[paramInt2], dodec[paramInt3], arrayOfFloat3);
    crossprod(arrayOfFloat2, arrayOfFloat3, arrayOfFloat1);
    normalize(arrayOfFloat1);
    
    paramGL2.glBegin(paramInt6);
    paramGL2.glNormal3fv(arrayOfFloat1, 0);
    paramGL2.glVertex3fv(dodec[paramInt1], 0);
    paramGL2.glVertex3fv(dodec[paramInt2], 0);
    paramGL2.glVertex3fv(dodec[paramInt3], 0);
    paramGL2.glVertex3fv(dodec[paramInt4], 0);
    paramGL2.glVertex3fv(dodec[paramInt5], 0);
    paramGL2.glEnd();
  }
  
  private void dodecahedron(GL2 paramGL2, int paramInt) {
    if (dodec == null) {
      initDodecahedron();
    }
    pentagon(paramGL2, 0, 1, 9, 16, 5, paramInt);
    pentagon(paramGL2, 1, 0, 3, 18, 7, paramInt);
    pentagon(paramGL2, 1, 7, 11, 10, 9, paramInt);
    pentagon(paramGL2, 11, 7, 18, 19, 6, paramInt);
    pentagon(paramGL2, 8, 17, 16, 9, 10, paramInt);
    pentagon(paramGL2, 2, 14, 15, 6, 19, paramInt);
    pentagon(paramGL2, 2, 13, 12, 4, 14, paramInt);
    pentagon(paramGL2, 2, 19, 18, 3, 13, paramInt);
    pentagon(paramGL2, 3, 0, 5, 12, 13, paramInt);
    pentagon(paramGL2, 6, 15, 8, 10, 11, paramInt);
    pentagon(paramGL2, 4, 17, 8, 15, 14, paramInt);
    pentagon(paramGL2, 4, 12, 5, 16, 17, paramInt);
  }
  
  private static void recorditem(GL2 paramGL2, float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3, int paramInt) {
    float[] arrayOfFloat1 = new float[3];
    float[] arrayOfFloat2 = new float[3];
    
    diff3(paramArrayOfFloat1, paramArrayOfFloat2, arrayOfFloat1);
    diff3(paramArrayOfFloat2, paramArrayOfFloat3, arrayOfFloat2);
    crossprod(arrayOfFloat1, arrayOfFloat2, arrayOfFloat2);
    normalize(arrayOfFloat2);
    
    paramGL2.glBegin(paramInt);
    paramGL2.glNormal3fv(arrayOfFloat2, 0);
    paramGL2.glVertex3fv(paramArrayOfFloat1, 0);
    paramGL2.glVertex3fv(paramArrayOfFloat2, 0);
    paramGL2.glVertex3fv(paramArrayOfFloat3, 0);
    paramGL2.glEnd();
  }
  
  private static void subdivide(GL2 paramGL2, float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3, int paramInt)
  {
    float[] arrayOfFloat1 = new float[3];
    float[] arrayOfFloat2 = new float[3];
    float[] arrayOfFloat3 = new float[3];
    


    int i = 1;
    for (int j = 0; j < i; j++) {
      for (int k = 0; j + k < i; k++) {
        int m = i - j - k;
        for (int n = 0; n < 3; n++) {
          arrayOfFloat1[n] = ((j * paramArrayOfFloat1[n] + k * paramArrayOfFloat2[n] + m * paramArrayOfFloat3[n]) / i);
          arrayOfFloat2[n] = (((j + 1) * paramArrayOfFloat1[n] + k * paramArrayOfFloat2[n] + (m - 1) * paramArrayOfFloat3[n]) / i);
          
          arrayOfFloat3[n] = ((j * paramArrayOfFloat1[n] + (k + 1) * paramArrayOfFloat2[n] + (m - 1) * paramArrayOfFloat3[n]) / i);
        }
        
        float f = (float)Math.sqrt(arrayOfFloat1[0] * arrayOfFloat1[0] + arrayOfFloat1[1] * arrayOfFloat1[1] + arrayOfFloat1[2] * arrayOfFloat1[2]);
        arrayOfFloat1[0] /= f;
        arrayOfFloat1[1] /= f;
        arrayOfFloat1[2] /= f;
        f = (float)Math.sqrt(arrayOfFloat2[0] * arrayOfFloat2[0] + arrayOfFloat2[1] * arrayOfFloat2[1] + arrayOfFloat2[2] * arrayOfFloat2[2]);
        arrayOfFloat2[0] /= f;
        arrayOfFloat2[1] /= f;
        arrayOfFloat2[2] /= f;
        f = (float)Math.sqrt(arrayOfFloat3[0] * arrayOfFloat3[0] + arrayOfFloat3[1] * arrayOfFloat3[1] + arrayOfFloat3[2] * arrayOfFloat3[2]);
        arrayOfFloat3[0] /= f;
        arrayOfFloat3[1] /= f;
        arrayOfFloat3[2] /= f;
        recorditem(paramGL2, arrayOfFloat2, arrayOfFloat1, arrayOfFloat3, paramInt);
      }
    }
  }
  
  private static void drawtriangle(GL2 paramGL2, int paramInt1, float[][] paramArrayOfFloat, int[][] paramArrayOfInt, int paramInt2) {
    float[] arrayOfFloat1 = paramArrayOfFloat[paramArrayOfInt[paramInt1][0]];
    float[] arrayOfFloat2 = paramArrayOfFloat[paramArrayOfInt[paramInt1][1]];
    float[] arrayOfFloat3 = paramArrayOfFloat[paramArrayOfInt[paramInt1][2]];
    subdivide(paramGL2, arrayOfFloat1, arrayOfFloat2, arrayOfFloat3, paramInt2);
  }
  


  private static final float[][] odata = { { 1.0F, 0.0F, 0.0F }, { -1.0F, 0.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, 0.0F, 1.0F }, { 0.0F, 0.0F, -1.0F } };
  








  private static final int[][] ondex = { { 0, 4, 2 }, { 1, 2, 4 }, { 0, 3, 4 }, { 1, 4, 3 }, { 0, 2, 5 }, { 1, 5, 2 }, { 0, 5, 3 }, { 1, 3, 5 } };
  


  private static final float X = 0.5257311F;
  


  private static final float Z = 0.8506508F;
  



  private static void octahedron(GL2 paramGL2, int paramInt)
  {
    for (int i = 7; i >= 0; i--) {
      drawtriangle(paramGL2, i, odata, ondex, paramInt);
    }
  }
  






  private static final float[][] idata = { { -0.5257311F, 0.0F, 0.8506508F }, { 0.5257311F, 0.0F, 0.8506508F }, { -0.5257311F, 0.0F, -0.8506508F }, { 0.5257311F, 0.0F, -0.8506508F }, { 0.0F, 0.8506508F, 0.5257311F }, { 0.0F, 0.8506508F, -0.5257311F }, { 0.0F, -0.8506508F, 0.5257311F }, { 0.0F, -0.8506508F, -0.5257311F }, { 0.8506508F, 0.5257311F, 0.0F }, { -0.8506508F, 0.5257311F, 0.0F }, { 0.8506508F, -0.5257311F, 0.0F }, { -0.8506508F, -0.5257311F, 0.0F } };
  














  private static final int[][] index = { { 0, 4, 1 }, { 0, 9, 4 }, { 9, 5, 4 }, { 4, 5, 8 }, { 4, 8, 1 }, { 8, 10, 1 }, { 8, 3, 10 }, { 5, 3, 8 }, { 5, 2, 3 }, { 2, 7, 3 }, { 7, 10, 3 }, { 7, 6, 10 }, { 7, 11, 6 }, { 11, 0, 6 }, { 0, 1, 6 }, { 6, 1, 10 }, { 9, 0, 11 }, { 9, 11, 2 }, { 9, 2, 5 }, { 7, 2, 11 } };
  























  private static void icosahedron(GL2 paramGL2, int paramInt)
  {
    for (int i = 19; i >= 0; i--) {
      drawtriangle(paramGL2, i, idata, index, paramInt);
    }
  }
  


  private static final double[][] rdod_r = { { 0.0D, 0.0D, 1.0D }, { 0.707106781187D, 0.0D, 0.5D }, { 0.0D, 0.707106781187D, 0.5D }, { -0.707106781187D, 0.0D, 0.5D }, { 0.0D, -0.707106781187D, 0.5D }, { 0.707106781187D, 0.707106781187D, 0.0D }, { -0.707106781187D, 0.707106781187D, 0.0D }, { -0.707106781187D, -0.707106781187D, 0.0D }, { 0.707106781187D, -0.707106781187D, 0.0D }, { 0.707106781187D, 0.0D, -0.5D }, { 0.0D, 0.707106781187D, -0.5D }, { -0.707106781187D, 0.0D, -0.5D }, { 0.0D, -0.707106781187D, -0.5D }, { 0.0D, 0.0D, -1.0D } };
  
















  private static final int[][] rdod_v = { { 0, 1, 5, 2 }, { 0, 2, 6, 3 }, { 0, 3, 7, 4 }, { 0, 4, 8, 1 }, { 5, 10, 6, 2 }, { 6, 11, 7, 3 }, { 7, 12, 8, 4 }, { 8, 9, 5, 1 }, { 5, 9, 13, 10 }, { 6, 10, 13, 11 }, { 7, 11, 13, 12 }, { 8, 12, 13, 9 } };
  














  private static final double[][] rdod_n = { { 0.353553390594D, 0.353553390594D, 0.5D }, { -0.353553390594D, 0.353553390594D, 0.5D }, { -0.353553390594D, -0.353553390594D, 0.5D }, { 0.353553390594D, -0.353553390594D, 0.5D }, { 0.0D, 1.0D, 0.0D }, { -1.0D, 0.0D, 0.0D }, { 0.0D, -1.0D, 0.0D }, { 1.0D, 0.0D, 0.0D }, { 0.353553390594D, 0.353553390594D, -0.5D }, { -0.353553390594D, 0.353553390594D, -0.5D }, { -0.353553390594D, -0.353553390594D, -0.5D }, { 0.353553390594D, -0.353553390594D, -0.5D } };
  








  private static final float T = 1.7320508F;
  








  private static final float[][] tdata = { { 1.7320508F, 1.7320508F, 1.7320508F }, { 1.7320508F, -1.7320508F, -1.7320508F }, { -1.7320508F, 1.7320508F, -1.7320508F }, { -1.7320508F, -1.7320508F, 1.7320508F } };
  






  private static final int[][] tndex = { { 0, 1, 3 }, { 2, 1, 0 }, { 3, 2, 0 }, { 1, 2, 3 } };
  





  private static final void tetrahedron(GL2 paramGL2, int paramInt)
  {
    for (int i = 3; i >= 0; i--) {
      drawtriangle(paramGL2, i, tdata, tndex, paramInt);
    }
  }
  



  private static final int[][] teapotPatchData = { { 102, 103, 104, 105, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }, { 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }, { 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }, { 96, 96, 96, 96, 97, 98, 99, 100, 101, 101, 101, 101, 0, 1, 2, 3 }, { 0, 1, 2, 3, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117 }, { 118, 118, 118, 118, 124, 122, 119, 121, 123, 126, 125, 120, 40, 39, 38, 37 }, { 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56 }, { 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 28, 65, 66, 67 }, { 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83 }, { 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95 } };
  
















  private static final float[][] teapotCPData = { { 0.2F, 0.0F, 2.7F }, { 0.2F, -0.112F, 2.7F }, { 0.112F, -0.2F, 2.7F }, { 0.0F, -0.2F, 2.7F }, { 1.3375F, 0.0F, 2.53125F }, { 1.3375F, -0.749F, 2.53125F }, { 0.749F, -1.3375F, 2.53125F }, { 0.0F, -1.3375F, 2.53125F }, { 1.4375F, 0.0F, 2.53125F }, { 1.4375F, -0.805F, 2.53125F }, { 0.805F, -1.4375F, 2.53125F }, { 0.0F, -1.4375F, 2.53125F }, { 1.5F, 0.0F, 2.4F }, { 1.5F, -0.84F, 2.4F }, { 0.84F, -1.5F, 2.4F }, { 0.0F, -1.5F, 2.4F }, { 1.75F, 0.0F, 1.875F }, { 1.75F, -0.98F, 1.875F }, { 0.98F, -1.75F, 1.875F }, { 0.0F, -1.75F, 1.875F }, { 2.0F, 0.0F, 1.35F }, { 2.0F, -1.12F, 1.35F }, { 1.12F, -2.0F, 1.35F }, { 0.0F, -2.0F, 1.35F }, { 2.0F, 0.0F, 0.9F }, { 2.0F, -1.12F, 0.9F }, { 1.12F, -2.0F, 0.9F }, { 0.0F, -2.0F, 0.9F }, { -2.0F, 0.0F, 0.9F }, { 2.0F, 0.0F, 0.45F }, { 2.0F, -1.12F, 0.45F }, { 1.12F, -2.0F, 0.45F }, { 0.0F, -2.0F, 0.45F }, { 1.5F, 0.0F, 0.225F }, { 1.5F, -0.84F, 0.225F }, { 0.84F, -1.5F, 0.225F }, { 0.0F, -1.5F, 0.225F }, { 1.5F, 0.0F, 0.15F }, { 1.5F, -0.84F, 0.15F }, { 0.84F, -1.5F, 0.15F }, { 0.0F, -1.5F, 0.15F }, { -1.6F, 0.0F, 2.025F }, { -1.6F, -0.3F, 2.025F }, { -1.5F, -0.3F, 2.25F }, { -1.5F, 0.0F, 2.25F }, { -2.3F, 0.0F, 2.025F }, { -2.3F, -0.3F, 2.025F }, { -2.5F, -0.3F, 2.25F }, { -2.5F, 0.0F, 2.25F }, { -2.7F, 0.0F, 2.025F }, { -2.7F, -0.3F, 2.025F }, { -3.0F, -0.3F, 2.25F }, { -3.0F, 0.0F, 2.25F }, { -2.7F, 0.0F, 1.8F }, { -2.7F, -0.3F, 1.8F }, { -3.0F, -0.3F, 1.8F }, { -3.0F, 0.0F, 1.8F }, { -2.7F, 0.0F, 1.575F }, { -2.7F, -0.3F, 1.575F }, { -3.0F, -0.3F, 1.35F }, { -3.0F, 0.0F, 1.35F }, { -2.5F, 0.0F, 1.125F }, { -2.5F, -0.3F, 1.125F }, { -2.65F, -0.3F, 0.9375F }, { -2.65F, 0.0F, 0.9375F }, { -2.0F, -0.3F, 0.9F }, { -1.9F, -0.3F, 0.6F }, { -1.9F, 0.0F, 0.6F }, { 1.7F, 0.0F, 1.425F }, { 1.7F, -0.66F, 1.425F }, { 1.7F, -0.66F, 0.6F }, { 1.7F, 0.0F, 0.6F }, { 2.6F, 0.0F, 1.425F }, { 2.6F, -0.66F, 1.425F }, { 3.1F, -0.66F, 0.825F }, { 3.1F, 0.0F, 0.825F }, { 2.3F, 0.0F, 2.1F }, { 2.3F, -0.25F, 2.1F }, { 2.4F, -0.25F, 2.025F }, { 2.4F, 0.0F, 2.025F }, { 2.7F, 0.0F, 2.4F }, { 2.7F, -0.25F, 2.4F }, { 3.3F, -0.25F, 2.4F }, { 3.3F, 0.0F, 2.4F }, { 2.8F, 0.0F, 2.475F }, { 2.8F, -0.25F, 2.475F }, { 3.525F, -0.25F, 2.49375F }, { 3.525F, 0.0F, 2.49375F }, { 2.9F, 0.0F, 2.475F }, { 2.9F, -0.15F, 2.475F }, { 3.45F, -0.15F, 2.5125F }, { 3.45F, 0.0F, 2.5125F }, { 2.8F, 0.0F, 2.4F }, { 2.8F, -0.15F, 2.4F }, { 3.2F, -0.15F, 2.4F }, { 3.2F, 0.0F, 2.4F }, { 0.0F, 0.0F, 3.15F }, { 0.8F, 0.0F, 3.15F }, { 0.8F, -0.45F, 3.15F }, { 0.45F, -0.8F, 3.15F }, { 0.0F, -0.8F, 3.15F }, { 0.0F, 0.0F, 2.85F }, { 1.4F, 0.0F, 2.4F }, { 1.4F, -0.784F, 2.4F }, { 0.784F, -1.4F, 2.4F }, { 0.0F, -1.4F, 2.4F }, { 0.4F, 0.0F, 2.55F }, { 0.4F, -0.224F, 2.55F }, { 0.224F, -0.4F, 2.55F }, { 0.0F, -0.4F, 2.55F }, { 1.3F, 0.0F, 2.55F }, { 1.3F, -0.728F, 2.55F }, { 0.728F, -1.3F, 2.55F }, { 0.0F, -1.3F, 2.55F }, { 1.3F, 0.0F, 2.4F }, { 1.3F, -0.728F, 2.4F }, { 0.728F, -1.3F, 2.4F }, { 0.0F, -1.3F, 2.4F }, { 0.0F, 0.0F, 0.0F }, { 1.425F, -0.798F, 0.0F }, { 1.5F, 0.0F, 0.075F }, { 1.425F, 0.0F, 0.0F }, { 0.798F, -1.425F, 0.0F }, { 0.0F, -1.5F, 0.075F }, { 0.0F, -1.425F, 0.0F }, { 1.5F, -0.84F, 0.075F }, { 0.84F, -1.5F, 0.075F } };
  

































































































































  private static final float[] teapotTex = { 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F };
  







  private static void teapot(GL2 paramGL2, int paramInt1, double paramDouble, int paramInt2, boolean paramBoolean)
  {
    float[] arrayOfFloat1 = new float[48];
    float[] arrayOfFloat2 = new float[48];
    float[] arrayOfFloat3 = new float[48];
    float[] arrayOfFloat4 = new float[48];
    

    paramGL2.glPushAttrib(73736);
    paramGL2.glEnable(3456);
    paramGL2.glEnable(2977);
    paramGL2.glEnable(3511);
    paramGL2.glEnable(3508);
    paramGL2.glPushMatrix();
    if (!paramBoolean)
    {
      paramGL2.glFrontFace(2304);
      paramGL2.glScaled(0.5D * paramDouble, 0.5D * paramDouble, 0.5D * paramDouble);
    }
    else
    {
      paramGL2.glRotatef(270.0F, 1.0F, 0.0F, 0.0F);
      paramGL2.glScalef((float)(0.5D * paramDouble), (float)(0.5D * paramDouble), (float)(0.5D * paramDouble));
      

      paramGL2.glTranslatef(0.0F, 0.0F, -1.5F);
    }
    for (int i = 0; i < 10; i++) {
      for (int j = 0; j < 4; j++) {
        for (int k = 0; k < 4; k++)
          for (int m = 0; m < 3; tmp288_287++) {
            arrayOfFloat1[((j * 4 + k) * 3 + m)] = teapotCPData[teapotPatchData[i][(j * 4 + k)]][m];
            arrayOfFloat2[((j * 4 + k) * 3 + m)] = teapotCPData[teapotPatchData[i][(j * 4 + (3 - k))]][m];
            
            if (m == 1) {
              int tmp288_287 = ((j * 4 + k) * 3 + m); float[] tmp288_274 = arrayOfFloat2;tmp288_274[tmp288_287] = ((float)(tmp288_274[tmp288_287] * -1.0D)); }
            if (i < 6) {
              arrayOfFloat3[((j * 4 + k) * 3 + tmp288_287)] = teapotCPData[teapotPatchData[i][(j * 4 + (3 - k))]][tmp288_287];
              
              if (tmp288_287 == 0) {
                int tmp361_360 = ((j * 4 + k) * 3 + tmp288_287); float[] tmp361_347 = arrayOfFloat3;tmp361_347[tmp361_360] = ((float)(tmp361_347[tmp361_360] * -1.0D)); }
              arrayOfFloat4[((j * 4 + k) * 3 + tmp288_287)] = teapotCPData[teapotPatchData[i][(j * 4 + k)]][tmp288_287];
              if (tmp288_287 == 0) {
                int tmp425_424 = ((j * 4 + k) * 3 + tmp288_287); float[] tmp425_411 = arrayOfFloat4;tmp425_411[tmp425_424] = ((float)(tmp425_411[tmp425_424] * -1.0D)); }
              if (tmp288_287 == 1) {
                int tmp454_453 = ((j * 4 + k) * 3 + tmp288_287); float[] tmp454_440 = arrayOfFloat4;tmp454_440[tmp454_453] = ((float)(tmp454_440[tmp454_453] * -1.0D));
              }
            }
          }
      }
      paramGL2.glMap2f(3508, 0.0F, 1.0F, 2, 2, 0.0F, 1.0F, 4, 2, teapotTex, 0);
      paramGL2.glMap2f(3511, 0.0F, 1.0F, 3, 4, 0.0F, 1.0F, 12, 4, arrayOfFloat1, 0);
      paramGL2.glMapGrid2f(paramInt1, 0.0F, 1.0F, paramInt1, 0.0F, 1.0F);
      evaluateTeapotMesh(paramGL2, paramInt1, paramInt2, i, !paramBoolean);
      paramGL2.glMap2f(3511, 0.0F, 1.0F, 3, 4, 0.0F, 1.0F, 12, 4, arrayOfFloat2, 0);
      evaluateTeapotMesh(paramGL2, paramInt1, paramInt2, i, !paramBoolean);
      if (i < 6) {
        paramGL2.glMap2f(3511, 0.0F, 1.0F, 3, 4, 0.0F, 1.0F, 12, 4, arrayOfFloat3, 0);
        evaluateTeapotMesh(paramGL2, paramInt1, paramInt2, i, !paramBoolean);
        paramGL2.glMap2f(3511, 0.0F, 1.0F, 3, 4, 0.0F, 1.0F, 12, 4, arrayOfFloat4, 0);
        evaluateTeapotMesh(paramGL2, paramInt1, paramInt2, i, !paramBoolean);
      }
    }
    paramGL2.glPopMatrix();
    paramGL2.glPopAttrib();
  }
  




  private static void evaluateTeapotMesh(GL2 paramGL2, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean)
  {
    if ((paramBoolean) && ((paramInt3 == 5) || (paramInt3 == 3)))
    {

      paramGL2.glPolygonMode(1032, paramInt2);
      for (int i = 0; i < paramInt1; i++) {
        if (i == 0)
        {
          paramGL2.glDisable(3456);
          paramGL2.glNormal3f(0.0F, 0.0F, paramInt3 == 3 ? 1.0F : -1.0F);
          paramGL2.glBegin(6);
          
          paramGL2.glEvalCoord2f(0.0F, 0.0F);
          

          for (j = 0; j <= paramInt1; j++)
          {
            paramGL2.glEvalCoord2f(j / paramInt1, 1.0F / paramInt1 / paramInt1);
          }
          
          paramGL2.glEnd();
          paramGL2.glEnable(3456);
        }
        
        paramGL2.glBegin(8);
        

        for (int j = paramInt1; j >= 0; j--) {
          paramGL2.glEvalCoord2f(j / paramInt1, (i + 1) / paramInt1);
          paramGL2.glEvalCoord2f(j / paramInt1, Math.max(i, 1.0F / paramInt1) / paramInt1);
        }
        

        paramGL2.glEnd();
      }
    } else {
      paramGL2.glEvalMesh2(paramInt2, 0, paramInt1, 0, paramInt1);
    }
  }
  



  private static void bitmapCharacterImpl(GL2 paramGL2, int paramInt, char paramChar)
  {
    BitmapFontRec localBitmapFontRec = getBitmapFont(paramInt);
    int i = paramChar & 0xFFFF;
    if ((i < first) || (i >= first + num_chars))
    {
      return; }
    BitmapCharRec localBitmapCharRec = ch[(i - first)];
    if (localBitmapCharRec != null) {
      paramGL2.glBitmap(width, height, xorig, yorig, advance, 0.0F, bitmap, 0);
    }
  }
  

  private static final BitmapFontRec[] bitmapFonts = new BitmapFontRec[9];
  private static final StrokeFontRec[] strokeFonts = new StrokeFontRec[9];
  
  private static BitmapFontRec getBitmapFont(int paramInt) {
    BitmapFontRec localBitmapFontRec = bitmapFonts[paramInt];
    if (localBitmapFontRec == null) {
      switch (paramInt) {
      case 2: 
        localBitmapFontRec = GLUTBitmap9x15.glutBitmap9By15;
        break;
      case 3: 
        localBitmapFontRec = GLUTBitmap8x13.glutBitmap8By13;
        break;
      case 4: 
        localBitmapFontRec = GLUTBitmapTimesRoman10.glutBitmapTimesRoman10;
        break;
      case 5: 
        localBitmapFontRec = GLUTBitmapTimesRoman24.glutBitmapTimesRoman24;
        break;
      case 6: 
        localBitmapFontRec = GLUTBitmapHelvetica10.glutBitmapHelvetica10;
        break;
      case 7: 
        localBitmapFontRec = GLUTBitmapHelvetica12.glutBitmapHelvetica12;
        break;
      case 8: 
        localBitmapFontRec = GLUTBitmapHelvetica18.glutBitmapHelvetica18;
        break;
      default: 
        throw new GLException("Unknown bitmap font number " + paramInt);
      }
      bitmapFonts[paramInt] = localBitmapFontRec;
    }
    return localBitmapFontRec;
  }
  
  private static StrokeFontRec getStrokeFont(int paramInt) {
    StrokeFontRec localStrokeFontRec = strokeFonts[paramInt];
    if (localStrokeFontRec == null) {
      switch (paramInt) {
      case 0: 
        localStrokeFontRec = GLUTStrokeRoman.glutStrokeRoman;
        break;
      case 1: 
        localStrokeFontRec = GLUTStrokeMonoRoman.glutStrokeMonoRoman;
        break;
      default: 
        throw new GLException("Unknown stroke font number " + paramInt);
      }
    }
    return localStrokeFontRec;
  }
  





  private static void beginBitmap(GL2 paramGL2, int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3, int[] paramArrayOfInt4, int[] paramArrayOfInt5, int[] paramArrayOfInt6)
  {
    paramGL2.glGetIntegerv(3312, paramArrayOfInt1, 0);
    paramGL2.glGetIntegerv(3313, paramArrayOfInt2, 0);
    paramGL2.glGetIntegerv(3314, paramArrayOfInt3, 0);
    paramGL2.glGetIntegerv(3315, paramArrayOfInt4, 0);
    paramGL2.glGetIntegerv(3316, paramArrayOfInt5, 0);
    paramGL2.glGetIntegerv(3317, paramArrayOfInt6, 0);
    



    paramGL2.glPixelStorei(3312, 0);
    paramGL2.glPixelStorei(3313, 0);
    paramGL2.glPixelStorei(3314, 0);
    paramGL2.glPixelStorei(3315, 0);
    paramGL2.glPixelStorei(3316, 0);
    paramGL2.glPixelStorei(3317, 1);
  }
  






  private static void endBitmap(GL2 paramGL2, int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3, int[] paramArrayOfInt4, int[] paramArrayOfInt5, int[] paramArrayOfInt6)
  {
    paramGL2.glPixelStorei(3312, paramArrayOfInt1[0]);
    paramGL2.glPixelStorei(3313, paramArrayOfInt2[0]);
    paramGL2.glPixelStorei(3314, paramArrayOfInt3[0]);
    paramGL2.glPixelStorei(3315, paramArrayOfInt4[0]);
    paramGL2.glPixelStorei(3316, paramArrayOfInt5[0]);
    paramGL2.glPixelStorei(3317, paramArrayOfInt6[0]);
  }
}
