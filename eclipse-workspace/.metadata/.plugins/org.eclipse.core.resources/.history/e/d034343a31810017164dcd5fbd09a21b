package jogamp.opengl.x11.glx;

import com.jogamp.common.nio.Buffers;
import com.jogamp.common.nio.PointerBuffer;
import com.jogamp.opengl.GLException;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;


public class GLXExtImpl
  implements GLXExt
{
  private X11GLXContext _context;
  
  public long glXGetProcAddress(String paramString)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXGetProcAddress;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXGetProcAddress" }));
    }
    return dispatch_glXGetProcAddress0(paramString, l);
  }
  

  private native long dispatch_glXGetProcAddress0(String paramString, long paramLong);
  

  public long glXGetProcAddressARB(String paramString)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXGetProcAddressARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXGetProcAddressARB" }));
    }
    return dispatch_glXGetProcAddressARB0(paramString, l);
  }
  


  private native long dispatch_glXGetProcAddressARB0(String paramString, long paramLong);
  

  public long glXCreateContextAttribsARB(long paramLong1, long paramLong2, long paramLong3, boolean paramBoolean, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"attrib_list\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXCreateContextAttribsARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXCreateContextAttribsARB" }));
    }
    return dispatch_glXCreateContextAttribsARB0(paramLong1, paramLong2, paramLong3, paramBoolean, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native long dispatch_glXCreateContextAttribsARB0(long paramLong1, long paramLong2, long paramLong3, boolean paramBoolean, Object paramObject, int paramInt, long paramLong4);
  


  public int glXGetGPUIDsAMD(int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"ids\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXGetGPUIDsAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXGetGPUIDsAMD" }));
    }
    return dispatch_glXGetGPUIDsAMD0(paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native int dispatch_glXGetGPUIDsAMD0(int paramInt1, Object paramObject, int paramInt2, long paramLong);
  


  public int glXGetGPUInfoAMD(int paramInt1, int paramInt2, int paramInt3, int paramInt4, Buffer paramBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new GLException("Argument \"data\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXGetGPUInfoAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXGetGPUInfoAMD" }));
    }
    return dispatch_glXGetGPUInfoAMD0(paramInt1, paramInt2, paramInt3, paramInt4, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), l);
  }
  


  private native int dispatch_glXGetGPUInfoAMD0(int paramInt1, int paramInt2, int paramInt3, int paramInt4, Object paramObject, int paramInt5, long paramLong);
  

  public int glXGetContextGPUIDAMD(long paramLong)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXGetContextGPUIDAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXGetContextGPUIDAMD" }));
    }
    return dispatch_glXGetContextGPUIDAMD0(paramLong, l);
  }
  

  private native int dispatch_glXGetContextGPUIDAMD0(long paramLong1, long paramLong2);
  

  public long glXCreateAssociatedContextAMD(int paramInt, long paramLong)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXCreateAssociatedContextAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXCreateAssociatedContextAMD" }));
    }
    return dispatch_glXCreateAssociatedContextAMD0(paramInt, paramLong, l);
  }
  


  private native long dispatch_glXCreateAssociatedContextAMD0(int paramInt, long paramLong1, long paramLong2);
  

  public long glXCreateAssociatedContextAttribsAMD(int paramInt, long paramLong, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"attribList\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXCreateAssociatedContextAttribsAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXCreateAssociatedContextAttribsAMD" }));
    }
    return dispatch_glXCreateAssociatedContextAttribsAMD0(paramInt, paramLong, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native long dispatch_glXCreateAssociatedContextAttribsAMD0(int paramInt1, long paramLong1, Object paramObject, int paramInt2, long paramLong2);
  

  public boolean glXDeleteAssociatedContextAMD(long paramLong)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXDeleteAssociatedContextAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXDeleteAssociatedContextAMD" }));
    }
    return dispatch_glXDeleteAssociatedContextAMD0(paramLong, l);
  }
  

  private native boolean dispatch_glXDeleteAssociatedContextAMD0(long paramLong1, long paramLong2);
  

  public boolean glXMakeAssociatedContextCurrentAMD(long paramLong)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXMakeAssociatedContextCurrentAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXMakeAssociatedContextCurrentAMD" }));
    }
    return dispatch_glXMakeAssociatedContextCurrentAMD0(paramLong, l);
  }
  

  private native boolean dispatch_glXMakeAssociatedContextCurrentAMD0(long paramLong1, long paramLong2);
  

  public long glXGetCurrentAssociatedContextAMD()
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXGetCurrentAssociatedContextAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXGetCurrentAssociatedContextAMD" }));
    }
    return dispatch_glXGetCurrentAssociatedContextAMD0(l);
  }
  

  private native long dispatch_glXGetCurrentAssociatedContextAMD0(long paramLong);
  

  public void glXBlitContextFramebufferAMD(long paramLong, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, int paramInt9, int paramInt10)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXBlitContextFramebufferAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXBlitContextFramebufferAMD" }));
    }
    dispatch_glXBlitContextFramebufferAMD0(paramLong, paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8, paramInt9, paramInt10, l);
  }
  

  private native void dispatch_glXBlitContextFramebufferAMD0(long paramLong1, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, int paramInt9, int paramInt10, long paramLong2);
  

  public long glXGetCurrentDisplayEXT()
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXGetCurrentDisplayEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXGetCurrentDisplayEXT" }));
    }
    return dispatch_glXGetCurrentDisplayEXT0(l);
  }
  


  private native long dispatch_glXGetCurrentDisplayEXT0(long paramLong);
  

  public int glXQueryContextInfoEXT(long paramLong1, long paramLong2, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"value\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXQueryContextInfoEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXQueryContextInfoEXT" }));
    }
    return dispatch_glXQueryContextInfoEXT0(paramLong1, paramLong2, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native int dispatch_glXQueryContextInfoEXT0(long paramLong1, long paramLong2, int paramInt1, Object paramObject, int paramInt2, long paramLong3);
  

  public long glXGetContextIDEXT(long paramLong)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXGetContextIDEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXGetContextIDEXT" }));
    }
    return dispatch_glXGetContextIDEXT0(paramLong, l);
  }
  

  private native long dispatch_glXGetContextIDEXT0(long paramLong1, long paramLong2);
  

  public long glXImportContextEXT(long paramLong1, long paramLong2)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXImportContextEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXImportContextEXT" }));
    }
    return dispatch_glXImportContextEXT0(paramLong1, paramLong2, l);
  }
  

  private native long dispatch_glXImportContextEXT0(long paramLong1, long paramLong2, long paramLong3);
  

  public void glXFreeContextEXT(long paramLong1, long paramLong2)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXFreeContextEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXFreeContextEXT" }));
    }
    dispatch_glXFreeContextEXT0(paramLong1, paramLong2, l);
  }
  

  private native void dispatch_glXFreeContextEXT0(long paramLong1, long paramLong2, long paramLong3);
  

  public void glXSwapIntervalEXT(long paramLong1, long paramLong2, int paramInt)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXSwapIntervalEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXSwapIntervalEXT" }));
    }
    dispatch_glXSwapIntervalEXT0(paramLong1, paramLong2, paramInt, l);
  }
  


  private native void dispatch_glXSwapIntervalEXT0(long paramLong1, long paramLong2, int paramInt, long paramLong3);
  

  public void glXBindTexImageEXT(long paramLong1, long paramLong2, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"attrib_list\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXBindTexImageEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXBindTexImageEXT" }));
    }
    dispatch_glXBindTexImageEXT0(paramLong1, paramLong2, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native void dispatch_glXBindTexImageEXT0(long paramLong1, long paramLong2, int paramInt1, Object paramObject, int paramInt2, long paramLong3);
  

  public void glXReleaseTexImageEXT(long paramLong1, long paramLong2, int paramInt)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXReleaseTexImageEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXReleaseTexImageEXT" }));
    }
    dispatch_glXReleaseTexImageEXT0(paramLong1, paramLong2, paramInt, l);
  }
  


  private native void dispatch_glXReleaseTexImageEXT0(long paramLong1, long paramLong2, int paramInt, long paramLong3);
  

  public int glXGetAGPOffsetMESA(Buffer paramBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new GLException("Argument \"pointer\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXGetAGPOffsetMESA;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXGetAGPOffsetMESA" }));
    }
    return dispatch_glXGetAGPOffsetMESA0(paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), l);
  }
  


  private native int dispatch_glXGetAGPOffsetMESA0(Object paramObject, int paramInt, long paramLong);
  

  public void glXCopySubBufferMESA(long paramLong1, long paramLong2, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXCopySubBufferMESA;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXCopySubBufferMESA" }));
    }
    dispatch_glXCopySubBufferMESA0(paramLong1, paramLong2, paramInt1, paramInt2, paramInt3, paramInt4, l);
  }
  


  private native void dispatch_glXCopySubBufferMESA0(long paramLong1, long paramLong2, int paramInt1, int paramInt2, int paramInt3, int paramInt4, long paramLong3);
  

  public boolean glXQueryCurrentRendererIntegerMESA(int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"value\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXQueryCurrentRendererIntegerMESA;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXQueryCurrentRendererIntegerMESA" }));
    }
    return dispatch_glXQueryCurrentRendererIntegerMESA0(paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native boolean dispatch_glXQueryCurrentRendererIntegerMESA0(int paramInt1, Object paramObject, int paramInt2, long paramLong);
  

  public ByteBuffer glXQueryCurrentRendererStringMESA(int paramInt)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXQueryCurrentRendererStringMESA;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXQueryCurrentRendererStringMESA" }));
    }
    
    ByteBuffer localByteBuffer = dispatch_glXQueryCurrentRendererStringMESA0(paramInt, l);
    if (localByteBuffer == null) return null;
    Buffers.nativeOrder(localByteBuffer);
    return localByteBuffer;
  }
  


  private native ByteBuffer dispatch_glXQueryCurrentRendererStringMESA0(int paramInt, long paramLong);
  

  public boolean glXQueryRendererIntegerMESA(long paramLong, int paramInt1, int paramInt2, int paramInt3, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"value\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXQueryRendererIntegerMESA;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXQueryRendererIntegerMESA" }));
    }
    return dispatch_glXQueryRendererIntegerMESA0(paramLong, paramInt1, paramInt2, paramInt3, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native boolean dispatch_glXQueryRendererIntegerMESA0(long paramLong1, int paramInt1, int paramInt2, int paramInt3, Object paramObject, int paramInt4, long paramLong2);
  

  public ByteBuffer glXQueryRendererStringMESA(long paramLong, int paramInt1, int paramInt2, int paramInt3)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXQueryRendererStringMESA;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXQueryRendererStringMESA" }));
    }
    
    ByteBuffer localByteBuffer = dispatch_glXQueryRendererStringMESA0(paramLong, paramInt1, paramInt2, paramInt3, l);
    if (localByteBuffer == null) return null;
    Buffers.nativeOrder(localByteBuffer);
    return localByteBuffer;
  }
  

  private native ByteBuffer dispatch_glXQueryRendererStringMESA0(long paramLong1, int paramInt1, int paramInt2, int paramInt3, long paramLong2);
  

  public boolean glXReleaseBuffersMESA(long paramLong1, long paramLong2)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXReleaseBuffersMESA;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXReleaseBuffersMESA" }));
    }
    return dispatch_glXReleaseBuffersMESA0(paramLong1, paramLong2, l);
  }
  

  private native boolean dispatch_glXReleaseBuffersMESA0(long paramLong1, long paramLong2, long paramLong3);
  

  public boolean glXSet3DfxModeMESA(int paramInt)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXSet3DfxModeMESA;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXSet3DfxModeMESA" }));
    }
    return dispatch_glXSet3DfxModeMESA0(paramInt, l);
  }
  

  private native boolean dispatch_glXSet3DfxModeMESA0(int paramInt, long paramLong);
  

  public void glXCopyBufferSubDataNV(long paramLong1, long paramLong2, long paramLong3, int paramInt1, int paramInt2, long paramLong4, long paramLong5, long paramLong6)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXCopyBufferSubDataNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXCopyBufferSubDataNV" }));
    }
    dispatch_glXCopyBufferSubDataNV0(paramLong1, paramLong2, paramLong3, paramInt1, paramInt2, paramLong4, paramLong5, paramLong6, l);
  }
  

  private native void dispatch_glXCopyBufferSubDataNV0(long paramLong1, long paramLong2, long paramLong3, int paramInt1, int paramInt2, long paramLong4, long paramLong5, long paramLong6, long paramLong7);
  

  public void glXNamedCopyBufferSubDataNV(long paramLong1, long paramLong2, long paramLong3, int paramInt1, int paramInt2, long paramLong4, long paramLong5, long paramLong6)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXNamedCopyBufferSubDataNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXNamedCopyBufferSubDataNV" }));
    }
    dispatch_glXNamedCopyBufferSubDataNV0(paramLong1, paramLong2, paramLong3, paramInt1, paramInt2, paramLong4, paramLong5, paramLong6, l);
  }
  

  private native void dispatch_glXNamedCopyBufferSubDataNV0(long paramLong1, long paramLong2, long paramLong3, int paramInt1, int paramInt2, long paramLong4, long paramLong5, long paramLong6, long paramLong7);
  

  public void glXCopyImageSubDataNV(long paramLong1, long paramLong2, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, long paramLong3, int paramInt7, int paramInt8, int paramInt9, int paramInt10, int paramInt11, int paramInt12, int paramInt13, int paramInt14, int paramInt15)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXCopyImageSubDataNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXCopyImageSubDataNV" }));
    }
    dispatch_glXCopyImageSubDataNV0(paramLong1, paramLong2, paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramLong3, paramInt7, paramInt8, paramInt9, paramInt10, paramInt11, paramInt12, paramInt13, paramInt14, paramInt15, l);
  }
  

  private native void dispatch_glXCopyImageSubDataNV0(long paramLong1, long paramLong2, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, long paramLong3, int paramInt7, int paramInt8, int paramInt9, int paramInt10, int paramInt11, int paramInt12, int paramInt13, int paramInt14, int paramInt15, long paramLong4);
  

  public boolean glXDelayBeforeSwapNV(long paramLong1, long paramLong2, float paramFloat)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXDelayBeforeSwapNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXDelayBeforeSwapNV" }));
    }
    return dispatch_glXDelayBeforeSwapNV0(paramLong1, paramLong2, paramFloat, l);
  }
  


  private native boolean dispatch_glXDelayBeforeSwapNV0(long paramLong1, long paramLong2, float paramFloat, long paramLong3);
  

  public IntBuffer glXEnumerateVideoDevicesNV(long paramLong, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"nelements\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXEnumerateVideoDevicesNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXEnumerateVideoDevicesNV" }));
    }
    
    ByteBuffer localByteBuffer = dispatch_glXEnumerateVideoDevicesNV0(paramLong, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
    if (localByteBuffer == null) return null;
    Buffers.nativeOrder(localByteBuffer);
    return localByteBuffer.asIntBuffer();
  }
  


  private native ByteBuffer dispatch_glXEnumerateVideoDevicesNV0(long paramLong1, int paramInt1, Object paramObject, int paramInt2, long paramLong2);
  


  public int glXBindVideoDeviceNV(long paramLong, int paramInt1, int paramInt2, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"attrib_list\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXBindVideoDeviceNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXBindVideoDeviceNV" }));
    }
    return dispatch_glXBindVideoDeviceNV0(paramLong, paramInt1, paramInt2, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native int dispatch_glXBindVideoDeviceNV0(long paramLong1, int paramInt1, int paramInt2, Object paramObject, int paramInt3, long paramLong2);
  

  public boolean glXJoinSwapGroupNV(long paramLong1, long paramLong2, int paramInt)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXJoinSwapGroupNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXJoinSwapGroupNV" }));
    }
    return dispatch_glXJoinSwapGroupNV0(paramLong1, paramLong2, paramInt, l);
  }
  

  private native boolean dispatch_glXJoinSwapGroupNV0(long paramLong1, long paramLong2, int paramInt, long paramLong3);
  

  public boolean glXBindSwapBarrierNV(long paramLong, int paramInt1, int paramInt2)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXBindSwapBarrierNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXBindSwapBarrierNV" }));
    }
    return dispatch_glXBindSwapBarrierNV0(paramLong, paramInt1, paramInt2, l);
  }
  


  private native boolean dispatch_glXBindSwapBarrierNV0(long paramLong1, int paramInt1, int paramInt2, long paramLong2);
  


  public boolean glXQuerySwapGroupNV(long paramLong1, long paramLong2, IntBuffer paramIntBuffer1, IntBuffer paramIntBuffer2)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new GLException("Argument \"group\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new GLException("Argument \"barrier\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXQuerySwapGroupNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXQuerySwapGroupNV" }));
    }
    return dispatch_glXQuerySwapGroupNV0(paramLong1, paramLong2, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), l);
  }
  



  private native boolean dispatch_glXQuerySwapGroupNV0(long paramLong1, long paramLong2, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, long paramLong3);
  



  public boolean glXQueryMaxSwapGroupsNV(long paramLong, int paramInt, IntBuffer paramIntBuffer1, IntBuffer paramIntBuffer2)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new GLException("Argument \"maxGroups\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new GLException("Argument \"maxBarriers\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXQueryMaxSwapGroupsNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXQueryMaxSwapGroupsNV" }));
    }
    return dispatch_glXQueryMaxSwapGroupsNV0(paramLong, paramInt, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), l);
  }
  



  private native boolean dispatch_glXQueryMaxSwapGroupsNV0(long paramLong1, int paramInt1, Object paramObject1, int paramInt2, Object paramObject2, int paramInt3, long paramLong2);
  


  public boolean glXQueryFrameCountNV(long paramLong, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"count\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXQueryFrameCountNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXQueryFrameCountNV" }));
    }
    return dispatch_glXQueryFrameCountNV0(paramLong, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native boolean dispatch_glXQueryFrameCountNV0(long paramLong1, int paramInt1, Object paramObject, int paramInt2, long paramLong2);
  

  public boolean glXResetFrameCountNV(long paramLong, int paramInt)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXResetFrameCountNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXResetFrameCountNV" }));
    }
    return dispatch_glXResetFrameCountNV0(paramLong, paramInt, l);
  }
  

  private native boolean dispatch_glXResetFrameCountNV0(long paramLong1, int paramInt, long paramLong2);
  

  public int glXBindVideoCaptureDeviceNV(long paramLong1, int paramInt, long paramLong2)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXBindVideoCaptureDeviceNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXBindVideoCaptureDeviceNV" }));
    }
    return dispatch_glXBindVideoCaptureDeviceNV0(paramLong1, paramInt, paramLong2, l);
  }
  


  private native int dispatch_glXBindVideoCaptureDeviceNV0(long paramLong1, int paramInt, long paramLong2, long paramLong3);
  

  public PointerBuffer glXEnumerateVideoCaptureDevicesNV(long paramLong, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"nelements\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXEnumerateVideoCaptureDevicesNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXEnumerateVideoCaptureDevicesNV" }));
    }
    
    ByteBuffer localByteBuffer = dispatch_glXEnumerateVideoCaptureDevicesNV0(paramLong, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
    if (localByteBuffer == null) return null;
    Buffers.nativeOrder(localByteBuffer);
    return PointerBuffer.wrap(localByteBuffer);
  }
  


  private native ByteBuffer dispatch_glXEnumerateVideoCaptureDevicesNV0(long paramLong1, int paramInt1, Object paramObject, int paramInt2, long paramLong2);
  

  public void glXLockVideoCaptureDeviceNV(long paramLong1, long paramLong2)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXLockVideoCaptureDeviceNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXLockVideoCaptureDeviceNV" }));
    }
    dispatch_glXLockVideoCaptureDeviceNV0(paramLong1, paramLong2, l);
  }
  


  private native void dispatch_glXLockVideoCaptureDeviceNV0(long paramLong1, long paramLong2, long paramLong3);
  

  public int glXQueryVideoCaptureDeviceNV(long paramLong1, long paramLong2, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"value\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXQueryVideoCaptureDeviceNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXQueryVideoCaptureDeviceNV" }));
    }
    return dispatch_glXQueryVideoCaptureDeviceNV0(paramLong1, paramLong2, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native int dispatch_glXQueryVideoCaptureDeviceNV0(long paramLong1, long paramLong2, int paramInt1, Object paramObject, int paramInt2, long paramLong3);
  

  public void glXReleaseVideoCaptureDeviceNV(long paramLong1, long paramLong2)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXReleaseVideoCaptureDeviceNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXReleaseVideoCaptureDeviceNV" }));
    }
    dispatch_glXReleaseVideoCaptureDeviceNV0(paramLong1, paramLong2, l);
  }
  


  private native void dispatch_glXReleaseVideoCaptureDeviceNV0(long paramLong1, long paramLong2, long paramLong3);
  

  public int glXGetVideoDeviceNV(long paramLong, int paramInt1, int paramInt2, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"pVideoDevice\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXGetVideoDeviceNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXGetVideoDeviceNV" }));
    }
    return dispatch_glXGetVideoDeviceNV0(paramLong, paramInt1, paramInt2, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native int dispatch_glXGetVideoDeviceNV0(long paramLong1, int paramInt1, int paramInt2, Object paramObject, int paramInt3, long paramLong2);
  

  public int glXReleaseVideoDeviceNV(long paramLong, int paramInt1, int paramInt2)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXReleaseVideoDeviceNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXReleaseVideoDeviceNV" }));
    }
    return dispatch_glXReleaseVideoDeviceNV0(paramLong, paramInt1, paramInt2, l);
  }
  

  private native int dispatch_glXReleaseVideoDeviceNV0(long paramLong1, int paramInt1, int paramInt2, long paramLong2);
  

  public int glXBindVideoImageNV(long paramLong1, int paramInt1, long paramLong2, int paramInt2)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXBindVideoImageNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXBindVideoImageNV" }));
    }
    return dispatch_glXBindVideoImageNV0(paramLong1, paramInt1, paramLong2, paramInt2, l);
  }
  

  private native int dispatch_glXBindVideoImageNV0(long paramLong1, int paramInt1, long paramLong2, int paramInt2, long paramLong3);
  

  public int glXReleaseVideoImageNV(long paramLong1, long paramLong2)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXReleaseVideoImageNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXReleaseVideoImageNV" }));
    }
    return dispatch_glXReleaseVideoImageNV0(paramLong1, paramLong2, l);
  }
  


  private native int dispatch_glXReleaseVideoImageNV0(long paramLong1, long paramLong2, long paramLong3);
  

  public int glXSendPbufferToVideoNV(long paramLong1, long paramLong2, int paramInt, LongBuffer paramLongBuffer, boolean paramBoolean)
  {
    if (!Buffers.isDirect(paramLongBuffer))
      throw new GLException("Argument \"pulCounterPbuffer\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXSendPbufferToVideoNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXSendPbufferToVideoNV" }));
    }
    return dispatch_glXSendPbufferToVideoNV0(paramLong1, paramLong2, paramInt, paramLongBuffer, Buffers.getDirectBufferByteOffset(paramLongBuffer), paramBoolean, l);
  }
  



  private native int dispatch_glXSendPbufferToVideoNV0(long paramLong1, long paramLong2, int paramInt1, Object paramObject, int paramInt2, boolean paramBoolean, long paramLong3);
  


  public int glXGetVideoInfoNV(long paramLong, int paramInt1, int paramInt2, LongBuffer paramLongBuffer1, LongBuffer paramLongBuffer2)
  {
    if (!Buffers.isDirect(paramLongBuffer1))
      throw new GLException("Argument \"pulCounterOutputPbuffer\" is not a direct buffer");
    if (!Buffers.isDirect(paramLongBuffer2))
      throw new GLException("Argument \"pulCounterOutputVideo\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXGetVideoInfoNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXGetVideoInfoNV" }));
    }
    return dispatch_glXGetVideoInfoNV0(paramLong, paramInt1, paramInt2, paramLongBuffer1, Buffers.getDirectBufferByteOffset(paramLongBuffer1), paramLongBuffer2, Buffers.getDirectBufferByteOffset(paramLongBuffer2), l);
  }
  




  private native int dispatch_glXGetVideoInfoNV0(long paramLong1, int paramInt1, int paramInt2, Object paramObject1, int paramInt3, Object paramObject2, int paramInt4, long paramLong2);
  



  public boolean glXGetSyncValuesOML(long paramLong1, long paramLong2, LongBuffer paramLongBuffer1, LongBuffer paramLongBuffer2, LongBuffer paramLongBuffer3)
  {
    if (!Buffers.isDirect(paramLongBuffer1))
      throw new GLException("Argument \"ust\" is not a direct buffer");
    if (!Buffers.isDirect(paramLongBuffer2))
      throw new GLException("Argument \"msc\" is not a direct buffer");
    if (!Buffers.isDirect(paramLongBuffer3))
      throw new GLException("Argument \"sbc\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXGetSyncValuesOML;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXGetSyncValuesOML" }));
    }
    return dispatch_glXGetSyncValuesOML0(paramLong1, paramLong2, paramLongBuffer1, Buffers.getDirectBufferByteOffset(paramLongBuffer1), paramLongBuffer2, Buffers.getDirectBufferByteOffset(paramLongBuffer2), paramLongBuffer3, Buffers.getDirectBufferByteOffset(paramLongBuffer3), l);
  }
  




  private native boolean dispatch_glXGetSyncValuesOML0(long paramLong1, long paramLong2, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, Object paramObject3, int paramInt3, long paramLong3);
  



  public boolean glXGetMscRateOML(long paramLong1, long paramLong2, IntBuffer paramIntBuffer1, IntBuffer paramIntBuffer2)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new GLException("Argument \"numerator\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new GLException("Argument \"denominator\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXGetMscRateOML;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXGetMscRateOML" }));
    }
    return dispatch_glXGetMscRateOML0(paramLong1, paramLong2, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), l);
  }
  


  private native boolean dispatch_glXGetMscRateOML0(long paramLong1, long paramLong2, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, long paramLong3);
  


  public long glXSwapBuffersMscOML(long paramLong1, long paramLong2, long paramLong3, long paramLong4, long paramLong5)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXSwapBuffersMscOML;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXSwapBuffersMscOML" }));
    }
    return dispatch_glXSwapBuffersMscOML0(paramLong1, paramLong2, paramLong3, paramLong4, paramLong5, l);
  }
  



  private native long dispatch_glXSwapBuffersMscOML0(long paramLong1, long paramLong2, long paramLong3, long paramLong4, long paramLong5, long paramLong6);
  


  public boolean glXWaitForMscOML(long paramLong1, long paramLong2, long paramLong3, long paramLong4, long paramLong5, LongBuffer paramLongBuffer1, LongBuffer paramLongBuffer2, LongBuffer paramLongBuffer3)
  {
    if (!Buffers.isDirect(paramLongBuffer1))
      throw new GLException("Argument \"ust\" is not a direct buffer");
    if (!Buffers.isDirect(paramLongBuffer2))
      throw new GLException("Argument \"msc\" is not a direct buffer");
    if (!Buffers.isDirect(paramLongBuffer3))
      throw new GLException("Argument \"sbc\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXWaitForMscOML;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXWaitForMscOML" }));
    }
    return dispatch_glXWaitForMscOML0(paramLong1, paramLong2, paramLong3, paramLong4, paramLong5, paramLongBuffer1, Buffers.getDirectBufferByteOffset(paramLongBuffer1), paramLongBuffer2, Buffers.getDirectBufferByteOffset(paramLongBuffer2), paramLongBuffer3, Buffers.getDirectBufferByteOffset(paramLongBuffer3), l);
  }
  




  private native boolean dispatch_glXWaitForMscOML0(long paramLong1, long paramLong2, long paramLong3, long paramLong4, long paramLong5, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, Object paramObject3, int paramInt3, long paramLong6);
  




  public boolean glXWaitForSbcOML(long paramLong1, long paramLong2, long paramLong3, LongBuffer paramLongBuffer1, LongBuffer paramLongBuffer2, LongBuffer paramLongBuffer3)
  {
    if (!Buffers.isDirect(paramLongBuffer1))
      throw new GLException("Argument \"ust\" is not a direct buffer");
    if (!Buffers.isDirect(paramLongBuffer2))
      throw new GLException("Argument \"msc\" is not a direct buffer");
    if (!Buffers.isDirect(paramLongBuffer3))
      throw new GLException("Argument \"sbc\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXWaitForSbcOML;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXWaitForSbcOML" }));
    }
    return dispatch_glXWaitForSbcOML0(paramLong1, paramLong2, paramLong3, paramLongBuffer1, Buffers.getDirectBufferByteOffset(paramLongBuffer1), paramLongBuffer2, Buffers.getDirectBufferByteOffset(paramLongBuffer2), paramLongBuffer3, Buffers.getDirectBufferByteOffset(paramLongBuffer3), l);
  }
  



  private native boolean dispatch_glXWaitForSbcOML0(long paramLong1, long paramLong2, long paramLong3, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, Object paramObject3, int paramInt3, long paramLong4);
  


  public void glXBindSwapBarrierSGIX(long paramLong1, long paramLong2, int paramInt)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXBindSwapBarrierSGIX;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXBindSwapBarrierSGIX" }));
    }
    dispatch_glXBindSwapBarrierSGIX0(paramLong1, paramLong2, paramInt, l);
  }
  


  private native void dispatch_glXBindSwapBarrierSGIX0(long paramLong1, long paramLong2, int paramInt, long paramLong3);
  

  public boolean glXQueryMaxSwapBarriersSGIX(long paramLong, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"max\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXQueryMaxSwapBarriersSGIX;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXQueryMaxSwapBarriersSGIX" }));
    }
    return dispatch_glXQueryMaxSwapBarriersSGIX0(paramLong, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native boolean dispatch_glXQueryMaxSwapBarriersSGIX0(long paramLong1, int paramInt1, Object paramObject, int paramInt2, long paramLong2);
  

  public void glXJoinSwapGroupSGIX(long paramLong1, long paramLong2, long paramLong3)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXJoinSwapGroupSGIX;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXJoinSwapGroupSGIX" }));
    }
    dispatch_glXJoinSwapGroupSGIX0(paramLong1, paramLong2, paramLong3, l);
  }
  

  private native void dispatch_glXJoinSwapGroupSGIX0(long paramLong1, long paramLong2, long paramLong3, long paramLong4);
  

  public int glXBindChannelToWindowSGIX(long paramLong1, int paramInt1, int paramInt2, long paramLong2)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXBindChannelToWindowSGIX;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXBindChannelToWindowSGIX" }));
    }
    return dispatch_glXBindChannelToWindowSGIX0(paramLong1, paramInt1, paramInt2, paramLong2, l);
  }
  

  private native int dispatch_glXBindChannelToWindowSGIX0(long paramLong1, int paramInt1, int paramInt2, long paramLong2, long paramLong3);
  

  public int glXChannelRectSGIX(long paramLong, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXChannelRectSGIX;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXChannelRectSGIX" }));
    }
    return dispatch_glXChannelRectSGIX0(paramLong, paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, l);
  }
  



  private native int dispatch_glXChannelRectSGIX0(long paramLong1, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, long paramLong2);
  



  public int glXQueryChannelRectSGIX(long paramLong, int paramInt1, int paramInt2, IntBuffer paramIntBuffer1, IntBuffer paramIntBuffer2, IntBuffer paramIntBuffer3, IntBuffer paramIntBuffer4)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new GLException("Argument \"dx\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new GLException("Argument \"dy\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer3))
      throw new GLException("Argument \"dw\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer4))
      throw new GLException("Argument \"dh\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXQueryChannelRectSGIX;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXQueryChannelRectSGIX" }));
    }
    return dispatch_glXQueryChannelRectSGIX0(paramLong, paramInt1, paramInt2, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), paramIntBuffer3, Buffers.getDirectBufferByteOffset(paramIntBuffer3), paramIntBuffer4, Buffers.getDirectBufferByteOffset(paramIntBuffer4), l);
  }
  





  private native int dispatch_glXQueryChannelRectSGIX0(long paramLong1, int paramInt1, int paramInt2, Object paramObject1, int paramInt3, Object paramObject2, int paramInt4, Object paramObject3, int paramInt5, Object paramObject4, int paramInt6, long paramLong2);
  





  public int glXQueryChannelDeltasSGIX(long paramLong, int paramInt1, int paramInt2, IntBuffer paramIntBuffer1, IntBuffer paramIntBuffer2, IntBuffer paramIntBuffer3, IntBuffer paramIntBuffer4)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new GLException("Argument \"x\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new GLException("Argument \"y\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer3))
      throw new GLException("Argument \"w\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer4))
      throw new GLException("Argument \"h\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXQueryChannelDeltasSGIX;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXQueryChannelDeltasSGIX" }));
    }
    return dispatch_glXQueryChannelDeltasSGIX0(paramLong, paramInt1, paramInt2, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), paramIntBuffer3, Buffers.getDirectBufferByteOffset(paramIntBuffer3), paramIntBuffer4, Buffers.getDirectBufferByteOffset(paramIntBuffer4), l);
  }
  



  private native int dispatch_glXQueryChannelDeltasSGIX0(long paramLong1, int paramInt1, int paramInt2, Object paramObject1, int paramInt3, Object paramObject2, int paramInt4, Object paramObject3, int paramInt5, Object paramObject4, int paramInt6, long paramLong2);
  



  public int glXChannelRectSyncSGIX(long paramLong, int paramInt1, int paramInt2, int paramInt3)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXChannelRectSyncSGIX;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXChannelRectSyncSGIX" }));
    }
    return dispatch_glXChannelRectSyncSGIX0(paramLong, paramInt1, paramInt2, paramInt3, l);
  }
  

  private native int dispatch_glXChannelRectSyncSGIX0(long paramLong1, int paramInt1, int paramInt2, int paramInt3, long paramLong2);
  

  public void glXCushionSGI(long paramLong1, long paramLong2, float paramFloat)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXCushionSGI;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXCushionSGI" }));
    }
    dispatch_glXCushionSGI0(paramLong1, paramLong2, paramFloat, l);
  }
  

  private native void dispatch_glXCushionSGI0(long paramLong1, long paramLong2, float paramFloat, long paramLong3);
  

  public boolean glXMakeCurrentReadSGI(long paramLong1, long paramLong2, long paramLong3, long paramLong4)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXMakeCurrentReadSGI;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXMakeCurrentReadSGI" }));
    }
    return dispatch_glXMakeCurrentReadSGI0(paramLong1, paramLong2, paramLong3, paramLong4, l);
  }
  

  private native boolean dispatch_glXMakeCurrentReadSGI0(long paramLong1, long paramLong2, long paramLong3, long paramLong4, long paramLong5);
  

  public long glXGetCurrentReadDrawableSGI()
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXGetCurrentReadDrawableSGI;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXGetCurrentReadDrawableSGI" }));
    }
    return dispatch_glXGetCurrentReadDrawableSGI0(l);
  }
  

  private native long dispatch_glXGetCurrentReadDrawableSGI0(long paramLong);
  

  public int glXSwapIntervalSGI(int paramInt)
  {
    long l = _context.getGLXExtProcAddressTable()._addressof_glXSwapIntervalSGI;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXSwapIntervalSGI" }));
    }
    return dispatch_glXSwapIntervalSGI0(paramInt, l);
  }
  


  private native int dispatch_glXSwapIntervalSGI0(int paramInt, long paramLong);
  

  public int glXGetVideoSyncSGI(IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"count\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXGetVideoSyncSGI;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXGetVideoSyncSGI" }));
    }
    return dispatch_glXGetVideoSyncSGI0(paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native int dispatch_glXGetVideoSyncSGI0(Object paramObject, int paramInt, long paramLong);
  


  public int glXWaitVideoSyncSGI(int paramInt1, int paramInt2, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"count\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXWaitVideoSyncSGI;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXWaitVideoSyncSGI" }));
    }
    return dispatch_glXWaitVideoSyncSGI0(paramInt1, paramInt2, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native int dispatch_glXWaitVideoSyncSGI0(int paramInt1, int paramInt2, Object paramObject, int paramInt3, long paramLong);
  


  public int glXGetTransparentIndexSUN(long paramLong1, long paramLong2, long paramLong3, LongBuffer paramLongBuffer)
  {
    if (!Buffers.isDirect(paramLongBuffer))
      throw new GLException("Argument \"pTransparentIndex\" is not a direct buffer");
    long l = _context.getGLXExtProcAddressTable()._addressof_glXGetTransparentIndexSUN;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "glXGetTransparentIndexSUN" }));
    }
    return dispatch_glXGetTransparentIndexSUN0(paramLong1, paramLong2, paramLong3, paramLongBuffer, Buffers.getDirectBufferByteOffset(paramLongBuffer), l);
  }
  


  private native int dispatch_glXGetTransparentIndexSUN0(long paramLong1, long paramLong2, long paramLong3, Object paramObject, int paramInt, long paramLong4);
  

  public GLXExtImpl(X11GLXContext paramX11GLXContext)
  {
    _context = paramX11GLXContext;
  }
  
  public boolean isFunctionAvailable(String paramString) {
    return _context.isFunctionAvailable(paramString);
  }
  
  public boolean isExtensionAvailable(String paramString) {
    return _context.isExtensionAvailable(paramString);
  }
}
