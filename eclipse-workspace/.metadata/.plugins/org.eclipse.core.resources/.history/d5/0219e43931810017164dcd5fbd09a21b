package com.jogamp.nativewindow.util;

import com.jogamp.common.nio.Buffers;
import com.jogamp.common.util.Bitstream;
import com.jogamp.common.util.Bitstream.ByteBufferStream;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
































public class PixelFormatUtil
{
  private static boolean DEBUG = false;
  

  public PixelFormatUtil() {}
  


  public static class ComponentMap
  {
    final int[] dst2src;
    

    final int[] src2dst;
    
    final int[] srcRGBA;
    
    final boolean hasSrcRGB;
    

    public ComponentMap(PixelFormat.Composition paramComposition1, PixelFormat.Composition paramComposition2)
    {
      int i = paramComposition1.componentCount();
      int j = paramComposition2.componentCount();
      PixelFormat.CType[] arrayOfCType1 = paramComposition1.componentOrder();
      PixelFormat.CType[] arrayOfCType2 = paramComposition2.componentOrder();
      
      dst2src = new int[j];
      for (int k = 0; k < j; k++) {
        dst2src[k] = PixelFormatUtil.find(arrayOfCType2[k], arrayOfCType1, true);
      }
      src2dst = new int[i];
      for (k = 0; k < i; k++) {
        src2dst[k] = PixelFormatUtil.find(arrayOfCType1[k], arrayOfCType2, true);
      }
      srcRGBA = new int[4];
      srcRGBA[0] = PixelFormatUtil.find(PixelFormat.CType.R, arrayOfCType1, false);
      srcRGBA[1] = PixelFormatUtil.find(PixelFormat.CType.G, arrayOfCType1, false);
      srcRGBA[2] = PixelFormatUtil.find(PixelFormat.CType.B, arrayOfCType1, false);
      srcRGBA[3] = PixelFormatUtil.find(PixelFormat.CType.A, arrayOfCType1, false);
      hasSrcRGB = ((0 <= srcRGBA[0]) && (0 <= srcRGBA[1]) && (0 <= srcRGBA[2]));
    }
  }
  
  public static final int find(PixelFormat.CType paramCType, PixelFormat.CType[] paramArrayOfCType, boolean paramBoolean)
  {
    int i = paramArrayOfCType.length - 1;
    while ((i >= 0) && (paramArrayOfCType[i] != paramCType)) { i--;
    }
    if ((0 > i) && (paramBoolean) && (1 == paramArrayOfCType.length) && (paramArrayOfCType[0] == PixelFormat.CType.Y) && ((PixelFormat.CType.R == paramCType) || (PixelFormat.CType.G == paramCType) || (PixelFormat.CType.B == paramCType)))
    {




      return 0;
    }
    return i;
  }
  








  public static int getShiftedI32(int paramInt1, byte[] paramArrayOfByte, int paramInt2)
  {
    if (paramInt1 <= 4) {
      int i = 0;
      for (int j = 0; j < paramInt1; j++) {
        i |= (0xFF & paramArrayOfByte[(paramInt2 + j)]) << 8 * j;
      }
      return i;
    }
    throw new UnsupportedOperationException(paramInt1 + " bytesPerPixel too big, i.e. > 4");
  }
  







  public static long getShiftedI64(int paramInt1, byte[] paramArrayOfByte, int paramInt2)
  {
    if (paramInt1 <= 8) {
      long l = 0L;
      for (int i = 0; i < paramInt1; i++) {
        l |= (0xFF & paramArrayOfByte[(paramInt2 + i)]) << 8 * i;
      }
      return l;
    }
    throw new UnsupportedOperationException(paramInt1 + " bytesPerPixel too big, i.e. > 8");
  }
  








  public static int getShiftedI32(int paramInt, ByteBuffer paramByteBuffer, boolean paramBoolean)
  {
    if (paramInt <= 4) {
      int i = 0;
      int j; if (paramBoolean) {
        j = paramByteBuffer.position();
        for (int k = 0; k < paramInt; k++) {
          i |= (0xFF & paramByteBuffer.get(j + k)) << 8 * k;
        }
      } else {
        for (j = 0; j < paramInt; j++) {
          i |= (0xFF & paramByteBuffer.get()) << 8 * j;
        }
      }
      return i;
    }
    throw new UnsupportedOperationException(paramInt + " bytesPerPixel too big, i.e. > 4");
  }
  








  public static long getShiftedI64(int paramInt, ByteBuffer paramByteBuffer, boolean paramBoolean)
  {
    if (paramInt <= 8) {
      long l = 0L;
      int i; if (paramBoolean) {
        i = paramByteBuffer.position();
        for (int j = 0; j < paramInt; j++) {
          l |= (0xFF & paramByteBuffer.get(i + j)) << 8 * j;
        }
      } else {
        for (i = 0; i < paramInt; i++) {
          l |= (0xFF & paramByteBuffer.get()) << 8 * i;
        }
      }
      return l;
    }
    throw new UnsupportedOperationException(paramInt + " bytesPerPixel too big, i.e. > 8");
  }
  




  public static PixelFormat getReversed(PixelFormat paramPixelFormat)
  {
    switch (1.$SwitchMap$com$jogamp$nativewindow$util$PixelFormat[paramPixelFormat.ordinal()]) {
    case 1: 
      return PixelFormat.BGR565;
    case 2: 
      return PixelFormat.RGB565;
    case 3: 
      return PixelFormat.ABGR1555;
    case 4: 
      return PixelFormat.RGBA5551;
    case 5: 
      return PixelFormat.BGR888;
    case 6: 
      return PixelFormat.RGB888;
    case 7: 
      return PixelFormat.ABGR8888;
    case 8: 
      return PixelFormat.RGBA8888;
    case 9: 
      return PixelFormat.BGRA8888;
    case 10: 
      return PixelFormat.ABGR8888;
    }
    return paramPixelFormat;
  }
  
  public static int convertToInt32(PixelFormat paramPixelFormat, byte paramByte1, byte paramByte2, byte paramByte3, byte paramByte4)
  {
    switch (1.$SwitchMap$com$jogamp$nativewindow$util$PixelFormat[paramPixelFormat.ordinal()]) {
    case 11: 
      int i = (byte)(((0xFF & paramByte1) + (0xFF & paramByte2) + (0xFF & paramByte3)) / 3 * paramByte4);
      return 0xFF000000 | (0xFF & i) << 16 | (0xFF & i) << 8 | 0xFF & i;
    
    case 5: 
      return 0xFF000000 | (0xFF & paramByte3) << 16 | (0xFF & paramByte2) << 8 | 0xFF & paramByte1;
    case 6: 
      return 0xFF000000 | (0xFF & paramByte1) << 16 | (0xFF & paramByte2) << 8 | 0xFF & paramByte3;
    case 7: 
      return (0xFF & paramByte4) << 24 | (0xFF & paramByte3) << 16 | (0xFF & paramByte2) << 8 | 0xFF & paramByte1;
    case 8: 
      return (0xFF & paramByte1) << 24 | (0xFF & paramByte2) << 16 | (0xFF & paramByte3) << 8 | 0xFF & paramByte4;
    case 9: 
      return (0xFF & paramByte3) << 24 | (0xFF & paramByte2) << 16 | (0xFF & paramByte1) << 8 | 0xFF & paramByte4;
    case 10: 
      return (0xFF & paramByte4) << 24 | (0xFF & paramByte1) << 16 | (0xFF & paramByte2) << 8 | 0xFF & paramByte3;
    }
    throw new InternalError("Unhandled format " + paramPixelFormat); }
  
  public static int convertToInt32(PixelFormat paramPixelFormat1, PixelFormat paramPixelFormat2, ByteBuffer paramByteBuffer, int paramInt) { byte b1;
    byte b2;
    byte b3;
    byte b4;
    switch (1.$SwitchMap$com$jogamp$nativewindow$util$PixelFormat[paramPixelFormat2.ordinal()]) {
    case 11: 
      b1 = paramByteBuffer.get(paramInt++);
      b2 = b1;
      b3 = b1;
      b4 = -1;
      break;
    case 5: 
      b1 = paramByteBuffer.get(paramInt++);
      b2 = paramByteBuffer.get(paramInt++);
      b3 = paramByteBuffer.get(paramInt++);
      b4 = -1;
      break;
    case 6: 
      b3 = paramByteBuffer.get(paramInt++);
      b2 = paramByteBuffer.get(paramInt++);
      b1 = paramByteBuffer.get(paramInt++);
      b4 = -1;
      break;
    case 7: 
      b1 = paramByteBuffer.get(paramInt++);
      b2 = paramByteBuffer.get(paramInt++);
      b3 = paramByteBuffer.get(paramInt++);
      b4 = paramByteBuffer.get(paramInt++);
      break;
    case 8: 
      b4 = paramByteBuffer.get(paramInt++);
      b3 = paramByteBuffer.get(paramInt++);
      b2 = paramByteBuffer.get(paramInt++);
      b1 = paramByteBuffer.get(paramInt++);
      break;
    case 9: 
      b4 = paramByteBuffer.get(paramInt++);
      b1 = paramByteBuffer.get(paramInt++);
      b2 = paramByteBuffer.get(paramInt++);
      b3 = paramByteBuffer.get(paramInt++);
      break;
    case 10: 
      b3 = paramByteBuffer.get(paramInt++);
      b2 = paramByteBuffer.get(paramInt++);
      b1 = paramByteBuffer.get(paramInt++);
      b4 = paramByteBuffer.get(paramInt++);
      break;
    default: 
      throw new InternalError("Unhandled format " + paramPixelFormat2);
    }
    return convertToInt32(paramPixelFormat1, b1, b2, b3, b4); }
  
  public static int convertToInt32(PixelFormat paramPixelFormat1, PixelFormat paramPixelFormat2, int paramInt) { byte b1;
    byte b2;
    byte b3;
    byte b4; switch (1.$SwitchMap$com$jogamp$nativewindow$util$PixelFormat[paramPixelFormat2.ordinal()]) {
    case 11: 
      b1 = (byte)paramInt;
      b2 = b1;
      b3 = b1;
      b4 = -1;
      break;
    case 5: 
      b1 = (byte)paramInt;
      b2 = (byte)(paramInt >>> 8);
      b3 = (byte)(paramInt >>> 16);
      b4 = -1;
      break;
    case 6: 
      b3 = (byte)paramInt;
      b2 = (byte)(paramInt >>> 8);
      b1 = (byte)(paramInt >>> 16);
      b4 = -1;
      break;
    case 7: 
      b1 = (byte)paramInt;
      b2 = (byte)(paramInt >>> 8);
      b3 = (byte)(paramInt >>> 16);
      b4 = (byte)(paramInt >>> 24);
      break;
    case 8: 
      b4 = (byte)paramInt;
      b3 = (byte)(paramInt >>> 8);
      b2 = (byte)(paramInt >>> 16);
      b1 = (byte)(paramInt >>> 24);
      break;
    case 9: 
      b4 = (byte)paramInt;
      b1 = (byte)(paramInt >>> 8);
      b2 = (byte)(paramInt >>> 16);
      b3 = (byte)(paramInt >>> 24);
      break;
    case 10: 
      b3 = (byte)paramInt;
      b2 = (byte)(paramInt >>> 8);
      b1 = (byte)(paramInt >>> 16);
      b4 = (byte)(paramInt >>> 24);
      break;
    default: 
      throw new InternalError("Unhandled format " + paramPixelFormat2);
    }
    return convertToInt32(paramPixelFormat1, b1, b2, b3, b4);
  }
  

  public static PixelRectangle convert(PixelRectangle paramPixelRectangle, PixelFormat paramPixelFormat, int paramInt, boolean paramBoolean1, boolean paramBoolean2)
  {
    int i = paramPixelRectangle.getSize().getWidth();
    int j = paramPixelRectangle.getSize().getHeight();
    int k = comp.bytesPerPixel();
    int m;
    if (0 != paramInt) {
      m = paramInt;
    } else {
      m = k * i;
    }
    int n = m * j;
    ByteBuffer localByteBuffer = paramBoolean2 ? Buffers.newDirectByteBuffer(n) : ByteBuffer.allocate(n).order(paramPixelRectangle.getPixels().order());
    convert(paramPixelRectangle, localByteBuffer, paramPixelFormat, paramBoolean1, m);
    return new PixelRectangle.GenericPixelRect(paramPixelFormat, paramPixelRectangle.getSize(), m, paramBoolean1, localByteBuffer);
  }
  














  public static void convert(PixelRectangle paramPixelRectangle, ByteBuffer paramByteBuffer, PixelFormat paramPixelFormat, boolean paramBoolean, int paramInt)
    throws IllegalStateException
  {
    convert(paramPixelRectangle.getSize().getWidth(), paramPixelRectangle.getSize().getHeight(), paramPixelRectangle
      .getPixels(), paramPixelRectangle.getPixelformat(), paramPixelRectangle.isGLOriented(), paramPixelRectangle.getStride(), paramByteBuffer, paramPixelFormat, paramBoolean, paramInt);
  }
  
























  public static void convert(int paramInt1, int paramInt2, ByteBuffer paramByteBuffer1, PixelFormat paramPixelFormat1, boolean paramBoolean1, int paramInt3, ByteBuffer paramByteBuffer2, PixelFormat paramPixelFormat2, boolean paramBoolean2, int paramInt4)
    throws IllegalStateException, IllegalArgumentException
  {
    PixelFormat.Composition localComposition1 = comp;
    PixelFormat.Composition localComposition2 = comp;
    int i = localComposition1.bytesPerPixel();
    int j = localComposition2.bytesPerPixel();
    
    if (0 != paramInt3) {
      if (paramInt3 < i * paramInt1) {
        throw new IllegalArgumentException(String.format("Invalid %s stride %d, must be greater than bytesPerPixel %d * width %d", new Object[] { "source", 
          Integer.valueOf(paramInt3), Integer.valueOf(i), Integer.valueOf(paramInt1) }));
      }
    } else {
      paramInt3 = i * paramInt1;
    }
    if (0 != paramInt4) {
      if (paramInt4 < j * paramInt1) {
        throw new IllegalArgumentException(String.format("Invalid %s stride %d, must be greater than bytesPerPixel %d * width %d", new Object[] { "destination", 
          Integer.valueOf(paramInt4), Integer.valueOf(j), Integer.valueOf(paramInt1) }));
      }
    } else {
      paramInt4 = j * paramInt1;
    }
    

    int k = localComposition2.bitStride();
    int m = paramBoolean1 != paramBoolean2 ? 1 : 0;
    boolean bool = (localComposition1.equals(localComposition2)) && (0 == k % 8);
    if (DEBUG) {
      System.err.println("XXX: size " + paramInt1 + "x" + paramInt2 + ", fast_copy " + bool);
      System.err.println("XXX: SRC fmt " + paramPixelFormat1 + ", " + localComposition1 + ", stride " + paramInt3 + ", isGLOrient " + paramBoolean1);
      System.err.println("XXX: DST fmt " + paramPixelFormat2 + ", " + localComposition2 + ", stride " + paramInt4 + ", isGLOrient " + paramBoolean2);
    }
    
    if (bool)
    {
      for (int n = 0; n < paramInt2; n++) {
        int i1 = m != 0 ? (paramInt2 - 1 - n) * paramInt3 : n * paramInt3;
        int i2 = paramInt4 * n;
        for (int i3 = 0; i3 < paramInt1; i3++) {
          paramByteBuffer2.put(i2 + 0, paramByteBuffer1.get(i1 + 0));
          if (2 <= j) {
            paramByteBuffer2.put(i2 + 1, paramByteBuffer1.get(i1 + 1));
            if (3 <= j) {
              paramByteBuffer2.put(i2 + 2, paramByteBuffer1.get(i1 + 2));
              if (4 <= j) {
                paramByteBuffer2.put(i2 + 3, paramByteBuffer1.get(i1 + 3));
              }
            }
          }
          i1 += i;
          i2 += j;
        }
      }
    }
    else {
      ComponentMap localComponentMap = new ComponentMap(comp, comp);
      
      Bitstream.ByteBufferStream localByteBufferStream1 = new Bitstream.ByteBufferStream(paramByteBuffer1);
      Bitstream localBitstream1 = new Bitstream(localByteBufferStream1, false);
      localBitstream1.setThrowIOExceptionOnEOF(true);
      
      Bitstream.ByteBufferStream localByteBufferStream2 = new Bitstream.ByteBufferStream(paramByteBuffer2);
      Bitstream localBitstream2 = new Bitstream(localByteBufferStream2, true);
      localBitstream2.setThrowIOExceptionOnEOF(true);
      
      if (DEBUG) {
        System.err.println("XXX: cmap.dst2src " + Arrays.toString(dst2src));
        System.err.println("XXX: cmap.src2dst " + Arrays.toString(src2dst));
        System.err.println("XXX: cmap.srcRGBA " + Arrays.toString(srcRGBA));
        System.err.println("XXX: srcBitStream " + localBitstream1);
        System.err.println("XXX: dstBitStream " + localBitstream2);
      }
      try {
        for (int i4 = 0; i4 < paramInt2; i4++) {
          int i5 = m != 0 ? (paramInt2 - 1 - i4) * paramInt3 * 8 : i4 * paramInt3 * 8;
          
          localBitstream1.position(i5);
          for (int i6 = 0; i6 < paramInt1; i6++) {
            convert(localComponentMap, localComposition2, localBitstream2, localComposition1, localBitstream1);
          }
          
          localBitstream2.skip(paramInt4 * 8 - k * paramInt1);
        }
      } catch (IOException localIOException) {
        throw new RuntimeException(localIOException);
      }
      if (DEBUG) {
        System.err.println("XXX: srcBitStream " + localBitstream1);
        System.err.println("XXX: dstBitStream " + localBitstream2);
      }
    }
  }
  


  public static void convert(ComponentMap paramComponentMap, PixelFormat.Composition paramComposition1, Bitstream<ByteBuffer> paramBitstream1, PixelFormat.Composition paramComposition2, Bitstream<ByteBuffer> paramBitstream2)
    throws IllegalStateException, IOException
  {
    int i = paramComposition2.componentCount();
    int j = paramComposition1.componentCount();
    int[] arrayOfInt1 = new int[i];
    int[] arrayOfInt2 = new int[j];
    int[] arrayOfInt3 = paramComposition2.componentBitCount();
    int[] arrayOfInt4 = paramComposition2.componentBitMask();
    int[] arrayOfInt5 = paramComposition1.componentBitCount();
    

    for (int k = 0; k < i; k++) {
      arrayOfInt1[k] = (paramBitstream2.readBits31(arrayOfInt3[k]) & arrayOfInt4[k]);
    }
    paramBitstream2.skip(paramComposition2.bitStride() - paramComposition2.bitsPerPixel());
    

    for (k = 0; k < j; k++) {
      arrayOfInt2[k] = paramComposition1.defaultValue(k, false);
    }
    int m;
    if ((1 == j) && 
      (PixelFormat.CType.Y == paramComposition1.componentOrder()[0]) && (hasSrcRGB))
    {



      k = arrayOfInt1[srcRGBA[0]];
      m = arrayOfInt1[srcRGBA[1]];
      int n = arrayOfInt1[srcRGBA[2]];
      float f2 = paramComposition2.toFloat(k, srcRGBA[0], false);
      float f3 = paramComposition2.toFloat(m, srcRGBA[1], false);
      float f4 = paramComposition2.toFloat(n, srcRGBA[2], false);
      





      int i2 = 1;
      float f5 = 1.0F;
      
      float f6 = (f2 + f3 + f4) * f5 / 3.0F;
      int i3 = paramComposition1.fromFloat(f6, 0, false);
      
      paramBitstream1.writeBits31(arrayOfInt5[0], i3);
      paramBitstream1.skip(paramComposition1.bitStride() - paramComposition1.bitsPerPixel());
      if ((DEBUG) && 
        (paramBitstream2.position() <= 32L)) {
        System.err.printf("convert: rgb[a] -> Y: rgb 0x%02X 0x%02X 0x%02X 0x%02X -> %f %f %f %f -> %f -> dstC 0 0x%08X (%d bits: %s)%n", new Object[] {
        
          Integer.valueOf(k), Integer.valueOf(m), Integer.valueOf(n), Integer.valueOf(i2), 
          Float.valueOf(f2), Float.valueOf(f3), Float.valueOf(f4), Float.valueOf(f5), 
          Float.valueOf(f6), Integer.valueOf(i3), Integer.valueOf(arrayOfInt5[0]), Bitstream.toBinString(true, i3, arrayOfInt5[0]) });
      }
      

      return;
    }
    
    for (k = 0; k < j; k++)
    {
      if (0 <= (m = dst2src[k])) {
        float f1 = paramComposition2.toFloat(arrayOfInt1[m], m, false);
        int i1 = paramComposition1.fromFloat(f1, k, false);
        paramBitstream1.writeBits31(arrayOfInt5[k], i1);
        if ((DEBUG) && 
          (paramBitstream2.position() <= 32L)) {
          System.err.printf("convert: srcC %d: 0x%08X -> %f -> dstC %d 0x%08X (%d bits: %s)%n", new Object[] {
            Integer.valueOf(m), Integer.valueOf(arrayOfInt1[m]), Float.valueOf(f1), Integer.valueOf(k), Integer.valueOf(i1), Integer.valueOf(arrayOfInt5[k]), Bitstream.toBinString(true, i1, arrayOfInt5[k]) });
        }
      }
      else {
        paramBitstream1.writeBits31(arrayOfInt5[k], arrayOfInt2[k]);
        if ((DEBUG) && 
          (paramBitstream2.position() <= 32L)) {
          System.err.printf("convert: srcC %d: undef -> dstC %d 0x%08X (%d bits: %s)%n", new Object[] {
            Integer.valueOf(m), Integer.valueOf(k), Integer.valueOf(arrayOfInt2[k]), Integer.valueOf(arrayOfInt5[k]), Bitstream.toBinString(true, arrayOfInt2[k], arrayOfInt5[k]) });
        }
      }
    }
    
    paramBitstream1.skip(paramComposition1.bitStride() - paramComposition1.bitsPerPixel());
  }
}
