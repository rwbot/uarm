package jogamp.graph.font.typecast.ot.table;

import java.io.DataInput;
import java.io.IOException;
import java.io.PrintStream;



















































public class CmapFormat4
  extends CmapFormat
{
  private final int _segCountX2;
  private final int _searchRange;
  private final int _entrySelector;
  private final int _rangeShift;
  private final int[] _endCode;
  private final int[] _startCode;
  private final int[] _idDelta;
  private final int[] _idRangeOffset;
  private final int[] _glyphIdArray;
  private final int _segCount;
  
  protected CmapFormat4(DataInput paramDataInput)
    throws IOException
  {
    super(paramDataInput);
    _format = 4;
    _segCountX2 = paramDataInput.readUnsignedShort();
    _segCount = (_segCountX2 / 2);
    _endCode = new int[_segCount];
    _startCode = new int[_segCount];
    _idDelta = new int[_segCount];
    _idRangeOffset = new int[_segCount];
    _searchRange = paramDataInput.readUnsignedShort();
    _entrySelector = paramDataInput.readUnsignedShort();
    _rangeShift = paramDataInput.readUnsignedShort();
    for (int i = 0; i < _segCount; i++) {
      _endCode[i] = paramDataInput.readUnsignedShort();
    }
    paramDataInput.readUnsignedShort();
    for (i = 0; i < _segCount; i++) {
      _startCode[i] = paramDataInput.readUnsignedShort();
    }
    for (i = 0; i < _segCount; i++) {
      _idDelta[i] = paramDataInput.readUnsignedShort();
    }
    for (i = 0; i < _segCount; i++) {
      _idRangeOffset[i] = paramDataInput.readUnsignedShort();
    }
    

    i = (_length - (8 * _segCount + 16)) / 2;
    _glyphIdArray = new int[i];
    for (int j = 0; j < i; j++) {
      _glyphIdArray[j] = paramDataInput.readUnsignedShort();
    }
  }
  






  public int getRangeCount()
  {
    return _segCount;
  }
  
  public CmapFormat.Range getRange(int paramInt) throws ArrayIndexOutOfBoundsException
  {
    if ((paramInt < 0) || (paramInt >= _segCount)) {
      throw new ArrayIndexOutOfBoundsException();
    }
    return new CmapFormat.Range(_startCode[paramInt], _endCode[paramInt]);
  }
  
  public int mapCharCode(int paramInt)
  {
    try {
      for (int i = 0; i < _segCount; i++) {
        if (_endCode[i] >= paramInt) {
          if (_startCode[i] > paramInt) break;
          if (_idRangeOffset[i] > 0) {
            return _glyphIdArray[(_idRangeOffset[i] / 2 + (paramInt - _startCode[i]) - (_segCount - i))];
          }
          return (_idDelta[i] + paramInt) % 65536;
        }
        
      }
      
    }
    catch (ArrayIndexOutOfBoundsException localArrayIndexOutOfBoundsException)
    {
      System.err.println("error: Array out of bounds - " + localArrayIndexOutOfBoundsException.getMessage());
    }
    return 0;
  }
  

















  public String toString()
  {
    return super.toString() + ", segCountX2: " + _segCountX2 + ", searchRange: " + _searchRange + ", entrySelector: " + _entrySelector + ", rangeShift: " + _rangeShift + ", endCodeLen: " + _endCode.length + ", startCodeLen: " + _endCode.length + ", idDeltaLen: " + _idDelta.length + ", idRangeOffsetLen: " + _idRangeOffset.length;
  }
}
