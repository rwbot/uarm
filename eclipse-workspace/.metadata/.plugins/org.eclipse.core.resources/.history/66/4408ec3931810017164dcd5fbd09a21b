package com.jogamp.opengl;

import com.jogamp.nativewindow.AbstractGraphicsDevice;
import java.util.IdentityHashMap;




































































































































































































































































































































































































































public class GLRendererQuirks
{
  public static final int NoDoubleBufferedPBuffer = 0;
  public static final int NoDoubleBufferedBitmap = 1;
  public static final int NoSetSwapInterval = 2;
  public static final int NoOffscreenBitmap = 3;
  public static final int NoSetSwapIntervalPostRetarget = 4;
  public static final int GLSLBuggyDiscard = 5;
  public static final int GLNonCompliant = 6;
  public static final int GLFlushBeforeRelease = 7;
  public static final int DontCloseX11Display = 8;
  public static final int NeedCurrCtx4ARBPixFmtQueries = 9;
  public static final int NeedCurrCtx4ARBCreateContext = 10;
  public static final int NoFullFBOSupport = 11;
  public static final int GLSLNonCompliant = 12;
  public static final int GL4NeedsGL3Request = 13;
  public static final int GLSharedContextBuggy = 14;
  public static final int GLES3ViaEGLES2Config = 15;
  public static final int SingletonEGLDisplayOnly = 16;
  public static final int NoMultiSamplingBuffers = 17;
  public static final int BuggyColorRenderbuffer = 18;
  public static final int NoPBufferWithAccum = 19;
  public static final int NeedSharedObjectSync = 20;
  public static final int NoARBCreateContext = 21;
  public static final int NoSurfacelessCtx = 22;
  
  public static final int getCount() { return 23; }
  
  private static final String[] _names = { "NoDoubleBufferedPBuffer", "NoDoubleBufferedBitmap", "NoSetSwapInterval", "NoOffscreenBitmap", "NoSetSwapIntervalPostRetarget", "GLSLBuggyDiscard", "GLNonCompliant", "GLFlushBeforeRelease", "DontCloseX11Display", "NeedCurrCtx4ARBPixFmtQueries", "NeedCurrCtx4ARBCreateContext", "NoFullFBOSupport", "GLSLNonCompliant", "GL4NeedsGL3Request", "GLSharedContextBuggy", "GLES3ViaEGLES2Config", "SingletonEGLDisplayOnly", "NoMultiSamplingBuffers", "BuggyColorRenderbuffer", "NoPBufferWithAccum", "NeedSharedObjectSync", "NoARBCreateContext", "NoSurfacelessCtx" };
  








  private static final IdentityHashMap<String, GLRendererQuirks> stickyDeviceQuirks = new IdentityHashMap();
  



  private int _bitmask;
  




  public static GLRendererQuirks getStickyDeviceQuirks(AbstractGraphicsDevice paramAbstractGraphicsDevice)
  {
    String str = paramAbstractGraphicsDevice.getUniqueID();
    GLRendererQuirks localGLRendererQuirks1 = (GLRendererQuirks)stickyDeviceQuirks.get(str);
    GLRendererQuirks localGLRendererQuirks2;
    if (null == localGLRendererQuirks1) {
      localGLRendererQuirks2 = new GLRendererQuirks();
      stickyDeviceQuirks.put(str, localGLRendererQuirks2);
    } else {
      localGLRendererQuirks2 = localGLRendererQuirks1;
    }
    return localGLRendererQuirks2;
  }
  



  public static boolean areSameStickyDevice(AbstractGraphicsDevice paramAbstractGraphicsDevice1, AbstractGraphicsDevice paramAbstractGraphicsDevice2)
  {
    return paramAbstractGraphicsDevice1.getUniqueID() == paramAbstractGraphicsDevice2.getUniqueID();
  }
  





  public static void addStickyDeviceQuirk(AbstractGraphicsDevice paramAbstractGraphicsDevice, int paramInt)
    throws IllegalArgumentException
  {
    GLRendererQuirks localGLRendererQuirks = getStickyDeviceQuirks(paramAbstractGraphicsDevice);
    localGLRendererQuirks.addQuirk(paramInt);
  }
  




  public static void addStickyDeviceQuirks(AbstractGraphicsDevice paramAbstractGraphicsDevice, int[] paramArrayOfInt, int paramInt1, int paramInt2)
    throws IllegalArgumentException
  {
    GLRendererQuirks localGLRendererQuirks = getStickyDeviceQuirks(paramAbstractGraphicsDevice);
    localGLRendererQuirks.addQuirks(paramArrayOfInt, paramInt1, paramInt2);
  }
  




  public static void addStickyDeviceQuirks(AbstractGraphicsDevice paramAbstractGraphicsDevice, GLRendererQuirks paramGLRendererQuirks)
    throws IllegalArgumentException
  {
    GLRendererQuirks localGLRendererQuirks = getStickyDeviceQuirks(paramAbstractGraphicsDevice);
    localGLRendererQuirks.addQuirks(paramGLRendererQuirks);
  }
  





  public static boolean existStickyDeviceQuirk(AbstractGraphicsDevice paramAbstractGraphicsDevice, int paramInt)
  {
    return getStickyDeviceQuirks(paramAbstractGraphicsDevice).exist(paramInt);
  }
  






  public static void pushStickyDeviceQuirks(AbstractGraphicsDevice paramAbstractGraphicsDevice, GLRendererQuirks paramGLRendererQuirks)
  {
    paramGLRendererQuirks.addQuirks(getStickyDeviceQuirks(paramAbstractGraphicsDevice));
  }
  

  public GLRendererQuirks()
  {
    _bitmask = 0;
  }
  




  public GLRendererQuirks(int[] paramArrayOfInt, int paramInt1, int paramInt2)
    throws IllegalArgumentException
  {
    this();
    addQuirks(paramArrayOfInt, paramInt1, paramInt2);
  }
  


  public final void addQuirk(int paramInt)
    throws IllegalArgumentException
  {
    validateQuirk(paramInt);
    _bitmask |= 1 << paramInt;
  }
  




  public final void addQuirks(int[] paramArrayOfInt, int paramInt1, int paramInt2)
    throws IllegalArgumentException
  {
    int i = 0;
    if ((0 > paramInt1 + paramInt2) || (paramInt1 + paramInt2 > paramArrayOfInt.length)) {
      throw new IllegalArgumentException("offset and len out of bounds: offset " + paramInt1 + ", len " + paramInt2 + ", array-len " + paramArrayOfInt.length);
    }
    for (int j = paramInt1; j < paramInt1 + paramInt2; j++) {
      int k = paramArrayOfInt[j];
      validateQuirk(k);
      i |= 1 << k;
    }
    _bitmask |= i;
  }
  


  public final void addQuirks(GLRendererQuirks paramGLRendererQuirks)
  {
    _bitmask |= _bitmask;
  }
  



  public final boolean exist(int paramInt)
    throws IllegalArgumentException
  {
    validateQuirk(paramInt);
    return 0 != (1 << paramInt & _bitmask);
  }
  
  public final StringBuilder toString(StringBuilder paramStringBuilder) {
    if (null == paramStringBuilder) {
      paramStringBuilder = new StringBuilder();
    }
    paramStringBuilder.append("[");
    int i = 1;
    for (int j = 0; j < getCount(); j++) {
      int k = 1 << j;
      if (0 != (_bitmask & k)) {
        if (i == 0) paramStringBuilder.append(", ");
        paramStringBuilder.append(toString(j));
        i = 0;
      }
    }
    paramStringBuilder.append("]");
    return paramStringBuilder;
  }
  
  public final String toString()
  {
    return toString(null).toString();
  }
  


  public static void validateQuirk(int paramInt)
    throws IllegalArgumentException
  {
    if ((0 > paramInt) || (paramInt >= getCount())) {
      throw new IllegalArgumentException("Quirks must be in range [0.." + getCount() + "[, but quirk: " + paramInt);
    }
  }
  



  public static final String toString(int paramInt)
    throws IllegalArgumentException
  {
    validateQuirk(paramInt);
    return _names[paramInt];
  }
}
