package com.jogamp.newt.event;

import com.jogamp.common.util.PropertyAccess;
import java.io.PrintStream;
import jogamp.newt.Debug;















































































public class DoubleTapScrollGesture
  implements GestureHandler
{
  public static final int SCROLL_SLOP_PIXEL = PropertyAccess.getIntProperty("newt.event.scroll_slop_pixel", true, 16);
  public static final int DOUBLE_TAP_SLOP_PIXEL = PropertyAccess.getIntProperty("newt.event.double_tap_slop_pixel", true, 104);
  public static final float SCROLL_SLOP_MM = PropertyAccess.getIntProperty("newt.event.scroll_slop_mm", true, 3);
  public static final float DOUBLE_TAP_SLOP_MM = PropertyAccess.getIntProperty("newt.event.double_tap_slop_mm", true, 20);
  private static final int ST_NONE = 0;
  private static final int ST_1PRESS = 1;
  private static final int ST_2PRESS_T = 2;
  private static final int ST_2PRESS_C = 3;
  private static final int ST_SCROLL = 4;
  private final int scrollSlop;
  private final int scrollSlopSquare;
  private final int doubleTapSlop;
  private final int doubleTapSlopSquare;
  private final float[] scrollDistance = { 0.0F, 0.0F };
  private final int[] pIds = { -1, -1 };
  private int gestureState;
  private int sqStartDist;
  private int lastX;
  private int lastY;
  private int pointerDownCount;
  private MouseEvent hitGestureEvent;
  
  private static final int getSquareDistance(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4) {
    int i = (int)paramFloat1 - (int)paramFloat3;
    int j = (int)paramFloat2 - (int)paramFloat4;
    return i * i + j * j;
  }
  
  private int gesturePointers(MouseEvent paramMouseEvent, int paramInt) {
    int i = 0;
    for (int j = paramMouseEvent.getPointerCount() - 1; j >= 0; j--) {
      if (paramInt != j) {
        int k = paramMouseEvent.getPointerId(j);
        if ((pIds[0] == k) || (pIds[1] == k)) {
          i++;
        }
      }
    }
    return i;
  }
  




  public DoubleTapScrollGesture(int paramInt1, int paramInt2)
  {
    scrollSlop = paramInt1;
    scrollSlopSquare = (paramInt1 * paramInt1);
    doubleTapSlop = paramInt2;
    doubleTapSlopSquare = (paramInt2 * paramInt2);
    pointerDownCount = 0;
    clear(true);
    if (DEBUG) {
      System.err.println("DoubleTapScroll    scrollSlop (scaled) " + scrollSlop);
      System.err.println("DoubleTapScroll doubleTapSlop (scaled) " + doubleTapSlop);
    }
  }
  
  public String toString()
  {
    return "DoubleTapScroll[state " + gestureState + ", in " + isWithinGesture() + ", has " + (null != hitGestureEvent) + ", pc " + pointerDownCount + "]";
  }
  
  public void clear(boolean paramBoolean)
  {
    scrollDistance[0] = 0.0F;
    scrollDistance[1] = 0.0F;
    hitGestureEvent = null;
    if (paramBoolean) {
      gestureState = 0;
      sqStartDist = 0;
      pIds[0] = -1;
      pIds[1] = -1;
      lastX = 0;
      lastY = 0;
    }
  }
  
  public boolean isWithinGesture()
  {
    return 3 <= gestureState;
  }
  
  public boolean hasGesture()
  {
    return null != hitGestureEvent;
  }
  
  public InputEvent getGestureEvent()
  {
    if (null != hitGestureEvent) {
      MouseEvent localMouseEvent = hitGestureEvent;
      int i = localMouseEvent.getModifiers();
      float[] arrayOfFloat = localMouseEvent.getRotation();
      arrayOfFloat[0] = (scrollDistance[0] / scrollSlop);
      arrayOfFloat[1] = (scrollDistance[1] / scrollSlop);
      if (arrayOfFloat[0] * arrayOfFloat[0] > arrayOfFloat[1] * arrayOfFloat[1])
      {
        i |= 0x1;
      }
      


      return new MouseEvent((short)207, localMouseEvent.getSource(), localMouseEvent.getWhen(), i, localMouseEvent.getAllPointerTypes(), localMouseEvent.getAllPointerIDs(), localMouseEvent.getAllX(), localMouseEvent.getAllY(), localMouseEvent.getAllPressures(), localMouseEvent.getMaxPressure(), localMouseEvent.getButton(), localMouseEvent.getClickCount(), arrayOfFloat, scrollSlop);
    }
    return null;
  }
  
  public final float[] getScrollDistanceXY() {
    return scrollDistance;
  }
  
  public boolean process(InputEvent paramInputEvent)
  {
    if ((null != hitGestureEvent) || (!(paramInputEvent instanceof MouseEvent))) {
      return true;
    }
    MouseEvent localMouseEvent = (MouseEvent)paramInputEvent;
    if (localMouseEvent.getPointerType(0).getPointerClass() != MouseEvent.PointerClass.Onscreen) {
      return false;
    }
    pointerDownCount = localMouseEvent.getPointerCount();
    int i = localMouseEvent.getEventType();
    int j = localMouseEvent.getX(0);
    int k = localMouseEvent.getY(0);
    int m; int n; int i1; int i2; int i3; int i4; boolean bool1; int i5; switch (i) {
    case 203: 
      m = 0;
      if ((0 == gestureState) && (1 == pointerDownCount)) {
        pIds[0] = localMouseEvent.getPointerId(0);
        pIds[1] = -1;
        gestureState = 1;
      } else if ((0 < gestureState) && (2 == pointerDownCount) && (1 == gesturePointers(localMouseEvent, 0))) {
        n = localMouseEvent.getX(1);
        i1 = localMouseEvent.getY(1);
        i2 = (j + n) / 2;
        i3 = (k + i1) / 2;
        
        if (1 == gestureState) {
          i4 = getSquareDistance(j, k, n, i1);
          bool1 = i4 < doubleTapSlopSquare;
          if (bool1)
          {
            m = 2;
            pIds[0] = localMouseEvent.getPointerId(0);
            pIds[1] = localMouseEvent.getPointerId(1);
            lastX = i2;
            lastY = i3;
            sqStartDist = i4;
            gestureState = 2;
          }
          if (DEBUG) {
            i5 = (int)Math.round(Math.sqrt(i4));
            System.err.println(this + ".pressed.1: dist " + i5 + ", gPtr " + m + ", distWithin2DTSlop " + bool1 + ", last " + lastX + "/" + lastY + ", " + localMouseEvent);
          }
        } else if (3 == gestureState) {
          m = gesturePointers(localMouseEvent, -1);
          if (2 == m)
          {
            lastX = i2;
            lastY = i3;
          }
          else {
            clear(true);
          }
        }
      }
      if (DEBUG) {
        System.err.println(this + ".pressed: gPtr " + m + ", this " + lastX + "/" + lastY + ", " + localMouseEvent);
      }
      break;
    
    case 204: 
      pointerDownCount -= 1;
      m = gesturePointers(localMouseEvent, 0);
      if (1 == m)
      {
        gestureState = 3;
      } else if (0 == m)
      {
        clear(true);
      }
      if (DEBUG) {
        System.err.println(this + ".released: gPtr " + m + ", " + localMouseEvent);
      }
      break;
    
    case 206: 
      if ((2 == pointerDownCount) && (1 < gestureState)) {
        m = gesturePointers(localMouseEvent, -1);
        if (2 == m)
        {
          n = localMouseEvent.getX(1);
          i1 = localMouseEvent.getY(1);
          i2 = (j + n) / 2;
          i3 = (k + i1) / 2;
          i4 = getSquareDistance(j, k, n, i1);
          bool1 = Math.abs(i4 - sqStartDist) <= doubleTapSlopSquare;
          int i6; int i7; if (bool1) {
            switch (gestureState) {
            case 2: 
              i5 = getSquareDistance(lastX, lastY, i2, i3);
              if (i5 > scrollSlopSquare) {
                gestureState = 4;
              }
              break;
            
            case 3: 
              gestureState = 4;
              break;
            
            case 4: 
              scrollDistance[0] = (lastX - i2);
              scrollDistance[1] = (lastY - i3);
              hitGestureEvent = localMouseEvent;
            }
            
            if (DEBUG) {
              i5 = i4 < doubleTapSlopSquare ? 1 : 0;
              i6 = (int)Math.round(Math.sqrt(i4));
              i7 = getSquareDistance(lastX, lastY, i2, i3);
              int i8 = (int)Math.round(Math.sqrt(i7));
              System.err.println(this + ".dragged.1: pDist " + i6 + ", scrollLen " + i8 + ", gPtr " + m + " [" + pIds[0] + ", " + pIds[1] + "]" + ", diffDistWithinTapSlop " + bool1 + ", distWithin2DTSlop " + i5 + ", this " + i2 + "/" + i3 + ", last " + lastX + "/" + lastY + ", d " + scrollDistance[0] + "/" + scrollDistance[1]);
            }
            

          }
          else
          {
            if (DEBUG) {
              boolean bool2 = i4 < doubleTapSlopSquare;
              i6 = (int)Math.round(Math.sqrt(i4));
              i7 = (int)Math.round(Math.sqrt(sqStartDist));
              System.err.println(this + ".dragged.X1: pDist " + i6 + ", distStart " + i7 + ", gPtr " + m + " [" + pIds[0] + ", " + pIds[1] + "]" + ", diffDistWithinTapSlop " + bool1 + ", distWithin2DTSlop " + bool2 + ", this " + i2 + "/" + i3 + ", last " + lastX + "/" + lastY + ", d " + scrollDistance[0] + "/" + scrollDistance[1]);
            }
            


            clear(true);
          }
          if (2 < gestureState)
          {
            lastX = i2;
            lastY = i3;
          }
        }
        else {
          if (DEBUG) {
            System.err.println(this + ".dragged.X2: gPtr " + m + " [" + pIds[0] + ", " + pIds[1] + "]" + ", last " + lastX + "/" + lastY + ", d " + scrollDistance[0] + "/" + scrollDistance[1]);
          }
          
          clear(true);
        } }
      break;
    }
    
    

    return null != hitGestureEvent;
  }
  
  static {}
}
