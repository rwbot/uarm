package com.jogamp.common.util.cache;

import com.jogamp.common.util.IOUtil;
import com.jogamp.common.util.InterruptSource.Thread;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import jogamp.common.Debug;




























public class TempFileCache
{
  private static final boolean DEBUG = Debug.debug("TempFileCache");
  

  private static boolean staticInitError = false;
  


  private static final String tmpDirPrefix = "file_cache";
  


  private static final File tmpBaseDir;
  


  static final String tmpRootPropName = "jnlp.jogamp.tmp.cache.root";
  


  private static String tmpRootPropValue;
  


  private static File tmpRootDir;
  

  private boolean initError = false;
  
  private File individualTmpDir;
  
  static
  {
    synchronized (System.out)
    {


      File localFile = null;
      try {
        localFile = new File(IOUtil.getTempDir(true), "file_cache");
        localFile = IOUtil.testDir(localFile, true, false);
      } catch (Exception localException1) {
        System.err.println("Warning: Caught Exception while retrieving executable temp base directory:");
        localException1.printStackTrace();
        staticInitError = true;
      }
      tmpBaseDir = localFile;
      
      if (DEBUG) {
        String str = null != tmpBaseDir ? tmpBaseDir.getAbsolutePath() : null;
        System.err.println("TempFileCache: Static Initialization ---------------------------------------------- OK: " + (!staticInitError));
        System.err.println("TempFileCache: Thread: " + Thread.currentThread().getName() + ", CL 0x" + 
          Integer.toHexString(TempFileCache.class.getClassLoader().hashCode()) + ", tempBaseDir " + str);
      }
      

      if (!staticInitError) {
        try {
          initTmpRoot();
        } catch (Exception localException2) {
          System.err.println("Warning: Caught Exception due to initializing TmpRoot:");
          localException2.printStackTrace();
          staticInitError = true;
        }
      }
      if (DEBUG) {
        System.err.println("------------------------------------------------------------------ OK: " + (!staticInitError));
      }
    }
  }
  



  public static boolean initSingleton()
  {
    return !staticInitError;
  }
  

















































  private static void initTmpRoot()
    throws IOException
  {
    tmpRootPropValue = System.getProperty("jnlp.jogamp.tmp.cache.root");
    
    if (tmpRootPropValue != null)
    {
      if ((tmpRootPropValue.indexOf('/') >= 0) || 
        (tmpRootPropValue.indexOf(File.separatorChar) >= 0)) {
        throw new IOException("Illegal value of: jnlp.jogamp.tmp.cache.root");
      }
      

      if (DEBUG) {
        System.err.println("TempFileCache: Trying existing value of: jnlp.jogamp.tmp.cache.root=" + tmpRootPropValue);
      }
      
      tmpRootDir = new File(tmpBaseDir, tmpRootPropValue);
      if (DEBUG) {
        System.err.println("TempFileCache: Trying tmpRootDir = " + tmpRootDir.getAbsolutePath());
      }
      if (tmpRootDir.isDirectory()) {
        if (!tmpRootDir.canWrite()) {
          throw new IOException("Temp root directory is not writable: " + tmpRootDir.getAbsolutePath());
        }
      }
      else
      {
        System.err.println("TempFileCache: None existing tmpRootDir = " + tmpRootDir.getAbsolutePath() + ", assuming new path due to update");
        tmpRootPropValue = null;
        tmpRootDir = null;
        System.clearProperty("jnlp.jogamp.tmp.cache.root");
      }
    }
    
    if (tmpRootPropValue == null)
    {
      File localFile1 = File.createTempFile("jln", ".tmp", tmpBaseDir);
      if (DEBUG) {
        System.err.println("TempFileCache: tmpFile = " + localFile1.getAbsolutePath());
      }
      FileOutputStream localFileOutputStream1 = new FileOutputStream(localFile1);
      FileChannel localFileChannel1 = localFileOutputStream1.getChannel();
      final FileLock localFileLock1 = localFileChannel1.lock();
      

      String str1 = localFile1.getAbsolutePath();
      String str2 = str1.substring(0, str1.lastIndexOf(".tmp"));
      

      String str3 = str2 + ".lck";
      File localFile2 = new File(str3);
      if (DEBUG) {
        System.err.println("TempFileCache: lckFile = " + localFile2.getAbsolutePath());
      }
      localFile2.createNewFile();
      final FileOutputStream localFileOutputStream2 = new FileOutputStream(localFile2);
      FileChannel localFileChannel2 = localFileOutputStream2.getChannel();
      final FileLock localFileLock2 = localFileChannel2.lock();
      

      tmpRootDir = new File(str2);
      if (DEBUG) {
        System.err.println("TempFileCache: tmpRootDir = " + tmpRootDir.getAbsolutePath());
      }
      if (!tmpRootDir.mkdir()) {
        throw new IOException("Cannot create " + tmpRootDir);
      }
      



      Runtime.getRuntime().addShutdownHook(new InterruptSource.Thread()
      {

        public void run()
        {

          try
          {

            val$tmpOut.close();
            localFileLock1.release();
            localFileOutputStream2.close();
            localFileLock2.release();

          }
          catch (IOException localIOException) {}
        }
        

      });
      tmpRootPropValue = str2.substring(str2.lastIndexOf(File.separator) + 1);
      System.setProperty("jnlp.jogamp.tmp.cache.root", tmpRootPropValue);
      if (DEBUG) {
        System.err.println("TempFileCache: Setting jnlp.jogamp.tmp.cache.root=" + tmpRootPropValue);
      }
      

      InterruptSource.Thread local2 = new InterruptSource.Thread()
      {

        public void run() {}


      };
      local2.setName("TempFileCache-Reaper");
      local2.start();
    }
  }
  



  private static void deleteOldTempDirs()
  {
    if (DEBUG) {
      System.err.println("TempFileCache: *** Reaper: deleteOldTempDirs in " + tmpBaseDir
        .getAbsolutePath());
    }
    

    String str1 = tmpRootPropValue + ".lck";
    FilenameFilter local3 = new FilenameFilter()
    {
      public boolean accept(File paramAnonymousFile, String paramAnonymousString)
      {
        return (paramAnonymousString.endsWith(".lck")) && (!paramAnonymousString.equals(val$ourLockFile));


      }
      



    };
    String[] arrayOfString = tmpBaseDir.list(local3);
    if (arrayOfString != null) {
      for (int i = 0; i < arrayOfString.length; i++) {
        String str2 = arrayOfString[i];
        String str3 = str2.substring(0, str2.lastIndexOf(".lck"));
        String str4 = str3 + ".tmp";
        
        File localFile1 = new File(tmpBaseDir, str2);
        File localFile2 = new File(tmpBaseDir, str4);
        File localFile3 = new File(tmpBaseDir, str3);
        
        if ((localFile1.exists()) && (localFile2.exists()) && (localFile3.isDirectory())) {
          FileOutputStream localFileOutputStream1 = null;
          FileChannel localFileChannel1 = null;
          FileLock localFileLock1 = null;
          try
          {
            localFileOutputStream1 = new FileOutputStream(localFile2);
            localFileChannel1 = localFileOutputStream1.getChannel();
            localFileLock1 = localFileChannel1.tryLock();
          }
          catch (Exception localException1) {
            if (DEBUG) {
              localException1.printStackTrace();
            }
          }
          
          if (localFileLock1 != null) {
            FileOutputStream localFileOutputStream2 = null;
            FileChannel localFileChannel2 = null;
            FileLock localFileLock2 = null;
            try
            {
              localFileOutputStream2 = new FileOutputStream(localFile1);
              localFileChannel2 = localFileOutputStream2.getChannel();
              localFileLock2 = localFileChannel2.tryLock();
            } catch (Exception localException2) {
              if (DEBUG) {
                localException2.printStackTrace();
              }
            }
            
            if (localFileLock2 != null)
            {

              removeAll(localFile3);
              






              try
              {
                localFileOutputStream2.close();
              }
              catch (IOException localIOException1) {}
              localFile1.delete();
              try {
                localFileOutputStream1.close();
              }
              catch (IOException localIOException2) {}
              localFile2.delete();
            }
            else {
              try {
                if (localFileOutputStream2 != null) {
                  localFileOutputStream2.close();
                }
                

                localFileOutputStream1.close();
                localFileLock1.release();
              } catch (IOException localIOException3) {
                if (DEBUG) {
                  localIOException3.printStackTrace();
                }
              }
            }
          }
        }
        else if (DEBUG) {
          System.err.println("TempFileCache: Skipping: " + localFile3.getAbsolutePath());
        }
      }
    }
  }
  




  private static void removeAll(File paramFile)
  {
    if (DEBUG) {
      System.err.println("TempFileCache: removeAll(" + paramFile + ")");
    }
    
    if (paramFile.isDirectory())
    {
      File[] arrayOfFile = paramFile.listFiles();
      if (arrayOfFile != null) {
        for (int i = 0; i < arrayOfFile.length; i++) {
          removeAll(arrayOfFile[i]);
        }
      }
    }
    paramFile.delete();
  }
  
  public TempFileCache()
  {
    if (DEBUG) {
      System.err.println("TempFileCache: new TempFileCache() --------------------- (static ok: " + (!staticInitError) + ")");
      System.err.println("TempFileCache: Thread: " + Thread.currentThread().getName() + ", CL 0x" + Integer.toHexString(TempFileCache.class.getClassLoader().hashCode()) + ", this 0x" + Integer.toHexString(hashCode()));
    }
    if (!staticInitError) {
      try {
        createTmpDir();
      } catch (Exception localException) {
        localException.printStackTrace();
        initError = true;
      }
    }
    if (DEBUG) {
      System.err.println("TempFileCache: tempDir " + individualTmpDir + " (ok: " + (!initError) + ")");
      System.err.println("----------------------------------------------------------");
    }
  }
  
  public void destroy()
  {
    if (DEBUG) {
      System.err.println("TempFileCache: destroy() --------------------- (static ok: " + (!staticInitError) + ")");
      System.err.println("TempFileCache: Thread: " + Thread.currentThread().getName() + ", CL 0x" + Integer.toHexString(TempFileCache.class.getClassLoader().hashCode()) + ", this 0x" + Integer.toHexString(hashCode()));
    }
    if (!staticInitError) {
      try {
        removeAll(individualTmpDir);
      } catch (Exception localException) {
        localException.printStackTrace();
      }
    }
    individualTmpDir = null;
    if (DEBUG) {
      System.err.println("TempFileCache: destroy() END");
    }
  }
  

  public boolean isValid()
  {
    return (!staticInitError) && (!initError);
  }
  











  public File getBaseDir()
  {
    return tmpBaseDir;
  }
  





















  public File getRootDir()
  {
    return tmpRootDir;
  }
  















  public File getTempDir()
  {
    return individualTmpDir;
  }
  





  private void createTmpDir()
    throws IOException
  {
    File localFile = File.createTempFile("jln", ".tmp", tmpRootDir);
    String str1 = localFile.getAbsolutePath();
    String str2 = str1.substring(0, str1.lastIndexOf(".tmp"));
    individualTmpDir = new File(str2);
    if (!individualTmpDir.mkdir()) {
      throw new IOException("Cannot create " + individualTmpDir);
    }
  }
}
