package processing.opengl;

import java.net.URL;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import processing.core.PApplet;
import processing.core.PConstants;
import processing.core.PGraphics;
import processing.core.PImage;
import processing.core.PMatrix2D;
import processing.core.PMatrix3D;
import processing.core.PVector;



























public class PShader
  implements PConstants
{
  protected static final int POINT = 0;
  protected static final int LINE = 1;
  protected static final int POLY = 2;
  protected static final int COLOR = 3;
  protected static final int LIGHT = 4;
  protected static final int TEXTURE = 5;
  protected static final int TEXLIGHT = 6;
  protected static String pointShaderAttrRegexp = "attribute *vec2 *offset";
  
  protected static String lineShaderAttrRegexp = "attribute *vec4 *direction";
  
  protected static String pointShaderDefRegexp = "#define *PROCESSING_POINT_SHADER";
  
  protected static String lineShaderDefRegexp = "#define *PROCESSING_LINE_SHADER";
  
  protected static String colorShaderDefRegexp = "#define *PROCESSING_COLOR_SHADER";
  
  protected static String lightShaderDefRegexp = "#define *PROCESSING_LIGHT_SHADER";
  
  protected static String texShaderDefRegexp = "#define *PROCESSING_TEXTURE_SHADER";
  
  protected static String texlightShaderDefRegexp = "#define *PROCESSING_TEXLIGHT_SHADER";
  
  protected static String polyShaderDefRegexp = "#define *PROCESSING_POLYGON_SHADER";
  
  protected static String triShaderAttrRegexp = "#define *PROCESSING_TRIANGLES_SHADER";
  
  protected static String quadShaderAttrRegexp = "#define *PROCESSING_QUADS_SHADER";
  
  protected PApplet parent;
  
  protected PGraphicsOpenGL primaryPG;
  
  protected PGraphicsOpenGL currentPG;
  
  protected PGL pgl;
  
  protected int context;
  
  protected int type;
  
  public int glProgram;
  
  public int glVertex;
  
  public int glFragment;
  
  private PGraphicsOpenGL.GLResourceShader glres;
  
  protected URL vertexURL;
  
  protected URL fragmentURL;
  
  protected String vertexFilename;
  
  protected String fragmentFilename;
  
  protected String[] vertexShaderSource;
  protected String[] fragmentShaderSource;
  protected boolean bound;
  protected HashMap<String, UniformValue> uniformValues = null;
  
  protected HashMap<Integer, Texture> textures;
  
  protected HashMap<Integer, Integer> texUnits;
  
  protected IntBuffer intBuffer;
  
  protected FloatBuffer floatBuffer;
  protected boolean loadedAttributes = false;
  protected boolean loadedUniforms = false;
  
  protected int transformMatLoc;
  
  protected int modelviewMatLoc;
  
  protected int projectionMatLoc;
  
  protected int ppixelsLoc;
  
  protected int ppixelsUnit;
  
  protected int viewportLoc;
  
  protected int perspectiveLoc;
  
  protected int scaleLoc;
  
  protected int lightCountLoc;
  protected int lightPositionLoc;
  protected int lightNormalLoc;
  protected int lightAmbientLoc;
  protected int lightDiffuseLoc;
  protected int lightSpecularLoc;
  protected int lightFalloffLoc;
  protected int lightSpotLoc;
  protected Texture texture;
  protected int texUnit;
  protected int textureLoc;
  protected int texMatrixLoc;
  protected int texOffsetLoc;
  protected float[] tcmat;
  protected int vertexLoc;
  protected int colorLoc;
  protected int normalLoc;
  protected int texCoordLoc;
  protected int normalMatLoc;
  protected int directionLoc;
  protected int offsetLoc;
  protected int ambientLoc;
  protected int specularLoc;
  protected int emissiveLoc;
  protected int shininessLoc;
  
  public PShader()
  {
    parent = null;
    pgl = null;
    context = -1;
    
    vertexURL = null;
    fragmentURL = null;
    vertexFilename = null;
    fragmentFilename = null;
    
    glProgram = 0;
    glVertex = 0;
    glFragment = 0;
    
    intBuffer = PGL.allocateIntBuffer(1);
    floatBuffer = PGL.allocateFloatBuffer(1);
    
    bound = false;
    
    type = -1;
  }
  
  public PShader(PApplet parent)
  {
    this();
    this.parent = parent;
    primaryPG = ((PGraphicsOpenGL)g);
    pgl = primaryPG.pgl;
    context = pgl.createEmptyContext();
  }
  








  public PShader(PApplet parent, String vertFilename, String fragFilename)
  {
    this.parent = parent;
    primaryPG = ((PGraphicsOpenGL)g);
    pgl = primaryPG.pgl;
    
    vertexURL = null;
    fragmentURL = null;
    vertexFilename = vertFilename;
    fragmentFilename = fragFilename;
    fragmentShaderSource = pgl.loadFragmentShader(fragFilename);
    vertexShaderSource = pgl.loadVertexShader(vertFilename);
    
    glProgram = 0;
    glVertex = 0;
    glFragment = 0;
    
    intBuffer = PGL.allocateIntBuffer(1);
    floatBuffer = PGL.allocateFloatBuffer(1);
    
    int vertType = getShaderType(vertexShaderSource, -1);
    int fragType = getShaderType(fragmentShaderSource, -1);
    if ((vertType == -1) && (fragType == -1)) {
      type = 2;
    } else if (vertType == -1) {
      type = fragType;
    } else if (fragType == -1) {
      type = vertType;
    } else if (fragType == vertType) {
      type = vertType;
    } else {
      PGraphics.showWarning("The vertex and fragment shaders have different types");
    }
  }
  




  public PShader(PApplet parent, URL vertURL, URL fragURL)
  {
    this.parent = parent;
    primaryPG = ((PGraphicsOpenGL)g);
    pgl = primaryPG.pgl;
    
    vertexURL = vertURL;
    fragmentURL = fragURL;
    vertexFilename = null;
    fragmentFilename = null;
    fragmentShaderSource = pgl.loadFragmentShader(fragURL);
    vertexShaderSource = pgl.loadVertexShader(vertURL);
    
    glProgram = 0;
    glVertex = 0;
    glFragment = 0;
    
    intBuffer = PGL.allocateIntBuffer(1);
    floatBuffer = PGL.allocateFloatBuffer(1);
    
    int vertType = getShaderType(vertexShaderSource, -1);
    int fragType = getShaderType(fragmentShaderSource, -1);
    if ((vertType == -1) && (fragType == -1)) {
      type = 2;
    } else if (vertType == -1) {
      type = fragType;
    } else if (fragType == -1) {
      type = vertType;
    } else if (fragType == vertType) {
      type = vertType;
    } else {
      PGraphics.showWarning("The vertex and fragment shaders have different types");
    }
  }
  
  public PShader(PApplet parent, String[] vertSource, String[] fragSource) {
    this.parent = parent;
    primaryPG = ((PGraphicsOpenGL)g);
    pgl = primaryPG.pgl;
    
    vertexURL = null;
    fragmentURL = null;
    vertexFilename = null;
    fragmentFilename = null;
    vertexShaderSource = vertSource;
    fragmentShaderSource = fragSource;
    
    glProgram = 0;
    glVertex = 0;
    glFragment = 0;
    
    intBuffer = PGL.allocateIntBuffer(1);
    floatBuffer = PGL.allocateFloatBuffer(1);
    
    int vertType = getShaderType(vertexShaderSource, -1);
    int fragType = getShaderType(fragmentShaderSource, -1);
    if ((vertType == -1) && (fragType == -1)) {
      type = 2;
    } else if (vertType == -1) {
      type = fragType;
    } else if (fragType == -1) {
      type = vertType;
    } else if (fragType == vertType) {
      type = vertType;
    } else {
      PGraphics.showWarning("The vertex and fragment shaders have different types");
    }
  }
  
  public void setVertexShader(String vertFilename)
  {
    vertexFilename = vertFilename;
    vertexShaderSource = pgl.loadVertexShader(vertFilename);
  }
  
  public void setVertexShader(URL vertURL)
  {
    vertexURL = vertURL;
    vertexShaderSource = pgl.loadVertexShader(vertURL);
  }
  
  public void setVertexShader(String[] vertSource)
  {
    vertexShaderSource = vertSource;
  }
  
  public void setFragmentShader(String fragFilename)
  {
    fragmentFilename = fragFilename;
    fragmentShaderSource = pgl.loadFragmentShader(fragFilename);
  }
  
  public void setFragmentShader(URL fragURL)
  {
    fragmentURL = fragURL;
    fragmentShaderSource = pgl.loadFragmentShader(fragURL);
  }
  
  public void setFragmentShader(String[] fragSource) {
    fragmentShaderSource = fragSource;
  }
  



  public void bind()
  {
    init();
    if (!bound) {
      pgl.useProgram(glProgram);
      bound = true;
      consumeUniforms();
      bindTextures();
    }
    
    if (hasType()) { bindTyped();
    }
  }
  


  public void unbind()
  {
    if (hasType()) { unbindTyped();
    }
    if (bound) {
      unbindTextures();
      pgl.useProgram(0);
      bound = false;
    }
  }
  



  public boolean bound()
  {
    return bound;
  }
  





  public void set(String name, int x)
  {
    setUniformImpl(name, 0, new int[] { x });
  }
  


  public void set(String name, int x, int y)
  {
    setUniformImpl(name, 1, new int[] { x, y });
  }
  


  public void set(String name, int x, int y, int z)
  {
    setUniformImpl(name, 2, new int[] { x, y, z });
  }
  


  public void set(String name, int x, int y, int z, int w)
  {
    setUniformImpl(name, 3, new int[] { x, y, z, w });
  }
  
  public void set(String name, float x)
  {
    setUniformImpl(name, 4, new float[] { x });
  }
  
  public void set(String name, float x, float y)
  {
    setUniformImpl(name, 5, new float[] { x, y });
  }
  
  public void set(String name, float x, float y, float z)
  {
    setUniformImpl(name, 6, new float[] { x, y, z });
  }
  
  public void set(String name, float x, float y, float z, float w)
  {
    setUniformImpl(name, 7, new float[] { x, y, z, w });
  }
  


  public void set(String name, PVector vec)
  {
    setUniformImpl(name, 6, 
      new float[] { x, y, z });
  }
  
  public void set(String name, boolean x)
  {
    setUniformImpl(name, 0, new int[] { x ? 1 : 0 });
  }
  
  public void set(String name, boolean x, boolean y)
  {
    setUniformImpl(name, 1, 
      new int[] { x ? 1 : 0, y ? 1 : 0 });
  }
  
  public void set(String name, boolean x, boolean y, boolean z)
  {
    setUniformImpl(name, 2, 
      new int[] { x ? 1 : 0, y ? 1 : 0, z ? 1 : 0 });
  }
  
  public void set(String name, boolean x, boolean y, boolean z, boolean w)
  {
    setUniformImpl(name, 3, 
      new int[] { x ? 1 : 0, y ? 1 : 0, z ? 1 : 0, w ? 1 : 0 });
  }
  
  public void set(String name, int[] vec)
  {
    set(name, vec, 1);
  }
  



  public void set(String name, int[] vec, int ncoords)
  {
    if (ncoords == 1) {
      setUniformImpl(name, 8, vec);
    } else if (ncoords == 2) {
      setUniformImpl(name, 9, vec);
    } else if (ncoords == 3) {
      setUniformImpl(name, 10, vec);
    } else if (ncoords == 4) {
      setUniformImpl(name, 11, vec);
    } else if (4 < ncoords) {
      PGraphics.showWarning("Only up to 4 coordinates per element are supported.");
    }
    else {
      PGraphics.showWarning("Wrong number of coordinates: it is negative!");
    }
  }
  
  public void set(String name, float[] vec)
  {
    set(name, vec, 1);
  }
  
  public void set(String name, float[] vec, int ncoords)
  {
    if (ncoords == 1) {
      setUniformImpl(name, 12, vec);
    } else if (ncoords == 2) {
      setUniformImpl(name, 13, vec);
    } else if (ncoords == 3) {
      setUniformImpl(name, 14, vec);
    } else if (ncoords == 4) {
      setUniformImpl(name, 15, vec);
    } else if (4 < ncoords) {
      PGraphics.showWarning("Only up to 4 coordinates per element are supported.");
    }
    else {
      PGraphics.showWarning("Wrong number of coordinates: it is negative!");
    }
  }
  
  public void set(String name, boolean[] vec)
  {
    set(name, vec, 1);
  }
  
  public void set(String name, boolean[] boolvec, int ncoords)
  {
    int[] vec = new int[boolvec.length];
    for (int i = 0; i < boolvec.length; i++) {
      vec[i] = (boolvec[i] != 0 ? 1 : 0);
    }
    set(name, vec, ncoords);
  }
  



  public void set(String name, PMatrix2D mat)
  {
    float[] matv = { m00, m01, 
      m10, m11 };
    setUniformImpl(name, 16, matv);
  }
  
  public void set(String name, PMatrix3D mat)
  {
    set(name, mat, false);
  }
  


  public void set(String name, PMatrix3D mat, boolean use3x3)
  {
    if (use3x3) {
      float[] matv = { m00, m01, m02, 
        m10, m11, m12, 
        m20, m21, m22 };
      setUniformImpl(name, 17, matv);
    } else {
      float[] matv = { m00, m01, m02, m03, 
        m10, m11, m12, m13, 
        m20, m21, m22, m23, 
        m30, m31, m32, m33 };
      setUniformImpl(name, 18, matv);
    }
  }
  


  public void set(String name, PImage tex)
  {
    setUniformImpl(name, 19, tex);
  }
  




  protected void setup() {}
  




  protected void draw(int idxId, int count, int offset)
  {
    pgl.bindBuffer(PGL.ELEMENT_ARRAY_BUFFER, idxId);
    pgl.drawElements(PGL.TRIANGLES, count, PGL.INDEX_TYPE, 
      offset * PGL.SIZEOF_INDEX);
    pgl.bindBuffer(PGL.ELEMENT_ARRAY_BUFFER, 0);
  }
  






  protected int getAttributeLoc(String name)
  {
    init();
    return pgl.getAttribLocation(glProgram, name);
  }
  






  protected int getUniformLoc(String name)
  {
    init();
    return pgl.getUniformLocation(glProgram, name);
  }
  

  protected void setAttributeVBO(int loc, int vboId, int size, int type, boolean normalized, int stride, int offset)
  {
    if (-1 < loc) {
      pgl.bindBuffer(PGL.ARRAY_BUFFER, vboId);
      pgl.vertexAttribPointer(loc, size, type, normalized, stride, offset);
    }
  }
  
  protected void setUniformValue(int loc, int x)
  {
    if (-1 < loc) {
      pgl.uniform1i(loc, x);
    }
  }
  
  protected void setUniformValue(int loc, int x, int y)
  {
    if (-1 < loc) {
      pgl.uniform2i(loc, x, y);
    }
  }
  
  protected void setUniformValue(int loc, int x, int y, int z)
  {
    if (-1 < loc) {
      pgl.uniform3i(loc, x, y, z);
    }
  }
  
  protected void setUniformValue(int loc, int x, int y, int z, int w)
  {
    if (-1 < loc) {
      pgl.uniform4i(loc, x, y, z, w);
    }
  }
  
  protected void setUniformValue(int loc, float x)
  {
    if (-1 < loc) {
      pgl.uniform1f(loc, x);
    }
  }
  
  protected void setUniformValue(int loc, float x, float y) {
    if (-1 < loc) {
      pgl.uniform2f(loc, x, y);
    }
  }
  
  protected void setUniformValue(int loc, float x, float y, float z)
  {
    if (-1 < loc) {
      pgl.uniform3f(loc, x, y, z);
    }
  }
  
  protected void setUniformValue(int loc, float x, float y, float z, float w)
  {
    if (-1 < loc) {
      pgl.uniform4f(loc, x, y, z, w);
    }
  }
  

  protected void setUniformVector(int loc, int[] vec, int ncoords, int length)
  {
    if (-1 < loc) {
      updateIntBuffer(vec);
      if (ncoords == 1) {
        pgl.uniform1iv(loc, length, intBuffer);
      } else if (ncoords == 2) {
        pgl.uniform2iv(loc, length, intBuffer);
      } else if (ncoords == 3) {
        pgl.uniform3iv(loc, length, intBuffer);
      } else if (ncoords == 4) {
        pgl.uniform3iv(loc, length, intBuffer);
      }
    }
  }
  

  protected void setUniformVector(int loc, float[] vec, int ncoords, int length)
  {
    if (-1 < loc) {
      updateFloatBuffer(vec);
      if (ncoords == 1) {
        pgl.uniform1fv(loc, length, floatBuffer);
      } else if (ncoords == 2) {
        pgl.uniform2fv(loc, length, floatBuffer);
      } else if (ncoords == 3) {
        pgl.uniform3fv(loc, length, floatBuffer);
      } else if (ncoords == 4) {
        pgl.uniform4fv(loc, length, floatBuffer);
      }
    }
  }
  
  protected void setUniformMatrix(int loc, float[] mat)
  {
    if (-1 < loc) {
      updateFloatBuffer(mat);
      if (mat.length == 4) {
        pgl.uniformMatrix2fv(loc, 1, false, floatBuffer);
      } else if (mat.length == 9) {
        pgl.uniformMatrix3fv(loc, 1, false, floatBuffer);
      } else if (mat.length == 16) {
        pgl.uniformMatrix4fv(loc, 1, false, floatBuffer);
      }
    }
  }
  
  protected void setUniformTex(int loc, Texture tex)
  {
    if (texUnits != null) {
      Integer unit = (Integer)texUnits.get(Integer.valueOf(loc));
      if (unit != null) {
        pgl.activeTexture(PGL.TEXTURE0 + unit.intValue());
        tex.bind();
      } else {
        throw new RuntimeException("Cannot find unit for texture " + tex);
      }
    }
  }
  
  protected void setUniformImpl(String name, int type, Object value)
  {
    if (uniformValues == null) {
      uniformValues = new HashMap();
    }
    uniformValues.put(name, new UniformValue(type, value));
  }
  
  protected void consumeUniforms()
  {
    if ((uniformValues != null) && (uniformValues.size() > 0)) {
      int unit = 0;
      for (String name : uniformValues.keySet()) {
        int loc = getUniformLoc(name);
        if (loc == -1) {
          PGraphics.showWarning(
          
            "The shader doesn't have a uniform called \"" + name + "\" OR the uniform was removed during " + "compilation because it was unused.");
        }
        else {
          UniformValue val = (UniformValue)uniformValues.get(name);
          if (type == 0) {
            int[] v = (int[])value;
            pgl.uniform1i(loc, v[0]);
          } else if (type == 1) {
            int[] v = (int[])value;
            pgl.uniform2i(loc, v[0], v[1]);
          } else if (type == 2) {
            int[] v = (int[])value;
            pgl.uniform3i(loc, v[0], v[1], v[2]);
          } else if (type == 3) {
            int[] v = (int[])value;
            pgl.uniform4i(loc, v[0], v[1], v[2], v[3]);
          } else if (type == 4) {
            float[] v = (float[])value;
            pgl.uniform1f(loc, v[0]);
          } else if (type == 5) {
            float[] v = (float[])value;
            pgl.uniform2f(loc, v[0], v[1]);
          } else if (type == 6) {
            float[] v = (float[])value;
            pgl.uniform3f(loc, v[0], v[1], v[2]);
          } else if (type == 7) {
            float[] v = (float[])value;
            pgl.uniform4f(loc, v[0], v[1], v[2], v[3]);
          } else if (type == 8) {
            int[] v = (int[])value;
            updateIntBuffer(v);
            pgl.uniform1iv(loc, v.length, intBuffer);
          } else if (type == 9) {
            int[] v = (int[])value;
            updateIntBuffer(v);
            pgl.uniform2iv(loc, v.length / 2, intBuffer);
          } else if (type == 10) {
            int[] v = (int[])value;
            updateIntBuffer(v);
            pgl.uniform3iv(loc, v.length / 3, intBuffer);
          } else if (type == 11) {
            int[] v = (int[])value;
            updateIntBuffer(v);
            pgl.uniform4iv(loc, v.length / 4, intBuffer);
          } else if (type == 12) {
            float[] v = (float[])value;
            updateFloatBuffer(v);
            pgl.uniform1fv(loc, v.length, floatBuffer);
          } else if (type == 13) {
            float[] v = (float[])value;
            updateFloatBuffer(v);
            pgl.uniform2fv(loc, v.length / 2, floatBuffer);
          } else if (type == 14) {
            float[] v = (float[])value;
            updateFloatBuffer(v);
            pgl.uniform3fv(loc, v.length / 3, floatBuffer);
          } else if (type == 15) {
            float[] v = (float[])value;
            updateFloatBuffer(v);
            pgl.uniform4fv(loc, v.length / 4, floatBuffer);
          } else if (type == 16) {
            float[] v = (float[])value;
            updateFloatBuffer(v);
            pgl.uniformMatrix2fv(loc, 1, false, floatBuffer);
          } else if (type == 17) {
            float[] v = (float[])value;
            updateFloatBuffer(v);
            pgl.uniformMatrix3fv(loc, 1, false, floatBuffer);
          } else if (type == 18) {
            float[] v = (float[])value;
            updateFloatBuffer(v);
            pgl.uniformMatrix4fv(loc, 1, false, floatBuffer);
          } else if (type == 19) {
            PImage img = (PImage)value;
            Texture tex = currentPG.getTexture(img);
            
            if (textures == null) textures = new HashMap();
            textures.put(Integer.valueOf(loc), tex);
            
            if (texUnits == null) texUnits = new HashMap();
            if (texUnits.containsKey(Integer.valueOf(loc))) {
              unit = ((Integer)texUnits.get(Integer.valueOf(loc))).intValue();
              pgl.uniform1i(loc, unit);
            } else {
              texUnits.put(Integer.valueOf(loc), Integer.valueOf(unit));
              pgl.uniform1i(loc, unit);
            }
            unit++;
          }
        } }
      uniformValues.clear();
    }
  }
  
  protected void updateIntBuffer(int[] vec)
  {
    intBuffer = PGL.updateIntBuffer(intBuffer, vec, false);
  }
  
  protected void updateFloatBuffer(float[] vec)
  {
    floatBuffer = PGL.updateFloatBuffer(floatBuffer, vec, false);
  }
  
  protected void bindTextures()
  {
    if ((textures != null) && (texUnits != null)) {
      for (Iterator localIterator = textures.keySet().iterator(); localIterator.hasNext();) { int loc = ((Integer)localIterator.next()).intValue();
        Texture tex = (Texture)textures.get(Integer.valueOf(loc));
        Integer unit = (Integer)texUnits.get(Integer.valueOf(loc));
        if (unit != null) {
          pgl.activeTexture(PGL.TEXTURE0 + unit.intValue());
          tex.bind();
        } else {
          throw new RuntimeException("Cannot find unit for texture " + tex);
        }
      }
    }
  }
  
  protected void unbindTextures()
  {
    if ((textures != null) && (texUnits != null)) {
      for (Iterator localIterator = textures.keySet().iterator(); localIterator.hasNext();) { int loc = ((Integer)localIterator.next()).intValue();
        Texture tex = (Texture)textures.get(Integer.valueOf(loc));
        Integer unit = (Integer)texUnits.get(Integer.valueOf(loc));
        if (unit != null) {
          pgl.activeTexture(PGL.TEXTURE0 + unit.intValue());
          tex.unbind();
        } else {
          throw new RuntimeException("Cannot find unit for texture " + tex);
        }
      }
      pgl.activeTexture(PGL.TEXTURE0);
    }
  }
  
  public void init()
  {
    if ((glProgram == 0) || (contextIsOutdated())) {
      create();
      if (compile()) {
        pgl.attachShader(glProgram, glVertex);
        pgl.attachShader(glProgram, glFragment);
        
        setup();
        
        pgl.linkProgram(glProgram);
        
        validate();
      }
    }
  }
  
  protected void create()
  {
    context = pgl.getCurrentContext();
    glres = new PGraphicsOpenGL.GLResourceShader(this);
  }
  
  protected boolean compile()
  {
    boolean vertRes = true;
    if (hasVertexShader()) {
      vertRes = compileVertexShader();
    } else {
      PGraphics.showException("Doesn't have a vertex shader");
    }
    
    boolean fragRes = true;
    if (hasFragmentShader()) {
      fragRes = compileFragmentShader();
    } else {
      PGraphics.showException("Doesn't have a fragment shader");
    }
    
    return (vertRes) && (fragRes);
  }
  
  protected void validate()
  {
    pgl.getProgramiv(glProgram, PGL.LINK_STATUS, intBuffer);
    boolean linked = intBuffer.get(0) != 0;
    if (!linked) {
      PGraphics.showException(
        "Cannot link shader program:\n" + pgl.getProgramInfoLog(glProgram));
    }
    
    pgl.validateProgram(glProgram);
    pgl.getProgramiv(glProgram, PGL.VALIDATE_STATUS, intBuffer);
    boolean validated = intBuffer.get(0) != 0;
    if (!validated) {
      PGraphics.showException(
        "Cannot validate shader program:\n" + pgl.getProgramInfoLog(glProgram));
    }
  }
  
  protected boolean contextIsOutdated()
  {
    boolean outdated = !pgl.contextIsCurrent(context);
    if (outdated) {
      dispose();
    }
    return outdated;
  }
  

  protected boolean hasVertexShader()
  {
    return (vertexShaderSource != null) && (vertexShaderSource.length > 0);
  }
  
  protected boolean hasFragmentShader()
  {
    return (fragmentShaderSource != null) && (fragmentShaderSource.length > 0);
  }
  



  protected boolean compileVertexShader()
  {
    pgl.shaderSource(glVertex, PApplet.join(vertexShaderSource, "\n"));
    pgl.compileShader(glVertex);
    
    pgl.getShaderiv(glVertex, PGL.COMPILE_STATUS, intBuffer);
    boolean compiled = intBuffer.get(0) != 0;
    if (!compiled) {
      PGraphics.showException(
        "Cannot compile vertex shader:\n" + pgl.getShaderInfoLog(glVertex));
      return false;
    }
    return true;
  }
  




  protected boolean compileFragmentShader()
  {
    pgl.shaderSource(glFragment, PApplet.join(fragmentShaderSource, "\n"));
    pgl.compileShader(glFragment);
    
    pgl.getShaderiv(glFragment, PGL.COMPILE_STATUS, intBuffer);
    boolean compiled = intBuffer.get(0) != 0;
    if (!compiled) {
      PGraphics.showException(
        "Cannot compile fragment shader:\n" + pgl.getShaderInfoLog(glFragment));
      return false;
    }
    return true;
  }
  

  protected void dispose()
  {
    if (glres != null) {
      glres.dispose();
      glVertex = 0;
      glFragment = 0;
      glProgram = 0;
      glres = null;
    }
  }
  
  protected static int getShaderType(String[] source, int defaultType)
  {
    for (int i = 0; i < source.length; i++) {
      String line = source[i].trim();
      if (PApplet.match(line, pointShaderAttrRegexp) != null)
        return 0;
      if (PApplet.match(line, lineShaderAttrRegexp) != null)
        return 1;
      if (PApplet.match(line, pointShaderDefRegexp) != null)
        return 0;
      if (PApplet.match(line, lineShaderDefRegexp) != null)
        return 1;
      if (PApplet.match(line, colorShaderDefRegexp) != null)
        return 3;
      if (PApplet.match(line, lightShaderDefRegexp) != null)
        return 4;
      if (PApplet.match(line, texShaderDefRegexp) != null)
        return 5;
      if (PApplet.match(line, texlightShaderDefRegexp) != null)
        return 6;
      if (PApplet.match(line, polyShaderDefRegexp) != null)
        return 2;
      if (PApplet.match(line, triShaderAttrRegexp) != null)
        return 2;
      if (PApplet.match(line, quadShaderAttrRegexp) != null)
        return 2;
    }
    return defaultType;
  }
  





  protected int getType()
  {
    return type;
  }
  
  protected void setType(int type)
  {
    this.type = type;
  }
  
  protected boolean hasType()
  {
    return (type >= 0) && (type <= 6);
  }
  
  protected boolean isPointShader()
  {
    return type == 0;
  }
  
  protected boolean isLineShader()
  {
    return type == 1;
  }
  
  protected boolean isPolyShader()
  {
    return (2 <= type) && (type <= 6);
  }
  
  protected boolean checkPolyType(int type)
  {
    if (getType() == 2) { return true;
    }
    if (getType() != type) {
      if (type == 6) {
        PGraphics.showWarning("Your shader needs to be of TEXLIGHT type to render this geometry properly, using default shader instead.");
      } else if (type == 4) {
        PGraphics.showWarning("Your shader needs to be of LIGHT type to render this geometry properly, using default shader instead.");
      } else if (type == 5) {
        PGraphics.showWarning("Your shader needs to be of TEXTURE type to render this geometry properly, using default shader instead.");
      } else if (type == 3) {
        PGraphics.showWarning("Your shader needs to be of COLOR type to render this geometry properly, using default shader instead.");
      }
      return false;
    }
    
    return true;
  }
  
  protected int getLastTexUnit()
  {
    return texUnits == null ? -1 : texUnits.size() - 1;
  }
  
  protected void setRenderer(PGraphicsOpenGL pg)
  {
    currentPG = pg;
  }
  
  protected void loadAttributes()
  {
    if (loadedAttributes) { return;
    }
    vertexLoc = getAttributeLoc("vertex");
    if (vertexLoc == -1) { vertexLoc = getAttributeLoc("position");
    }
    colorLoc = getAttributeLoc("color");
    texCoordLoc = getAttributeLoc("texCoord");
    normalLoc = getAttributeLoc("normal");
    
    ambientLoc = getAttributeLoc("ambient");
    specularLoc = getAttributeLoc("specular");
    emissiveLoc = getAttributeLoc("emissive");
    shininessLoc = getAttributeLoc("shininess");
    
    directionLoc = getAttributeLoc("direction");
    
    offsetLoc = getAttributeLoc("offset");
    
    directionLoc = getAttributeLoc("direction");
    offsetLoc = getAttributeLoc("offset");
    
    loadedAttributes = true;
  }
  
  protected void loadUniforms()
  {
    if (loadedUniforms) return;
    transformMatLoc = getUniformLoc("transform");
    if (transformMatLoc == -1) {
      transformMatLoc = getUniformLoc("transformMatrix");
    }
    modelviewMatLoc = getUniformLoc("modelview");
    if (modelviewMatLoc == -1) {
      modelviewMatLoc = getUniformLoc("modelviewMatrix");
    }
    projectionMatLoc = getUniformLoc("projection");
    if (projectionMatLoc == -1) {
      projectionMatLoc = getUniformLoc("projectionMatrix");
    }
    viewportLoc = getUniformLoc("viewport");
    ppixelsLoc = getUniformLoc("ppixels");
    
    normalMatLoc = getUniformLoc("normalMatrix");
    
    lightCountLoc = getUniformLoc("lightCount");
    lightPositionLoc = getUniformLoc("lightPosition");
    lightNormalLoc = getUniformLoc("lightNormal");
    lightAmbientLoc = getUniformLoc("lightAmbient");
    lightDiffuseLoc = getUniformLoc("lightDiffuse");
    lightSpecularLoc = getUniformLoc("lightSpecular");
    lightFalloffLoc = getUniformLoc("lightFalloff");
    lightSpotLoc = getUniformLoc("lightSpot");
    
    textureLoc = getUniformLoc("texture");
    if (textureLoc == -1) {
      textureLoc = getUniformLoc("texMap");
    }
    
    texMatrixLoc = getUniformLoc("texMatrix");
    texOffsetLoc = getUniformLoc("texOffset");
    
    perspectiveLoc = getUniformLoc("perspective");
    scaleLoc = getUniformLoc("scale");
    loadedUniforms = true;
  }
  
  protected void setCommonUniforms()
  {
    if (-1 < transformMatLoc) {
      currentPG.updateGLProjmodelview();
      setUniformMatrix(transformMatLoc, currentPG.glProjmodelview);
    }
    
    if (-1 < modelviewMatLoc) {
      currentPG.updateGLModelview();
      setUniformMatrix(modelviewMatLoc, currentPG.glModelview);
    }
    
    if (-1 < projectionMatLoc) {
      currentPG.updateGLProjection();
      setUniformMatrix(projectionMatLoc, currentPG.glProjection);
    }
    
    if (-1 < viewportLoc) {
      float x = currentPG.viewport.get(0);
      float y = currentPG.viewport.get(1);
      float w = currentPG.viewport.get(2);
      float h = currentPG.viewport.get(3);
      setUniformValue(viewportLoc, x, y, w, h);
    }
    
    if (-1 < ppixelsLoc) {
      ppixelsUnit = (getLastTexUnit() + 1);
      setUniformValue(ppixelsLoc, ppixelsUnit);
      pgl.activeTexture(PGL.TEXTURE0 + ppixelsUnit);
      currentPG.bindFrontTexture();
    } else {
      ppixelsUnit = -1;
    }
  }
  
  protected void bindTyped()
  {
    if (currentPG == null) {
      setRenderer(primaryPG.getCurrentPG());
      loadAttributes();
      loadUniforms();
    }
    setCommonUniforms();
    
    if (-1 < vertexLoc) pgl.enableVertexAttribArray(vertexLoc);
    if (-1 < colorLoc) pgl.enableVertexAttribArray(colorLoc);
    if (-1 < texCoordLoc) pgl.enableVertexAttribArray(texCoordLoc);
    if (-1 < normalLoc) { pgl.enableVertexAttribArray(normalLoc);
    }
    if (-1 < normalMatLoc) {
      currentPG.updateGLNormal();
      setUniformMatrix(normalMatLoc, currentPG.glNormal);
    }
    
    if (-1 < ambientLoc) pgl.enableVertexAttribArray(ambientLoc);
    if (-1 < specularLoc) pgl.enableVertexAttribArray(specularLoc);
    if (-1 < emissiveLoc) pgl.enableVertexAttribArray(emissiveLoc);
    if (-1 < shininessLoc) { pgl.enableVertexAttribArray(shininessLoc);
    }
    int count = currentPG.lightCount;
    setUniformValue(lightCountLoc, count);
    if (count > 0) {
      setUniformVector(lightPositionLoc, currentPG.lightPosition, 4, count);
      setUniformVector(lightNormalLoc, currentPG.lightNormal, 3, count);
      setUniformVector(lightAmbientLoc, currentPG.lightAmbient, 3, count);
      setUniformVector(lightDiffuseLoc, currentPG.lightDiffuse, 3, count);
      setUniformVector(lightSpecularLoc, currentPG.lightSpecular, 3, count);
      setUniformVector(lightFalloffLoc, currentPG.lightFalloffCoefficients, 
        3, count);
      setUniformVector(lightSpotLoc, currentPG.lightSpotParameters, 2, count);
    }
    
    if (-1 < directionLoc) { pgl.enableVertexAttribArray(directionLoc);
    }
    if (-1 < offsetLoc) { pgl.enableVertexAttribArray(offsetLoc);
    }
    if (-1 < perspectiveLoc) {
      if ((currentPG.getHint(7)) && 
        (currentPG.nonOrthoProjection())) {
        setUniformValue(perspectiveLoc, 1);
      } else {
        setUniformValue(perspectiveLoc, 0);
      }
    }
    
    if (-1 < scaleLoc) {
      if (currentPG.getHint(6)) {
        setUniformValue(scaleLoc, 1.0F, 1.0F, 1.0F);
      } else {
        float f = PGL.STROKE_DISPLACEMENT;
        if (currentPG.orthoProjection()) {
          setUniformValue(scaleLoc, 1.0F, 1.0F, f);
        } else {
          setUniformValue(scaleLoc, f, f, f);
        }
      }
    }
  }
  
  protected void unbindTyped() {
    if (-1 < offsetLoc) { pgl.disableVertexAttribArray(offsetLoc);
    }
    if (-1 < directionLoc) { pgl.disableVertexAttribArray(directionLoc);
    }
    if ((-1 < textureLoc) && (texture != null)) {
      pgl.activeTexture(PGL.TEXTURE0 + texUnit);
      texture.unbind();
      pgl.activeTexture(PGL.TEXTURE0);
      texture = null;
    }
    
    if (-1 < ambientLoc) pgl.disableVertexAttribArray(ambientLoc);
    if (-1 < specularLoc) pgl.disableVertexAttribArray(specularLoc);
    if (-1 < emissiveLoc) pgl.disableVertexAttribArray(emissiveLoc);
    if (-1 < shininessLoc) { pgl.disableVertexAttribArray(shininessLoc);
    }
    if (-1 < vertexLoc) pgl.disableVertexAttribArray(vertexLoc);
    if (-1 < colorLoc) pgl.disableVertexAttribArray(colorLoc);
    if (-1 < texCoordLoc) pgl.disableVertexAttribArray(texCoordLoc);
    if (-1 < normalLoc) { pgl.disableVertexAttribArray(normalLoc);
    }
    if (-1 < ppixelsLoc) {
      pgl.enableFBOLayer();
      pgl.activeTexture(PGL.TEXTURE0 + ppixelsUnit);
      currentPG.unbindFrontTexture();
      pgl.activeTexture(PGL.TEXTURE0);
    }
    
    pgl.bindBuffer(PGL.ARRAY_BUFFER, 0);
  }
  
  protected void setTexture(Texture tex) {
    texture = tex;
    
    float scaleu = 1.0F;
    float scalev = 1.0F;
    float dispu = 0.0F;
    float dispv = 0.0F;
    
    if (tex != null) {
      if (tex.invertedX()) {
        scaleu = -1.0F;
        dispu = 1.0F;
      }
      
      if (tex.invertedY()) {
        scalev = -1.0F;
        dispv = 1.0F;
      }
      
      scaleu *= tex.maxTexcoordU();
      dispu *= tex.maxTexcoordU();
      scalev *= tex.maxTexcoordV();
      dispv *= tex.maxTexcoordV();
      
      setUniformValue(texOffsetLoc, 1.0F / width, 1.0F / height);
      
      if (-1 < textureLoc) {
        texUnit = (-1 < ppixelsUnit ? ppixelsUnit + 1 : getLastTexUnit() + 1);
        setUniformValue(textureLoc, texUnit);
        pgl.activeTexture(PGL.TEXTURE0 + texUnit);
        tex.bind();
      }
    }
    
    if (-1 < texMatrixLoc) {
      if (tcmat == null) {
        tcmat = new float[16];
      }
      tcmat[0] = scaleu;tcmat[4] = 0.0F;tcmat[8] = 0.0F;tcmat[12] = dispu;
      tcmat[1] = 0.0F;tcmat[5] = scalev;tcmat[9] = 0.0F;tcmat[13] = dispv;
      tcmat[2] = 0.0F;tcmat[6] = 0.0F;tcmat[10] = 0.0F;tcmat[14] = 0.0F;
      tcmat[3] = 0.0F;tcmat[7] = 0.0F;tcmat[11] = 0.0F;tcmat[15] = 0.0F;
      setUniformMatrix(texMatrixLoc, tcmat);
    }
  }
  
  protected boolean supportsTexturing()
  {
    return -1 < textureLoc;
  }
  
  protected boolean supportLighting() {
    return (-1 < lightCountLoc) || (-1 < lightPositionLoc) || (-1 < lightNormalLoc);
  }
  
  protected boolean accessTexCoords() {
    return -1 < texCoordLoc;
  }
  
  protected boolean accessNormals() {
    return -1 < normalLoc;
  }
  
  protected boolean accessLightAttribs() {
    return (-1 < ambientLoc) || (-1 < specularLoc) || (-1 < emissiveLoc) || (
      -1 < shininessLoc);
  }
  
  protected void setVertexAttribute(int vboId, int size, int type, int stride, int offset)
  {
    setAttributeVBO(vertexLoc, vboId, size, type, false, stride, offset);
  }
  
  protected void setColorAttribute(int vboId, int size, int type, int stride, int offset)
  {
    setAttributeVBO(colorLoc, vboId, size, type, true, stride, offset);
  }
  
  protected void setNormalAttribute(int vboId, int size, int type, int stride, int offset)
  {
    setAttributeVBO(normalLoc, vboId, size, type, false, stride, offset);
  }
  
  protected void setTexcoordAttribute(int vboId, int size, int type, int stride, int offset)
  {
    setAttributeVBO(texCoordLoc, vboId, size, type, false, stride, offset);
  }
  
  protected void setAmbientAttribute(int vboId, int size, int type, int stride, int offset)
  {
    setAttributeVBO(ambientLoc, vboId, size, type, true, stride, offset);
  }
  
  protected void setSpecularAttribute(int vboId, int size, int type, int stride, int offset)
  {
    setAttributeVBO(specularLoc, vboId, size, type, true, stride, offset);
  }
  
  protected void setEmissiveAttribute(int vboId, int size, int type, int stride, int offset)
  {
    setAttributeVBO(emissiveLoc, vboId, size, type, true, stride, offset);
  }
  
  protected void setShininessAttribute(int vboId, int size, int type, int stride, int offset)
  {
    setAttributeVBO(shininessLoc, vboId, size, type, false, stride, offset);
  }
  
  protected void setLineAttribute(int vboId, int size, int type, int stride, int offset)
  {
    setAttributeVBO(directionLoc, vboId, size, type, false, stride, offset);
  }
  
  protected void setPointAttribute(int vboId, int size, int type, int stride, int offset)
  {
    setAttributeVBO(offsetLoc, vboId, size, type, false, stride, offset);
  }
  

  protected static class UniformValue
  {
    static final int INT1 = 0;
    
    static final int INT2 = 1;
    
    static final int INT3 = 2;
    
    static final int INT4 = 3;
    static final int FLOAT1 = 4;
    static final int FLOAT2 = 5;
    static final int FLOAT3 = 6;
    static final int FLOAT4 = 7;
    static final int INT1VEC = 8;
    static final int INT2VEC = 9;
    static final int INT3VEC = 10;
    static final int INT4VEC = 11;
    static final int FLOAT1VEC = 12;
    static final int FLOAT2VEC = 13;
    static final int FLOAT3VEC = 14;
    static final int FLOAT4VEC = 15;
    static final int MAT2 = 16;
    static final int MAT3 = 17;
    static final int MAT4 = 18;
    static final int SAMPLER2D = 19;
    int type;
    Object value;
    
    UniformValue(int type, Object value)
    {
      this.type = type;
      this.value = value;
    }
  }
}
