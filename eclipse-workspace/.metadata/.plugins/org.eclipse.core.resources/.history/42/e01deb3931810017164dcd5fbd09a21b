package com.jogamp.opengl;

import com.jogamp.common.util.locks.RecursiveLock;
import java.util.List;
import jogamp.opengl.Debug;













































































































































public abstract interface GLAutoDrawable
  extends GLDrawable
{
  public static final boolean SCREEN_CHANGE_ACTION_ENABLED = Debug.getBooleanProperty("jogl.screenchange.action", true);
  
  public abstract GLDrawable getDelegatedDrawable();
  
  public abstract GLContext getContext();
  
  public abstract GLContext setContext(GLContext paramGLContext, boolean paramBoolean);
  
  public abstract void addGLEventListener(GLEventListener paramGLEventListener);
  
  public abstract void addGLEventListener(int paramInt, GLEventListener paramGLEventListener)
    throws IndexOutOfBoundsException;
  
  public abstract int getGLEventListenerCount();
  
  public abstract boolean areAllGLEventListenerInitialized();
  
  public abstract GLEventListener getGLEventListener(int paramInt)
    throws IndexOutOfBoundsException;
  
  public abstract boolean getGLEventListenerInitState(GLEventListener paramGLEventListener);
  
  public abstract void setGLEventListenerInitState(GLEventListener paramGLEventListener, boolean paramBoolean);
  
  public abstract GLEventListener disposeGLEventListener(GLEventListener paramGLEventListener, boolean paramBoolean);
  
  public abstract GLEventListener removeGLEventListener(GLEventListener paramGLEventListener);
  
  public abstract void setAnimator(GLAnimatorControl paramGLAnimatorControl)
    throws GLException;
  
  public abstract GLAnimatorControl getAnimator();
  
  public abstract Thread setExclusiveContextThread(Thread paramThread)
    throws GLException;
  
  public abstract Thread getExclusiveContextThread();
  
  public abstract boolean invoke(boolean paramBoolean, GLRunnable paramGLRunnable)
    throws IllegalStateException;
  
  public abstract boolean invoke(boolean paramBoolean, List<GLRunnable> paramList)
    throws IllegalStateException;
  
  public abstract void flushGLRunnables();
  
  public abstract void destroy();
  
  public abstract void display();
  
  public abstract void setAutoSwapBufferMode(boolean paramBoolean);
  
  public abstract boolean getAutoSwapBufferMode();
  
  public abstract void setContextCreationFlags(int paramInt);
  
  public abstract int getContextCreationFlags();
  
  public abstract GLContext createContext(GLContext paramGLContext);
  
  public abstract GL getGL();
  
  public abstract GL setGL(GL paramGL);
  
  public abstract Object getUpstreamWidget();
  
  public abstract RecursiveLock getUpstreamLock();
  
  public abstract boolean isThreadGLCapable();
}
