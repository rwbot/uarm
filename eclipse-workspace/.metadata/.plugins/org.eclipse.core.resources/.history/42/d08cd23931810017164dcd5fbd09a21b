package com.jogamp.common.util;


















public class ValueConv
{
  public ValueConv() {}
  
















  public static final byte float_to_byte(float paramFloat, boolean paramBoolean)
  {
    if (paramBoolean) {
      return (byte)(int)(paramFloat * (paramFloat > 0.0F ? 127.0F : 128.0F));
    }
    return (byte)(int)(paramFloat * 255.0F);
  }
  
  public static final short float_to_short(float paramFloat, boolean paramBoolean) {
    if (paramBoolean) {
      return (short)(int)(paramFloat * (paramFloat > 0.0F ? 32767.0F : 32768.0F));
    }
    return (short)(int)(paramFloat * 65535.0F);
  }
  



  public static final int float_to_int(float paramFloat, boolean paramBoolean)
  {
    if (paramBoolean) {
      return (int)(paramFloat * (paramFloat > 0.0F ? 2.147483647E9D : 2.147483648E9D));
    }
    return (int)(paramFloat * 4.294967295E9D);
  }
  

  public static final byte double_to_byte(double paramDouble, boolean paramBoolean)
  {
    if (paramBoolean) {
      return (byte)(int)(paramDouble * (paramDouble > 0.0D ? 127.0D : 128.0D));
    }
    return (byte)(int)(paramDouble * 255.0D);
  }
  
  public static final short double_to_short(double paramDouble, boolean paramBoolean)
  {
    if (paramBoolean) {
      return (short)(int)(paramDouble * (paramDouble > 0.0D ? 32767.0D : 32768.0D));
    }
    return (short)(int)(paramDouble * 65535.0D);
  }
  
  public static final int double_to_int(double paramDouble, boolean paramBoolean)
  {
    if (paramBoolean) {
      return (int)(paramDouble * (paramDouble > 0.0D ? 2.147483647E9D : 2.147483648E9D));
    }
    return (int)(paramDouble * 4.294967295E9D);
  }
  
  public static final float byte_to_float(byte paramByte, boolean paramBoolean)
  {
    if (paramBoolean) {
      return (paramByte & 0xFF) / (paramByte > 0 ? 127.0F : -128.0F);
    }
    return (paramByte & 0xFF) / 255.0F;
  }
  
  public static final double byte_to_double(byte paramByte, boolean paramBoolean) {
    if (paramBoolean) {
      return (paramByte & 0xFF) / (paramByte > 0 ? 127.0D : -128.0D);
    }
    return (paramByte & 0xFF) / 255.0D;
  }
  
  public static final float short_to_float(short paramShort, boolean paramBoolean) {
    if (paramBoolean) {
      return (paramShort & 0xFFFF) / (paramShort > 0 ? 32767.0F : -32768.0F);
    }
    return (paramShort & 0xFFFF) / 65535.0F;
  }
  
  public static final double short_to_double(short paramShort, boolean paramBoolean)
  {
    if (paramBoolean) {
      return (paramShort & 0xFFFF) / (paramShort > 0 ? 32767.0D : -32768.0D);
    }
    return (paramShort & 0xFFFF) / 65535.0D;
  }
  




  public static final float int_to_float(int paramInt, boolean paramBoolean)
  {
    if (paramBoolean) {
      return (float)(paramInt / (paramInt > 0 ? 2.147483647E9D : 2.147483648E9D));
    }
    return (float)((paramInt & 0xFFFFFFFF) / 4.294967295E9D);
  }
  
  public static final double int_to_double(int paramInt, boolean paramBoolean) {
    if (paramBoolean) {
      return paramInt / (paramInt > 0 ? 2.147483647E9D : 2.147483648E9D);
    }
    return (paramInt & 0xFFFFFFFF) / 4.294967295E9D;
  }
  
  public static final short byte_to_short(byte paramByte, boolean paramBoolean1, boolean paramBoolean2)
  {
    return float_to_short(byte_to_float(paramByte, paramBoolean1), paramBoolean2);
  }
  
  public static final int byte_to_int(byte paramByte, boolean paramBoolean1, boolean paramBoolean2) { return float_to_int(byte_to_float(paramByte, paramBoolean1), paramBoolean2); }
  
  public static final byte short_to_byte(short paramShort, boolean paramBoolean1, boolean paramBoolean2)
  {
    return float_to_byte(short_to_float(paramShort, paramBoolean1), paramBoolean2);
  }
  
  public static final int short_to_int(short paramShort, boolean paramBoolean1, boolean paramBoolean2) { return float_to_int(short_to_float(paramShort, paramBoolean1), paramBoolean2); }
  
  public static final byte int_to_byte(int paramInt, boolean paramBoolean1, boolean paramBoolean2)
  {
    return float_to_byte(int_to_float(paramInt, paramBoolean1), paramBoolean2);
  }
  
  public static final short int_to_short(int paramInt, boolean paramBoolean1, boolean paramBoolean2) { return float_to_short(int_to_float(paramInt, paramBoolean1), paramBoolean2); }
}
