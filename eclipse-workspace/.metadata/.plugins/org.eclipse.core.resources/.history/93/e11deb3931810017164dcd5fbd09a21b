package com.jogamp.opengl;

import com.jogamp.common.util.locks.LockFactory;
import com.jogamp.common.util.locks.RecursiveLock;
import jogamp.opengl.GLAutoDrawableBase;
import jogamp.opengl.GLContextImpl;
import jogamp.opengl.GLDrawableImpl;














































































public class GLAutoDrawableDelegate
  extends GLAutoDrawableBase
  implements GLAutoDrawable
{
  private Object upstreamWidget;
  private final RecursiveLock lock;
  
  public GLAutoDrawableDelegate(GLDrawable paramGLDrawable, GLContext paramGLContext, Object paramObject, boolean paramBoolean, RecursiveLock paramRecursiveLock)
  {
    super((GLDrawableImpl)paramGLDrawable, (GLContextImpl)paramGLContext, paramBoolean);
    if (null == paramGLDrawable) {
      throw new IllegalArgumentException("null drawable");
    }
    upstreamWidget = paramObject;
    lock = (null != paramRecursiveLock ? paramRecursiveLock : LockFactory.createRecursiveLock());
  }
  




  public final void windowRepaintOp()
  {
    super.defaultWindowRepaintOp();
  }
  















  public final void windowResizedOp(int paramInt1, int paramInt2)
  {
    super.defaultWindowResizedOp(paramInt1, paramInt2);
  }
  








  public final void windowDestroyNotifyOp()
  {
    super.defaultWindowDestroyNotifyOp();
  }
  






  public final RecursiveLock getUpstreamLock()
  {
    return lock;
  }
  
  public final Object getUpstreamWidget() {
    return upstreamWidget;
  }
  



  public final void setUpstreamWidget(Object paramObject)
  {
    upstreamWidget = paramObject;
  }
  










  public final void destroy()
  {
    defaultDestroy();
  }
  
  protected void destroyImplInLock()
  {
    super.destroyImplInLock();
  }
  
  public void display()
  {
    defaultDisplay();
  }
  




  public final GLDrawableFactory getFactory()
  {
    return drawable.getFactory();
  }
  
  public final void swapBuffers() throws GLException
  {
    defaultSwapBuffers();
  }
  
  public String toString()
  {
    return getClass().getSimpleName() + "[ \n\tHelper: " + helper + ", \n\tDrawable: " + drawable + ", \n\tContext: " + context + ", \n\tUpstreamWidget: " + upstreamWidget + "]";
  }
}
