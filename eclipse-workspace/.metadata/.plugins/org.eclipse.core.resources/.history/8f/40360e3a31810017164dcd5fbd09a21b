package jogamp.nativewindow.x11;

import com.jogamp.common.nio.Buffers;
import com.jogamp.common.nio.StructAccessor;
import com.jogamp.common.os.MachineDataInfo;
import com.jogamp.common.os.MachineDataInfo.StaticConfig;
import java.nio.ByteBuffer;
import jogamp.common.os.MachineDataInfoRuntime;










public class XRenderDirectFormat
{
  StructAccessor accessor;
  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  
  private final MachineDataInfo md;
  private static final int[] XRenderDirectFormat_size = { 16, 16, 16, 16, 16, 16, 16, 16 };
  private static final int[] red_offset = { 0, 0, 0, 0, 0, 0, 0, 0 };
  
  private static final int[] redMask_offset = { 2, 2, 2, 2, 2, 2, 2, 2 };
  
  private static final int[] green_offset = { 4, 4, 4, 4, 4, 4, 4, 4 };
  
  private static final int[] greenMask_offset = { 6, 6, 6, 6, 6, 6, 6, 6 };
  
  private static final int[] blue_offset = { 8, 8, 8, 8, 8, 8, 8, 8 };
  
  private static final int[] blueMask_offset = { 10, 10, 10, 10, 10, 10, 10, 10 };
  
  private static final int[] alpha_offset = { 12, 12, 12, 12, 12, 12, 12, 12 };
  
  private static final int[] alphaMask_offset = { 14, 14, 14, 14, 14, 14, 14, 14 };
  
  public static int size()
  {
    return XRenderDirectFormat_size[mdIdx];
  }
  
  public static XRenderDirectFormat create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }
  
  public static XRenderDirectFormat create(ByteBuffer paramByteBuffer) {
    return new XRenderDirectFormat(paramByteBuffer);
  }
  
  XRenderDirectFormat(ByteBuffer paramByteBuffer) {
    md = valuesmdIdxmd;
    accessor = new StructAccessor(paramByteBuffer);
  }
  
  public ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }
  
  public XRenderDirectFormat setRed(short paramShort)
  {
    accessor.setShortAt(red_offset[mdIdx], paramShort);
    return this;
  }
  
  public short getRed()
  {
    return accessor.getShortAt(red_offset[mdIdx]);
  }
  
  public XRenderDirectFormat setRedMask(short paramShort)
  {
    accessor.setShortAt(redMask_offset[mdIdx], paramShort);
    return this;
  }
  
  public short getRedMask()
  {
    return accessor.getShortAt(redMask_offset[mdIdx]);
  }
  
  public XRenderDirectFormat setGreen(short paramShort)
  {
    accessor.setShortAt(green_offset[mdIdx], paramShort);
    return this;
  }
  
  public short getGreen()
  {
    return accessor.getShortAt(green_offset[mdIdx]);
  }
  
  public XRenderDirectFormat setGreenMask(short paramShort)
  {
    accessor.setShortAt(greenMask_offset[mdIdx], paramShort);
    return this;
  }
  
  public short getGreenMask()
  {
    return accessor.getShortAt(greenMask_offset[mdIdx]);
  }
  
  public XRenderDirectFormat setBlue(short paramShort)
  {
    accessor.setShortAt(blue_offset[mdIdx], paramShort);
    return this;
  }
  
  public short getBlue()
  {
    return accessor.getShortAt(blue_offset[mdIdx]);
  }
  
  public XRenderDirectFormat setBlueMask(short paramShort)
  {
    accessor.setShortAt(blueMask_offset[mdIdx], paramShort);
    return this;
  }
  
  public short getBlueMask()
  {
    return accessor.getShortAt(blueMask_offset[mdIdx]);
  }
  
  public XRenderDirectFormat setAlpha(short paramShort)
  {
    accessor.setShortAt(alpha_offset[mdIdx], paramShort);
    return this;
  }
  
  public short getAlpha()
  {
    return accessor.getShortAt(alpha_offset[mdIdx]);
  }
  
  public XRenderDirectFormat setAlphaMask(short paramShort)
  {
    accessor.setShortAt(alphaMask_offset[mdIdx], paramShort);
    return this;
  }
  
  public short getAlphaMask()
  {
    return accessor.getShortAt(alphaMask_offset[mdIdx]);
  }
}
