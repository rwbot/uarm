package jogamp.opengl.x11.glx;

import com.jogamp.common.ExceptionUtils;
import com.jogamp.common.nio.Buffers;
import com.jogamp.common.nio.PointerBuffer;
import com.jogamp.nativewindow.AbstractGraphicsConfiguration;
import com.jogamp.nativewindow.AbstractGraphicsDevice;
import com.jogamp.nativewindow.AbstractGraphicsScreen;
import com.jogamp.nativewindow.CapabilitiesChooser;
import com.jogamp.nativewindow.CapabilitiesImmutable;
import com.jogamp.nativewindow.GraphicsConfigurationFactory;
import com.jogamp.nativewindow.VisualIDHolder;
import com.jogamp.nativewindow.VisualIDHolder.VIDComparator;
import com.jogamp.nativewindow.VisualIDHolder.VIDType;
import com.jogamp.nativewindow.x11.X11GraphicsDevice;
import com.jogamp.nativewindow.x11.X11GraphicsScreen;
import com.jogamp.opengl.DefaultGLCapabilitiesChooser;
import com.jogamp.opengl.GLCapabilities;
import com.jogamp.opengl.GLCapabilitiesChooser;
import com.jogamp.opengl.GLCapabilitiesImmutable;
import com.jogamp.opengl.GLDrawableFactory;
import com.jogamp.opengl.GLException;
import com.jogamp.opengl.GLProfile;
import java.io.PrintStream;
import java.nio.IntBuffer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import jogamp.nativewindow.x11.X11Lib;
import jogamp.nativewindow.x11.XVisualInfo;
import jogamp.opengl.GLGraphicsConfigurationFactory;
import jogamp.opengl.GLGraphicsConfigurationUtil;







































public class X11GLXGraphicsConfigurationFactory
  extends GLGraphicsConfigurationFactory
{
  static VisualIDHolder.VIDComparator XVisualIDComparator = new VisualIDHolder.VIDComparator(VisualIDHolder.VIDType.X11_XVISUAL);
  
  static GraphicsConfigurationFactory fallbackX11GraphicsConfigurationFactory = null;
  
  static void registerFactory() { X11GLXGraphicsConfigurationFactory localX11GLXGraphicsConfigurationFactory = new X11GLXGraphicsConfigurationFactory();
    GraphicsConfigurationFactory localGraphicsConfigurationFactory = GraphicsConfigurationFactory.registerFactory(X11GraphicsDevice.class, GLCapabilitiesImmutable.class, localX11GLXGraphicsConfigurationFactory);
    if (localGraphicsConfigurationFactory == localX11GLXGraphicsConfigurationFactory) {
      throw new InternalError("GraphicsConfigurationFactory lifecycle impl. error");
    }
    if (null != localGraphicsConfigurationFactory) {
      fallbackX11GraphicsConfigurationFactory = localGraphicsConfigurationFactory;
    } else {
      fallbackX11GraphicsConfigurationFactory = GraphicsConfigurationFactory.getFactory(X11GraphicsDevice.class, CapabilitiesImmutable.class);
      if (null == fallbackX11GraphicsConfigurationFactory) {
        throw new InternalError("Missing fallback GraphicsConfigurationFactory");
      }
    }
  }
  

  private X11GLXGraphicsConfigurationFactory() {}
  
  protected AbstractGraphicsConfiguration chooseGraphicsConfigurationImpl(CapabilitiesImmutable paramCapabilitiesImmutable1, CapabilitiesImmutable paramCapabilitiesImmutable2, CapabilitiesChooser paramCapabilitiesChooser, AbstractGraphicsScreen paramAbstractGraphicsScreen, int paramInt)
  {
    if (!(paramAbstractGraphicsScreen instanceof X11GraphicsScreen)) {
      throw new IllegalArgumentException("Only X11GraphicsScreen are allowed here");
    }
    
    if (!(paramCapabilitiesImmutable1 instanceof GLCapabilitiesImmutable)) {
      throw new IllegalArgumentException("This NativeWindowFactory accepts only GLCapabilities objects - chosen");
    }
    
    if (!(paramCapabilitiesImmutable2 instanceof GLCapabilitiesImmutable)) {
      throw new IllegalArgumentException("This NativeWindowFactory accepts only GLCapabilities objects - requested");
    }
    
    if ((paramCapabilitiesChooser != null) && (!(paramCapabilitiesChooser instanceof GLCapabilitiesChooser))) {
      throw new IllegalArgumentException("This NativeWindowFactory accepts only GLCapabilitiesChooser objects");
    }
    
    if (!GLXUtil.isGLXAvailableOnServer((X11GraphicsDevice)paramAbstractGraphicsScreen.getDevice())) {
      if (null != fallbackX11GraphicsConfigurationFactory) {
        if (DEBUG) {
          System.err.println("No GLX available, fallback to " + fallbackX11GraphicsConfigurationFactory.getClass().getSimpleName() + " for: " + paramAbstractGraphicsScreen);
        }
        return fallbackX11GraphicsConfigurationFactory.chooseGraphicsConfiguration(paramCapabilitiesImmutable1, paramCapabilitiesImmutable2, paramCapabilitiesChooser, paramAbstractGraphicsScreen, 0);
      }
      throw new InternalError("No GLX and no fallback GraphicsConfigurationFactory available for: " + paramAbstractGraphicsScreen);
    }
    return chooseGraphicsConfigurationStatic((GLCapabilitiesImmutable)paramCapabilitiesImmutable1, (GLCapabilitiesImmutable)paramCapabilitiesImmutable2, (GLCapabilitiesChooser)paramCapabilitiesChooser, (X11GraphicsScreen)paramAbstractGraphicsScreen, paramInt);
  }
  
  protected static List<GLCapabilitiesImmutable> getAvailableCapabilities(X11GLXDrawableFactory paramX11GLXDrawableFactory, AbstractGraphicsDevice paramAbstractGraphicsDevice)
  {
    X11GLXDrawableFactory.SharedResource localSharedResource = paramX11GLXDrawableFactory.getOrCreateSharedResourceImpl(paramAbstractGraphicsDevice);
    if (null == localSharedResource) {
      throw new GLException("Shared resource for device n/a: " + paramAbstractGraphicsDevice);
    }
    X11GraphicsScreen localX11GraphicsScreen = (X11GraphicsScreen)localSharedResource.getScreen();
    X11GraphicsDevice localX11GraphicsDevice = (X11GraphicsDevice)localX11GraphicsScreen.getDevice();
    boolean bool = localSharedResource.isGLXMultisampleAvailable();
    GLProfile localGLProfile = GLProfile.getDefault(paramAbstractGraphicsDevice);
    
    List localList = null;
    
    localX11GraphicsDevice.lock();
    try {
      if (localSharedResource.isGLXVersionGreaterEqualOneThree()) {
        localList = getAvailableGLCapabilitiesFBConfig(localX11GraphicsScreen, localGLProfile, bool);
      }
      if ((null == localList) || (localList.isEmpty())) {
        localList = getAvailableGLCapabilitiesXVisual(localX11GraphicsScreen, localGLProfile, bool);
      }
    } finally {
      localX11GraphicsDevice.unlock();
    }
    if ((null != localList) && (localList.size() > 1)) {
      Collections.sort(localList, XVisualIDComparator);
    }
    return localList;
  }
  
  static List<GLCapabilitiesImmutable> getAvailableGLCapabilitiesFBConfig(X11GraphicsScreen paramX11GraphicsScreen, GLProfile paramGLProfile, boolean paramBoolean) {
    PointerBuffer localPointerBuffer = null;
    


    X11GraphicsDevice localX11GraphicsDevice = (X11GraphicsDevice)paramX11GraphicsScreen.getDevice();
    long l = localX11GraphicsDevice.getHandle();
    
    int i = paramX11GraphicsScreen.getIndex();
    IntBuffer localIntBuffer = Buffers.newDirectIntBuffer(1);
    localIntBuffer.put(0, -1);
    ArrayList localArrayList = new ArrayList();
    
    localPointerBuffer = GLX.glXChooseFBConfig(l, i, null, localIntBuffer);
    if ((localPointerBuffer == null) || (localPointerBuffer.limit() <= 0)) {
      if (DEBUG) {
        System.err.println("X11GLXGraphicsConfiguration.getAvailableGLCapabilitiesFBConfig: Failed glXChooseFBConfig (" + paramX11GraphicsScreen + "): " + localPointerBuffer + ", " + localIntBuffer.get(0));
      }
      return null;
    }
    for (int j = 0; j < localPointerBuffer.limit(); j++) {
      X11GLCapabilities localX11GLCapabilities = X11GLXGraphicsConfiguration.GLXFBConfig2GLCapabilities(localX11GraphicsDevice, paramGLProfile, localPointerBuffer.get(j), 15, paramBoolean);
      if (null != localX11GLCapabilities) {
        localArrayList.add(localX11GLCapabilities);
      } else if (DEBUG) {
        System.err.println("X11GLXGraphicsConfiguration.getAvailableGLCapabilitiesFBConfig: FBConfig invalid (2): (" + paramX11GraphicsScreen + "): fbcfg: " + toHexString(localPointerBuffer.get(j)));
      }
    }
    return localArrayList;
  }
  
  static List<GLCapabilitiesImmutable> getAvailableGLCapabilitiesXVisual(X11GraphicsScreen paramX11GraphicsScreen, GLProfile paramGLProfile, boolean paramBoolean) {
    X11GraphicsDevice localX11GraphicsDevice = (X11GraphicsDevice)paramX11GraphicsScreen.getDevice();
    long l = localX11GraphicsDevice.getHandle();
    
    int i = paramX11GraphicsScreen.getIndex();
    
    int[] arrayOfInt = new int[1];
    XVisualInfo localXVisualInfo = XVisualInfo.create();
    localXVisualInfo.setScreen(i);
    XVisualInfo[] arrayOfXVisualInfo = X11Lib.XGetVisualInfo(l, 2L, localXVisualInfo, arrayOfInt, 0);
    if ((arrayOfXVisualInfo == null) || (arrayOfXVisualInfo.length < 1)) {
      throw new GLException("Error while enumerating available XVisualInfos");
    }
    ArrayList localArrayList = new ArrayList();
    for (int j = 0; j < arrayOfXVisualInfo.length; j++) {
      X11GLCapabilities localX11GLCapabilities = X11GLXGraphicsConfiguration.XVisualInfo2GLCapabilities(localX11GraphicsDevice, paramGLProfile, arrayOfXVisualInfo[j], 15, paramBoolean);
      if (null != localX11GLCapabilities)
        localArrayList.add(localX11GLCapabilities);
      if (DEBUG) {
        System.err.println("X11GLXGraphicsConfiguration.getAvailableGLCapabilitiesXVisual: XVisual invalid: (" + paramX11GraphicsScreen + "): fbcfg: " + toHexString(arrayOfXVisualInfo[j].getVisualid()));
      }
    }
    return localArrayList;
  }
  



  static X11GLXGraphicsConfiguration chooseGraphicsConfigurationStatic(GLCapabilitiesImmutable paramGLCapabilitiesImmutable1, GLCapabilitiesImmutable paramGLCapabilitiesImmutable2, GLCapabilitiesChooser paramGLCapabilitiesChooser, X11GraphicsScreen paramX11GraphicsScreen, int paramInt)
  {
    if (paramX11GraphicsScreen == null) {
      throw new IllegalArgumentException("AbstractGraphicsScreen is null");
    }
    if (paramGLCapabilitiesImmutable1 == null) {
      paramGLCapabilitiesImmutable1 = new GLCapabilities(null);
    }
    X11GraphicsDevice localX11GraphicsDevice = (X11GraphicsDevice)paramX11GraphicsScreen.getDevice();
    X11GLXDrawableFactory localX11GLXDrawableFactory = (X11GLXDrawableFactory)GLDrawableFactory.getDesktopFactory();
    
    paramGLCapabilitiesImmutable1 = GLGraphicsConfigurationUtil.fixGLCapabilities(paramGLCapabilitiesImmutable1, localX11GLXDrawableFactory, localX11GraphicsDevice);
    int i = (!paramGLCapabilitiesImmutable1.isOnscreen()) && (paramGLCapabilitiesImmutable1.isPBuffer()) ? 1 : 0;
    
    X11GLXGraphicsConfiguration localX11GLXGraphicsConfiguration = null;
    localX11GraphicsDevice.lock();
    try {
      if (localX11GLXDrawableFactory.isGLXVersionGreaterEqualOneThree(localX11GraphicsDevice)) {
        localX11GLXGraphicsConfiguration = chooseGraphicsConfigurationFBConfig(paramGLCapabilitiesImmutable1, paramGLCapabilitiesImmutable2, paramGLCapabilitiesChooser, paramX11GraphicsScreen, paramInt);
      }
      if (null == localX11GLXGraphicsConfiguration) {
        if (i != 0) {
          throw new GLException("Error: Couldn't create X11GLXGraphicsConfiguration based on FBConfig for visualID " + toHexString(paramInt) + ", " + paramGLCapabilitiesImmutable1);
        }
        localX11GLXGraphicsConfiguration = chooseGraphicsConfigurationXVisual(paramGLCapabilitiesImmutable1, paramGLCapabilitiesImmutable2, paramGLCapabilitiesChooser, paramX11GraphicsScreen, paramInt);
      }
    } finally {
      localX11GraphicsDevice.unlock();
    }
    if (null == localX11GLXGraphicsConfiguration) {
      throw new GLException("Error: Couldn't create X11GLXGraphicsConfiguration based on FBConfig and XVisual for visualID " + toHexString(paramInt) + ", " + paramX11GraphicsScreen + ", " + paramGLCapabilitiesImmutable1);
    }
    if (DEBUG) {
      System.err.println("X11GLXGraphicsConfiguration.chooseGraphicsConfigurationStatic(visualID " + toHexString(paramInt) + ", " + paramX11GraphicsScreen + "," + paramGLCapabilitiesImmutable1 + "): " + localX11GLXGraphicsConfiguration);
    }
    return localX11GLXGraphicsConfiguration;
  }
  
  static X11GLXGraphicsConfiguration fetchGraphicsConfigurationFBConfig(X11GraphicsScreen paramX11GraphicsScreen, int paramInt, GLProfile paramGLProfile) {
    X11GraphicsDevice localX11GraphicsDevice = (X11GraphicsDevice)paramX11GraphicsScreen.getDevice();
    long l1 = localX11GraphicsDevice.getHandle();
    int i = paramX11GraphicsScreen.getIndex();
    
    long l2 = X11GLXGraphicsConfiguration.glXFBConfigID2FBConfig(l1, i, paramInt);
    if ((0L == l2) || (!X11GLXGraphicsConfiguration.GLXFBConfigValid(l1, l2))) {
      if (DEBUG) {
        System.err.println("X11GLXGraphicsConfiguration.chooseGraphicsConfigurationFBConfig: Failed.0 - GLX FBConfig invalid: (" + paramX11GraphicsScreen + "," + toHexString(paramInt) + "): fbcfg: " + toHexString(l2));
      }
      return null;
    }
    X11GLXDrawableFactory localX11GLXDrawableFactory = (X11GLXDrawableFactory)GLDrawableFactory.getDesktopFactory();
    
    X11GLCapabilities localX11GLCapabilities = X11GLXGraphicsConfiguration.GLXFBConfig2GLCapabilities(localX11GraphicsDevice, paramGLProfile, l2, 15, localX11GLXDrawableFactory.isGLXMultisampleAvailable(localX11GraphicsDevice));
    if (null == localX11GLCapabilities) {
      if (DEBUG) {
        System.err.println("X11GLXGraphicsConfiguration.chooseGraphicsConfigurationFBConfig: Failed.1 - GLX FBConfig invalid: (" + paramX11GraphicsScreen + "," + toHexString(paramInt) + "): fbcfg: " + toHexString(l2));
      }
      return null;
    }
    return new X11GLXGraphicsConfiguration(paramX11GraphicsScreen, localX11GLCapabilities, localX11GLCapabilities, new DefaultGLCapabilitiesChooser());
  }
  


  private static X11GLXGraphicsConfiguration chooseGraphicsConfigurationFBConfig(GLCapabilitiesImmutable paramGLCapabilitiesImmutable1, GLCapabilitiesImmutable paramGLCapabilitiesImmutable2, GLCapabilitiesChooser paramGLCapabilitiesChooser, X11GraphicsScreen paramX11GraphicsScreen, int paramInt)
  {
    int i = -1;
    PointerBuffer localPointerBuffer = null;
    GLProfile localGLProfile = paramGLCapabilitiesImmutable1.getGLProfile();
    


    X11GraphicsDevice localX11GraphicsDevice = (X11GraphicsDevice)paramX11GraphicsScreen.getDevice();
    long l = localX11GraphicsDevice.getHandle();
    int j = paramX11GraphicsScreen.getIndex();
    
    X11GLXDrawableFactory localX11GLXDrawableFactory = (X11GLXDrawableFactory)GLDrawableFactory.getDesktopFactory();
    boolean bool1 = localX11GLXDrawableFactory.isGLXMultisampleAvailable(localX11GraphicsDevice);
    IntBuffer localIntBuffer1 = X11GLXGraphicsConfiguration.GLCapabilities2AttribList(paramGLCapabilitiesImmutable1, true, bool1, l, j);
    IntBuffer localIntBuffer2 = Buffers.newDirectIntBuffer(1);
    localIntBuffer2.put(0, -1);
    int k = GLGraphicsConfigurationUtil.getExclusiveWinAttributeBits(paramGLCapabilitiesImmutable1);
    

    int m;
    
    if (0 == paramInt) {
      localPointerBuffer = GLX.glXChooseFBConfig(l, j, localIntBuffer1, localIntBuffer2);
      m = (localPointerBuffer != null) && (localPointerBuffer.limit() > 0) ? 1 : 0;
    } else {
      m = 0;
    }
    boolean bool2 = (m != 0) && (paramGLCapabilitiesImmutable1.isBackgroundOpaque());
    boolean bool3 = (null == paramGLCapabilitiesChooser) && (bool2);
    Object localObject1; if (m != 0) {
      localObject1 = X11GLXGraphicsConfiguration.GLXFBConfig2GLCapabilities(localX11GraphicsDevice, localGLProfile, localPointerBuffer, k, bool1, bool3);
      if (((List)localObject1).size() > 0) {
        i = bool2 ? 0 : -1;
        if (DEBUG) {
          System.err.println("glXChooseFBConfig recommended fbcfg " + toHexString(localPointerBuffer.get(0)) + ", idx " + i);
          System.err.println("useRecommendedIndex " + bool2 + ", skipCapsChooser " + bool3);
          System.err.println("user  caps " + paramGLCapabilitiesImmutable1);
          System.err.println("fbcfg caps " + localPointerBuffer.limit() + ", availCaps " + ((List)localObject1).get(0));
        }
      } else if (DEBUG) {
        System.err.println("glXChooseFBConfig no caps for recommended fbcfg " + toHexString(localPointerBuffer.get(0)));
        System.err.println("useRecommendedIndex " + bool2 + ", skipCapsChooser " + bool3);
        System.err.println("user  caps " + paramGLCapabilitiesImmutable1);
      }
    } else {
      localObject1 = new ArrayList();
    }
    

    if (0 == ((List)localObject1).size())
    {
      i = -1;
      
      localPointerBuffer = GLX.glXChooseFBConfig(l, j, null, localIntBuffer2);
      if ((localPointerBuffer == null) || (localPointerBuffer.limit() <= 0)) {
        if (DEBUG) {
          System.err.println("X11GLXGraphicsConfiguration.chooseGraphicsConfigurationFBConfig: Failed glXChooseFBConfig (" + paramX11GraphicsScreen + "," + paramGLCapabilitiesImmutable1 + "): " + localPointerBuffer + ", " + localIntBuffer2.get(0));
        }
        return null;
      }
      localObject1 = X11GLXGraphicsConfiguration.GLXFBConfig2GLCapabilities(localX11GraphicsDevice, localGLProfile, localPointerBuffer, k, bool1, false);
    }
    int n;
    if (DEBUG) {
      System.err.println("X11GLXGraphicsConfiguration.chooseGraphicsConfigurationFBConfig: got configs: " + ((List)localObject1).size());
      for (n = 0; n < ((List)localObject1).size(); n++) {
        System.err.println(n + ": " + ((List)localObject1).get(n));
      }
    }
    
    if (0 != paramInt) {
      for (n = 0; n < ((List)localObject1).size();) {
        localObject2 = (VisualIDHolder)((List)localObject1).get(n);
        if (((VisualIDHolder)localObject2).getVisualID(VisualIDHolder.VIDType.X11_XVISUAL) != paramInt) {
          ((List)localObject1).remove(n);
        } else {
          n++;
        }
      }
      if (0 == ((List)localObject1).size()) {
        if (DEBUG) {
          System.err.println("X11GLXGraphicsConfiguration.chooseGraphicsConfigurationFBConfig: post filter visualID " + toHexString(paramInt) + " no config found, failed - return null");
        }
        return null; }
      if (DEBUG) {
        System.err.println("X11GLXGraphicsConfiguration.chooseGraphicsConfigurationFBConfig: post filter visualID " + toHexString(paramInt) + " got configs: " + ((List)localObject1).size());
      }
    }
    

    if ((bool3) && (0 <= i)) {
      n = i;
    } else {
      n = chooseCapabilities(paramGLCapabilitiesChooser, paramGLCapabilitiesImmutable1, (List)localObject1, i);
    }
    if (0 > n) {
      if (DEBUG) {
        System.err.println("X11GLXGraphicsConfiguration.chooseGraphicsConfigurationFBConfig: failed, return null");
        ExceptionUtils.dumpStack(System.err);
      }
      return null;
    }
    Object localObject2 = (X11GLCapabilities)((List)localObject1).get(n);
    
    return new X11GLXGraphicsConfiguration(paramX11GraphicsScreen, (X11GLCapabilities)localObject2, paramGLCapabilitiesImmutable2, paramGLCapabilitiesChooser);
  }
  


  private static X11GLXGraphicsConfiguration chooseGraphicsConfigurationXVisual(GLCapabilitiesImmutable paramGLCapabilitiesImmutable1, GLCapabilitiesImmutable paramGLCapabilitiesImmutable2, GLCapabilitiesChooser paramGLCapabilitiesChooser, X11GraphicsScreen paramX11GraphicsScreen, int paramInt)
  {
    if (paramGLCapabilitiesChooser == null) {
      paramGLCapabilitiesChooser = new DefaultGLCapabilitiesChooser();
    }
    
    GLProfile localGLProfile = paramGLCapabilitiesImmutable1.getGLProfile();
    int i = GLGraphicsConfigurationUtil.getExclusiveWinAttributeBits(paramGLCapabilitiesImmutable1.isOnscreen(), paramGLCapabilitiesImmutable1.isFBO(), false, paramGLCapabilitiesImmutable1.isBitmap());
    ArrayList localArrayList = new ArrayList();
    int j = -1;
    
    X11GraphicsDevice localX11GraphicsDevice = (X11GraphicsDevice)paramX11GraphicsScreen.getDevice();
    long l = localX11GraphicsDevice.getHandle();
    int k = paramX11GraphicsScreen.getIndex();
    
    X11GLXDrawableFactory localX11GLXDrawableFactory = (X11GLXDrawableFactory)GLDrawableFactory.getDesktopFactory();
    boolean bool = localX11GLXDrawableFactory.isGLXMultisampleAvailable(localX11GraphicsDevice);
    IntBuffer localIntBuffer = X11GLXGraphicsConfiguration.GLCapabilities2AttribList(paramGLCapabilitiesImmutable1, false, bool, l, k);
    
    XVisualInfo localXVisualInfo1 = null;
    

    if (0 == paramInt) {
      localXVisualInfo1 = GLX.glXChooseVisual(l, k, localIntBuffer);
      if (DEBUG) {
        System.err.print("glXChooseVisual recommended ");
        if (localXVisualInfo1 == null) {
          System.err.println("null visual");
        } else {
          System.err.println("visual id " + toHexString(localXVisualInfo1.getVisualid()));
        }
      }
    }
    

    int[] arrayOfInt = new int[1];
    XVisualInfo localXVisualInfo2 = XVisualInfo.create();
    localXVisualInfo2.setScreen(k);
    XVisualInfo[] arrayOfXVisualInfo = X11Lib.XGetVisualInfo(l, 2L, localXVisualInfo2, arrayOfInt, 0);
    if ((arrayOfXVisualInfo == null) || (arrayOfXVisualInfo.length < 1)) {
      throw new GLException("Error while enumerating available XVisualInfos");
    }
    
    for (int m = 0; m < arrayOfXVisualInfo.length; m++) {
      localObject = X11GLXGraphicsConfiguration.XVisualInfo2GLCapabilities(localX11GraphicsDevice, localGLProfile, arrayOfXVisualInfo[m], i, bool);
      if (null != localObject) {
        localArrayList.add(localObject);
        
        if ((paramGLCapabilitiesImmutable1.isBackgroundOpaque()) && (localXVisualInfo1 != null) && (localXVisualInfo1.getVisualid() == arrayOfXVisualInfo[m].getVisualid())) {
          j = localArrayList.size() - 1;
        }
      } else if (DEBUG) {
        System.err.println("X11GLXGraphicsConfiguration.chooseGraphicsConfigurationXVisual: XVisual invalid: (" + paramX11GraphicsScreen + "): fbcfg: " + toHexString(arrayOfXVisualInfo[m].getVisualid()));
      }
    }
    
    if (DEBUG) {
      System.err.println("X11GLXGraphicsConfiguration.chooseGraphicsConfigurationXVisual: got configs: " + localArrayList.size());
      for (m = 0; m < localArrayList.size(); m++) {
        System.err.println(m + ": " + localArrayList.get(m));
      }
    }
    
    if (0 != paramInt) {
      for (m = 0; m < localArrayList.size();) {
        localObject = (VisualIDHolder)localArrayList.get(m);
        if (((VisualIDHolder)localObject).getVisualID(VisualIDHolder.VIDType.X11_XVISUAL) != paramInt) {
          localArrayList.remove(m);
        } else {
          m++;
        }
      }
      if (0 == localArrayList.size()) {
        if (DEBUG) {
          System.err.println("X11GLXGraphicsConfiguration.chooseGraphicsConfigurationXVisual: post filter visualID " + toHexString(paramInt) + " no config found, failed - return null");
        }
        return null; }
      if (DEBUG) {
        System.err.println("X11GLXGraphicsConfiguration.chooseGraphicsConfigurationXVisual: post filter visualID " + toHexString(paramInt) + " got configs: " + localArrayList.size());
      }
    }
    
    m = chooseCapabilities(paramGLCapabilitiesChooser, paramGLCapabilitiesImmutable1, localArrayList, j);
    if (0 > m) {
      if (DEBUG) {
        System.err.println("X11GLXGraphicsConfiguration.chooseGraphicsConfigurationXVisual: failed, return null");
        ExceptionUtils.dumpStack(System.err);
      }
      return null;
    }
    Object localObject = (X11GLCapabilities)localArrayList.get(m);
    
    return new X11GLXGraphicsConfiguration(paramX11GraphicsScreen, (X11GLCapabilities)localObject, paramGLCapabilitiesImmutable2, paramGLCapabilitiesChooser);
  }
}
