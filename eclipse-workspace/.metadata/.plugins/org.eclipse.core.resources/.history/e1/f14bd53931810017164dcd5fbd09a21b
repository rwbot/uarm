package jogamp.common.os;

import com.jogamp.common.os.MachineDataInfo;
import com.jogamp.common.os.MachineDataInfo.StaticConfig;
import com.jogamp.common.os.Platform;
import com.jogamp.common.os.Platform.CPUFamily;
import com.jogamp.common.os.Platform.CPUType;
import com.jogamp.common.os.Platform.OSType;
import java.io.PrintStream;


























public class MachineDataInfoRuntime
{
  public MachineDataInfoRuntime() {}
  
  static volatile boolean initialized = false;
  static volatile MachineDataInfo runtimeMD = null;
  static volatile MachineDataInfo.StaticConfig staticMD = null;
  
  public static void initialize() {
    if (!initialized) {
      synchronized (MachineDataInfo.class) {
        if (!initialized) {
          MachineDataInfo.StaticConfig.validateUniqueMachineDataInfo();
          
          MachineDataInfo localMachineDataInfo = getRuntimeImpl();
          MachineDataInfo.StaticConfig localStaticConfig = MachineDataInfo.StaticConfig.findCompatible(localMachineDataInfo);
          if (null == localStaticConfig) {
            throw new RuntimeException("No compatible MachineDataInfo.StaticConfig for runtime:" + PlatformPropsImpl.NEWLINE + localMachineDataInfo);
          }
          if (!md.compatible(localMachineDataInfo)) {
            throw new RuntimeException("Incompatible MachineDataInfo:" + PlatformPropsImpl.NEWLINE + " Static " + localStaticConfig + PlatformPropsImpl.NEWLINE + " Runtime " + localMachineDataInfo);
          }
          

          runtimeMD = localMachineDataInfo;
          staticMD = localStaticConfig;
          initialized = true;
          if (PlatformPropsImpl.DEBUG) {
            System.err.println("MachineDataInfoRuntime.initialize():" + PlatformPropsImpl.NEWLINE + " Static " + localStaticConfig + PlatformPropsImpl.NEWLINE + " Runtime " + localMachineDataInfo);
          }
          

          return;
        }
      }
    }
    throw new InternalError("Already initialized");
  }
  
  public static MachineDataInfo.StaticConfig getStatic() { if (!initialized) {
      synchronized (MachineDataInfo.class) {
        if (!initialized) {
          throw new InternalError("Not set");
        }
      }
    }
    return staticMD;
  }
  
  public static MachineDataInfo getRuntime() { if (!initialized) {
      synchronized (MachineDataInfo.class) {
        if (!initialized) {
          throw new InternalError("Not set");
        }
      }
    }
    return runtimeMD;
  }
  
  public static MachineDataInfo.StaticConfig guessStaticMachineDataInfo(Platform.OSType paramOSType, Platform.CPUType paramCPUType) {
    if (is32Bit) {
      if ((Platform.CPUFamily.ARM == family) || (Platform.CPUType.MIPS_32 == paramCPUType))
      {
        return MachineDataInfo.StaticConfig.ARM_MIPS_32; }
      if (Platform.OSType.WINDOWS == paramOSType)
        return MachineDataInfo.StaticConfig.X86_32_WINDOWS;
      if (Platform.OSType.MACOS == paramOSType)
        return MachineDataInfo.StaticConfig.X86_32_MACOS;
      if ((Platform.OSType.SUNOS == paramOSType) && (Platform.CPUType.SPARC_32 == paramCPUType))
      {
        return MachineDataInfo.StaticConfig.SPARC_32_SUNOS; }
      if (Platform.CPUType.PPC == paramCPUType) {
        return MachineDataInfo.StaticConfig.PPC_32_UNIX;
      }
      return MachineDataInfo.StaticConfig.X86_32_UNIX;
    }
    
    if (paramOSType == Platform.OSType.WINDOWS) {
      return MachineDataInfo.StaticConfig.X86_64_WINDOWS;
    }
    
    return MachineDataInfo.StaticConfig.LP64_UNIX;
  }
  
  private static MachineDataInfo getRuntimeImpl()
  {
    try {
      
    }
    catch (UnsatisfiedLinkError localUnsatisfiedLinkError) {
      return null;
    }
    
    int i = getPointerSizeInBytesImpl();
    switch (i) {
    case 4: 
    case 8: 
      break;
    default: 
      throw new RuntimeException("Unsupported pointer size " + i + "bytes, please implement.");
    }
    
    long l = getPageSizeInBytesImpl();
    if (2147483647L < l) {
      throw new InternalError("PageSize exceeds integer value: " + l);
    }
    












    return new MachineDataInfo(true, getSizeOfIntImpl(), getSizeOfLongImpl(), getSizeOfFloatImpl(), getSizeOfDoubleImpl(), getSizeOfLongDoubleImpl(), i, (int)l, getAlignmentInt8Impl(), getAlignmentInt16Impl(), getAlignmentInt32Impl(), getAlignmentInt64Impl(), getAlignmentIntImpl(), getAlignmentLongImpl(), getAlignmentFloatImpl(), getAlignmentDoubleImpl(), getAlignmentLongDoubleImpl(), getAlignmentPointerImpl());
  }
  
  private static native int getPointerSizeInBytesImpl();
  
  private static native long getPageSizeInBytesImpl();
  
  private static native int getAlignmentInt8Impl();
  
  private static native int getAlignmentInt16Impl();
  
  private static native int getAlignmentInt32Impl();
  
  private static native int getAlignmentInt64Impl();
  
  private static native int getAlignmentIntImpl();
  
  private static native int getAlignmentLongImpl();
  
  private static native int getAlignmentPointerImpl();
  
  private static native int getAlignmentFloatImpl();
  
  private static native int getAlignmentDoubleImpl();
  
  private static native int getAlignmentLongDoubleImpl();
  
  private static native int getSizeOfIntImpl();
  
  private static native int getSizeOfLongImpl();
  
  private static native int getSizeOfPointerImpl();
  
  private static native int getSizeOfFloatImpl();
  
  private static native int getSizeOfDoubleImpl();
  
  private static native int getSizeOfLongDoubleImpl();
}
