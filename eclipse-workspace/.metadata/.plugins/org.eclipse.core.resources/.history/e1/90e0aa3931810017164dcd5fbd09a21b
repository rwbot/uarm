package processing.awt;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Composite;
import java.awt.CompositeContext;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Paint;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.font.TextAttribute;
import java.awt.geom.AffineTransform;
import java.awt.geom.Arc2D.Float;
import java.awt.geom.Ellipse2D.Float;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D.Float;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.Rectangle2D.Float;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.Raster;
import java.awt.image.SampleModel;
import java.awt.image.VolatileImage;
import java.awt.image.WritableRaster;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import processing.core.PApplet;
import processing.core.PFont;
import processing.core.PGraphics;
import processing.core.PImage;
import processing.core.PMatrix;
import processing.core.PMatrix2D;
import processing.core.PMatrix3D;
import processing.core.PShape;
import processing.core.PSurface;

























public class PGraphicsJava2D
  extends PGraphics
{
  public Graphics2D g2;
  Composite defaultComposite;
  GeneralPath gpath;
  GeneralPath auxPath;
  boolean openContour;
  boolean breakShape;
  float[] curveCoordX;
  float[] curveCoordY;
  float[] curveDrawX;
  float[] curveDrawY;
  int transformCount;
  AffineTransform[] transformStack = new AffineTransform[32];
  double[] transform = new double[6];
  
  Line2D.Float line = new Line2D.Float();
  Ellipse2D.Float ellipse = new Ellipse2D.Float();
  Rectangle2D.Float rect = new Rectangle2D.Float();
  Arc2D.Float arc = new Arc2D.Float();
  











  protected Color tintColorObject;
  











  protected Color fillColorObject;
  











  public boolean fillGradient;
  











  public Paint fillGradientObject;
  











  protected Stroke strokeObject;
  











  protected Color strokeColorObject;
  











  public boolean strokeGradient;
  











  public Paint strokeGradientObject;
  











  Font fontObject;
  











  int[] clearPixels;
  












  public PGraphicsJava2D() {}
  












  public PSurface createSurface()
  {
    return this.surface = new PSurfaceAWT(this);
  }
  





  public Image getImage()
  {
    return image;
  }
  


  public Object getNative()
  {
    return g2;
  }
  























  public Graphics2D checkImage()
  {
    if ((image == null) || 
      (((BufferedImage)image).getWidth() != width * pixelDensity) || 
      (((BufferedImage)image).getHeight() != height * pixelDensity))
    {




      GraphicsConfiguration gc = null;
      if (surface != null) {
        Component comp = null;
        if (comp == null)
        {
          comp = parent.frame;
        }
        if (comp != null) {
          gc = comp.getGraphicsConfiguration();
        }
      }
      
      if (gc == null)
      {
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        gc = ge.getDefaultScreenDevice().getDefaultConfiguration();
      }
      


      int wide = width * pixelDensity;
      int high = height * pixelDensity;
      
      image = gc.createCompatibleImage(wide, high, 3);
    }
    

    return (Graphics2D)image.getGraphics();
  }
  

  public void beginDraw()
  {
    g2 = checkImage();
    



    if (strokeObject != null) {
      g2.setStroke(strokeObject);
    }
    
    if (fontObject != null) {
      g2.setFont(fontObject);
    }
    
    if (blendMode != 0) {
      blendMode(blendMode);
    }
    handleSmooth();
    





















































    checkSettings();
    resetMatrix();
    vertexCount = 0;
    
    g2.scale(pixelDensity, pixelDensity);
  }
  




  protected void handleSmooth()
  {
    if (smooth == 0) {
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
        RenderingHints.VALUE_ANTIALIAS_OFF);
      g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, 
        RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
      g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, 
        RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
    }
    else {
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
        RenderingHints.VALUE_ANTIALIAS_ON);
      
      if ((smooth == 1) || (smooth == 3)) {
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, 
          RenderingHints.VALUE_INTERPOLATION_BICUBIC);
      } else if (smooth == 2) {
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, 
          RenderingHints.VALUE_INTERPOLATION_BILINEAR);
      }
      



      g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, 
        RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
      

      g2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, 
        RenderingHints.VALUE_FRACTIONALMETRICS_ON);
    }
  }
  












  public void endDraw()
  {
    if (!primaryGraphics)
    {






























      loadPixels();
    }
    









    setModified();
    
    g2.dispose();
  }
  

































































  protected void defaultSettings()
  {
    defaultComposite = g2.getComposite();
    
    super.defaultSettings();
  }
  











  public void hint(int which)
  {
    super.hint(which);
    




    if (which == 9) {
      g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, 
        RenderingHints.VALUE_STROKE_PURE);
    } else if (which == -9) {
      g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, 
        RenderingHints.VALUE_STROKE_DEFAULT);
    }
  }
  







  protected PShape createShapeFamily(int type)
  {
    return new PShape(this, type);
  }
  

  protected PShape createShapePrimitive(int kind, float... p)
  {
    return new PShape(this, kind, p);
  }
  










































































































  public void beginShape(int kind)
  {
    shape = kind;
    vertexCount = 0;
    curveVertexCount = 0;
    





    gpath = null;
    auxPath = null;
  }
  










  public void texture(PImage image)
  {
    showMethodWarning("texture");
  }
  

  public void vertex(float x, float y)
  {
    curveVertexCount = 0;
    

    if (vertexCount == vertices.length) {
      float[][] temp = new float[vertexCount << 1][37];
      System.arraycopy(vertices, 0, temp, 0, vertexCount);
      vertices = temp;
    }
    


    vertices[vertexCount][0] = x;
    vertices[vertexCount][1] = y;
    vertexCount += 1;
    
    switch (shape)
    {
    case 3: 
      point(x, y);
      break;
    
    case 5: 
      if (vertexCount % 2 == 0) {
        line(vertices[(vertexCount - 2)][0], 
          vertices[(vertexCount - 2)][1], x, y);
      }
      break;
    
    case 9: 
      if (vertexCount % 3 == 0) {
        triangle(vertices[(vertexCount - 3)][0], 
          vertices[(vertexCount - 3)][1], 
          vertices[(vertexCount - 2)][0], 
          vertices[(vertexCount - 2)][1], 
          x, y);
      }
      break;
    
    case 10: 
      if (vertexCount >= 3) {
        triangle(vertices[(vertexCount - 2)][0], 
          vertices[(vertexCount - 2)][1], 
          vertices[(vertexCount - 1)][0], 
          vertices[(vertexCount - 1)][1], 
          vertices[(vertexCount - 3)][0], 
          vertices[(vertexCount - 3)][1]);
      }
      break;
    
    case 11: 
      if (vertexCount >= 3)
      {







        triangle(vertices[0][0], 
          vertices[0][1], 
          vertices[(vertexCount - 2)][0], 
          vertices[(vertexCount - 2)][1], 
          x, y);
      }
      break;
    
    case 16: 
    case 17: 
      if (vertexCount % 4 == 0) {
        quad(vertices[(vertexCount - 4)][0], 
          vertices[(vertexCount - 4)][1], 
          vertices[(vertexCount - 3)][0], 
          vertices[(vertexCount - 3)][1], 
          vertices[(vertexCount - 2)][0], 
          vertices[(vertexCount - 2)][1], 
          x, y);
      }
      break;
    



    case 18: 
      if ((vertexCount >= 4) && (vertexCount % 2 == 0)) {
        quad(vertices[(vertexCount - 4)][0], 
          vertices[(vertexCount - 4)][1], 
          vertices[(vertexCount - 2)][0], 
          vertices[(vertexCount - 2)][1], 
          x, y, 
          vertices[(vertexCount - 3)][0], 
          vertices[(vertexCount - 3)][1]);
      }
      break;
    
    case 20: 
      if (gpath == null) {
        gpath = new GeneralPath();
        gpath.moveTo(x, y);
      } else if (breakShape) {
        gpath.moveTo(x, y);
        breakShape = false;
      } else {
        gpath.lineTo(x, y);
      }
      break;
    }
    
  }
  
  public void vertex(float x, float y, float z)
  {
    showDepthWarningXYZ("vertex");
  }
  
  public void vertex(float[] v)
  {
    vertex(v[0], v[1]);
  }
  

  public void vertex(float x, float y, float u, float v)
  {
    showVariationWarning("vertex(x, y, u, v)");
  }
  

  public void vertex(float x, float y, float z, float u, float v)
  {
    showDepthWarningXYZ("vertex");
  }
  

  public void beginContour()
  {
    if (openContour) {
      PGraphics.showWarning("Already called beginContour()");
      return;
    }
    

    GeneralPath contourPath = auxPath;
    auxPath = gpath;
    gpath = contourPath;
    
    if (contourPath != null) {
      breakShape = true;
    }
    
    openContour = true;
  }
  

  public void endContour()
  {
    if (!openContour) {
      PGraphics.showWarning("Need to call beginContour() first");
      return;
    }
    

    if (gpath != null) { gpath.closePath();
    }
    
    GeneralPath contourPath = gpath;
    gpath = auxPath;
    auxPath = contourPath;
    
    openContour = false;
  }
  

  public void endShape(int mode)
  {
    if (openContour) {
      endContour();
      PGraphics.showWarning("Missing endContour() before endShape()");
    }
    if ((gpath != null) && 
      (shape == 20)) {
      if (mode == 2) {
        gpath.closePath();
      }
      if (auxPath != null) {
        gpath.append(auxPath, false);
      }
      drawShape(gpath);
    }
    
    shape = 0;
  }
  





  protected void clipImpl(float x1, float y1, float x2, float y2)
  {
    g2.setClip(new Rectangle2D.Float(x1, y1, x2 - x1, y2 - y1));
  }
  

  public void noClip()
  {
    g2.setClip(null);
  }
  
















  protected void blendModeImpl()
  {
    if (blendMode == 1) {
      g2.setComposite(defaultComposite);
    }
    else {
      g2.setComposite(new Composite()
      {

        public CompositeContext createContext(ColorModel srcColorModel, ColorModel dstColorModel, RenderingHints hints)
        {

          return new PGraphicsJava2D.BlendingContext(blendMode, null);
        }
      });
    }
  }
  

  private static final class BlendingContext
    implements CompositeContext
  {
    private int mode;
    
    private BlendingContext(int mode)
    {
      this.mode = mode;
    }
    
    public void dispose() {}
    
    public void compose(Raster src, Raster dstIn, WritableRaster dstOut)
    {
      if ((src.getSampleModel().getDataType() != 3) || 
        (dstIn.getSampleModel().getDataType() != 3) || 
        (dstOut.getSampleModel().getDataType() != 3)) {
        throw new IllegalStateException("Source and destination must store pixels as INT.");
      }
      
      int width = Math.min(src.getWidth(), dstIn.getWidth());
      int height = Math.min(src.getHeight(), dstIn.getHeight());
      
      int[] srcPixels = new int[width];
      int[] dstPixels = new int[width];
      
      for (int y = 0; y < height; y++) {
        src.getDataElements(0, y, width, 1, srcPixels);
        dstIn.getDataElements(0, y, width, 1, dstPixels);
        for (int x = 0; x < width; x++) {
          dstPixels[x] = PGraphicsJava2D.blendColor(dstPixels[x], srcPixels[x], mode);
        }
        dstOut.setDataElements(0, y, width, 1, dstPixels);
      }
    }
  }
  









  public void bezierVertex(float x1, float y1, float x2, float y2, float x3, float y3)
  {
    bezierVertexCheck();
    gpath.curveTo(x1, y1, x2, y2, x3, y3);
  }
  



  public void bezierVertex(float x2, float y2, float z2, float x3, float y3, float z3, float x4, float y4, float z4)
  {
    showDepthWarningXYZ("bezierVertex");
  }
  








  public void quadraticVertex(float ctrlX, float ctrlY, float endX, float endY)
  {
    bezierVertexCheck();
    Point2D cur = gpath.getCurrentPoint();
    
    float x1 = (float)cur.getX();
    float y1 = (float)cur.getY();
    
    bezierVertex(x1 + (ctrlX - x1) * 2.0F / 3.0F, y1 + (ctrlY - y1) * 2.0F / 3.0F, 
      endX + (ctrlX - endX) * 2.0F / 3.0F, endY + (ctrlY - endY) * 2.0F / 3.0F, 
      endX, endY);
  }
  


  public void quadraticVertex(float x2, float y2, float z2, float x4, float y4, float z4)
  {
    showDepthWarningXYZ("quadVertex");
  }
  







  protected void curveVertexCheck()
  {
    super.curveVertexCheck();
    
    if (curveCoordX == null) {
      curveCoordX = new float[4];
      curveCoordY = new float[4];
      curveDrawX = new float[4];
      curveDrawY = new float[4];
    }
  }
  




  protected void curveVertexSegment(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4)
  {
    curveCoordX[0] = x1;
    curveCoordY[0] = y1;
    
    curveCoordX[1] = x2;
    curveCoordY[1] = y2;
    
    curveCoordX[2] = x3;
    curveCoordY[2] = y3;
    
    curveCoordX[3] = x4;
    curveCoordY[3] = y4;
    
    curveToBezierMatrix.mult(curveCoordX, curveDrawX);
    curveToBezierMatrix.mult(curveCoordY, curveDrawY);
    


    if (gpath == null) {
      gpath = new GeneralPath();
      gpath.moveTo(curveDrawX[0], curveDrawY[0]);
    }
    
    gpath.curveTo(curveDrawX[1], curveDrawY[1], 
      curveDrawX[2], curveDrawY[2], 
      curveDrawX[3], curveDrawY[3]);
  }
  

  public void curveVertex(float x, float y, float z)
  {
    showDepthWarningXYZ("curveVertex");
  }
  
















  public void point(float x, float y)
  {
    if (stroke)
    {
      line(x, y, x + 1.0E-4F, y + 1.0E-4F);
    }
  }
  




  public void line(float x1, float y1, float x2, float y2)
  {
    line.setLine(x1, y1, x2, y2);
    strokeShape(line);
  }
  


  public void triangle(float x1, float y1, float x2, float y2, float x3, float y3)
  {
    gpath = new GeneralPath();
    gpath.moveTo(x1, y1);
    gpath.lineTo(x2, y2);
    gpath.lineTo(x3, y3);
    gpath.closePath();
    drawShape(gpath);
  }
  


  public void quad(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4)
  {
    GeneralPath gp = new GeneralPath();
    gp.moveTo(x1, y1);
    gp.lineTo(x2, y2);
    gp.lineTo(x3, y3);
    gp.lineTo(x4, y4);
    gp.closePath();
    drawShape(gp);
  }
  













  protected void rectImpl(float x1, float y1, float x2, float y2)
  {
    rect.setFrame(x1, y1, x2 - x1, y2 - y1);
    drawShape(rect);
  }
  













  protected void ellipseImpl(float x, float y, float w, float h)
  {
    ellipse.setFrame(x, y, w, h);
    drawShape(ellipse);
  }
  















  protected void arcImpl(float x, float y, float w, float h, float start, float stop, int mode)
  {
    start = -start * 57.295776F;
    stop = -stop * 57.295776F;
    










    float sweep = stop - start;
    


    int fillMode = 2;
    int strokeMode = 0;
    
    if (mode == 1) {
      fillMode = 0;

    }
    else if (mode == 3)
    {
      strokeMode = 2;
    }
    else if (mode == 2) {
      fillMode = 1;
      strokeMode = 1;
    }
    
    if (fill)
    {
      arc.setArc(x, y, w, h, start, sweep, fillMode);
      fillShape(arc);
    }
    if (stroke)
    {
      arc.setArc(x, y, w, h, start, sweep, strokeMode);
      strokeShape(arc);
    }
  }
  






  protected void fillShape(Shape s)
  {
    if (fillGradient) {
      g2.setPaint(fillGradientObject);
      g2.fill(s);
    } else if (fill) {
      g2.setColor(fillColorObject);
      g2.fill(s);
    }
  }
  
  protected void strokeShape(Shape s)
  {
    if (strokeGradient) {
      g2.setPaint(strokeGradientObject);
      g2.draw(s);
    } else if (stroke) {
      g2.setColor(strokeColorObject);
      g2.draw(s);
    }
  }
  
  protected void drawShape(Shape s)
  {
    if (fillGradient) {
      g2.setPaint(fillGradientObject);
      g2.fill(s);
    } else if (fill) {
      g2.setColor(fillColorObject);
      g2.fill(s);
    }
    if (strokeGradient) {
      g2.setPaint(strokeGradientObject);
      g2.draw(s);
    } else if (stroke) {
      g2.setColor(strokeColorObject);
      g2.draw(s);
    }
  }
  










  public void box(float w, float h, float d)
  {
    showMethodWarning("box");
  }
  













  public void sphere(float r)
  {
    showMethodWarning("sphere");
  }
  























































  public void bezierDetail(int detail) {}
  






















































  public void curveDetail(int detail) {}
  






















































  protected void imageImpl(PImage who, float x1, float y1, float x2, float y2, int u1, int v1, int u2, int v2)
  {
    if ((width <= 0) || (height <= 0)) { return;
    }
    ImageCache cash = (ImageCache)getCache(who);
    

    if ((cash != null) && (
      (width != image.getWidth()) || 
      (height != image.getHeight()))) {
      cash = null;
    }
    

    if (cash == null)
    {
      cash = new ImageCache();
      setCache(who, cash);
      who.updatePixels();
      who.setModified();
    }
    


    if (((tint) && (!tinted)) || 
      ((tint) && (tintedColor != tintColor)) || (
      (!tint) && (tinted)))
    {
      who.updatePixels();
    }
    
    if (who.isModified()) {
      if (pixels == null)
      {


        pixels = new int[width * height];
      }
      cash.update(who, tint, tintColor);
      who.setModified(false);
    }
    
    g2.drawImage(getCacheimage, 
      (int)x1, (int)y1, (int)x2, (int)y2, 
      u1, v1, u2, v2, null);
  }
  






  static class ImageCache
  {
    boolean tinted;
    





    int tintedColor;
    





    int[] tintedTemp;
    





    BufferedImage image;
    






    ImageCache() {}
    





    public void update(PImage source, boolean tint, int tintColor)
    {
      int targetType = 2;
      boolean opaque = (tintColor & 0xFF000000) == -16777216;
      if ((format == 1) && (
        (!tint) || ((tint) && (opaque))))
      {
        targetType = 1;
      }
      







      if (image == null) {
        image = new BufferedImage(width, height, 
          2);
      }
      
      WritableRaster wr = image.getRaster();
      if (tint) {
        if ((tintedTemp == null) || (tintedTemp.length != width)) {
          tintedTemp = new int[width];
        }
        int a2 = tintColor >> 24 & 0xFF;
        

        int r2 = tintColor >> 16 & 0xFF;
        int g2 = tintColor >> 8 & 0xFF;
        int b2 = tintColor & 0xFF;
        

        if (targetType == 1)
        {

          int index = 0;
          for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
              int argb1 = pixels[(index++)];
              int r1 = argb1 >> 16 & 0xFF;
              int g1 = argb1 >> 8 & 0xFF;
              int b1 = argb1 & 0xFF;
              



              tintedTemp[x] = 
              

                (0xFF000000 | (r2 * r1 & 0xFF00) << 8 | g2 * g1 & 0xFF00 | (b2 * b1 & 0xFF00) >> 8);
            }
            wr.setDataElements(0, y, width, 1, tintedTemp);


          }
          



        }
        else if (targetType == 2) {
          if ((format == 1) && 
            ((tintColor & 0xFFFFFF) == 16777215)) {
            int hi = tintColor & 0xFF000000;
            int index = 0;
            for (int y = 0; y < height; y++) {
              for (int x = 0; x < width; x++) {
                tintedTemp[x] = (hi | pixels[(index++)] & 0xFFFFFF);
              }
              wr.setDataElements(0, y, width, 1, tintedTemp);
            }
          } else {
            int index = 0;
            for (int y = 0; y < height; y++) {
              if (format == 1) {
                int alpha = tintColor & 0xFF000000;
                for (int x = 0; x < width; x++) {
                  int argb1 = pixels[(index++)];
                  int r1 = argb1 >> 16 & 0xFF;
                  int g1 = argb1 >> 8 & 0xFF;
                  int b1 = argb1 & 0xFF;
                  tintedTemp[x] = 
                  

                    (alpha | (r2 * r1 & 0xFF00) << 8 | g2 * g1 & 0xFF00 | (b2 * b1 & 0xFF00) >> 8);
                }
              } else if (format == 2) {
                for (int x = 0; x < width; x++) {
                  int argb1 = pixels[(index++)];
                  int a1 = argb1 >> 24 & 0xFF;
                  int r1 = argb1 >> 16 & 0xFF;
                  int g1 = argb1 >> 8 & 0xFF;
                  int b1 = argb1 & 0xFF;
                  tintedTemp[x] = 
                    ((a2 * a1 & 0xFF00) << 16 | 
                    (r2 * r1 & 0xFF00) << 8 | 
                    g2 * g1 & 0xFF00 | 
                    (b2 * b1 & 0xFF00) >> 8);
                }
              } else if (format == 4) {
                int lower = tintColor & 0xFFFFFF;
                for (int x = 0; x < width; x++) {
                  int a1 = pixels[(index++)];
                  tintedTemp[x] = 
                    ((a2 * a1 & 0xFF00) << 16 | lower);
                }
              }
              wr.setDataElements(0, y, width, 1, tintedTemp);
            }
            
          }
          
        }
        
      }
      else
      {
        if ((targetType == 1) && (pixels[0] >> 24 == 0))
        {

          source.filter(14);
        }
        




        wr.setDataElements(0, 0, width, height, pixels);
      }
      tinted = tint;
      tintedColor = tintColor;
    }
  }
  




































  public PShape loadShape(String filename, String options)
  {
    String extension = PApplet.getExtension(filename);
    if ((extension.equals("svg")) || (extension.equals("svgz"))) {
      return new PShapeJava2D(parent.loadXML(filename));
    }
    PGraphics.showWarning("Unsupported format: " + filename);
    return null;
  }
  













  public float textAscent()
  {
    if (textFont == null) {
      defaultFontOrDeath("textAscent");
    }
    
    Font font = (Font)textFont.getNative();
    if (font != null)
    {
      return g2.getFontMetrics(font).getAscent();
    }
    return super.textAscent();
  }
  

  public float textDescent()
  {
    if (textFont == null) {
      defaultFontOrDeath("textDescent");
    }
    Font font = (Font)textFont.getNative();
    if (font != null)
    {
      return g2.getFontMetrics(font).getDescent();
    }
    return super.textDescent();
  }
  













  protected boolean textModeCheck(int mode)
  {
    return mode == 4;
  }
  













  protected void handleTextSize(float size)
  {
    Font font = (Font)textFont.getNative();
    
    if (font != null) {
      Map<TextAttribute, Object> map = 
        new HashMap();
      map.put(TextAttribute.SIZE, Float.valueOf(size));
      map.put(TextAttribute.KERNING, 
        TextAttribute.KERNING_ON);
      

      font = font.deriveFont(map);
      g2.setFont(font);
      textFont.setNative(font);
      fontObject = font;
    }
    











    super.handleTextSize(size);
  }
  







  protected float textWidthImpl(char[] buffer, int start, int stop)
  {
    if (textFont == null) {
      defaultFontOrDeath("textWidth");
    }
    
    if (start == stop) {
      return 0.0F;
    }
    
    Font font = (Font)textFont.getNative();
    

    if (font != null)
    {



      FontMetrics metrics = g2.getFontMetrics(font);
      














      return 
        (float)metrics.getStringBounds(buffer, start, stop, g2).getWidth();
    }
    
    return super.textWidthImpl(buffer, start, stop);
  }
  





























  protected void textLineImpl(char[] buffer, int start, int stop, float x, float y)
  {
    Font font = (Font)textFont.getNative();
    
    if (font != null)
    {














      Object antialias = 
        g2.getRenderingHint(RenderingHints.KEY_ANTIALIASING);
      if (antialias == null)
      {
        antialias = RenderingHints.VALUE_ANTIALIAS_DEFAULT;
      }
      



      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
        textFont.isSmooth() ? 
        RenderingHints.VALUE_ANTIALIAS_ON : 
        RenderingHints.VALUE_ANTIALIAS_OFF);
      
      g2.setColor(fillColorObject);
      
      int length = stop - start;
      if (length != 0) {
        g2.drawChars(buffer, start, length, (int)(x + 0.5F), (int)(y + 0.5F));
      }
      













      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, antialias);
    }
    else {
      super.textLineImpl(buffer, start, stop, x, y);
    }
  }
  
















































  public void pushMatrix()
  {
    if (transformCount == transformStack.length) {
      throw new RuntimeException("pushMatrix() cannot use push more than " + 
        transformStack.length + " times");
    }
    transformStack[transformCount] = g2.getTransform();
    transformCount += 1;
  }
  

  public void popMatrix()
  {
    if (transformCount == 0) {
      throw new RuntimeException("missing a pushMatrix() to go with that popMatrix()");
    }
    
    transformCount -= 1;
    g2.setTransform(transformStack[transformCount]);
  }
  







  public void translate(float tx, float ty)
  {
    g2.translate(tx, ty);
  }
  




  public void rotate(float angle)
  {
    g2.rotate(angle);
  }
  

  public void rotateX(float angle)
  {
    showDepthWarning("rotateX");
  }
  

  public void rotateY(float angle)
  {
    showDepthWarning("rotateY");
  }
  

  public void rotateZ(float angle)
  {
    showDepthWarning("rotateZ");
  }
  

  public void rotate(float angle, float vx, float vy, float vz)
  {
    showVariationWarning("rotate");
  }
  

  public void scale(float s)
  {
    g2.scale(s, s);
  }
  

  public void scale(float sx, float sy)
  {
    g2.scale(sx, sy);
  }
  

  public void scale(float sx, float sy, float sz)
  {
    showDepthWarningXYZ("scale");
  }
  

  public void shearX(float angle)
  {
    g2.shear(Math.tan(angle), 0.0D);
  }
  

  public void shearY(float angle)
  {
    g2.shear(0.0D, Math.tan(angle));
  }
  







  public void resetMatrix()
  {
    g2.setTransform(new AffineTransform());
  }
  







  public void applyMatrix(float n00, float n01, float n02, float n10, float n11, float n12)
  {
    g2.transform(new AffineTransform(n00, n10, n01, n11, n02, n12));
  }
  








  public void applyMatrix(float n00, float n01, float n02, float n03, float n10, float n11, float n12, float n13, float n20, float n21, float n22, float n23, float n30, float n31, float n32, float n33)
  {
    showVariationWarning("applyMatrix");
  }
  







  public PMatrix getMatrix()
  {
    return getMatrix(null);
  }
  

  public PMatrix2D getMatrix(PMatrix2D target)
  {
    if (target == null) {
      target = new PMatrix2D();
    }
    g2.getTransform().getMatrix(transform);
    target.set((float)transform[0], (float)transform[2], (float)transform[4], 
      (float)transform[1], (float)transform[3], (float)transform[5]);
    return target;
  }
  

  public PMatrix3D getMatrix(PMatrix3D target)
  {
    showVariationWarning("getMatrix");
    return target;
  }
  




  public void setMatrix(PMatrix2D source)
  {
    g2.setTransform(new AffineTransform(m00, m10, 
      m01, m11, 
      m02, m12));
  }
  

  public void setMatrix(PMatrix3D source)
  {
    showVariationWarning("setMatrix");
  }
  

  public void printMatrix()
  {
    getMatrix(null).print();
  }
  



































  public float screenX(float x, float y)
  {
    g2.getTransform().getMatrix(transform);
    return (float)transform[0] * x + (float)transform[2] * y + (float)transform[4];
  }
  

  public float screenY(float x, float y)
  {
    g2.getTransform().getMatrix(transform);
    return (float)transform[1] * x + (float)transform[3] * y + (float)transform[5];
  }
  

  public float screenX(float x, float y, float z)
  {
    showDepthWarningXYZ("screenX");
    return 0.0F;
  }
  

  public float screenY(float x, float y, float z)
  {
    showDepthWarningXYZ("screenY");
    return 0.0F;
  }
  

  public float screenZ(float x, float y, float z)
  {
    showDepthWarningXYZ("screenZ");
    return 0.0F;
  }
  
























  public void strokeCap(int cap)
  {
    super.strokeCap(cap);
    strokeImpl();
  }
  

  public void strokeJoin(int join)
  {
    super.strokeJoin(join);
    strokeImpl();
  }
  

  public void strokeWeight(float weight)
  {
    super.strokeWeight(weight);
    strokeImpl();
  }
  
  protected void strokeImpl()
  {
    int cap = 0;
    if (strokeCap == 2) {
      cap = 1;
    } else if (strokeCap == 4) {
      cap = 2;
    }
    
    int join = 2;
    if (strokeJoin == 8) {
      join = 0;
    } else if (strokeJoin == 2) {
      join = 1;
    }
    
    strokeObject = new BasicStroke(strokeWeight, cap, join);
    g2.setStroke(strokeObject);
  }
  









  protected void strokeFromCalc()
  {
    super.strokeFromCalc();
    strokeColorObject = new Color(strokeColor, true);
    strokeGradient = false;
  }
  









  protected void tintFromCalc()
  {
    super.tintFromCalc();
    
    tintColorObject = new Color(tintColor, true);
  }
  









  protected void fillFromCalc()
  {
    super.fillFromCalc();
    fillColorObject = new Color(fillColor, true);
    fillGradient = false;
  }
  























































  protected void clearPixels(int color)
  {
    int imageWidth = image.getWidth(null);
    int imageHeight = image.getHeight(null);
    








    WritableRaster raster = getRaster();
    if ((clearPixels == null) || (clearPixels.length < imageWidth)) {
      clearPixels = new int[imageWidth];
    }
    Arrays.fill(clearPixels, 0, imageWidth, backgroundColor);
    for (int i = 0; i < imageHeight; i++) {
      raster.setDataElements(0, i, imageWidth, 1, clearPixels);
    }
  }
  







  public void backgroundImpl()
  {
    if (backgroundAlpha) {
      clearPixels(backgroundColor);
    }
    else {
      Color bgColor = new Color(backgroundColor);
      







      Composite oldComposite = g2.getComposite();
      g2.setComposite(defaultComposite);
      
      pushMatrix();
      resetMatrix();
      g2.setColor(bgColor);
      

      if (image != null)
      {
        g2.fillRect(0, 0, image.getWidth(null), image.getHeight(null));
      }
      else {
        g2.fillRect(0, 0, width, height);
      }
      popMatrix();
      
      g2.setComposite(oldComposite);
    }
  }
  
















































  public void beginRaw(PGraphics recorderRaw)
  {
    showMethodWarning("beginRaw");
  }
  

  public void endRaw()
  {
    showMethodWarning("endRaw");
  }
  
































  protected WritableRaster getRaster()
  {
    WritableRaster raster = null;
    if (primaryGraphics)
    {



      if ((image instanceof VolatileImage))
      {
        raster = ((VolatileImage)image).getSnapshot().getRaster();
      }
    }
    if (raster == null) {
      raster = ((BufferedImage)image).getRaster();
    }
    







    if (raster.getTransferType() != 3) {
      System.err.println("See https://github.com/processing/processing/issues/2010");
      throw new RuntimeException("Pixel operations are not supported on this device.");
    }
    return raster;
  }
  

  public void loadPixels()
  {
    if ((pixels == null) || (pixels.length != pixelWidth * pixelHeight)) {
      pixels = new int[pixelWidth * pixelHeight];
    }
    
    WritableRaster raster = getRaster();
    raster.getDataElements(0, 0, pixelWidth, pixelHeight, pixels);
    if (raster.getNumBands() == 3)
    {

      for (int i = 0; i < pixels.length; i++) {
        pixels[i] = (0xFF000000 | pixels[i]);
      }
    }
  }
  



























  public void updatePixels(int x, int y, int c, int d)
  {
    if ((x != 0) || (y != 0) || (c != pixelWidth) || (d != pixelHeight))
    {
      showVariationWarning("updatePixels(x, y, w, h)");
    }
    

    if (pixels != null) {
      getRaster().setDataElements(0, 0, pixelWidth, pixelHeight, pixels);
    }
    modified = true;
  }
  



















  static int[] getset = new int[1];
  static final String MASK_WARNING = "mask() cannot be used on the main drawing surface";
  
  public int get(int x, int y)
  {
    if ((x < 0) || (y < 0) || (x >= width) || (y >= height)) { return 0;
    }
    
    WritableRaster raster = getRaster();
    raster.getDataElements(x, y, getset);
    if (raster.getNumBands() == 3)
    {
      return getset[0] | 0xFF000000;
    }
    return getset[0];
  }
  




  public PImage get()
  {
    return get(0, 0, width, height);
  }
  







  protected void getImpl(int sourceX, int sourceY, int sourceWidth, int sourceHeight, PImage target, int targetX, int targetY)
  {
    WritableRaster raster = getRaster();
    
    if ((sourceWidth == width) && (sourceHeight == height)) {
      raster.getDataElements(sourceX, sourceY, sourceWidth, sourceHeight, pixels);
      
      if (raster.getNumBands() == 3) {
        target.filter(14);
      }
    }
    else
    {
      int[] temp = new int[sourceWidth * sourceHeight];
      raster.getDataElements(sourceX, sourceY, sourceWidth, sourceHeight, temp);
      

      int sourceOffset = 0;
      int targetOffset = targetY * width + targetX;
      for (int y = 0; y < sourceHeight; y++) {
        if (raster.getNumBands() == 3) {
          for (int i = 0; i < sourceWidth; i++)
          {

            pixels[(targetOffset + i)] = (0xFF000000 | temp[(sourceOffset + i)]);
          }
        } else {
          System.arraycopy(temp, sourceOffset, pixels, targetOffset, sourceWidth);
        }
        sourceOffset += sourceWidth;
        targetOffset += width;
      }
    }
  }
  

  public void set(int x, int y, int argb)
  {
    if ((x < 0) || (y < 0) || (x >= width) || (y >= height)) { return;
    }
    getset[0] = argb;
    

    getRaster().setDataElements(x, y, getset);
  }
  







  protected void setImpl(PImage sourceImage, int sourceX, int sourceY, int sourceWidth, int sourceHeight, int targetX, int targetY)
  {
    WritableRaster raster = getRaster();
    

    if ((sourceX == 0) && (sourceY == 0) && 
      (sourceWidth == width) && 
      (sourceHeight == height))
    {


      raster.setDataElements(targetX, targetY, 
        width, height, 
        pixels);
    }
    else {
      PImage temp = sourceImage.get(sourceX, sourceY, sourceWidth, sourceHeight);
      raster.setDataElements(targetX, targetY, width, height, pixels);
    }
  }
  












  public void mask(int[] alpha)
  {
    if (primaryGraphics) {
      showWarning("mask() cannot be used on the main drawing surface");
    }
    else {
      super.mask(alpha);
    }
  }
  

  public void mask(PImage alpha)
  {
    if (primaryGraphics) {
      showWarning("mask() cannot be used on the main drawing surface");
    }
    else {
      super.mask(alpha);
    }
  }
  























  public void copy(int sx, int sy, int sw, int sh, int dx, int dy, int dw, int dh)
  {
    if ((sw != dw) || (sh != dh)) {
      g2.drawImage(image, dx, dy, dx + dw, dy + dh, sx, sy, sx + sw, sy + sh, null);
    }
    else {
      dx -= sx;
      dy -= sy;
      g2.copyArea(sx, sy, sw, sh, dx, dy);
    }
  }
  



  public void copy(PImage src, int sx, int sy, int sw, int sh, int dx, int dy, int dw, int dh)
  {
    g2.drawImage((Image)src.getNative(), 
      dx, dy, dx + dw, dy + dh, 
      sx, sy, sx + sw, sy + sh, null);
  }
}
