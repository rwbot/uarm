package jssc;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;



public class SerialNativeInterface
{
  private static final String libVersion = "2.8";
  private static final String libMinorSuffix = "0";
  public static final int OS_LINUX = 0;
  public static final int OS_WINDOWS = 1;
  public static final int OS_SOLARIS = 2;
  public static final int OS_MAC_OS_X = 3;
  private static int osType = -1;
  



  public static final long ERR_PORT_BUSY = -1L;
  


  public static final long ERR_PORT_NOT_FOUND = -2L;
  


  public static final long ERR_PERMISSION_DENIED = -3L;
  


  public static final long ERR_INCORRECT_SERIAL_PORT = -4L;
  


  public static final String PROPERTY_JSSC_NO_TIOCEXCL = "JSSC_NO_TIOCEXCL";
  


  public static final String PROPERTY_JSSC_IGNPAR = "JSSC_IGNPAR";
  


  public static final String PROPERTY_JSSC_PARMRK = "JSSC_PARMRK";
  



  static
  {
    String str3 = System.getProperty("os.name");
    String str4 = System.getProperty("os.arch");
    String str5 = System.getProperty("user.home");
    String str6 = System.getProperty("file.separator");
    String str7 = System.getProperty("java.io.tmpdir");
    

    String str8 = new File(str5).canWrite() ? str5 : str7;
    

    String str9 = System.getProperty("java.library.path");
    
    if (str3.equals("Linux")) {
      str3 = "linux";
      osType = 0;
    }
    else if (str3.startsWith("Win")) {
      str3 = "windows";
      osType = 1;
    }
    else if (str3.equals("SunOS")) {
      str3 = "solaris";
      osType = 2;
    }
    else if ((str3.equals("Mac OS X")) || (str3.equals("Darwin"))) {
      str3 = "mac_os_x";
      osType = 3;
    }
    Object localObject;
    if ((str4.equals("i386")) || (str4.equals("i686"))) {
      str4 = "x86";
    }
    else if ((str4.equals("amd64")) || (str4.equals("universal"))) {
      str4 = "x86_64";
    }
    else if (str4.equals("arm")) {
      String str10 = "sf";
      if ((str9.toLowerCase().contains("gnueabihf")) || (str9.toLowerCase().contains("armhf"))) {
        str10 = "hf";
      } else {
        try
        {
          Process localProcess = Runtime.getRuntime().exec("readelf -A /proc/self/exe");
          localObject = new BufferedReader(new InputStreamReader(localProcess.getInputStream()));
          String str12 = "";
          while (((str12 = ((BufferedReader)localObject).readLine()) != null) && (!str12.isEmpty())) {
            if (str12.toLowerCase().contains("Tag_ABI_VFP_args".toLowerCase())) {
              str10 = "hf";
            }
          }
          
          ((BufferedReader)localObject).close();
        }
        catch (Exception localException) {}
      }
      

      str4 = "arm" + str10;
    }
    
    String str1 = str8 + str6 + ".jssc" + str6 + str3;
    String str2 = "jSSC-2.8_" + str4;
    str2 = System.mapLibraryName(str2);
    
    if (str2.endsWith(".dylib")) {
      str2 = str2.replace(".dylib", ".jnilib");
    }
    
    int i = 0;
    
    if (!loadLibFromPath("jSSC-2.8"))
    {
      if (isLibFolderExist(str1)) {
        if (isLibFileExist(str1 + str6 + str2)) {
          i = 1;

        }
        else if (extractLib(str1 + str6 + str2, str3, str2)) {
          i = 1;
        }
        

      }
      else if ((new File(str1).mkdirs()) && 
        (extractLib(str1 + str6 + str2, str3, str2))) {
        i = 1;
      }
    }
    

    if (i != 0) {
      System.load(str1 + str6 + str2);
      String str11 = getLibraryBaseVersion();
      localObject = getNativeLibraryVersion();
      if (!str11.equals(localObject)) {
        System.err.println("Warning! jSSC Java and Native versions mismatch (Java: " + str11 + ", Native: " + (String)localObject + ")");
      }
    }
  }
  






  private static boolean isLibFolderExist(String paramString)
  {
    boolean bool = false;
    File localFile = new File(paramString);
    if ((localFile.exists()) && (localFile.isDirectory())) {
      bool = true;
    }
    return bool;
  }
  






  private static boolean isLibFileExist(String paramString)
  {
    boolean bool = false;
    File localFile = new File(paramString);
    if ((localFile.exists()) && (localFile.isFile())) {
      bool = true;
    }
    return bool;
  }
  








  private static boolean extractLib(String paramString1, String paramString2, String paramString3)
  {
    boolean bool = false;
    File localFile = new File(paramString1);
    InputStream localInputStream = null;
    FileOutputStream localFileOutputStream = null;
    localInputStream = SerialNativeInterface.class.getResourceAsStream("/libs/" + paramString2 + "/" + paramString3);
    if (localInputStream != null)
    {
      byte[] arrayOfByte = new byte['á€€'];
      try {
        localFileOutputStream = new FileOutputStream(paramString1);
        int i; while ((i = localInputStream.read(arrayOfByte)) != -1) {
          localFileOutputStream.write(arrayOfByte, 0, i);
        }
        localFileOutputStream.close();
        localInputStream.close();
        bool = true;
      }
      catch (Exception localException1) {
        try {
          localFileOutputStream.close();
          if (localFile.exists()) {
            localFile.delete();
          }
        }
        catch (Exception localException2) {}
        
        try
        {
          localInputStream.close();
        }
        catch (Exception localException3) {}
      }
    }
    

    return bool;
  }
  




  public static int getOsType()
  {
    return osType;
  }
  




  public static String getLibraryVersion()
  {
    return "2.8.0";
  }
  




  public static String getLibraryBaseVersion()
  {
    return "2.8";
  }
  




  public static String getLibraryMinorSuffix()
  {
    return "0";
  }
  













  public static boolean loadLibFromPath(String paramString)
  {
    try
    {
      System.loadLibrary(paramString);
      return true;
    } catch (UnsatisfiedLinkError localUnsatisfiedLinkError) {}
    return false;
  }
  
  public SerialNativeInterface() {}
  
  public static native String getNativeLibraryVersion();
  
  public native long openPort(String paramString, boolean paramBoolean);
  
  public native boolean setParams(long paramLong, int paramInt1, int paramInt2, int paramInt3, int paramInt4, boolean paramBoolean1, boolean paramBoolean2, int paramInt5);
  
  public native boolean purgePort(long paramLong, int paramInt);
  
  public native boolean closePort(long paramLong);
  
  public native boolean setEventsMask(long paramLong, int paramInt);
  
  public native int getEventsMask(long paramLong);
  
  public native int[][] waitEvents(long paramLong);
  
  public native boolean setRTS(long paramLong, boolean paramBoolean);
  
  public native boolean setDTR(long paramLong, boolean paramBoolean);
  
  public native byte[] readBytes(long paramLong, int paramInt);
  
  public native boolean writeBytes(long paramLong, byte[] paramArrayOfByte);
  
  public native int[] getBuffersBytesCount(long paramLong);
  
  public native boolean setFlowControlMode(long paramLong, int paramInt);
  
  public native int getFlowControlMode(long paramLong);
  
  public native String[] getSerialPortNames();
  
  public native int[] getLinesStatus(long paramLong);
  
  public native boolean sendBreak(long paramLong, int paramInt);
  
  public static native String[] getPortProperties(String paramString);
}
