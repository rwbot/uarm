package jogamp.opengl.x11.glx;

import com.jogamp.gluegen.runtime.opengl.GLNameResolver;
import java.lang.reflect.Field;
import java.security.AccessController;

public final class GLXExtProcAddressTable extends com.jogamp.gluegen.runtime.ProcAddressTable
{
  long _addressof_glXGetProcAddress;
  long _addressof_glXGetProcAddressARB;
  long _addressof_glXCreateContextAttribsARB;
  long _addressof_glXGetGPUIDsAMD;
  long _addressof_glXGetGPUInfoAMD;
  long _addressof_glXGetContextGPUIDAMD;
  long _addressof_glXCreateAssociatedContextAMD;
  long _addressof_glXCreateAssociatedContextAttribsAMD;
  
  public GLXExtProcAddressTable() {}
  
  public GLXExtProcAddressTable(com.jogamp.gluegen.runtime.FunctionAddressResolver paramFunctionAddressResolver)
  {
    super(paramFunctionAddressResolver);
  }
  

  long _addressof_glXDeleteAssociatedContextAMD;
  
  long _addressof_glXMakeAssociatedContextCurrentAMD;
  
  long _addressof_glXGetCurrentAssociatedContextAMD;
  
  long _addressof_glXBlitContextFramebufferAMD;
  
  long _addressof_glXGetCurrentDisplayEXT;
  
  long _addressof_glXQueryContextInfoEXT;
  long _addressof_glXGetContextIDEXT;
  long _addressof_glXImportContextEXT;
  long _addressof_glXFreeContextEXT;
  long _addressof_glXSwapIntervalEXT;
  long _addressof_glXBindTexImageEXT;
  long _addressof_glXReleaseTexImageEXT;
  long _addressof_glXGetAGPOffsetMESA;
  long _addressof_glXCopySubBufferMESA;
  long _addressof_glXQueryCurrentRendererIntegerMESA;
  long _addressof_glXQueryCurrentRendererStringMESA;
  long _addressof_glXQueryRendererIntegerMESA;
  long _addressof_glXQueryRendererStringMESA;
  long _addressof_glXReleaseBuffersMESA;
  long _addressof_glXSet3DfxModeMESA;
  long _addressof_glXCopyBufferSubDataNV;
  long _addressof_glXNamedCopyBufferSubDataNV;
  long _addressof_glXCopyImageSubDataNV;
  long _addressof_glXDelayBeforeSwapNV;
  long _addressof_glXEnumerateVideoDevicesNV;
  long _addressof_glXBindVideoDeviceNV;
  long _addressof_glXJoinSwapGroupNV;
  long _addressof_glXBindSwapBarrierNV;
  long _addressof_glXQuerySwapGroupNV;
  long _addressof_glXQueryMaxSwapGroupsNV;
  long _addressof_glXQueryFrameCountNV;
  long _addressof_glXResetFrameCountNV;
  long _addressof_glXBindVideoCaptureDeviceNV;
  long _addressof_glXEnumerateVideoCaptureDevicesNV;
  long _addressof_glXLockVideoCaptureDeviceNV;
  long _addressof_glXQueryVideoCaptureDeviceNV;
  long _addressof_glXReleaseVideoCaptureDeviceNV;
  long _addressof_glXGetVideoDeviceNV;
  long _addressof_glXReleaseVideoDeviceNV;
  long _addressof_glXBindVideoImageNV;
  long _addressof_glXReleaseVideoImageNV;
  long _addressof_glXSendPbufferToVideoNV;
  long _addressof_glXGetVideoInfoNV;
  long _addressof_glXGetSyncValuesOML;
  long _addressof_glXGetMscRateOML;
  long _addressof_glXSwapBuffersMscOML;
  long _addressof_glXWaitForMscOML;
  long _addressof_glXWaitForSbcOML;
  long _addressof_glXBindSwapBarrierSGIX;
  long _addressof_glXQueryMaxSwapBarriersSGIX;
  long _addressof_glXJoinSwapGroupSGIX;
  long _addressof_glXBindChannelToWindowSGIX;
  long _addressof_glXChannelRectSGIX;
  long _addressof_glXQueryChannelRectSGIX;
  long _addressof_glXQueryChannelDeltasSGIX;
  long _addressof_glXChannelRectSyncSGIX;
  long _addressof_glXCushionSGI;
  long _addressof_glXMakeCurrentReadSGI;
  long _addressof_glXGetCurrentReadDrawableSGI;
  long _addressof_glXSwapIntervalSGI;
  long _addressof_glXGetVideoSyncSGI;
  long _addressof_glXWaitVideoSyncSGI;
  long _addressof_glXGetTransparentIndexSUN;
  protected boolean isFunctionAvailableImpl(String paramString)
    throws IllegalArgumentException
  {
    String str1 = GLNameResolver.normalizeVEN(GLNameResolver.normalizeARB(paramString, true), true);
    final String str2 = "_addressof_" + str1;
    final int i = GLNameResolver.getFuncNamePermutationNumber(str1);
    Field localField = (Field)AccessController.doPrivileged(new java.security.PrivilegedAction() {
      public final Field run() {
        Field localField = null;
        for (int i = 0; i < i; i++) {
          String str = GLNameResolver.getFuncNamePermutation(str2, i);
          try {
            localField = GLXExtProcAddressTable.class.getDeclaredField(str);
            localField.setAccessible(true);
            return localField;
          } catch (NoSuchFieldException localNoSuchFieldException) {}
        }
        return null;
      }
    });
    if (null == localField)
    {

      throw new RuntimeException("WARNING: Address field query failed for \"" + str1 + "\"/\"" + paramString + "\"; it's either statically linked or address field is not a known " + "function");
    }
    

    try
    {
      return 0L != localField.getLong(this);
    } catch (Exception localException) {
      throw new RuntimeException("WARNING: Address query failed for \"" + str1 + "\"/\"" + paramString + "\"; it's either statically linked or is not a known " + "function", localException);
    }
  }
  

  public long getAddressFor(String paramString)
    throws SecurityException, IllegalArgumentException
  {
    com.jogamp.common.util.SecurityUtil.checkAllLinkPermission();
    String str1 = GLNameResolver.normalizeVEN(GLNameResolver.normalizeARB(paramString, true), true);
    final String str2 = "_addressof_" + str1;
    final int i = GLNameResolver.getFuncNamePermutationNumber(str1);
    Field localField = (Field)AccessController.doPrivileged(new java.security.PrivilegedAction() {
      public final Field run() {
        Field localField = null;
        for (int i = 0; i < i; i++) {
          String str = GLNameResolver.getFuncNamePermutation(str2, i);
          try {
            localField = GLXExtProcAddressTable.class.getDeclaredField(str);
            localField.setAccessible(true);
            return localField;
          } catch (NoSuchFieldException localNoSuchFieldException) {}
        }
        return null;
      }
    });
    if (null == localField)
    {

      throw new RuntimeException("WARNING: Address field query failed for \"" + str1 + "\"/\"" + paramString + "\"; it's either statically linked or address field is not a known " + "function");
    }
    

    try
    {
      return localField.getLong(this);
    } catch (Exception localException) {
      throw new RuntimeException("WARNING: Address query failed for \"" + str1 + "\"/\"" + paramString + "\"; it's either statically linked or is not a known " + "function", localException);
    }
  }
}
