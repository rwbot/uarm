package jogamp.common.util.locks;

import com.jogamp.common.util.locks.RecursiveLock;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;

public class RecursiveLockImplJava5
  implements RecursiveLock
{
  volatile Thread owner = null;
  ReentrantLock lock;
  
  public RecursiveLockImplJava5(boolean paramBoolean) {
    lock = new ReentrantLock(paramBoolean);
  }
  
  public void lock()
  {
    try {
      if (!tryLock(TIMEOUT)) {
        throw new RuntimeException("Waited " + TIMEOUT + "ms for: " + threadName(owner) + " - " + threadName(Thread.currentThread()) + ", with count " + getHoldCount() + ", lock: " + this);
      }
    } catch (InterruptedException localInterruptedException) {
      throw new RuntimeException("Interrupted", localInterruptedException);
    }
    owner = Thread.currentThread();
  }
  
  public boolean tryLock(long paramLong) throws InterruptedException
  {
    if (lock.tryLock(paramLong, TimeUnit.MILLISECONDS)) {
      owner = Thread.currentThread();
      return true;
    }
    return false;
  }
  
  public void unlock() throws RuntimeException
  {
    unlock(null);
  }
  
  public void unlock(Runnable paramRunnable)
  {
    validateLocked();
    owner = null;
    if (null != paramRunnable) {
      paramRunnable.run();
    }
    lock.unlock();
  }
  
  public boolean isLocked()
  {
    return lock.isLocked();
  }
  
  public Thread getOwner()
  {
    return owner;
  }
  
  public boolean isLockedByOtherThread()
  {
    return (lock.isLocked()) && (!lock.isHeldByCurrentThread());
  }
  
  public boolean isOwner(Thread paramThread)
  {
    return (lock.isLocked()) && (owner == paramThread);
  }
  
  public void validateLocked() throws RuntimeException
  {
    if (!lock.isHeldByCurrentThread()) {
      if (!lock.isLocked()) {
        throw new RuntimeException(Thread.currentThread() + ": Not locked");
      }
      throw new RuntimeException(Thread.currentThread() + ": Not owner, owner is " + owner);
    }
  }
  

  public int getHoldCount()
  {
    return lock.getHoldCount();
  }
  
  public int getQueueLength()
  {
    return lock.getQueueLength();
  }
  
  private String threadName(Thread paramThread) { return null != paramThread ? "<" + paramThread.getName() + ">" : "<NULL>"; }
}
