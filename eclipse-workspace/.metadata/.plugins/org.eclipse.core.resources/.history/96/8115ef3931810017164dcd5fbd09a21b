package com.jogamp.opengl.math;

import com.jogamp.common.os.Platform;
import com.jogamp.opengl.GLException;
import java.nio.FloatBuffer;
import jogamp.opengl.Debug;






































































public final class FloatUtil
{
  public static final boolean DEBUG = Debug.debug("Math");
  




  public FloatUtil() {}
  



  public static float[] makeIdentity(float[] paramArrayOfFloat, int paramInt)
  {
    paramArrayOfFloat[(paramInt + 0 + 0)] = 1.0F;
    paramArrayOfFloat[(paramInt + 1 + 0)] = 0.0F;
    paramArrayOfFloat[(paramInt + 2 + 0)] = 0.0F;
    paramArrayOfFloat[(paramInt + 3 + 0)] = 0.0F;
    
    paramArrayOfFloat[(paramInt + 0 + 4)] = 0.0F;
    paramArrayOfFloat[(paramInt + 1 + 4)] = 1.0F;
    paramArrayOfFloat[(paramInt + 2 + 4)] = 0.0F;
    paramArrayOfFloat[(paramInt + 3 + 4)] = 0.0F;
    
    paramArrayOfFloat[(paramInt + 0 + 8)] = 0.0F;
    paramArrayOfFloat[(paramInt + 1 + 8)] = 0.0F;
    paramArrayOfFloat[(paramInt + 2 + 8)] = 1.0F;
    paramArrayOfFloat[(paramInt + 3 + 8)] = 0.0F;
    
    paramArrayOfFloat[(paramInt + 0 + 12)] = 0.0F;
    paramArrayOfFloat[(paramInt + 1 + 12)] = 0.0F;
    paramArrayOfFloat[(paramInt + 2 + 12)] = 0.0F;
    paramArrayOfFloat[(paramInt + 3 + 12)] = 1.0F;
    return paramArrayOfFloat;
  }
  




  public static float[] makeIdentity(float[] paramArrayOfFloat)
  {
    paramArrayOfFloat[0] = 1.0F;
    paramArrayOfFloat[1] = 0.0F;
    paramArrayOfFloat[2] = 0.0F;
    paramArrayOfFloat[3] = 0.0F;
    
    paramArrayOfFloat[4] = 0.0F;
    paramArrayOfFloat[5] = 1.0F;
    paramArrayOfFloat[6] = 0.0F;
    paramArrayOfFloat[7] = 0.0F;
    
    paramArrayOfFloat[8] = 0.0F;
    paramArrayOfFloat[9] = 0.0F;
    paramArrayOfFloat[10] = 1.0F;
    paramArrayOfFloat[11] = 0.0F;
    
    paramArrayOfFloat[12] = 0.0F;
    paramArrayOfFloat[13] = 0.0F;
    paramArrayOfFloat[14] = 0.0F;
    paramArrayOfFloat[15] = 1.0F;
    return paramArrayOfFloat;
  }
  





















  public static float[] makeTranslation(float[] paramArrayOfFloat, int paramInt, boolean paramBoolean, float paramFloat1, float paramFloat2, float paramFloat3)
  {
    if (paramBoolean) {
      makeIdentity(paramArrayOfFloat, paramInt);
    } else {
      paramArrayOfFloat[(paramInt + 0 + 0)] = 1.0F;
      paramArrayOfFloat[(paramInt + 1 + 4)] = 1.0F;
      paramArrayOfFloat[(paramInt + 2 + 8)] = 1.0F;
      paramArrayOfFloat[(paramInt + 3 + 12)] = 1.0F;
    }
    paramArrayOfFloat[(paramInt + 0 + 12)] = paramFloat1;
    paramArrayOfFloat[(paramInt + 1 + 12)] = paramFloat2;
    paramArrayOfFloat[(paramInt + 2 + 12)] = paramFloat3;
    return paramArrayOfFloat;
  }
  




















  public static float[] makeTranslation(float[] paramArrayOfFloat, boolean paramBoolean, float paramFloat1, float paramFloat2, float paramFloat3)
  {
    if (paramBoolean) {
      makeIdentity(paramArrayOfFloat);
    } else {
      paramArrayOfFloat[0] = 1.0F;
      paramArrayOfFloat[5] = 1.0F;
      paramArrayOfFloat[10] = 1.0F;
      paramArrayOfFloat[15] = 1.0F;
    }
    paramArrayOfFloat[12] = paramFloat1;
    paramArrayOfFloat[13] = paramFloat2;
    paramArrayOfFloat[14] = paramFloat3;
    return paramArrayOfFloat;
  }
  





















  public static float[] makeScale(float[] paramArrayOfFloat, int paramInt, boolean paramBoolean, float paramFloat1, float paramFloat2, float paramFloat3)
  {
    if (paramBoolean) {
      makeIdentity(paramArrayOfFloat, paramInt);
    } else {
      paramArrayOfFloat[(paramInt + 0 + 12)] = 0.0F;
      paramArrayOfFloat[(paramInt + 1 + 12)] = 0.0F;
      paramArrayOfFloat[(paramInt + 2 + 12)] = 0.0F;
      paramArrayOfFloat[(paramInt + 3 + 12)] = 1.0F;
    }
    paramArrayOfFloat[(paramInt + 0 + 0)] = paramFloat1;
    paramArrayOfFloat[(paramInt + 1 + 4)] = paramFloat2;
    paramArrayOfFloat[(paramInt + 2 + 8)] = paramFloat3;
    return paramArrayOfFloat;
  }
  




















  public static float[] makeScale(float[] paramArrayOfFloat, boolean paramBoolean, float paramFloat1, float paramFloat2, float paramFloat3)
  {
    if (paramBoolean) {
      makeIdentity(paramArrayOfFloat);
    } else {
      paramArrayOfFloat[12] = 0.0F;
      paramArrayOfFloat[13] = 0.0F;
      paramArrayOfFloat[14] = 0.0F;
      paramArrayOfFloat[15] = 1.0F;
    }
    paramArrayOfFloat[0] = paramFloat1;
    paramArrayOfFloat[5] = paramFloat2;
    paramArrayOfFloat[10] = paramFloat3;
    return paramArrayOfFloat;
  }
  
















  public static float[] makeRotationAxis(float[] paramArrayOfFloat1, int paramInt, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, float[] paramArrayOfFloat2)
  {
    float f1 = cos(paramFloat1);
    float f2 = 1.0F - f1;
    float f3 = sin(paramFloat1);
    
    paramArrayOfFloat2[0] = paramFloat2;paramArrayOfFloat2[1] = paramFloat3;paramArrayOfFloat2[2] = paramFloat4;
    VectorUtil.normalizeVec3(paramArrayOfFloat2);
    paramFloat2 = paramArrayOfFloat2[0];paramFloat3 = paramArrayOfFloat2[1];paramFloat4 = paramArrayOfFloat2[2];
    
    float f4 = paramFloat2 * paramFloat3;
    float f5 = paramFloat2 * paramFloat4;
    float f6 = paramFloat2 * f3;
    float f7 = paramFloat3 * f3;
    float f8 = paramFloat3 * paramFloat4;
    float f9 = paramFloat4 * f3;
    paramArrayOfFloat1[(0 + paramInt)] = (paramFloat2 * paramFloat2 * f2 + f1);
    paramArrayOfFloat1[(1 + paramInt)] = (f4 * f2 + f9);
    paramArrayOfFloat1[(2 + paramInt)] = (f5 * f2 - f7);
    paramArrayOfFloat1[(3 + paramInt)] = 0.0F;
    
    paramArrayOfFloat1[(4 + paramInt)] = (f4 * f2 - f9);
    paramArrayOfFloat1[(5 + paramInt)] = (paramFloat3 * paramFloat3 * f2 + f1);
    paramArrayOfFloat1[(6 + paramInt)] = (f8 * f2 + f6);
    paramArrayOfFloat1[(7 + paramInt)] = 0.0F;
    
    paramArrayOfFloat1[(8 + paramInt)] = (f5 * f2 + f7);
    paramArrayOfFloat1[(9 + paramInt)] = (f8 * f2 - f6);
    paramArrayOfFloat1[(10 + paramInt)] = (paramFloat4 * paramFloat4 * f2 + f1);
    paramArrayOfFloat1[(11 + paramInt)] = 0.0F;
    
    paramArrayOfFloat1[(12 + paramInt)] = 0.0F;
    paramArrayOfFloat1[(13 + paramInt)] = 0.0F;
    paramArrayOfFloat1[(14 + paramInt)] = 0.0F;
    paramArrayOfFloat1[(15 + paramInt)] = 1.0F;
    
    return paramArrayOfFloat1;
  }
  


























  public static float[] makeRotationEuler(float[] paramArrayOfFloat, int paramInt, float paramFloat1, float paramFloat2, float paramFloat3)
  {
    float f1 = cos(paramFloat2);
    float f2 = sin(paramFloat2);
    float f3 = cos(paramFloat3);
    float f4 = sin(paramFloat3);
    float f5 = cos(paramFloat1);
    float f6 = sin(paramFloat1);
    
    paramArrayOfFloat[(0 + paramInt)] = (f1 * f3);
    paramArrayOfFloat[(1 + paramInt)] = f4;
    paramArrayOfFloat[(2 + paramInt)] = (-f2 * f3);
    paramArrayOfFloat[(3 + paramInt)] = 0.0F;
    
    paramArrayOfFloat[(4 + paramInt)] = (f2 * f6 - f1 * f4 * f5);
    paramArrayOfFloat[(5 + paramInt)] = (f3 * f5);
    paramArrayOfFloat[(6 + paramInt)] = (f2 * f4 * f5 + f1 * f6);
    paramArrayOfFloat[(7 + paramInt)] = 0.0F;
    
    paramArrayOfFloat[(8 + paramInt)] = (f1 * f4 * f6 + f2 * f5);
    paramArrayOfFloat[(9 + paramInt)] = (-f3 * f6);
    paramArrayOfFloat[(10 + paramInt)] = (-f2 * f4 * f6 + f1 * f5);
    paramArrayOfFloat[(11 + paramInt)] = 0.0F;
    
    paramArrayOfFloat[(12 + paramInt)] = 0.0F;
    paramArrayOfFloat[(13 + paramInt)] = 0.0F;
    paramArrayOfFloat[(14 + paramInt)] = 0.0F;
    paramArrayOfFloat[(15 + paramInt)] = 1.0F;
    
    return paramArrayOfFloat;
  }
  


























  public static float[] makeOrtho(float[] paramArrayOfFloat, int paramInt, boolean paramBoolean, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, float paramFloat5, float paramFloat6)
  {
    if (paramBoolean)
    {
      paramArrayOfFloat[(paramInt + 1 + 0)] = 0.0F;
      paramArrayOfFloat[(paramInt + 2 + 0)] = 0.0F;
      paramArrayOfFloat[(paramInt + 3 + 0)] = 0.0F;
      
      paramArrayOfFloat[(paramInt + 0 + 4)] = 0.0F;
      
      paramArrayOfFloat[(paramInt + 2 + 4)] = 0.0F;
      paramArrayOfFloat[(paramInt + 3 + 4)] = 0.0F;
      
      paramArrayOfFloat[(paramInt + 0 + 8)] = 0.0F;
      paramArrayOfFloat[(paramInt + 1 + 8)] = 0.0F;
      
      paramArrayOfFloat[(paramInt + 3 + 8)] = 0.0F;
    }
    




    float f1 = paramFloat2 - paramFloat1;
    float f2 = paramFloat4 - paramFloat3;
    float f3 = paramFloat6 - paramFloat5;
    float f4 = -1.0F * (paramFloat2 + paramFloat1) / f1;
    float f5 = -1.0F * (paramFloat4 + paramFloat3) / f2;
    float f6 = -1.0F * (paramFloat6 + paramFloat5) / f3;
    
    paramArrayOfFloat[(paramInt + 0 + 0)] = (2.0F / f1);
    
    paramArrayOfFloat[(paramInt + 1 + 4)] = (2.0F / f2);
    
    paramArrayOfFloat[(paramInt + 2 + 8)] = (-2.0F / f3);
    
    paramArrayOfFloat[(paramInt + 0 + 12)] = f4;
    paramArrayOfFloat[(paramInt + 1 + 12)] = f5;
    paramArrayOfFloat[(paramInt + 2 + 12)] = f6;
    paramArrayOfFloat[(paramInt + 3 + 12)] = 1.0F;
    
    return paramArrayOfFloat;
  }
  




























  public static float[] makeFrustum(float[] paramArrayOfFloat, int paramInt, boolean paramBoolean, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, float paramFloat5, float paramFloat6)
    throws GLException
  {
    if ((paramFloat5 <= 0.0F) || (paramFloat6 <= paramFloat5)) {
      throw new GLException("Requirements zNear > 0 and zFar > zNear, but zNear " + paramFloat5 + ", zFar " + paramFloat6);
    }
    if ((paramFloat1 == paramFloat2) || (paramFloat4 == paramFloat3)) {
      throw new GLException("GL_INVALID_VALUE: top,bottom and left,right must not be equal");
    }
    if (paramBoolean)
    {
      paramArrayOfFloat[(paramInt + 1 + 0)] = 0.0F;
      paramArrayOfFloat[(paramInt + 2 + 0)] = 0.0F;
      paramArrayOfFloat[(paramInt + 3 + 0)] = 0.0F;
      
      paramArrayOfFloat[(paramInt + 0 + 4)] = 0.0F;
      
      paramArrayOfFloat[(paramInt + 2 + 4)] = 0.0F;
      paramArrayOfFloat[(paramInt + 3 + 4)] = 0.0F;
      





      paramArrayOfFloat[(paramInt + 0 + 12)] = 0.0F;
      paramArrayOfFloat[(paramInt + 1 + 12)] = 0.0F;
    }
    

    float f1 = 2.0F * paramFloat5;
    float f2 = paramFloat2 - paramFloat1;
    float f3 = paramFloat4 - paramFloat3;
    float f4 = paramFloat6 - paramFloat5;
    float f5 = (paramFloat2 + paramFloat1) / f2;
    float f6 = (paramFloat4 + paramFloat3) / f3;
    float f7 = -1.0F * (paramFloat6 + paramFloat5) / f4;
    float f8 = -2.0F * (paramFloat6 * paramFloat5) / f4;
    
    paramArrayOfFloat[(paramInt + 0 + 0)] = (f1 / f2);
    
    paramArrayOfFloat[(paramInt + 1 + 4)] = (f1 / f3);
    
    paramArrayOfFloat[(paramInt + 0 + 8)] = f5;
    paramArrayOfFloat[(paramInt + 1 + 8)] = f6;
    paramArrayOfFloat[(paramInt + 2 + 8)] = f7;
    paramArrayOfFloat[(paramInt + 3 + 8)] = -1.0F;
    
    paramArrayOfFloat[(paramInt + 2 + 12)] = f8;
    paramArrayOfFloat[(paramInt + 3 + 12)] = 0.0F;
    
    return paramArrayOfFloat;
  }
  


















  public static float[] makePerspective(float[] paramArrayOfFloat, int paramInt, boolean paramBoolean, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4)
    throws GLException
  {
    float f1 = tan(paramFloat1 / 2.0F) * paramFloat3;
    float f2 = -1.0F * f1;
    float f3 = paramFloat2 * f2;
    float f4 = paramFloat2 * f1;
    return makeFrustum(paramArrayOfFloat, paramInt, paramBoolean, f3, f4, f2, f1, paramFloat3, paramFloat4);
  }
  


















  public static float[] makePerspective(float[] paramArrayOfFloat, int paramInt, boolean paramBoolean, FovHVHalves paramFovHVHalves, float paramFloat1, float paramFloat2)
    throws GLException
  {
    FovHVHalves localFovHVHalves = paramFovHVHalves.toTangents();
    float f1 = top * paramFloat1;
    float f2 = -1.0F * bottom * paramFloat1;
    float f3 = -1.0F * left * paramFloat1;
    float f4 = right * paramFloat1;
    return makeFrustum(paramArrayOfFloat, paramInt, paramBoolean, f3, f4, f2, f1, paramFloat1, paramFloat2);
  }
  




































  public static float[] makeLookAt(float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2, float[] paramArrayOfFloat3, int paramInt3, float[] paramArrayOfFloat4, int paramInt4, float[] paramArrayOfFloat5)
  {
    paramArrayOfFloat5[0] = (paramArrayOfFloat3[(0 + paramInt3)] - paramArrayOfFloat2[(0 + paramInt2)]);
    paramArrayOfFloat5[1] = (paramArrayOfFloat3[(1 + paramInt3)] - paramArrayOfFloat2[(1 + paramInt2)]);
    paramArrayOfFloat5[2] = (paramArrayOfFloat3[(2 + paramInt3)] - paramArrayOfFloat2[(2 + paramInt2)]);
    
    VectorUtil.normalizeVec3(paramArrayOfFloat5);
    

    VectorUtil.crossVec3(paramArrayOfFloat5, 3, paramArrayOfFloat5, 0, paramArrayOfFloat4, paramInt4);
    VectorUtil.normalizeVec3(paramArrayOfFloat5, 3);
    

    VectorUtil.crossVec3(paramArrayOfFloat5, 6, paramArrayOfFloat5, 3, paramArrayOfFloat5, 0);
    
    paramArrayOfFloat1[(paramInt1 + 0 + 0)] = paramArrayOfFloat5[3];
    paramArrayOfFloat1[(paramInt1 + 0 + 1)] = paramArrayOfFloat5[6];
    paramArrayOfFloat1[(paramInt1 + 0 + 2)] = (-paramArrayOfFloat5[0]);
    paramArrayOfFloat1[(paramInt1 + 0 + 3)] = 0.0F;
    
    paramArrayOfFloat1[(paramInt1 + 4 + 0)] = paramArrayOfFloat5[4];
    paramArrayOfFloat1[(paramInt1 + 4 + 1)] = paramArrayOfFloat5[7];
    paramArrayOfFloat1[(paramInt1 + 4 + 2)] = (-paramArrayOfFloat5[1]);
    paramArrayOfFloat1[(paramInt1 + 4 + 3)] = 0.0F;
    
    paramArrayOfFloat1[(paramInt1 + 8 + 0)] = paramArrayOfFloat5[5];
    paramArrayOfFloat1[(paramInt1 + 8 + 1)] = paramArrayOfFloat5[8];
    paramArrayOfFloat1[(paramInt1 + 8 + 2)] = (-paramArrayOfFloat5[2]);
    paramArrayOfFloat1[(paramInt1 + 8 + 3)] = 0.0F;
    
    paramArrayOfFloat1[(paramInt1 + 12 + 0)] = 0.0F;
    paramArrayOfFloat1[(paramInt1 + 12 + 1)] = 0.0F;
    paramArrayOfFloat1[(paramInt1 + 12 + 2)] = 0.0F;
    paramArrayOfFloat1[(paramInt1 + 12 + 3)] = 1.0F;
    
    makeTranslation(paramArrayOfFloat5, true, -paramArrayOfFloat2[(0 + paramInt2)], -paramArrayOfFloat2[(1 + paramInt2)], -paramArrayOfFloat2[(2 + paramInt2)]);
    multMatrix(paramArrayOfFloat1, paramInt1, paramArrayOfFloat5, 0);
    
    return paramArrayOfFloat1;
  }
  








































  public static float[] makePick(float[] paramArrayOfFloat1, int paramInt1, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, int[] paramArrayOfInt, int paramInt2, float[] paramArrayOfFloat2)
  {
    if ((paramFloat3 <= 0.0F) || (paramFloat4 <= 0.0F)) {
      return null;
    }
    

    makeTranslation(paramArrayOfFloat1, paramInt1, true, (paramArrayOfInt[(2 + paramInt2)] - 2.0F * (paramFloat1 - paramArrayOfInt[(0 + paramInt2)])) / paramFloat3, (paramArrayOfInt[(3 + paramInt2)] - 2.0F * (paramFloat2 - paramArrayOfInt[(1 + paramInt2)])) / paramFloat4, 0.0F);
    


    makeScale(paramArrayOfFloat2, true, paramArrayOfInt[(2 + paramInt2)] / paramFloat3, paramArrayOfInt[(3 + paramInt2)] / paramFloat4, 1.0F);
    
    multMatrix(paramArrayOfFloat1, paramInt1, paramArrayOfFloat2, 0);
    return paramArrayOfFloat1;
  }
  








  public static float[] transposeMatrix(float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2)
  {
    paramArrayOfFloat2[(paramInt2 + 0)] = paramArrayOfFloat1[(paramInt1 + 0)];
    paramArrayOfFloat2[(paramInt2 + 1)] = paramArrayOfFloat1[(paramInt1 + 4)];
    paramArrayOfFloat2[(paramInt2 + 2)] = paramArrayOfFloat1[(paramInt1 + 8)];
    paramArrayOfFloat2[(paramInt2 + 3)] = paramArrayOfFloat1[(paramInt1 + 12)];
    

    paramArrayOfFloat2[(paramInt2 + 0 + 4)] = paramArrayOfFloat1[(paramInt1 + 1 + 0)];
    paramArrayOfFloat2[(paramInt2 + 1 + 4)] = paramArrayOfFloat1[(paramInt1 + 1 + 4)];
    paramArrayOfFloat2[(paramInt2 + 2 + 4)] = paramArrayOfFloat1[(paramInt1 + 1 + 8)];
    paramArrayOfFloat2[(paramInt2 + 3 + 4)] = paramArrayOfFloat1[(paramInt1 + 1 + 12)];
    

    paramArrayOfFloat2[(paramInt2 + 0 + 8)] = paramArrayOfFloat1[(paramInt1 + 2 + 0)];
    paramArrayOfFloat2[(paramInt2 + 1 + 8)] = paramArrayOfFloat1[(paramInt1 + 2 + 4)];
    paramArrayOfFloat2[(paramInt2 + 2 + 8)] = paramArrayOfFloat1[(paramInt1 + 2 + 8)];
    paramArrayOfFloat2[(paramInt2 + 3 + 8)] = paramArrayOfFloat1[(paramInt1 + 2 + 12)];
    

    paramArrayOfFloat2[(paramInt2 + 0 + 12)] = paramArrayOfFloat1[(paramInt1 + 3 + 0)];
    paramArrayOfFloat2[(paramInt2 + 1 + 12)] = paramArrayOfFloat1[(paramInt1 + 3 + 4)];
    paramArrayOfFloat2[(paramInt2 + 2 + 12)] = paramArrayOfFloat1[(paramInt1 + 3 + 8)];
    paramArrayOfFloat2[(paramInt2 + 3 + 12)] = paramArrayOfFloat1[(paramInt1 + 3 + 12)];
    
    return paramArrayOfFloat2;
  }
  






  public static float[] transposeMatrix(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2)
  {
    paramArrayOfFloat2[0] = paramArrayOfFloat1[0];
    paramArrayOfFloat2[1] = paramArrayOfFloat1[4];
    paramArrayOfFloat2[2] = paramArrayOfFloat1[8];
    paramArrayOfFloat2[3] = paramArrayOfFloat1[12];
    

    paramArrayOfFloat2[4] = paramArrayOfFloat1[1];
    paramArrayOfFloat2[5] = paramArrayOfFloat1[5];
    paramArrayOfFloat2[6] = paramArrayOfFloat1[9];
    paramArrayOfFloat2[7] = paramArrayOfFloat1[13];
    

    paramArrayOfFloat2[8] = paramArrayOfFloat1[2];
    paramArrayOfFloat2[9] = paramArrayOfFloat1[6];
    paramArrayOfFloat2[10] = paramArrayOfFloat1[10];
    paramArrayOfFloat2[11] = paramArrayOfFloat1[14];
    

    paramArrayOfFloat2[12] = paramArrayOfFloat1[3];
    paramArrayOfFloat2[13] = paramArrayOfFloat1[7];
    paramArrayOfFloat2[14] = paramArrayOfFloat1[11];
    paramArrayOfFloat2[15] = paramArrayOfFloat1[15];
    
    return paramArrayOfFloat2;
  }
  





  public static float matrixDeterminant(float[] paramArrayOfFloat, int paramInt)
  {
    float f1 = paramArrayOfFloat[(5 + paramInt)];
    float f2 = paramArrayOfFloat[(6 + paramInt)];
    float f3 = paramArrayOfFloat[(7 + paramInt)];
    float f4 = paramArrayOfFloat[(9 + paramInt)];
    float f5 = paramArrayOfFloat[(10 + paramInt)];
    float f6 = paramArrayOfFloat[(11 + paramInt)];
    float f7 = paramArrayOfFloat[(13 + paramInt)];
    float f8 = paramArrayOfFloat[(14 + paramInt)];
    float f9 = paramArrayOfFloat[(15 + paramInt)];
    
    float f10 = 0.0F;
    f10 += paramArrayOfFloat[(0 + paramInt)] * (f1 * (f5 * f9 - f8 * f6) - f4 * (f2 * f9 - f8 * f3) + f7 * (f2 * f6 - f5 * f3));
    f1 = paramArrayOfFloat[(1 + paramInt)];
    f2 = paramArrayOfFloat[(2 + paramInt)];
    f3 = paramArrayOfFloat[(3 + paramInt)];
    f10 -= paramArrayOfFloat[(4 + paramInt)] * (f1 * (f5 * f9 - f8 * f6) - f4 * (f2 * f9 - f8 * f3) + f7 * (f2 * f6 - f5 * f3));
    f4 = paramArrayOfFloat[(5 + paramInt)];
    f5 = paramArrayOfFloat[(6 + paramInt)];
    f6 = paramArrayOfFloat[(7 + paramInt)];
    f10 += paramArrayOfFloat[(8 + paramInt)] * (f1 * (f5 * f9 - f8 * f6) - f4 * (f2 * f9 - f8 * f3) + f7 * (f2 * f6 - f5 * f3));
    f7 = paramArrayOfFloat[(9 + paramInt)];
    f8 = paramArrayOfFloat[(10 + paramInt)];
    f9 = paramArrayOfFloat[(11 + paramInt)];
    f10 -= paramArrayOfFloat[(12 + paramInt)] * (f1 * (f5 * f9 - f8 * f6) - f4 * (f2 * f9 - f8 * f3) + f7 * (f2 * f6 - f5 * f3));
    return f10;
  }
  




  public static float matrixDeterminant(float[] paramArrayOfFloat)
  {
    float f1 = paramArrayOfFloat[5];
    float f2 = paramArrayOfFloat[6];
    float f3 = paramArrayOfFloat[7];
    float f4 = paramArrayOfFloat[9];
    float f5 = paramArrayOfFloat[10];
    float f6 = paramArrayOfFloat[11];
    float f7 = paramArrayOfFloat[13];
    float f8 = paramArrayOfFloat[14];
    float f9 = paramArrayOfFloat[15];
    
    float f10 = 0.0F;
    f10 += paramArrayOfFloat[0] * (f1 * (f5 * f9 - f8 * f6) - f4 * (f2 * f9 - f8 * f3) + f7 * (f2 * f6 - f5 * f3));
    f1 = paramArrayOfFloat[1];
    f2 = paramArrayOfFloat[2];
    f3 = paramArrayOfFloat[3];
    f10 -= paramArrayOfFloat[4] * (f1 * (f5 * f9 - f8 * f6) - f4 * (f2 * f9 - f8 * f3) + f7 * (f2 * f6 - f5 * f3));
    f4 = paramArrayOfFloat[5];
    f5 = paramArrayOfFloat[6];
    f6 = paramArrayOfFloat[7];
    f10 += paramArrayOfFloat[8] * (f1 * (f5 * f9 - f8 * f6) - f4 * (f2 * f9 - f8 * f3) + f7 * (f2 * f6 - f5 * f3));
    f7 = paramArrayOfFloat[9];
    f8 = paramArrayOfFloat[10];
    f9 = paramArrayOfFloat[11];
    f10 -= paramArrayOfFloat[12] * (f1 * (f5 * f9 - f8 * f6) - f4 * (f2 * f9 - f8 * f3) + f7 * (f2 * f6 - f5 * f3));
    return f10;
  }
  














  public static float[] invertMatrix(float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2)
  {
    float f2 = Math.abs(paramArrayOfFloat1[0]);
    
    for (int i = 1; i < 16; i++) {
      f4 = Math.abs(paramArrayOfFloat1[i]);
      if (f4 > f2) f2 = f4;
    }
    if (0.0F == f2) {
      return null;
    }
    float f1 = 1.0F / f2;
    

    f2 = paramArrayOfFloat1[(0 + paramInt1)] * f1;
    float f3 = paramArrayOfFloat1[(1 + paramInt1)] * f1;
    float f4 = paramArrayOfFloat1[(2 + paramInt1)] * f1;
    float f5 = paramArrayOfFloat1[(3 + paramInt1)] * f1;
    float f6 = paramArrayOfFloat1[(4 + paramInt1)] * f1;
    float f7 = paramArrayOfFloat1[(5 + paramInt1)] * f1;
    float f8 = paramArrayOfFloat1[(6 + paramInt1)] * f1;
    float f9 = paramArrayOfFloat1[(7 + paramInt1)] * f1;
    float f10 = paramArrayOfFloat1[(8 + paramInt1)] * f1;
    float f11 = paramArrayOfFloat1[(9 + paramInt1)] * f1;
    float f12 = paramArrayOfFloat1[(10 + paramInt1)] * f1;
    float f13 = paramArrayOfFloat1[(11 + paramInt1)] * f1;
    float f14 = paramArrayOfFloat1[(12 + paramInt1)] * f1;
    float f15 = paramArrayOfFloat1[(13 + paramInt1)] * f1;
    float f16 = paramArrayOfFloat1[(14 + paramInt1)] * f1;
    float f17 = paramArrayOfFloat1[(15 + paramInt1)] * f1;
    
    float f18 = f7 * (f12 * f17 - f16 * f13) - f11 * (f8 * f17 - f16 * f9) + f15 * (f8 * f13 - f12 * f9);
    float f19 = -(f3 * (f12 * f17 - f16 * f13) - f11 * (f4 * f17 - f16 * f5) + f15 * (f4 * f13 - f12 * f5));
    float f20 = f3 * (f8 * f17 - f16 * f9) - f7 * (f4 * f17 - f16 * f5) + f15 * (f4 * f9 - f8 * f5);
    float f21 = -(f3 * (f8 * f13 - f12 * f9) - f7 * (f4 * f13 - f12 * f5) + f11 * (f4 * f9 - f8 * f5));
    float f22 = -(f6 * (f12 * f17 - f16 * f13) - f10 * (f8 * f17 - f16 * f9) + f14 * (f8 * f13 - f12 * f9));
    float f23 = f2 * (f12 * f17 - f16 * f13) - f10 * (f4 * f17 - f16 * f5) + f14 * (f4 * f13 - f12 * f5);
    float f24 = -(f2 * (f8 * f17 - f16 * f9) - f6 * (f4 * f17 - f16 * f5) + f14 * (f4 * f9 - f8 * f5));
    float f25 = f2 * (f8 * f13 - f12 * f9) - f6 * (f4 * f13 - f12 * f5) + f10 * (f4 * f9 - f8 * f5);
    float f26 = f6 * (f11 * f17 - f15 * f13) - f10 * (f7 * f17 - f15 * f9) + f14 * (f7 * f13 - f11 * f9);
    float f27 = -(f2 * (f11 * f17 - f15 * f13) - f10 * (f3 * f17 - f15 * f5) + f14 * (f3 * f13 - f11 * f5));
    float f28 = f2 * (f7 * f17 - f15 * f9) - f6 * (f3 * f17 - f15 * f5) + f14 * (f3 * f9 - f7 * f5);
    float f29 = -(f2 * (f7 * f13 - f11 * f9) - f6 * (f3 * f13 - f11 * f5) + f10 * (f3 * f9 - f7 * f5));
    float f30 = -(f6 * (f11 * f16 - f15 * f12) - f10 * (f7 * f16 - f15 * f8) + f14 * (f7 * f12 - f11 * f8));
    float f31 = f2 * (f11 * f16 - f15 * f12) - f10 * (f3 * f16 - f15 * f4) + f14 * (f3 * f12 - f11 * f4);
    float f32 = -(f2 * (f7 * f16 - f15 * f8) - f6 * (f3 * f16 - f15 * f4) + f14 * (f3 * f8 - f7 * f4));
    float f33 = f2 * (f7 * f12 - f11 * f8) - f6 * (f3 * f12 - f11 * f4) + f10 * (f3 * f8 - f7 * f4);
    
    float f34 = (f2 * f18 + f6 * f19 + f10 * f20 + f14 * f21) / f1;
    
    if (0.0F == f34) {
      return null;
    }
    
    paramArrayOfFloat2[(0 + paramInt2)] = (f18 / f34);
    paramArrayOfFloat2[(1 + paramInt2)] = (f19 / f34);
    paramArrayOfFloat2[(2 + paramInt2)] = (f20 / f34);
    paramArrayOfFloat2[(3 + paramInt2)] = (f21 / f34);
    paramArrayOfFloat2[(4 + paramInt2)] = (f22 / f34);
    paramArrayOfFloat2[(5 + paramInt2)] = (f23 / f34);
    paramArrayOfFloat2[(6 + paramInt2)] = (f24 / f34);
    paramArrayOfFloat2[(7 + paramInt2)] = (f25 / f34);
    paramArrayOfFloat2[(8 + paramInt2)] = (f26 / f34);
    paramArrayOfFloat2[(9 + paramInt2)] = (f27 / f34);
    paramArrayOfFloat2[(10 + paramInt2)] = (f28 / f34);
    paramArrayOfFloat2[(11 + paramInt2)] = (f29 / f34);
    paramArrayOfFloat2[(12 + paramInt2)] = (f30 / f34);
    paramArrayOfFloat2[(13 + paramInt2)] = (f31 / f34);
    paramArrayOfFloat2[(14 + paramInt2)] = (f32 / f34);
    paramArrayOfFloat2[(15 + paramInt2)] = (f33 / f34);
    return paramArrayOfFloat2;
  }
  












  public static float[] invertMatrix(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2)
  {
    float f2 = Math.abs(paramArrayOfFloat1[0]);
    
    for (int i = 1; i < 16; i++) {
      f4 = Math.abs(paramArrayOfFloat1[i]);
      if (f4 > f2) f2 = f4;
    }
    if (0.0F == f2) {
      return null;
    }
    float f1 = 1.0F / f2;
    

    f2 = paramArrayOfFloat1[0] * f1;
    float f3 = paramArrayOfFloat1[1] * f1;
    float f4 = paramArrayOfFloat1[2] * f1;
    float f5 = paramArrayOfFloat1[3] * f1;
    float f6 = paramArrayOfFloat1[4] * f1;
    float f7 = paramArrayOfFloat1[5] * f1;
    float f8 = paramArrayOfFloat1[6] * f1;
    float f9 = paramArrayOfFloat1[7] * f1;
    float f10 = paramArrayOfFloat1[8] * f1;
    float f11 = paramArrayOfFloat1[9] * f1;
    float f12 = paramArrayOfFloat1[10] * f1;
    float f13 = paramArrayOfFloat1[11] * f1;
    float f14 = paramArrayOfFloat1[12] * f1;
    float f15 = paramArrayOfFloat1[13] * f1;
    float f16 = paramArrayOfFloat1[14] * f1;
    float f17 = paramArrayOfFloat1[15] * f1;
    
    float f18 = f7 * (f12 * f17 - f16 * f13) - f11 * (f8 * f17 - f16 * f9) + f15 * (f8 * f13 - f12 * f9);
    float f19 = -(f3 * (f12 * f17 - f16 * f13) - f11 * (f4 * f17 - f16 * f5) + f15 * (f4 * f13 - f12 * f5));
    float f20 = f3 * (f8 * f17 - f16 * f9) - f7 * (f4 * f17 - f16 * f5) + f15 * (f4 * f9 - f8 * f5);
    float f21 = -(f3 * (f8 * f13 - f12 * f9) - f7 * (f4 * f13 - f12 * f5) + f11 * (f4 * f9 - f8 * f5));
    float f22 = -(f6 * (f12 * f17 - f16 * f13) - f10 * (f8 * f17 - f16 * f9) + f14 * (f8 * f13 - f12 * f9));
    float f23 = f2 * (f12 * f17 - f16 * f13) - f10 * (f4 * f17 - f16 * f5) + f14 * (f4 * f13 - f12 * f5);
    float f24 = -(f2 * (f8 * f17 - f16 * f9) - f6 * (f4 * f17 - f16 * f5) + f14 * (f4 * f9 - f8 * f5));
    float f25 = f2 * (f8 * f13 - f12 * f9) - f6 * (f4 * f13 - f12 * f5) + f10 * (f4 * f9 - f8 * f5);
    float f26 = f6 * (f11 * f17 - f15 * f13) - f10 * (f7 * f17 - f15 * f9) + f14 * (f7 * f13 - f11 * f9);
    float f27 = -(f2 * (f11 * f17 - f15 * f13) - f10 * (f3 * f17 - f15 * f5) + f14 * (f3 * f13 - f11 * f5));
    float f28 = f2 * (f7 * f17 - f15 * f9) - f6 * (f3 * f17 - f15 * f5) + f14 * (f3 * f9 - f7 * f5);
    float f29 = -(f2 * (f7 * f13 - f11 * f9) - f6 * (f3 * f13 - f11 * f5) + f10 * (f3 * f9 - f7 * f5));
    float f30 = -(f6 * (f11 * f16 - f15 * f12) - f10 * (f7 * f16 - f15 * f8) + f14 * (f7 * f12 - f11 * f8));
    float f31 = f2 * (f11 * f16 - f15 * f12) - f10 * (f3 * f16 - f15 * f4) + f14 * (f3 * f12 - f11 * f4);
    float f32 = -(f2 * (f7 * f16 - f15 * f8) - f6 * (f3 * f16 - f15 * f4) + f14 * (f3 * f8 - f7 * f4));
    float f33 = f2 * (f7 * f12 - f11 * f8) - f6 * (f3 * f12 - f11 * f4) + f10 * (f3 * f8 - f7 * f4);
    
    float f34 = (f2 * f18 + f6 * f19 + f10 * f20 + f14 * f21) / f1;
    
    if (0.0F == f34) {
      return null;
    }
    
    paramArrayOfFloat2[0] = (f18 / f34);
    paramArrayOfFloat2[1] = (f19 / f34);
    paramArrayOfFloat2[2] = (f20 / f34);
    paramArrayOfFloat2[3] = (f21 / f34);
    paramArrayOfFloat2[4] = (f22 / f34);
    paramArrayOfFloat2[5] = (f23 / f34);
    paramArrayOfFloat2[6] = (f24 / f34);
    paramArrayOfFloat2[7] = (f25 / f34);
    paramArrayOfFloat2[8] = (f26 / f34);
    paramArrayOfFloat2[9] = (f27 / f34);
    paramArrayOfFloat2[10] = (f28 / f34);
    paramArrayOfFloat2[11] = (f29 / f34);
    paramArrayOfFloat2[12] = (f30 / f34);
    paramArrayOfFloat2[13] = (f31 / f34);
    paramArrayOfFloat2[14] = (f32 / f34);
    paramArrayOfFloat2[15] = (f33 / f34);
    return paramArrayOfFloat2;
  }
  

























  public static boolean mapObjToWinCoords(float paramFloat1, float paramFloat2, float paramFloat3, float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2, int[] paramArrayOfInt, int paramInt3, float[] paramArrayOfFloat3, int paramInt4, float[] paramArrayOfFloat4, float[] paramArrayOfFloat5)
  {
    paramArrayOfFloat4[0] = paramFloat1;
    paramArrayOfFloat4[1] = paramFloat2;
    paramArrayOfFloat4[2] = paramFloat3;
    paramArrayOfFloat4[3] = 1.0F;
    




    multMatrixVec(paramArrayOfFloat1, paramInt1, paramArrayOfFloat4, 0, paramArrayOfFloat5, 0);
    multMatrixVec(paramArrayOfFloat2, paramInt2, paramArrayOfFloat5, 0, paramArrayOfFloat4, 0);
    
    if (paramArrayOfFloat4[3] == 0.0F) {
      return false;
    }
    
    paramArrayOfFloat4[3] = (1.0F / paramArrayOfFloat4[3] * 0.5F);
    

    paramArrayOfFloat4[0] = (paramArrayOfFloat4[0] * paramArrayOfFloat4[3] + 0.5F);
    paramArrayOfFloat4[1] = (paramArrayOfFloat4[1] * paramArrayOfFloat4[3] + 0.5F);
    paramArrayOfFloat4[2] = (paramArrayOfFloat4[2] * paramArrayOfFloat4[3] + 0.5F);
    

    paramArrayOfFloat3[(0 + paramInt4)] = (paramArrayOfFloat4[0] * paramArrayOfInt[(2 + paramInt3)] + paramArrayOfInt[(0 + paramInt3)]);
    paramArrayOfFloat3[(1 + paramInt4)] = (paramArrayOfFloat4[1] * paramArrayOfInt[(3 + paramInt3)] + paramArrayOfInt[(1 + paramInt3)]);
    paramArrayOfFloat3[(2 + paramInt4)] = paramArrayOfFloat4[2];
    
    return true;
  }
  





















  public static boolean mapObjToWinCoords(float paramFloat1, float paramFloat2, float paramFloat3, float[] paramArrayOfFloat1, int[] paramArrayOfInt, int paramInt1, float[] paramArrayOfFloat2, int paramInt2, float[] paramArrayOfFloat3, float[] paramArrayOfFloat4)
  {
    paramArrayOfFloat4[0] = paramFloat1;
    paramArrayOfFloat4[1] = paramFloat2;
    paramArrayOfFloat4[2] = paramFloat3;
    paramArrayOfFloat4[3] = 1.0F;
    

    multMatrixVec(paramArrayOfFloat1, paramArrayOfFloat4, paramArrayOfFloat3);
    
    if (paramArrayOfFloat3[3] == 0.0F) {
      return false;
    }
    
    paramArrayOfFloat3[3] = (1.0F / paramArrayOfFloat3[3] * 0.5F);
    

    paramArrayOfFloat3[0] = (paramArrayOfFloat3[0] * paramArrayOfFloat3[3] + 0.5F);
    paramArrayOfFloat3[1] = (paramArrayOfFloat3[1] * paramArrayOfFloat3[3] + 0.5F);
    paramArrayOfFloat3[2] = (paramArrayOfFloat3[2] * paramArrayOfFloat3[3] + 0.5F);
    

    paramArrayOfFloat2[(0 + paramInt2)] = (paramArrayOfFloat3[0] * paramArrayOfInt[(2 + paramInt1)] + paramArrayOfInt[(0 + paramInt1)]);
    paramArrayOfFloat2[(1 + paramInt2)] = (paramArrayOfFloat3[1] * paramArrayOfInt[(3 + paramInt1)] + paramArrayOfInt[(1 + paramInt1)]);
    paramArrayOfFloat2[(2 + paramInt2)] = paramArrayOfFloat3[2];
    
    return true;
  }
  


























  public static boolean mapWinToObjCoords(float paramFloat1, float paramFloat2, float paramFloat3, float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2, int[] paramArrayOfInt, int paramInt3, float[] paramArrayOfFloat3, int paramInt4, float[] paramArrayOfFloat4, float[] paramArrayOfFloat5)
  {
    multMatrix(paramArrayOfFloat2, paramInt2, paramArrayOfFloat1, paramInt1, paramArrayOfFloat4, 0);
    

    if (null == invertMatrix(paramArrayOfFloat4, paramArrayOfFloat4)) {
      return false;
    }
    paramArrayOfFloat5[0] = paramFloat1;
    paramArrayOfFloat5[1] = paramFloat2;
    paramArrayOfFloat5[2] = paramFloat3;
    paramArrayOfFloat5[3] = 1.0F;
    

    paramArrayOfFloat5[0] = ((paramArrayOfFloat5[0] - paramArrayOfInt[(0 + paramInt3)]) / paramArrayOfInt[(2 + paramInt3)]);
    paramArrayOfFloat5[1] = ((paramArrayOfFloat5[1] - paramArrayOfInt[(1 + paramInt3)]) / paramArrayOfInt[(3 + paramInt3)]);
    

    paramArrayOfFloat5[0] = (paramArrayOfFloat5[0] * 2.0F - 1.0F);
    paramArrayOfFloat5[1] = (paramArrayOfFloat5[1] * 2.0F - 1.0F);
    paramArrayOfFloat5[2] = (paramArrayOfFloat5[2] * 2.0F - 1.0F);
    


    multMatrixVec(paramArrayOfFloat4, 0, paramArrayOfFloat5, 0, paramArrayOfFloat5, 4);
    
    if (paramArrayOfFloat5[7] == 0.0D) {
      return false;
    }
    
    paramArrayOfFloat5[7] = (1.0F / paramArrayOfFloat5[7]);
    
    paramArrayOfFloat3[(0 + paramInt4)] = (paramArrayOfFloat5[4] * paramArrayOfFloat5[7]);
    paramArrayOfFloat3[(1 + paramInt4)] = (paramArrayOfFloat5[5] * paramArrayOfFloat5[7]);
    paramArrayOfFloat3[(2 + paramInt4)] = (paramArrayOfFloat5[6] * paramArrayOfFloat5[7]);
    
    return true;
  }
  





















  public static boolean mapWinToObjCoords(float paramFloat1, float paramFloat2, float paramFloat3, float[] paramArrayOfFloat1, int[] paramArrayOfInt, int paramInt1, float[] paramArrayOfFloat2, int paramInt2, float[] paramArrayOfFloat3, float[] paramArrayOfFloat4)
  {
    paramArrayOfFloat3[0] = paramFloat1;
    paramArrayOfFloat3[1] = paramFloat2;
    paramArrayOfFloat3[2] = paramFloat3;
    paramArrayOfFloat3[3] = 1.0F;
    

    paramArrayOfFloat3[0] = ((paramArrayOfFloat3[0] - paramArrayOfInt[(0 + paramInt1)]) / paramArrayOfInt[(2 + paramInt1)]);
    paramArrayOfFloat3[1] = ((paramArrayOfFloat3[1] - paramArrayOfInt[(1 + paramInt1)]) / paramArrayOfInt[(3 + paramInt1)]);
    

    paramArrayOfFloat3[0] = (paramArrayOfFloat3[0] * 2.0F - 1.0F);
    paramArrayOfFloat3[1] = (paramArrayOfFloat3[1] * 2.0F - 1.0F);
    paramArrayOfFloat3[2] = (paramArrayOfFloat3[2] * 2.0F - 1.0F);
    

    multMatrixVec(paramArrayOfFloat1, paramArrayOfFloat3, paramArrayOfFloat4);
    
    if (paramArrayOfFloat4[3] == 0.0D) {
      return false;
    }
    
    paramArrayOfFloat4[3] = (1.0F / paramArrayOfFloat4[3]);
    
    paramArrayOfFloat2[(0 + paramInt2)] = (paramArrayOfFloat4[0] * paramArrayOfFloat4[3]);
    paramArrayOfFloat2[(1 + paramInt2)] = (paramArrayOfFloat4[1] * paramArrayOfFloat4[3]);
    paramArrayOfFloat2[(2 + paramInt2)] = (paramArrayOfFloat4[2] * paramArrayOfFloat4[3]);
    
    return true;
  }
  























  public static boolean mapWinToObjCoords(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, float[] paramArrayOfFloat1, int[] paramArrayOfInt, int paramInt1, float[] paramArrayOfFloat2, int paramInt2, float[] paramArrayOfFloat3, int paramInt3, float[] paramArrayOfFloat4, float[] paramArrayOfFloat5)
  {
    paramArrayOfFloat4[0] = paramFloat1;
    paramArrayOfFloat4[1] = paramFloat2;
    paramArrayOfFloat4[3] = 1.0F;
    

    paramArrayOfFloat4[0] = ((paramArrayOfFloat4[0] - paramArrayOfInt[(0 + paramInt1)]) / paramArrayOfInt[(2 + paramInt1)]);
    paramArrayOfFloat4[1] = ((paramArrayOfFloat4[1] - paramArrayOfInt[(1 + paramInt1)]) / paramArrayOfInt[(3 + paramInt1)]);
    

    paramArrayOfFloat4[0] = (paramArrayOfFloat4[0] * 2.0F - 1.0F);
    paramArrayOfFloat4[1] = (paramArrayOfFloat4[1] * 2.0F - 1.0F);
    



    paramArrayOfFloat4[2] = paramFloat3;
    paramArrayOfFloat4[2] = (paramArrayOfFloat4[2] * 2.0F - 1.0F);
    

    multMatrixVec(paramArrayOfFloat1, paramArrayOfFloat4, paramArrayOfFloat5);
    
    if (paramArrayOfFloat5[3] == 0.0D) {
      return false;
    }
    
    paramArrayOfFloat5[3] = (1.0F / paramArrayOfFloat5[3]);
    
    paramArrayOfFloat2[(0 + paramInt2)] = (paramArrayOfFloat5[0] * paramArrayOfFloat5[3]);
    paramArrayOfFloat2[(1 + paramInt2)] = (paramArrayOfFloat5[1] * paramArrayOfFloat5[3]);
    paramArrayOfFloat2[(2 + paramInt2)] = (paramArrayOfFloat5[2] * paramArrayOfFloat5[3]);
    



    paramArrayOfFloat4[2] = paramFloat4;
    paramArrayOfFloat4[2] = (paramArrayOfFloat4[2] * 2.0F - 1.0F);
    

    multMatrixVec(paramArrayOfFloat1, paramArrayOfFloat4, paramArrayOfFloat5);
    
    if (paramArrayOfFloat5[3] == 0.0D) {
      return false;
    }
    
    paramArrayOfFloat5[3] = (1.0F / paramArrayOfFloat5[3]);
    
    paramArrayOfFloat3[(0 + paramInt3)] = (paramArrayOfFloat5[0] * paramArrayOfFloat5[3]);
    paramArrayOfFloat3[(1 + paramInt3)] = (paramArrayOfFloat5[1] * paramArrayOfFloat5[3]);
    paramArrayOfFloat3[(2 + paramInt3)] = (paramArrayOfFloat5[2] * paramArrayOfFloat5[3]);
    
    return true;
  }
  






























  public static boolean mapWinToObjCoords(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2, int[] paramArrayOfInt, int paramInt3, float paramFloat5, float paramFloat6, float[] paramArrayOfFloat3, int paramInt4, float[] paramArrayOfFloat4, float[] paramArrayOfFloat5)
  {
    multMatrix(paramArrayOfFloat2, paramInt2, paramArrayOfFloat1, paramInt1, paramArrayOfFloat4, 0);
    

    if (null == invertMatrix(paramArrayOfFloat4, paramArrayOfFloat4)) {
      return false;
    }
    
    paramArrayOfFloat5[0] = paramFloat1;
    paramArrayOfFloat5[1] = paramFloat2;
    paramArrayOfFloat5[2] = paramFloat3;
    paramArrayOfFloat5[3] = 1.0F;
    

    paramArrayOfFloat5[0] = ((paramArrayOfFloat5[0] - paramArrayOfInt[(0 + paramInt3)]) / paramArrayOfInt[(2 + paramInt3)]);
    paramArrayOfFloat5[1] = ((paramArrayOfFloat5[1] - paramArrayOfInt[(1 + paramInt3)]) / paramArrayOfInt[(3 + paramInt3)]);
    paramArrayOfFloat5[2] = ((paramArrayOfFloat5[2] - paramFloat5) / (paramFloat6 - paramFloat5));
    

    paramArrayOfFloat5[0] = (paramArrayOfFloat5[0] * 2.0F - 1.0F);
    paramArrayOfFloat5[1] = (paramArrayOfFloat5[1] * 2.0F - 1.0F);
    paramArrayOfFloat5[2] = (paramArrayOfFloat5[2] * 2.0F - 1.0F);
    


    multMatrixVec(paramArrayOfFloat4, 0, paramArrayOfFloat5, 0, paramArrayOfFloat5, 4);
    
    if (paramArrayOfFloat5[7] == 0.0D) {
      return false;
    }
    
    paramArrayOfFloat5[7] = (1.0F / paramArrayOfFloat5[7]);
    
    paramArrayOfFloat3[(0 + paramInt4)] = paramArrayOfFloat5[4];
    paramArrayOfFloat3[(1 + paramInt4)] = paramArrayOfFloat5[5];
    paramArrayOfFloat3[(2 + paramInt4)] = paramArrayOfFloat5[6];
    paramArrayOfFloat3[(3 + paramInt4)] = paramArrayOfFloat5[7];
    
    return true;
  }
  


































  public static boolean mapWinToRay(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2, int[] paramArrayOfInt, int paramInt3, Ray paramRay, float[] paramArrayOfFloat3, float[] paramArrayOfFloat4, float[] paramArrayOfFloat5)
  {
    multMatrix(paramArrayOfFloat2, paramInt2, paramArrayOfFloat1, paramInt1, paramArrayOfFloat3, 0);
    

    if (null == invertMatrix(paramArrayOfFloat3, paramArrayOfFloat3)) {
      return false;
    }
    if (mapWinToObjCoords(paramFloat1, paramFloat2, paramFloat3, paramFloat4, paramArrayOfFloat3, paramArrayOfInt, paramInt3, orig, 0, dir, 0, paramArrayOfFloat4, paramArrayOfFloat5))
    {


      VectorUtil.normalizeVec3(VectorUtil.subVec3(dir, dir, orig));
      return true;
    }
    return false;
  }
  







  public static float[] multMatrix(float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2, float[] paramArrayOfFloat3, int paramInt3)
  {
    float f1 = paramArrayOfFloat2[(paramInt2 + 0 + 0)];
    float f2 = paramArrayOfFloat2[(paramInt2 + 1 + 0)];
    float f3 = paramArrayOfFloat2[(paramInt2 + 2 + 0)];
    float f4 = paramArrayOfFloat2[(paramInt2 + 3 + 0)];
    float f5 = paramArrayOfFloat2[(paramInt2 + 0 + 4)];
    float f6 = paramArrayOfFloat2[(paramInt2 + 1 + 4)];
    float f7 = paramArrayOfFloat2[(paramInt2 + 2 + 4)];
    float f8 = paramArrayOfFloat2[(paramInt2 + 3 + 4)];
    float f9 = paramArrayOfFloat2[(paramInt2 + 0 + 8)];
    float f10 = paramArrayOfFloat2[(paramInt2 + 1 + 8)];
    float f11 = paramArrayOfFloat2[(paramInt2 + 2 + 8)];
    float f12 = paramArrayOfFloat2[(paramInt2 + 3 + 8)];
    float f13 = paramArrayOfFloat2[(paramInt2 + 0 + 12)];
    float f14 = paramArrayOfFloat2[(paramInt2 + 1 + 12)];
    float f15 = paramArrayOfFloat2[(paramInt2 + 2 + 12)];
    float f16 = paramArrayOfFloat2[(paramInt2 + 3 + 12)];
    
    float f17 = paramArrayOfFloat1[(paramInt1 + 0)];
    float f18 = paramArrayOfFloat1[(paramInt1 + 4)];
    float f19 = paramArrayOfFloat1[(paramInt1 + 8)];
    float f20 = paramArrayOfFloat1[(paramInt1 + 12)];
    paramArrayOfFloat3[(paramInt3 + 0)] = (f17 * f1 + f18 * f2 + f19 * f3 + f20 * f4);
    paramArrayOfFloat3[(paramInt3 + 4)] = (f17 * f5 + f18 * f6 + f19 * f7 + f20 * f8);
    paramArrayOfFloat3[(paramInt3 + 8)] = (f17 * f9 + f18 * f10 + f19 * f11 + f20 * f12);
    paramArrayOfFloat3[(paramInt3 + 12)] = (f17 * f13 + f18 * f14 + f19 * f15 + f20 * f16);
    
    f17 = paramArrayOfFloat1[(paramInt1 + 1 + 0)];
    f18 = paramArrayOfFloat1[(paramInt1 + 1 + 4)];
    f19 = paramArrayOfFloat1[(paramInt1 + 1 + 8)];
    f20 = paramArrayOfFloat1[(paramInt1 + 1 + 12)];
    paramArrayOfFloat3[(paramInt3 + 1 + 0)] = (f17 * f1 + f18 * f2 + f19 * f3 + f20 * f4);
    paramArrayOfFloat3[(paramInt3 + 1 + 4)] = (f17 * f5 + f18 * f6 + f19 * f7 + f20 * f8);
    paramArrayOfFloat3[(paramInt3 + 1 + 8)] = (f17 * f9 + f18 * f10 + f19 * f11 + f20 * f12);
    paramArrayOfFloat3[(paramInt3 + 1 + 12)] = (f17 * f13 + f18 * f14 + f19 * f15 + f20 * f16);
    
    f17 = paramArrayOfFloat1[(paramInt1 + 2 + 0)];
    f18 = paramArrayOfFloat1[(paramInt1 + 2 + 4)];
    f19 = paramArrayOfFloat1[(paramInt1 + 2 + 8)];
    f20 = paramArrayOfFloat1[(paramInt1 + 2 + 12)];
    paramArrayOfFloat3[(paramInt3 + 2 + 0)] = (f17 * f1 + f18 * f2 + f19 * f3 + f20 * f4);
    paramArrayOfFloat3[(paramInt3 + 2 + 4)] = (f17 * f5 + f18 * f6 + f19 * f7 + f20 * f8);
    paramArrayOfFloat3[(paramInt3 + 2 + 8)] = (f17 * f9 + f18 * f10 + f19 * f11 + f20 * f12);
    paramArrayOfFloat3[(paramInt3 + 2 + 12)] = (f17 * f13 + f18 * f14 + f19 * f15 + f20 * f16);
    
    f17 = paramArrayOfFloat1[(paramInt1 + 3 + 0)];
    f18 = paramArrayOfFloat1[(paramInt1 + 3 + 4)];
    f19 = paramArrayOfFloat1[(paramInt1 + 3 + 8)];
    f20 = paramArrayOfFloat1[(paramInt1 + 3 + 12)];
    paramArrayOfFloat3[(paramInt3 + 3 + 0)] = (f17 * f1 + f18 * f2 + f19 * f3 + f20 * f4);
    paramArrayOfFloat3[(paramInt3 + 3 + 4)] = (f17 * f5 + f18 * f6 + f19 * f7 + f20 * f8);
    paramArrayOfFloat3[(paramInt3 + 3 + 8)] = (f17 * f9 + f18 * f10 + f19 * f11 + f20 * f12);
    paramArrayOfFloat3[(paramInt3 + 3 + 12)] = (f17 * f13 + f18 * f14 + f19 * f15 + f20 * f16);
    
    return paramArrayOfFloat3;
  }
  






  public static float[] multMatrix(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    float f1 = paramArrayOfFloat2[0];
    float f2 = paramArrayOfFloat2[1];
    float f3 = paramArrayOfFloat2[2];
    float f4 = paramArrayOfFloat2[3];
    float f5 = paramArrayOfFloat2[4];
    float f6 = paramArrayOfFloat2[5];
    float f7 = paramArrayOfFloat2[6];
    float f8 = paramArrayOfFloat2[7];
    float f9 = paramArrayOfFloat2[8];
    float f10 = paramArrayOfFloat2[9];
    float f11 = paramArrayOfFloat2[10];
    float f12 = paramArrayOfFloat2[11];
    float f13 = paramArrayOfFloat2[12];
    float f14 = paramArrayOfFloat2[13];
    float f15 = paramArrayOfFloat2[14];
    float f16 = paramArrayOfFloat2[15];
    
    float f17 = paramArrayOfFloat1[0];
    float f18 = paramArrayOfFloat1[4];
    float f19 = paramArrayOfFloat1[8];
    float f20 = paramArrayOfFloat1[12];
    paramArrayOfFloat3[0] = (f17 * f1 + f18 * f2 + f19 * f3 + f20 * f4);
    paramArrayOfFloat3[4] = (f17 * f5 + f18 * f6 + f19 * f7 + f20 * f8);
    paramArrayOfFloat3[8] = (f17 * f9 + f18 * f10 + f19 * f11 + f20 * f12);
    paramArrayOfFloat3[12] = (f17 * f13 + f18 * f14 + f19 * f15 + f20 * f16);
    
    f17 = paramArrayOfFloat1[1];
    f18 = paramArrayOfFloat1[5];
    f19 = paramArrayOfFloat1[9];
    f20 = paramArrayOfFloat1[13];
    paramArrayOfFloat3[1] = (f17 * f1 + f18 * f2 + f19 * f3 + f20 * f4);
    paramArrayOfFloat3[5] = (f17 * f5 + f18 * f6 + f19 * f7 + f20 * f8);
    paramArrayOfFloat3[9] = (f17 * f9 + f18 * f10 + f19 * f11 + f20 * f12);
    paramArrayOfFloat3[13] = (f17 * f13 + f18 * f14 + f19 * f15 + f20 * f16);
    
    f17 = paramArrayOfFloat1[2];
    f18 = paramArrayOfFloat1[6];
    f19 = paramArrayOfFloat1[10];
    f20 = paramArrayOfFloat1[14];
    paramArrayOfFloat3[2] = (f17 * f1 + f18 * f2 + f19 * f3 + f20 * f4);
    paramArrayOfFloat3[6] = (f17 * f5 + f18 * f6 + f19 * f7 + f20 * f8);
    paramArrayOfFloat3[10] = (f17 * f9 + f18 * f10 + f19 * f11 + f20 * f12);
    paramArrayOfFloat3[14] = (f17 * f13 + f18 * f14 + f19 * f15 + f20 * f16);
    
    f17 = paramArrayOfFloat1[3];
    f18 = paramArrayOfFloat1[7];
    f19 = paramArrayOfFloat1[11];
    f20 = paramArrayOfFloat1[15];
    paramArrayOfFloat3[3] = (f17 * f1 + f18 * f2 + f19 * f3 + f20 * f4);
    paramArrayOfFloat3[7] = (f17 * f5 + f18 * f6 + f19 * f7 + f20 * f8);
    paramArrayOfFloat3[11] = (f17 * f9 + f18 * f10 + f19 * f11 + f20 * f12);
    paramArrayOfFloat3[15] = (f17 * f13 + f18 * f14 + f19 * f15 + f20 * f16);
    
    return paramArrayOfFloat3;
  }
  





  public static float[] multMatrix(float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2)
  {
    float f1 = paramArrayOfFloat2[(paramInt2 + 0 + 0)];
    float f2 = paramArrayOfFloat2[(paramInt2 + 1 + 0)];
    float f3 = paramArrayOfFloat2[(paramInt2 + 2 + 0)];
    float f4 = paramArrayOfFloat2[(paramInt2 + 3 + 0)];
    float f5 = paramArrayOfFloat2[(paramInt2 + 0 + 4)];
    float f6 = paramArrayOfFloat2[(paramInt2 + 1 + 4)];
    float f7 = paramArrayOfFloat2[(paramInt2 + 2 + 4)];
    float f8 = paramArrayOfFloat2[(paramInt2 + 3 + 4)];
    float f9 = paramArrayOfFloat2[(paramInt2 + 0 + 8)];
    float f10 = paramArrayOfFloat2[(paramInt2 + 1 + 8)];
    float f11 = paramArrayOfFloat2[(paramInt2 + 2 + 8)];
    float f12 = paramArrayOfFloat2[(paramInt2 + 3 + 8)];
    float f13 = paramArrayOfFloat2[(paramInt2 + 0 + 12)];
    float f14 = paramArrayOfFloat2[(paramInt2 + 1 + 12)];
    float f15 = paramArrayOfFloat2[(paramInt2 + 2 + 12)];
    float f16 = paramArrayOfFloat2[(paramInt2 + 3 + 12)];
    
    float f17 = paramArrayOfFloat1[(paramInt1 + 0)];
    float f18 = paramArrayOfFloat1[(paramInt1 + 4)];
    float f19 = paramArrayOfFloat1[(paramInt1 + 8)];
    float f20 = paramArrayOfFloat1[(paramInt1 + 12)];
    paramArrayOfFloat1[(paramInt1 + 0)] = (f17 * f1 + f18 * f2 + f19 * f3 + f20 * f4);
    paramArrayOfFloat1[(paramInt1 + 4)] = (f17 * f5 + f18 * f6 + f19 * f7 + f20 * f8);
    paramArrayOfFloat1[(paramInt1 + 8)] = (f17 * f9 + f18 * f10 + f19 * f11 + f20 * f12);
    paramArrayOfFloat1[(paramInt1 + 12)] = (f17 * f13 + f18 * f14 + f19 * f15 + f20 * f16);
    
    f17 = paramArrayOfFloat1[(paramInt1 + 1 + 0)];
    f18 = paramArrayOfFloat1[(paramInt1 + 1 + 4)];
    f19 = paramArrayOfFloat1[(paramInt1 + 1 + 8)];
    f20 = paramArrayOfFloat1[(paramInt1 + 1 + 12)];
    paramArrayOfFloat1[(paramInt1 + 1 + 0)] = (f17 * f1 + f18 * f2 + f19 * f3 + f20 * f4);
    paramArrayOfFloat1[(paramInt1 + 1 + 4)] = (f17 * f5 + f18 * f6 + f19 * f7 + f20 * f8);
    paramArrayOfFloat1[(paramInt1 + 1 + 8)] = (f17 * f9 + f18 * f10 + f19 * f11 + f20 * f12);
    paramArrayOfFloat1[(paramInt1 + 1 + 12)] = (f17 * f13 + f18 * f14 + f19 * f15 + f20 * f16);
    
    f17 = paramArrayOfFloat1[(paramInt1 + 2 + 0)];
    f18 = paramArrayOfFloat1[(paramInt1 + 2 + 4)];
    f19 = paramArrayOfFloat1[(paramInt1 + 2 + 8)];
    f20 = paramArrayOfFloat1[(paramInt1 + 2 + 12)];
    paramArrayOfFloat1[(paramInt1 + 2 + 0)] = (f17 * f1 + f18 * f2 + f19 * f3 + f20 * f4);
    paramArrayOfFloat1[(paramInt1 + 2 + 4)] = (f17 * f5 + f18 * f6 + f19 * f7 + f20 * f8);
    paramArrayOfFloat1[(paramInt1 + 2 + 8)] = (f17 * f9 + f18 * f10 + f19 * f11 + f20 * f12);
    paramArrayOfFloat1[(paramInt1 + 2 + 12)] = (f17 * f13 + f18 * f14 + f19 * f15 + f20 * f16);
    
    f17 = paramArrayOfFloat1[(paramInt1 + 3 + 0)];
    f18 = paramArrayOfFloat1[(paramInt1 + 3 + 4)];
    f19 = paramArrayOfFloat1[(paramInt1 + 3 + 8)];
    f20 = paramArrayOfFloat1[(paramInt1 + 3 + 12)];
    paramArrayOfFloat1[(paramInt1 + 3 + 0)] = (f17 * f1 + f18 * f2 + f19 * f3 + f20 * f4);
    paramArrayOfFloat1[(paramInt1 + 3 + 4)] = (f17 * f5 + f18 * f6 + f19 * f7 + f20 * f8);
    paramArrayOfFloat1[(paramInt1 + 3 + 8)] = (f17 * f9 + f18 * f10 + f19 * f11 + f20 * f12);
    paramArrayOfFloat1[(paramInt1 + 3 + 12)] = (f17 * f13 + f18 * f14 + f19 * f15 + f20 * f16);
    
    return paramArrayOfFloat1;
  }
  





  public static float[] multMatrix(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2)
  {
    float f1 = paramArrayOfFloat2[0];
    float f2 = paramArrayOfFloat2[1];
    float f3 = paramArrayOfFloat2[2];
    float f4 = paramArrayOfFloat2[3];
    float f5 = paramArrayOfFloat2[4];
    float f6 = paramArrayOfFloat2[5];
    float f7 = paramArrayOfFloat2[6];
    float f8 = paramArrayOfFloat2[7];
    float f9 = paramArrayOfFloat2[8];
    float f10 = paramArrayOfFloat2[9];
    float f11 = paramArrayOfFloat2[10];
    float f12 = paramArrayOfFloat2[11];
    float f13 = paramArrayOfFloat2[12];
    float f14 = paramArrayOfFloat2[13];
    float f15 = paramArrayOfFloat2[14];
    float f16 = paramArrayOfFloat2[15];
    
    float f17 = paramArrayOfFloat1[0];
    float f18 = paramArrayOfFloat1[4];
    float f19 = paramArrayOfFloat1[8];
    float f20 = paramArrayOfFloat1[12];
    paramArrayOfFloat1[0] = (f17 * f1 + f18 * f2 + f19 * f3 + f20 * f4);
    paramArrayOfFloat1[4] = (f17 * f5 + f18 * f6 + f19 * f7 + f20 * f8);
    paramArrayOfFloat1[8] = (f17 * f9 + f18 * f10 + f19 * f11 + f20 * f12);
    paramArrayOfFloat1[12] = (f17 * f13 + f18 * f14 + f19 * f15 + f20 * f16);
    
    f17 = paramArrayOfFloat1[1];
    f18 = paramArrayOfFloat1[5];
    f19 = paramArrayOfFloat1[9];
    f20 = paramArrayOfFloat1[13];
    paramArrayOfFloat1[1] = (f17 * f1 + f18 * f2 + f19 * f3 + f20 * f4);
    paramArrayOfFloat1[5] = (f17 * f5 + f18 * f6 + f19 * f7 + f20 * f8);
    paramArrayOfFloat1[9] = (f17 * f9 + f18 * f10 + f19 * f11 + f20 * f12);
    paramArrayOfFloat1[13] = (f17 * f13 + f18 * f14 + f19 * f15 + f20 * f16);
    
    f17 = paramArrayOfFloat1[2];
    f18 = paramArrayOfFloat1[6];
    f19 = paramArrayOfFloat1[10];
    f20 = paramArrayOfFloat1[14];
    paramArrayOfFloat1[2] = (f17 * f1 + f18 * f2 + f19 * f3 + f20 * f4);
    paramArrayOfFloat1[6] = (f17 * f5 + f18 * f6 + f19 * f7 + f20 * f8);
    paramArrayOfFloat1[10] = (f17 * f9 + f18 * f10 + f19 * f11 + f20 * f12);
    paramArrayOfFloat1[14] = (f17 * f13 + f18 * f14 + f19 * f15 + f20 * f16);
    
    f17 = paramArrayOfFloat1[3];
    f18 = paramArrayOfFloat1[7];
    f19 = paramArrayOfFloat1[11];
    f20 = paramArrayOfFloat1[15];
    paramArrayOfFloat1[3] = (f17 * f1 + f18 * f2 + f19 * f3 + f20 * f4);
    paramArrayOfFloat1[7] = (f17 * f5 + f18 * f6 + f19 * f7 + f20 * f8);
    paramArrayOfFloat1[11] = (f17 * f9 + f18 * f10 + f19 * f11 + f20 * f12);
    paramArrayOfFloat1[15] = (f17 * f13 + f18 * f14 + f19 * f15 + f20 * f16);
    
    return paramArrayOfFloat1;
  }
  



  /**
   * @deprecated
   */
  public static void multMatrix(FloatBuffer paramFloatBuffer1, FloatBuffer paramFloatBuffer2, float[] paramArrayOfFloat)
  {
    int i = paramFloatBuffer1.position();
    int j = paramFloatBuffer2.position();
    for (int k = 0; k < 4; k++)
    {
      int m = i + k;
      float f1 = paramFloatBuffer1.get(m + 0);float f2 = paramFloatBuffer1.get(m + 4);float f3 = paramFloatBuffer1.get(m + 8);float f4 = paramFloatBuffer1.get(m + 12);
      paramArrayOfFloat[(k + 0)] = (f1 * paramFloatBuffer2.get(j + 0 + 0) + f2 * paramFloatBuffer2.get(j + 1 + 0) + f3 * paramFloatBuffer2.get(j + 2 + 0) + f4 * paramFloatBuffer2.get(j + 3 + 0));
      paramArrayOfFloat[(k + 4)] = (f1 * paramFloatBuffer2.get(j + 0 + 4) + f2 * paramFloatBuffer2.get(j + 1 + 4) + f3 * paramFloatBuffer2.get(j + 2 + 4) + f4 * paramFloatBuffer2.get(j + 3 + 4));
      paramArrayOfFloat[(k + 8)] = (f1 * paramFloatBuffer2.get(j + 0 + 8) + f2 * paramFloatBuffer2.get(j + 1 + 8) + f3 * paramFloatBuffer2.get(j + 2 + 8) + f4 * paramFloatBuffer2.get(j + 3 + 8));
      paramArrayOfFloat[(k + 12)] = (f1 * paramFloatBuffer2.get(j + 0 + 12) + f2 * paramFloatBuffer2.get(j + 1 + 12) + f3 * paramFloatBuffer2.get(j + 2 + 12) + f4 * paramFloatBuffer2.get(j + 3 + 12));
    }
  }
  


  /**
   * @deprecated
   */
  public static void multMatrix(FloatBuffer paramFloatBuffer1, FloatBuffer paramFloatBuffer2)
  {
    int i = paramFloatBuffer1.position();
    int j = paramFloatBuffer2.position();
    for (int k = 0; k < 4; k++)
    {
      int m = i + k;
      float f1 = paramFloatBuffer1.get(m + 0);float f2 = paramFloatBuffer1.get(m + 4);float f3 = paramFloatBuffer1.get(m + 8);float f4 = paramFloatBuffer1.get(m + 12);
      paramFloatBuffer1.put(m + 0, f1 * paramFloatBuffer2.get(j + 0 + 0) + f2 * paramFloatBuffer2.get(j + 1 + 0) + f3 * paramFloatBuffer2.get(j + 2 + 0) + f4 * paramFloatBuffer2.get(j + 3 + 0));
      paramFloatBuffer1.put(m + 4, f1 * paramFloatBuffer2.get(j + 0 + 4) + f2 * paramFloatBuffer2.get(j + 1 + 4) + f3 * paramFloatBuffer2.get(j + 2 + 4) + f4 * paramFloatBuffer2.get(j + 3 + 4));
      paramFloatBuffer1.put(m + 8, f1 * paramFloatBuffer2.get(j + 0 + 8) + f2 * paramFloatBuffer2.get(j + 1 + 8) + f3 * paramFloatBuffer2.get(j + 2 + 8) + f4 * paramFloatBuffer2.get(j + 3 + 8));
      paramFloatBuffer1.put(m + 12, f1 * paramFloatBuffer2.get(j + 0 + 12) + f2 * paramFloatBuffer2.get(j + 1 + 12) + f3 * paramFloatBuffer2.get(j + 2 + 12) + f4 * paramFloatBuffer2.get(j + 3 + 12));
    }
  }
  









  public static float[] multMatrixVec(float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2, float[] paramArrayOfFloat3, int paramInt3)
  {
    paramArrayOfFloat3[(0 + paramInt3)] = (paramArrayOfFloat2[(0 + paramInt2)] * paramArrayOfFloat1[(0 + paramInt1)] + paramArrayOfFloat2[(1 + paramInt2)] * paramArrayOfFloat1[(4 + paramInt1)] + paramArrayOfFloat2[(2 + paramInt2)] * paramArrayOfFloat1[(8 + paramInt1)] + paramArrayOfFloat2[(3 + paramInt2)] * paramArrayOfFloat1[(12 + paramInt1)]);
    

    int i = 1 + paramInt1;
    paramArrayOfFloat3[(1 + paramInt3)] = (paramArrayOfFloat2[(0 + paramInt2)] * paramArrayOfFloat1[(0 + i)] + paramArrayOfFloat2[(1 + paramInt2)] * paramArrayOfFloat1[(4 + i)] + paramArrayOfFloat2[(2 + paramInt2)] * paramArrayOfFloat1[(8 + i)] + paramArrayOfFloat2[(3 + paramInt2)] * paramArrayOfFloat1[(12 + i)]);
    

    int j = 2 + paramInt1;
    paramArrayOfFloat3[(2 + paramInt3)] = (paramArrayOfFloat2[(0 + paramInt2)] * paramArrayOfFloat1[(0 + j)] + paramArrayOfFloat2[(1 + paramInt2)] * paramArrayOfFloat1[(4 + j)] + paramArrayOfFloat2[(2 + paramInt2)] * paramArrayOfFloat1[(8 + j)] + paramArrayOfFloat2[(3 + paramInt2)] * paramArrayOfFloat1[(12 + j)]);
    

    int k = 3 + paramInt1;
    paramArrayOfFloat3[(3 + paramInt3)] = (paramArrayOfFloat2[(0 + paramInt2)] * paramArrayOfFloat1[(0 + k)] + paramArrayOfFloat2[(1 + paramInt2)] * paramArrayOfFloat1[(4 + k)] + paramArrayOfFloat2[(2 + paramInt2)] * paramArrayOfFloat1[(8 + k)] + paramArrayOfFloat2[(3 + paramInt2)] * paramArrayOfFloat1[(12 + k)]);
    

    return paramArrayOfFloat3;
  }
  







  public static float[] multMatrixVec(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, float[] paramArrayOfFloat3)
  {
    paramArrayOfFloat3[0] = (paramArrayOfFloat2[0] * paramArrayOfFloat1[0] + paramArrayOfFloat2[1] * paramArrayOfFloat1[4] + paramArrayOfFloat2[2] * paramArrayOfFloat1[8] + paramArrayOfFloat2[3] * paramArrayOfFloat1[12]);
    

    paramArrayOfFloat3[1] = (paramArrayOfFloat2[0] * paramArrayOfFloat1[1] + paramArrayOfFloat2[1] * paramArrayOfFloat1[5] + paramArrayOfFloat2[2] * paramArrayOfFloat1[9] + paramArrayOfFloat2[3] * paramArrayOfFloat1[13]);
    

    paramArrayOfFloat3[2] = (paramArrayOfFloat2[0] * paramArrayOfFloat1[2] + paramArrayOfFloat2[1] * paramArrayOfFloat1[6] + paramArrayOfFloat2[2] * paramArrayOfFloat1[10] + paramArrayOfFloat2[3] * paramArrayOfFloat1[14]);
    

    paramArrayOfFloat3[3] = (paramArrayOfFloat2[0] * paramArrayOfFloat1[3] + paramArrayOfFloat2[1] * paramArrayOfFloat1[7] + paramArrayOfFloat2[2] * paramArrayOfFloat1[11] + paramArrayOfFloat2[3] * paramArrayOfFloat1[15]);
    

    return paramArrayOfFloat3;
  }
  


  /**
   * @deprecated
   */
  public static void multMatrixVec(FloatBuffer paramFloatBuffer, float[] paramArrayOfFloat1, float[] paramArrayOfFloat2)
  {
    int i = paramFloatBuffer.position();
    for (int j = 0; j < 4; j++)
    {
      int k = j + i;
      paramArrayOfFloat2[j] = 
      


        (paramArrayOfFloat1[0] * paramFloatBuffer.get(0 + k) + paramArrayOfFloat1[1] * paramFloatBuffer.get(4 + k) + paramArrayOfFloat1[2] * paramFloatBuffer.get(8 + k) + paramArrayOfFloat1[3] * paramFloatBuffer.get(12 + k));
    }
  }
  











  public static float[] copyMatrixColumn(float[] paramArrayOfFloat1, int paramInt1, int paramInt2, float[] paramArrayOfFloat2, int paramInt3)
  {
    paramArrayOfFloat2[(0 + paramInt3)] = paramArrayOfFloat1[(0 + paramInt2 * 4 + paramInt1)];
    paramArrayOfFloat2[(1 + paramInt3)] = paramArrayOfFloat1[(1 + paramInt2 * 4 + paramInt1)];
    paramArrayOfFloat2[(2 + paramInt3)] = paramArrayOfFloat1[(2 + paramInt2 * 4 + paramInt1)];
    if (paramArrayOfFloat2.length > 3 + paramInt3) {
      paramArrayOfFloat2[(3 + paramInt3)] = paramArrayOfFloat1[(3 + paramInt2 * 4 + paramInt1)];
    }
    return paramArrayOfFloat2;
  }
  











  public static float[] copyMatrixRow(float[] paramArrayOfFloat1, int paramInt1, int paramInt2, float[] paramArrayOfFloat2, int paramInt3)
  {
    paramArrayOfFloat2[(0 + paramInt3)] = paramArrayOfFloat1[(paramInt2 + 0 + paramInt1)];
    paramArrayOfFloat2[(1 + paramInt3)] = paramArrayOfFloat1[(paramInt2 + 4 + paramInt1)];
    paramArrayOfFloat2[(2 + paramInt3)] = paramArrayOfFloat1[(paramInt2 + 8 + paramInt1)];
    if (paramArrayOfFloat2.length > 3 + paramInt3) {
      paramArrayOfFloat2[(3 + paramInt3)] = paramArrayOfFloat1[(paramInt2 + 12 + paramInt1)];
    }
    return paramArrayOfFloat2;
  }
  










  /**
   * @deprecated
   */
  public static StringBuilder matrixRowToString(StringBuilder paramStringBuilder, String paramString, FloatBuffer paramFloatBuffer, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean, int paramInt4)
  {
    if (null == paramStringBuilder) {
      paramStringBuilder = new StringBuilder();
    }
    int i = paramInt1 + paramFloatBuffer.position();
    int j; if (paramBoolean) {
      for (j = 0; j < paramInt3; j++) {
        paramStringBuilder.append(String.format(paramString + " ", new Object[] { Float.valueOf(paramFloatBuffer.get(i + paramInt4 * paramInt3 + j)) }));
      }
    } else {
      for (j = 0; j < paramInt3; j++) {
        paramStringBuilder.append(String.format(paramString + " ", new Object[] { Float.valueOf(paramFloatBuffer.get(i + paramInt4 + j * paramInt2)) }));
      }
    }
    return paramStringBuilder;
  }
  











  public static StringBuilder matrixRowToString(StringBuilder paramStringBuilder, String paramString, float[] paramArrayOfFloat, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean, int paramInt4)
  {
    if (null == paramStringBuilder)
      paramStringBuilder = new StringBuilder();
    int i;
    if (paramBoolean) {
      for (i = 0; i < paramInt3; i++) {
        paramStringBuilder.append(String.format(paramString + " ", new Object[] { Float.valueOf(paramArrayOfFloat[(paramInt1 + paramInt4 * paramInt3 + i)]) }));
      }
    } else {
      for (i = 0; i < paramInt3; i++) {
        paramStringBuilder.append(String.format(paramString + " ", new Object[] { Float.valueOf(paramArrayOfFloat[(paramInt1 + paramInt4 + i * paramInt2)]) }));
      }
    }
    return paramStringBuilder;
  }
  









  /**
   * @deprecated
   */
  public static StringBuilder matrixToString(StringBuilder paramStringBuilder, String paramString1, String paramString2, FloatBuffer paramFloatBuffer, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean)
  {
    if (null == paramStringBuilder) {
      paramStringBuilder = new StringBuilder();
    }
    String str = null == paramString1 ? "" : paramString1;
    for (int i = 0; i < paramInt2; i++) {
      paramStringBuilder.append(str).append("[ ");
      matrixRowToString(paramStringBuilder, paramString2, paramFloatBuffer, paramInt1, paramInt2, paramInt3, paramBoolean, i);
      paramStringBuilder.append("]").append(Platform.getNewline());
    }
    return paramStringBuilder;
  }
  











  public static StringBuilder matrixToString(StringBuilder paramStringBuilder, String paramString1, String paramString2, float[] paramArrayOfFloat, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean)
  {
    if (null == paramStringBuilder) {
      paramStringBuilder = new StringBuilder();
    }
    String str = null == paramString1 ? "" : paramString1;
    for (int i = 0; i < paramInt2; i++) {
      paramStringBuilder.append(str).append("[ ");
      matrixRowToString(paramStringBuilder, paramString2, paramArrayOfFloat, paramInt1, paramInt2, paramInt3, paramBoolean, i);
      paramStringBuilder.append("]").append(Platform.getNewline());
    }
    return paramStringBuilder;
  }
  












  /**
   * @deprecated
   */
  public static StringBuilder matrixToString(StringBuilder paramStringBuilder, String paramString1, String paramString2, FloatBuffer paramFloatBuffer1, int paramInt1, FloatBuffer paramFloatBuffer2, int paramInt2, int paramInt3, int paramInt4, boolean paramBoolean)
  {
    if (null == paramStringBuilder) {
      paramStringBuilder = new StringBuilder();
    }
    String str = null == paramString1 ? "" : paramString1;
    for (int i = 0; i < paramInt3; i++) {
      paramStringBuilder.append(str).append("[ ");
      matrixRowToString(paramStringBuilder, paramString2, paramFloatBuffer1, paramInt1, paramInt3, paramInt4, paramBoolean, i);
      paramStringBuilder.append("=?= ");
      matrixRowToString(paramStringBuilder, paramString2, paramFloatBuffer2, paramInt2, paramInt3, paramInt4, paramBoolean, i);
      paramStringBuilder.append("]").append(Platform.getNewline());
    }
    return paramStringBuilder;
  }
  














  public static StringBuilder matrixToString(StringBuilder paramStringBuilder, String paramString1, String paramString2, float[] paramArrayOfFloat1, int paramInt1, float[] paramArrayOfFloat2, int paramInt2, int paramInt3, int paramInt4, boolean paramBoolean)
  {
    if (null == paramStringBuilder) {
      paramStringBuilder = new StringBuilder();
    }
    String str = null == paramString1 ? "" : paramString1;
    for (int i = 0; i < paramInt3; i++) {
      paramStringBuilder.append(str).append("[ ");
      matrixRowToString(paramStringBuilder, paramString2, paramArrayOfFloat1, paramInt1, paramInt3, paramInt4, paramBoolean, i);
      paramStringBuilder.append("=?= ");
      matrixRowToString(paramStringBuilder, paramString2, paramArrayOfFloat2, paramInt2, paramInt3, paramInt4, paramBoolean, i);
      paramStringBuilder.append("]").append(Platform.getNewline());
    }
    return paramStringBuilder;
  }
  








  private static void calculateMachineEpsilonFloat()
  {
    float f = 1.0F;
    int i = 0;
    do {
      f /= 2.0F;
      i++;
    } while (1.0F + f / 2.0F != 1.0F);
    machEpsilon = f;
  }
  



  private static volatile boolean machEpsilonAvail = false;
  private static float machEpsilon = 0.0F;
  
  private static final boolean DEBUG_EPSILON = false;
  public static final float E = 2.7182817F;
  public static final float PI = 3.1415927F;
  public static final float TWO_PI = 6.2831855F;
  public static final float HALF_PI = 1.5707964F;
  public static final float QUARTER_PI = 0.7853982F;
  public static final float SQUARED_PI = 9.869605F;
  public static final float EPSILON = 1.1920929E-7F;
  public static final float INV_DEVIANCE = 1.0E-5F;
  
  public static float getMachineEpsilon()
  {
    if (!machEpsilonAvail) {
      synchronized (FloatUtil.class) {
        if (!machEpsilonAvail) {
          machEpsilonAvail = true;
          calculateMachineEpsilonFloat();
        }
      }
    }
    return machEpsilon;
  }
  

































































  public static boolean isEqual(float paramFloat1, float paramFloat2)
  {
    return Float.floatToIntBits(paramFloat1) == Float.floatToIntBits(paramFloat2);
  }
  











  public static boolean isEqual(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    if (Math.abs(paramFloat1 - paramFloat2) < paramFloat3) {
      return true;
    }
    
    return Float.floatToIntBits(paramFloat1) == Float.floatToIntBits(paramFloat2);
  }
  














  public static int compare(float paramFloat1, float paramFloat2)
  {
    if (paramFloat1 < paramFloat2) {
      return -1;
    }
    if (paramFloat1 > paramFloat2) {
      return 1;
    }
    int i = Float.floatToIntBits(paramFloat1);
    int j = Float.floatToIntBits(paramFloat2);
    if (i == j)
      return 0;
    if (i < j) {
      return -1;
    }
    return 1;
  }
  














  public static int compare(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    if (Math.abs(paramFloat1 - paramFloat2) < paramFloat3) {
      return 0;
    }
    return compare(paramFloat1, paramFloat2);
  }
  




  public static boolean isZero(float paramFloat1, float paramFloat2)
  {
    return Math.abs(paramFloat1) < paramFloat2;
  }
  
  public static float abs(float paramFloat) { return Math.abs(paramFloat); }
  
  public static float pow(float paramFloat1, float paramFloat2) { return (float)Math.pow(paramFloat1, paramFloat2); }
  
  public static float sin(float paramFloat) { return (float)Math.sin(paramFloat); }
  
  public static float asin(float paramFloat) { return (float)Math.asin(paramFloat); }
  
  public static float cos(float paramFloat) { return (float)Math.cos(paramFloat); }
  
  public static float acos(float paramFloat) { return (float)Math.acos(paramFloat); }
  
  public static float tan(float paramFloat) { return (float)Math.tan(paramFloat); }
  
  public static float atan(float paramFloat) { return (float)Math.atan(paramFloat); }
  
  public static float atan2(float paramFloat1, float paramFloat2) { return (float)Math.atan2(paramFloat1, paramFloat2); }
  
  public static float sqrt(float paramFloat) { return (float)Math.sqrt(paramFloat); }
  










  public static float getZBufferEpsilon(int paramInt, float paramFloat1, float paramFloat2)
  {
    return paramFloat1 * paramFloat1 / (paramFloat2 * (1 << paramInt) - paramFloat1);
  }
  













  public static int getZBufferValue(int paramInt, float paramFloat1, float paramFloat2, float paramFloat3)
  {
    float f1 = paramFloat3 / (paramFloat3 - paramFloat2);
    float f2 = paramFloat3 * paramFloat2 / (paramFloat2 - paramFloat3);
    return (int)((1 << paramInt) * (f1 + f2 / paramFloat1));
  }
  



  public static float getOrthoWinZ(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    return (1.0F / paramFloat2 - 1.0F / paramFloat1) / (1.0F / paramFloat2 - 1.0F / paramFloat3);
  }
}
