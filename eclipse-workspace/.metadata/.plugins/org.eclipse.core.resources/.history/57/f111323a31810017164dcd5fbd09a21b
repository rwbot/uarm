package jogamp.opengl.windows.wgl;

import com.jogamp.common.nio.Buffers;
import com.jogamp.common.nio.PointerBuffer;
import com.jogamp.opengl.GLException;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;

public class WGLExtImpl implements WGLExt
{
  private WindowsWGLContext _context;
  
  public long wglCreateBufferRegionARB(long paramLong, int paramInt1, int paramInt2)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglCreateBufferRegionARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglCreateBufferRegionARB" }));
    }
    return dispatch_wglCreateBufferRegionARB0(paramLong, paramInt1, paramInt2, l);
  }
  

  private native long dispatch_wglCreateBufferRegionARB0(long paramLong1, int paramInt1, int paramInt2, long paramLong2);
  

  public void wglDeleteBufferRegionARB(long paramLong)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglDeleteBufferRegionARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDeleteBufferRegionARB" }));
    }
    dispatch_wglDeleteBufferRegionARB0(paramLong, l);
  }
  

  private native void dispatch_wglDeleteBufferRegionARB0(long paramLong1, long paramLong2);
  

  public boolean wglSaveBufferRegionARB(long paramLong, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglSaveBufferRegionARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglSaveBufferRegionARB" }));
    }
    return dispatch_wglSaveBufferRegionARB0(paramLong, paramInt1, paramInt2, paramInt3, paramInt4, l);
  }
  

  private native boolean dispatch_wglSaveBufferRegionARB0(long paramLong1, int paramInt1, int paramInt2, int paramInt3, int paramInt4, long paramLong2);
  

  public boolean wglRestoreBufferRegionARB(long paramLong, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglRestoreBufferRegionARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglRestoreBufferRegionARB" }));
    }
    return dispatch_wglRestoreBufferRegionARB0(paramLong, paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, l);
  }
  


  private native boolean dispatch_wglRestoreBufferRegionARB0(long paramLong1, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, long paramLong2);
  

  public long wglCreateContextAttribsARB(long paramLong1, long paramLong2, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"attribList\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglCreateContextAttribsARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglCreateContextAttribsARB" }));
    }
    return dispatch_wglCreateContextAttribsARB0(paramLong1, paramLong2, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native long dispatch_wglCreateContextAttribsARB0(long paramLong1, long paramLong2, Object paramObject, int paramInt, long paramLong3);
  

  public String wglGetExtensionsStringARB(long paramLong)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetExtensionsStringARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetExtensionsStringARB" }));
    }
    return dispatch_wglGetExtensionsStringARB0(paramLong, l);
  }
  

  private native String dispatch_wglGetExtensionsStringARB0(long paramLong1, long paramLong2);
  

  public boolean wglMakeContextCurrent(long paramLong1, long paramLong2, long paramLong3)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglMakeContextCurrent;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglMakeContextCurrent" }));
    }
    return dispatch_wglMakeContextCurrent0(paramLong1, paramLong2, paramLong3, l);
  }
  

  private native boolean dispatch_wglMakeContextCurrent0(long paramLong1, long paramLong2, long paramLong3, long paramLong4);
  

  public long wglGetCurrentReadDC()
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetCurrentReadDC;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetCurrentReadDC" }));
    }
    return dispatch_wglGetCurrentReadDC0(l);
  }
  


  private native long dispatch_wglGetCurrentReadDC0(long paramLong);
  

  public long wglCreatePbufferARB(long paramLong, int paramInt1, int paramInt2, int paramInt3, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"piAttribList\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglCreatePbufferARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglCreatePbufferARB" }));
    }
    return dispatch_wglCreatePbufferARB0(paramLong, paramInt1, paramInt2, paramInt3, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native long dispatch_wglCreatePbufferARB0(long paramLong1, int paramInt1, int paramInt2, int paramInt3, Object paramObject, int paramInt4, long paramLong2);
  

  public long wglGetPbufferDCARB(long paramLong)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetPbufferDCARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetPbufferDCARB" }));
    }
    return dispatch_wglGetPbufferDCARB0(paramLong, l);
  }
  

  private native long dispatch_wglGetPbufferDCARB0(long paramLong1, long paramLong2);
  

  public int wglReleasePbufferDCARB(long paramLong1, long paramLong2)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglReleasePbufferDCARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglReleasePbufferDCARB" }));
    }
    return dispatch_wglReleasePbufferDCARB0(paramLong1, paramLong2, l);
  }
  

  private native int dispatch_wglReleasePbufferDCARB0(long paramLong1, long paramLong2, long paramLong3);
  

  public boolean wglDestroyPbufferARB(long paramLong)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglDestroyPbufferARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDestroyPbufferARB" }));
    }
    return dispatch_wglDestroyPbufferARB0(paramLong, l);
  }
  


  private native boolean dispatch_wglDestroyPbufferARB0(long paramLong1, long paramLong2);
  

  public boolean wglQueryPbufferARB(long paramLong, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"piValue\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglQueryPbufferARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglQueryPbufferARB" }));
    }
    return dispatch_wglQueryPbufferARB0(paramLong, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  



  private native boolean dispatch_wglQueryPbufferARB0(long paramLong1, int paramInt1, Object paramObject, int paramInt2, long paramLong2);
  


  public boolean wglGetPixelFormatAttribivARB(long paramLong, int paramInt1, int paramInt2, int paramInt3, IntBuffer paramIntBuffer1, IntBuffer paramIntBuffer2)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new GLException("Argument \"piAttributes\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new GLException("Argument \"piValues\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetPixelFormatAttribivARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetPixelFormatAttribivARB" }));
    }
    return dispatch_wglGetPixelFormatAttribivARB0(paramLong, paramInt1, paramInt2, paramInt3, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), l);
  }
  



  private native boolean dispatch_wglGetPixelFormatAttribivARB0(long paramLong1, int paramInt1, int paramInt2, int paramInt3, Object paramObject1, int paramInt4, Object paramObject2, int paramInt5, long paramLong2);
  



  public boolean wglGetPixelFormatAttribfvARB(long paramLong, int paramInt1, int paramInt2, int paramInt3, IntBuffer paramIntBuffer, FloatBuffer paramFloatBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"piAttributes\" is not a direct buffer");
    if (!Buffers.isDirect(paramFloatBuffer))
      throw new GLException("Argument \"pfValues\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetPixelFormatAttribfvARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetPixelFormatAttribfvARB" }));
    }
    return dispatch_wglGetPixelFormatAttribfvARB0(paramLong, paramInt1, paramInt2, paramInt3, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), paramFloatBuffer, Buffers.getDirectBufferByteOffset(paramFloatBuffer), l);
  }
  




  private native boolean dispatch_wglGetPixelFormatAttribfvARB0(long paramLong1, int paramInt1, int paramInt2, int paramInt3, Object paramObject1, int paramInt4, Object paramObject2, int paramInt5, long paramLong2);
  




  public boolean wglChoosePixelFormatARB(long paramLong, IntBuffer paramIntBuffer1, FloatBuffer paramFloatBuffer, int paramInt, IntBuffer paramIntBuffer2, IntBuffer paramIntBuffer3)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new GLException("Argument \"piAttribIList\" is not a direct buffer");
    if (!Buffers.isDirect(paramFloatBuffer))
      throw new GLException("Argument \"pfAttribFList\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new GLException("Argument \"piFormats\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer3))
      throw new GLException("Argument \"nNumFormats\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglChoosePixelFormatARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglChoosePixelFormatARB" }));
    }
    return dispatch_wglChoosePixelFormatARB0(paramLong, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramFloatBuffer, Buffers.getDirectBufferByteOffset(paramFloatBuffer), paramInt, paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), paramIntBuffer3, Buffers.getDirectBufferByteOffset(paramIntBuffer3), l);
  }
  



  private native boolean dispatch_wglChoosePixelFormatARB0(long paramLong1, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, int paramInt3, Object paramObject3, int paramInt4, Object paramObject4, int paramInt5, long paramLong2);
  



  public boolean wglBindTexImageARB(long paramLong, int paramInt)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglBindTexImageARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglBindTexImageARB" }));
    }
    return dispatch_wglBindTexImageARB0(paramLong, paramInt, l);
  }
  

  private native boolean dispatch_wglBindTexImageARB0(long paramLong1, int paramInt, long paramLong2);
  

  public boolean wglReleaseTexImageARB(long paramLong, int paramInt)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglReleaseTexImageARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglReleaseTexImageARB" }));
    }
    return dispatch_wglReleaseTexImageARB0(paramLong, paramInt, l);
  }
  


  private native boolean dispatch_wglReleaseTexImageARB0(long paramLong1, int paramInt, long paramLong2);
  

  public boolean wglSetPbufferAttribARB(long paramLong, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"piAttribList\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglSetPbufferAttribARB;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglSetPbufferAttribARB" }));
    }
    return dispatch_wglSetPbufferAttribARB0(paramLong, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native boolean dispatch_wglSetPbufferAttribARB0(long paramLong1, Object paramObject, int paramInt, long paramLong2);
  

  public boolean wglSetStereoEmitterState3DL(long paramLong, int paramInt)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglSetStereoEmitterState3DL;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglSetStereoEmitterState3DL" }));
    }
    return dispatch_wglSetStereoEmitterState3DL0(paramLong, paramInt, l);
  }
  


  private native boolean dispatch_wglSetStereoEmitterState3DL0(long paramLong1, int paramInt, long paramLong2);
  

  public int wglGetGPUIDsAMD(int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"ids\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetGPUIDsAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetGPUIDsAMD" }));
    }
    return dispatch_wglGetGPUIDsAMD0(paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native int dispatch_wglGetGPUIDsAMD0(int paramInt1, Object paramObject, int paramInt2, long paramLong);
  


  public int wglGetGPUInfoAMD(int paramInt1, int paramInt2, int paramInt3, int paramInt4, Buffer paramBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new GLException("Argument \"data\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetGPUInfoAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetGPUInfoAMD" }));
    }
    return dispatch_wglGetGPUInfoAMD0(paramInt1, paramInt2, paramInt3, paramInt4, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), l);
  }
  


  private native int dispatch_wglGetGPUInfoAMD0(int paramInt1, int paramInt2, int paramInt3, int paramInt4, Object paramObject, int paramInt5, long paramLong);
  

  public int wglGetContextGPUIDAMD(long paramLong)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetContextGPUIDAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetContextGPUIDAMD" }));
    }
    return dispatch_wglGetContextGPUIDAMD0(paramLong, l);
  }
  

  private native int dispatch_wglGetContextGPUIDAMD0(long paramLong1, long paramLong2);
  

  public long wglCreateAssociatedContextAMD(int paramInt)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglCreateAssociatedContextAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglCreateAssociatedContextAMD" }));
    }
    return dispatch_wglCreateAssociatedContextAMD0(paramInt, l);
  }
  


  private native long dispatch_wglCreateAssociatedContextAMD0(int paramInt, long paramLong);
  

  public long wglCreateAssociatedContextAttribsAMD(int paramInt, long paramLong, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"attribList\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglCreateAssociatedContextAttribsAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglCreateAssociatedContextAttribsAMD" }));
    }
    return dispatch_wglCreateAssociatedContextAttribsAMD0(paramInt, paramLong, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native long dispatch_wglCreateAssociatedContextAttribsAMD0(int paramInt1, long paramLong1, Object paramObject, int paramInt2, long paramLong2);
  

  public boolean wglDeleteAssociatedContextAMD(long paramLong)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglDeleteAssociatedContextAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDeleteAssociatedContextAMD" }));
    }
    return dispatch_wglDeleteAssociatedContextAMD0(paramLong, l);
  }
  

  private native boolean dispatch_wglDeleteAssociatedContextAMD0(long paramLong1, long paramLong2);
  

  public boolean wglMakeAssociatedContextCurrentAMD(long paramLong)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglMakeAssociatedContextCurrentAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglMakeAssociatedContextCurrentAMD" }));
    }
    return dispatch_wglMakeAssociatedContextCurrentAMD0(paramLong, l);
  }
  

  private native boolean dispatch_wglMakeAssociatedContextCurrentAMD0(long paramLong1, long paramLong2);
  

  public long wglGetCurrentAssociatedContextAMD()
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetCurrentAssociatedContextAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetCurrentAssociatedContextAMD" }));
    }
    return dispatch_wglGetCurrentAssociatedContextAMD0(l);
  }
  

  private native long dispatch_wglGetCurrentAssociatedContextAMD0(long paramLong);
  

  public void wglBlitContextFramebufferAMD(long paramLong, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, int paramInt9, int paramInt10)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglBlitContextFramebufferAMD;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglBlitContextFramebufferAMD" }));
    }
    dispatch_wglBlitContextFramebufferAMD0(paramLong, paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8, paramInt9, paramInt10, l);
  }
  

  private native void dispatch_wglBlitContextFramebufferAMD0(long paramLong1, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, int paramInt9, int paramInt10, long paramLong2);
  

  public boolean wglCreateDisplayColorTableEXT(short paramShort)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglCreateDisplayColorTableEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglCreateDisplayColorTableEXT" }));
    }
    return dispatch_wglCreateDisplayColorTableEXT0(paramShort, l);
  }
  


  private native boolean dispatch_wglCreateDisplayColorTableEXT0(short paramShort, long paramLong);
  

  public boolean wglLoadDisplayColorTableEXT(java.nio.ShortBuffer paramShortBuffer, int paramInt)
  {
    if (!Buffers.isDirect(paramShortBuffer))
      throw new GLException("Argument \"table\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglLoadDisplayColorTableEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglLoadDisplayColorTableEXT" }));
    }
    return dispatch_wglLoadDisplayColorTableEXT0(paramShortBuffer, Buffers.getDirectBufferByteOffset(paramShortBuffer), paramInt, l);
  }
  


  private native boolean dispatch_wglLoadDisplayColorTableEXT0(Object paramObject, int paramInt1, int paramInt2, long paramLong);
  

  public boolean wglBindDisplayColorTableEXT(short paramShort)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglBindDisplayColorTableEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglBindDisplayColorTableEXT" }));
    }
    return dispatch_wglBindDisplayColorTableEXT0(paramShort, l);
  }
  

  private native boolean dispatch_wglBindDisplayColorTableEXT0(short paramShort, long paramLong);
  

  public void wglDestroyDisplayColorTableEXT(short paramShort)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglDestroyDisplayColorTableEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDestroyDisplayColorTableEXT" }));
    }
    dispatch_wglDestroyDisplayColorTableEXT0(paramShort, l);
  }
  

  private native void dispatch_wglDestroyDisplayColorTableEXT0(short paramShort, long paramLong);
  

  public String wglGetExtensionsStringEXT()
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetExtensionsStringEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetExtensionsStringEXT" }));
    }
    return dispatch_wglGetExtensionsStringEXT0(l);
  }
  


  private native String dispatch_wglGetExtensionsStringEXT0(long paramLong);
  

  public long wglCreatePbufferEXT(long paramLong, int paramInt1, int paramInt2, int paramInt3, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"piAttribList\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglCreatePbufferEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglCreatePbufferEXT" }));
    }
    return dispatch_wglCreatePbufferEXT0(paramLong, paramInt1, paramInt2, paramInt3, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native long dispatch_wglCreatePbufferEXT0(long paramLong1, int paramInt1, int paramInt2, int paramInt3, Object paramObject, int paramInt4, long paramLong2);
  

  public long wglGetPbufferDCEXT(long paramLong)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetPbufferDCEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetPbufferDCEXT" }));
    }
    return dispatch_wglGetPbufferDCEXT0(paramLong, l);
  }
  

  private native long dispatch_wglGetPbufferDCEXT0(long paramLong1, long paramLong2);
  

  public int wglReleasePbufferDCEXT(long paramLong1, long paramLong2)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglReleasePbufferDCEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglReleasePbufferDCEXT" }));
    }
    return dispatch_wglReleasePbufferDCEXT0(paramLong1, paramLong2, l);
  }
  

  private native int dispatch_wglReleasePbufferDCEXT0(long paramLong1, long paramLong2, long paramLong3);
  

  public boolean wglDestroyPbufferEXT(long paramLong)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglDestroyPbufferEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDestroyPbufferEXT" }));
    }
    return dispatch_wglDestroyPbufferEXT0(paramLong, l);
  }
  


  private native boolean dispatch_wglDestroyPbufferEXT0(long paramLong1, long paramLong2);
  

  public boolean wglQueryPbufferEXT(long paramLong, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"piValue\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglQueryPbufferEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglQueryPbufferEXT" }));
    }
    return dispatch_wglQueryPbufferEXT0(paramLong, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  



  private native boolean dispatch_wglQueryPbufferEXT0(long paramLong1, int paramInt1, Object paramObject, int paramInt2, long paramLong2);
  


  public boolean wglGetPixelFormatAttribivEXT(long paramLong, int paramInt1, int paramInt2, int paramInt3, IntBuffer paramIntBuffer1, IntBuffer paramIntBuffer2)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new GLException("Argument \"piAttributes\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new GLException("Argument \"piValues\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetPixelFormatAttribivEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetPixelFormatAttribivEXT" }));
    }
    return dispatch_wglGetPixelFormatAttribivEXT0(paramLong, paramInt1, paramInt2, paramInt3, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), l);
  }
  



  private native boolean dispatch_wglGetPixelFormatAttribivEXT0(long paramLong1, int paramInt1, int paramInt2, int paramInt3, Object paramObject1, int paramInt4, Object paramObject2, int paramInt5, long paramLong2);
  



  public boolean wglGetPixelFormatAttribfvEXT(long paramLong, int paramInt1, int paramInt2, int paramInt3, IntBuffer paramIntBuffer, FloatBuffer paramFloatBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"piAttributes\" is not a direct buffer");
    if (!Buffers.isDirect(paramFloatBuffer))
      throw new GLException("Argument \"pfValues\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetPixelFormatAttribfvEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetPixelFormatAttribfvEXT" }));
    }
    return dispatch_wglGetPixelFormatAttribfvEXT0(paramLong, paramInt1, paramInt2, paramInt3, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), paramFloatBuffer, Buffers.getDirectBufferByteOffset(paramFloatBuffer), l);
  }
  




  private native boolean dispatch_wglGetPixelFormatAttribfvEXT0(long paramLong1, int paramInt1, int paramInt2, int paramInt3, Object paramObject1, int paramInt4, Object paramObject2, int paramInt5, long paramLong2);
  




  public boolean wglChoosePixelFormatEXT(long paramLong, IntBuffer paramIntBuffer1, FloatBuffer paramFloatBuffer, int paramInt, IntBuffer paramIntBuffer2, IntBuffer paramIntBuffer3)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new GLException("Argument \"piAttribIList\" is not a direct buffer");
    if (!Buffers.isDirect(paramFloatBuffer))
      throw new GLException("Argument \"pfAttribFList\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new GLException("Argument \"piFormats\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer3))
      throw new GLException("Argument \"nNumFormats\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglChoosePixelFormatEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglChoosePixelFormatEXT" }));
    }
    return dispatch_wglChoosePixelFormatEXT0(paramLong, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramFloatBuffer, Buffers.getDirectBufferByteOffset(paramFloatBuffer), paramInt, paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), paramIntBuffer3, Buffers.getDirectBufferByteOffset(paramIntBuffer3), l);
  }
  



  private native boolean dispatch_wglChoosePixelFormatEXT0(long paramLong1, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, int paramInt3, Object paramObject3, int paramInt4, Object paramObject4, int paramInt5, long paramLong2);
  



  public boolean wglSwapIntervalEXT(int paramInt)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglSwapIntervalEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglSwapIntervalEXT" }));
    }
    return dispatch_wglSwapIntervalEXT0(paramInt, l);
  }
  

  private native boolean dispatch_wglSwapIntervalEXT0(int paramInt, long paramLong);
  

  public int wglGetSwapIntervalEXT()
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetSwapIntervalEXT;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetSwapIntervalEXT" }));
    }
    return dispatch_wglGetSwapIntervalEXT0(l);
  }
  

  private native int dispatch_wglGetSwapIntervalEXT0(long paramLong);
  

  public boolean wglEnableFrameLockI3D()
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglEnableFrameLockI3D;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglEnableFrameLockI3D" }));
    }
    return dispatch_wglEnableFrameLockI3D0(l);
  }
  

  private native boolean dispatch_wglEnableFrameLockI3D0(long paramLong);
  

  public boolean wglDisableFrameLockI3D()
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglDisableFrameLockI3D;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDisableFrameLockI3D" }));
    }
    return dispatch_wglDisableFrameLockI3D0(l);
  }
  


  private native boolean dispatch_wglDisableFrameLockI3D0(long paramLong);
  

  public boolean wglIsEnabledFrameLockI3D(ByteBuffer paramByteBuffer)
  {
    if (!Buffers.isDirect(paramByteBuffer))
      throw new GLException("Argument \"pFlag\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglIsEnabledFrameLockI3D;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglIsEnabledFrameLockI3D" }));
    }
    return dispatch_wglIsEnabledFrameLockI3D0(paramByteBuffer, Buffers.getDirectBufferByteOffset(paramByteBuffer), l);
  }
  


  private native boolean dispatch_wglIsEnabledFrameLockI3D0(Object paramObject, int paramInt, long paramLong);
  


  public boolean wglQueryFrameLockMasterI3D(ByteBuffer paramByteBuffer)
  {
    if (!Buffers.isDirect(paramByteBuffer))
      throw new GLException("Argument \"pFlag\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglQueryFrameLockMasterI3D;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglQueryFrameLockMasterI3D" }));
    }
    return dispatch_wglQueryFrameLockMasterI3D0(paramByteBuffer, Buffers.getDirectBufferByteOffset(paramByteBuffer), l);
  }
  


  private native boolean dispatch_wglQueryFrameLockMasterI3D0(Object paramObject, int paramInt, long paramLong);
  


  public boolean wglGetFrameUsageI3D(FloatBuffer paramFloatBuffer)
  {
    if (!Buffers.isDirect(paramFloatBuffer))
      throw new GLException("Argument \"pUsage\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetFrameUsageI3D;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetFrameUsageI3D" }));
    }
    return dispatch_wglGetFrameUsageI3D0(paramFloatBuffer, Buffers.getDirectBufferByteOffset(paramFloatBuffer), l);
  }
  


  private native boolean dispatch_wglGetFrameUsageI3D0(Object paramObject, int paramInt, long paramLong);
  

  public boolean wglBeginFrameTrackingI3D()
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglBeginFrameTrackingI3D;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglBeginFrameTrackingI3D" }));
    }
    return dispatch_wglBeginFrameTrackingI3D0(l);
  }
  

  private native boolean dispatch_wglBeginFrameTrackingI3D0(long paramLong);
  

  public boolean wglEndFrameTrackingI3D()
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglEndFrameTrackingI3D;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglEndFrameTrackingI3D" }));
    }
    return dispatch_wglEndFrameTrackingI3D0(l);
  }
  



  private native boolean dispatch_wglEndFrameTrackingI3D0(long paramLong);
  


  public boolean wglQueryFrameTrackingI3D(IntBuffer paramIntBuffer1, IntBuffer paramIntBuffer2, FloatBuffer paramFloatBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new GLException("Argument \"pFrameCount\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new GLException("Argument \"pMissedFrames\" is not a direct buffer");
    if (!Buffers.isDirect(paramFloatBuffer))
      throw new GLException("Argument \"pLastMissedUsage\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglQueryFrameTrackingI3D;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglQueryFrameTrackingI3D" }));
    }
    return dispatch_wglQueryFrameTrackingI3D0(paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), paramFloatBuffer, Buffers.getDirectBufferByteOffset(paramFloatBuffer), l);
  }
  



  private native boolean dispatch_wglQueryFrameTrackingI3D0(Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, Object paramObject3, int paramInt3, long paramLong);
  



  public boolean wglDXSetResourceShareHandleNV(Buffer paramBuffer, long paramLong)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new GLException("Argument \"dxObject\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglDXSetResourceShareHandleNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDXSetResourceShareHandleNV" }));
    }
    return dispatch_wglDXSetResourceShareHandleNV0(paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramLong, l);
  }
  


  private native boolean dispatch_wglDXSetResourceShareHandleNV0(Object paramObject, int paramInt, long paramLong1, long paramLong2);
  


  public long wglDXOpenDeviceNV(Buffer paramBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new GLException("Argument \"dxDevice\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglDXOpenDeviceNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDXOpenDeviceNV" }));
    }
    return dispatch_wglDXOpenDeviceNV0(paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), l);
  }
  


  private native long dispatch_wglDXOpenDeviceNV0(Object paramObject, int paramInt, long paramLong);
  

  public boolean wglDXCloseDeviceNV(long paramLong)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglDXCloseDeviceNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDXCloseDeviceNV" }));
    }
    return dispatch_wglDXCloseDeviceNV0(paramLong, l);
  }
  


  private native boolean dispatch_wglDXCloseDeviceNV0(long paramLong1, long paramLong2);
  

  public long wglDXRegisterObjectNV(long paramLong, Buffer paramBuffer, int paramInt1, int paramInt2, int paramInt3)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new GLException("Argument \"dxObject\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglDXRegisterObjectNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDXRegisterObjectNV" }));
    }
    return dispatch_wglDXRegisterObjectNV0(paramLong, paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), paramInt1, paramInt2, paramInt3, l);
  }
  


  private native long dispatch_wglDXRegisterObjectNV0(long paramLong1, Object paramObject, int paramInt1, int paramInt2, int paramInt3, int paramInt4, long paramLong2);
  

  public boolean wglDXUnregisterObjectNV(long paramLong1, long paramLong2)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglDXUnregisterObjectNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDXUnregisterObjectNV" }));
    }
    return dispatch_wglDXUnregisterObjectNV0(paramLong1, paramLong2, l);
  }
  

  private native boolean dispatch_wglDXUnregisterObjectNV0(long paramLong1, long paramLong2, long paramLong3);
  

  public boolean wglDXObjectAccessNV(long paramLong, int paramInt)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglDXObjectAccessNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDXObjectAccessNV" }));
    }
    return dispatch_wglDXObjectAccessNV0(paramLong, paramInt, l);
  }
  


  private native boolean dispatch_wglDXObjectAccessNV0(long paramLong1, int paramInt, long paramLong2);
  

  public boolean wglDXLockObjectsNV(long paramLong, int paramInt, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new GLException("Argument \"hObjects\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglDXLockObjectsNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDXLockObjectsNV" }));
    }
    return dispatch_wglDXLockObjectsNV0(paramLong, paramInt, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  


  private native boolean dispatch_wglDXLockObjectsNV0(long paramLong1, int paramInt1, Object paramObject, int paramInt2, long paramLong2);
  


  public boolean wglDXUnlockObjectsNV(long paramLong, int paramInt, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new GLException("Argument \"hObjects\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglDXUnlockObjectsNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDXUnlockObjectsNV" }));
    }
    return dispatch_wglDXUnlockObjectsNV0(paramLong, paramInt, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  


  private native boolean dispatch_wglDXUnlockObjectsNV0(long paramLong1, int paramInt1, Object paramObject, int paramInt2, long paramLong2);
  

  public boolean wglCopyImageSubDataNV(long paramLong1, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, long paramLong2, int paramInt7, int paramInt8, int paramInt9, int paramInt10, int paramInt11, int paramInt12, int paramInt13, int paramInt14, int paramInt15)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglCopyImageSubDataNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglCopyImageSubDataNV" }));
    }
    return dispatch_wglCopyImageSubDataNV0(paramLong1, paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramLong2, paramInt7, paramInt8, paramInt9, paramInt10, paramInt11, paramInt12, paramInt13, paramInt14, paramInt15, l);
  }
  

  private native boolean dispatch_wglCopyImageSubDataNV0(long paramLong1, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, long paramLong2, int paramInt7, int paramInt8, int paramInt9, int paramInt10, int paramInt11, int paramInt12, int paramInt13, int paramInt14, int paramInt15, long paramLong3);
  

  public boolean wglDelayBeforeSwapNV(long paramLong, float paramFloat)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglDelayBeforeSwapNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDelayBeforeSwapNV" }));
    }
    return dispatch_wglDelayBeforeSwapNV0(paramLong, paramFloat, l);
  }
  


  private native boolean dispatch_wglDelayBeforeSwapNV0(long paramLong1, float paramFloat, long paramLong2);
  

  public int wglEnumerateVideoDevicesNV(long paramLong, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new GLException("Argument \"phDeviceList\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglEnumerateVideoDevicesNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglEnumerateVideoDevicesNV" }));
    }
    return dispatch_wglEnumerateVideoDevicesNV0(paramLong, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  


  private native int dispatch_wglEnumerateVideoDevicesNV0(long paramLong1, Object paramObject, int paramInt, long paramLong2);
  


  public boolean wglBindVideoDeviceNV(long paramLong1, int paramInt, long paramLong2, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"piAttribList\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglBindVideoDeviceNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglBindVideoDeviceNV" }));
    }
    return dispatch_wglBindVideoDeviceNV0(paramLong1, paramInt, paramLong2, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native boolean dispatch_wglBindVideoDeviceNV0(long paramLong1, int paramInt1, long paramLong2, Object paramObject, int paramInt2, long paramLong3);
  


  public boolean wglQueryCurrentContextNV(int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"piValue\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglQueryCurrentContextNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglQueryCurrentContextNV" }));
    }
    return dispatch_wglQueryCurrentContextNV0(paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native boolean dispatch_wglQueryCurrentContextNV0(int paramInt1, Object paramObject, int paramInt2, long paramLong);
  

  public boolean wglJoinSwapGroupNV(long paramLong, int paramInt)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglJoinSwapGroupNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglJoinSwapGroupNV" }));
    }
    return dispatch_wglJoinSwapGroupNV0(paramLong, paramInt, l);
  }
  

  private native boolean dispatch_wglJoinSwapGroupNV0(long paramLong1, int paramInt, long paramLong2);
  

  public boolean wglBindSwapBarrierNV(int paramInt1, int paramInt2)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglBindSwapBarrierNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglBindSwapBarrierNV" }));
    }
    return dispatch_wglBindSwapBarrierNV0(paramInt1, paramInt2, l);
  }
  


  private native boolean dispatch_wglBindSwapBarrierNV0(int paramInt1, int paramInt2, long paramLong);
  


  public boolean wglQuerySwapGroupNV(long paramLong, IntBuffer paramIntBuffer1, IntBuffer paramIntBuffer2)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new GLException("Argument \"group\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new GLException("Argument \"barrier\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglQuerySwapGroupNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglQuerySwapGroupNV" }));
    }
    return dispatch_wglQuerySwapGroupNV0(paramLong, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), l);
  }
  



  private native boolean dispatch_wglQuerySwapGroupNV0(long paramLong1, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, long paramLong2);
  



  public boolean wglQueryMaxSwapGroupsNV(long paramLong, IntBuffer paramIntBuffer1, IntBuffer paramIntBuffer2)
  {
    if (!Buffers.isDirect(paramIntBuffer1))
      throw new GLException("Argument \"maxGroups\" is not a direct buffer");
    if (!Buffers.isDirect(paramIntBuffer2))
      throw new GLException("Argument \"maxBarriers\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglQueryMaxSwapGroupsNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglQueryMaxSwapGroupsNV" }));
    }
    return dispatch_wglQueryMaxSwapGroupsNV0(paramLong, paramIntBuffer1, Buffers.getDirectBufferByteOffset(paramIntBuffer1), paramIntBuffer2, Buffers.getDirectBufferByteOffset(paramIntBuffer2), l);
  }
  



  private native boolean dispatch_wglQueryMaxSwapGroupsNV0(long paramLong1, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, long paramLong2);
  


  public boolean wglQueryFrameCountNV(long paramLong, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"count\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglQueryFrameCountNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglQueryFrameCountNV" }));
    }
    return dispatch_wglQueryFrameCountNV0(paramLong, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native boolean dispatch_wglQueryFrameCountNV0(long paramLong1, Object paramObject, int paramInt, long paramLong2);
  

  public boolean wglResetFrameCountNV(long paramLong)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglResetFrameCountNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglResetFrameCountNV" }));
    }
    return dispatch_wglResetFrameCountNV0(paramLong, l);
  }
  

  private native boolean dispatch_wglResetFrameCountNV0(long paramLong1, long paramLong2);
  

  public ByteBuffer wglAllocateMemoryNV(int paramInt, float paramFloat1, float paramFloat2, float paramFloat3)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglAllocateMemoryNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglAllocateMemoryNV" }));
    }
    
    ByteBuffer localByteBuffer = dispatch_wglAllocateMemoryNV0(paramInt, paramFloat1, paramFloat2, paramFloat3, l);
    if (localByteBuffer == null) return null;
    Buffers.nativeOrder(localByteBuffer);
    return localByteBuffer;
  }
  


  private native ByteBuffer dispatch_wglAllocateMemoryNV0(int paramInt, float paramFloat1, float paramFloat2, float paramFloat3, long paramLong);
  

  public void wglFreeMemoryNV(Buffer paramBuffer)
  {
    if (!Buffers.isDirect(paramBuffer))
      throw new GLException("Argument \"pointer\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglFreeMemoryNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglFreeMemoryNV" }));
    }
    dispatch_wglFreeMemoryNV0(paramBuffer, Buffers.getDirectBufferByteOffset(paramBuffer), l);
  }
  


  private native void dispatch_wglFreeMemoryNV0(Object paramObject, int paramInt, long paramLong);
  

  public boolean wglBindVideoCaptureDeviceNV(int paramInt, long paramLong)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglBindVideoCaptureDeviceNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglBindVideoCaptureDeviceNV" }));
    }
    return dispatch_wglBindVideoCaptureDeviceNV0(paramInt, paramLong, l);
  }
  


  private native boolean dispatch_wglBindVideoCaptureDeviceNV0(int paramInt, long paramLong1, long paramLong2);
  

  public int wglEnumerateVideoCaptureDevicesNV(long paramLong, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new GLException("Argument \"phDeviceList\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglEnumerateVideoCaptureDevicesNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglEnumerateVideoCaptureDevicesNV" }));
    }
    return dispatch_wglEnumerateVideoCaptureDevicesNV0(paramLong, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  


  private native int dispatch_wglEnumerateVideoCaptureDevicesNV0(long paramLong1, Object paramObject, int paramInt, long paramLong2);
  

  public boolean wglLockVideoCaptureDeviceNV(long paramLong1, long paramLong2)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglLockVideoCaptureDeviceNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglLockVideoCaptureDeviceNV" }));
    }
    return dispatch_wglLockVideoCaptureDeviceNV0(paramLong1, paramLong2, l);
  }
  


  private native boolean dispatch_wglLockVideoCaptureDeviceNV0(long paramLong1, long paramLong2, long paramLong3);
  

  public boolean wglQueryVideoCaptureDeviceNV(long paramLong1, long paramLong2, int paramInt, IntBuffer paramIntBuffer)
  {
    if (!Buffers.isDirect(paramIntBuffer))
      throw new GLException("Argument \"piValue\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglQueryVideoCaptureDeviceNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglQueryVideoCaptureDeviceNV" }));
    }
    return dispatch_wglQueryVideoCaptureDeviceNV0(paramLong1, paramLong2, paramInt, paramIntBuffer, Buffers.getDirectBufferByteOffset(paramIntBuffer), l);
  }
  


  private native boolean dispatch_wglQueryVideoCaptureDeviceNV0(long paramLong1, long paramLong2, int paramInt1, Object paramObject, int paramInt2, long paramLong3);
  

  public boolean wglReleaseVideoCaptureDeviceNV(long paramLong1, long paramLong2)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglReleaseVideoCaptureDeviceNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglReleaseVideoCaptureDeviceNV" }));
    }
    return dispatch_wglReleaseVideoCaptureDeviceNV0(paramLong1, paramLong2, l);
  }
  


  private native boolean dispatch_wglReleaseVideoCaptureDeviceNV0(long paramLong1, long paramLong2, long paramLong3);
  

  public boolean wglGetVideoDeviceNV(long paramLong, int paramInt, PointerBuffer paramPointerBuffer)
  {
    if (!Buffers.isDirect(paramPointerBuffer))
      throw new GLException("Argument \"hVideoDevice\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetVideoDeviceNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetVideoDeviceNV" }));
    }
    return dispatch_wglGetVideoDeviceNV0(paramLong, paramInt, paramPointerBuffer != null ? paramPointerBuffer.getBuffer() : null, Buffers.getDirectBufferByteOffset(paramPointerBuffer), l);
  }
  


  private native boolean dispatch_wglGetVideoDeviceNV0(long paramLong1, int paramInt1, Object paramObject, int paramInt2, long paramLong2);
  

  public boolean wglReleaseVideoDeviceNV(long paramLong)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglReleaseVideoDeviceNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglReleaseVideoDeviceNV" }));
    }
    return dispatch_wglReleaseVideoDeviceNV0(paramLong, l);
  }
  

  private native boolean dispatch_wglReleaseVideoDeviceNV0(long paramLong1, long paramLong2);
  

  public boolean wglBindVideoImageNV(long paramLong1, long paramLong2, int paramInt)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglBindVideoImageNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglBindVideoImageNV" }));
    }
    return dispatch_wglBindVideoImageNV0(paramLong1, paramLong2, paramInt, l);
  }
  

  private native boolean dispatch_wglBindVideoImageNV0(long paramLong1, long paramLong2, int paramInt, long paramLong3);
  

  public boolean wglReleaseVideoImageNV(long paramLong, int paramInt)
  {
    long l = _context.getWGLExtProcAddressTable()._addressof_wglReleaseVideoImageNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglReleaseVideoImageNV" }));
    }
    return dispatch_wglReleaseVideoImageNV0(paramLong, paramInt, l);
  }
  


  private native boolean dispatch_wglReleaseVideoImageNV0(long paramLong1, int paramInt, long paramLong2);
  

  public boolean wglSendPbufferToVideoNV(long paramLong, int paramInt, LongBuffer paramLongBuffer, boolean paramBoolean)
  {
    if (!Buffers.isDirect(paramLongBuffer))
      throw new GLException("Argument \"pulCounterPbuffer\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglSendPbufferToVideoNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglSendPbufferToVideoNV" }));
    }
    return dispatch_wglSendPbufferToVideoNV0(paramLong, paramInt, paramLongBuffer, Buffers.getDirectBufferByteOffset(paramLongBuffer), paramBoolean, l);
  }
  



  private native boolean dispatch_wglSendPbufferToVideoNV0(long paramLong1, int paramInt1, Object paramObject, int paramInt2, boolean paramBoolean, long paramLong2);
  


  public boolean wglGetVideoInfoNV(long paramLong, LongBuffer paramLongBuffer1, LongBuffer paramLongBuffer2)
  {
    if (!Buffers.isDirect(paramLongBuffer1))
      throw new GLException("Argument \"pulCounterOutputPbuffer\" is not a direct buffer");
    if (!Buffers.isDirect(paramLongBuffer2))
      throw new GLException("Argument \"pulCounterOutputVideo\" is not a direct buffer");
    long l = _context.getWGLExtProcAddressTable()._addressof_wglGetVideoInfoNV;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetVideoInfoNV" }));
    }
    return dispatch_wglGetVideoInfoNV0(paramLong, paramLongBuffer1, Buffers.getDirectBufferByteOffset(paramLongBuffer1), paramLongBuffer2, Buffers.getDirectBufferByteOffset(paramLongBuffer2), l);
  }
  


  private native boolean dispatch_wglGetVideoInfoNV0(long paramLong1, Object paramObject1, int paramInt1, Object paramObject2, int paramInt2, long paramLong2);
  


  public WGLExtImpl(WindowsWGLContext paramWindowsWGLContext)
  {
    _context = paramWindowsWGLContext;
  }
  
  public boolean isFunctionAvailable(String paramString) {
    return _context.isFunctionAvailable(paramString);
  }
  
  public boolean isExtensionAvailable(String paramString) {
    return _context.isExtensionAvailable(paramString);
  }
}
