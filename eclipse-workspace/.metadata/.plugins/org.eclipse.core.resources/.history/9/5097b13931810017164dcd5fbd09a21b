package com.leapmotion.leap;




public class Gesture
  extends Interface
{
  private long swigCPtr;
  


  public Gesture(long paramLong, boolean paramBoolean)
  {
    super(LeapJNI.Gesture_SWIGUpcast(paramLong), paramBoolean);
    swigCPtr = paramLong;
  }
  
  public static long getCPtr(Gesture paramGesture) {
    return paramGesture == null ? 0L : swigCPtr;
  }
  
  protected void finalize() {
    delete();
  }
  
  public synchronized void delete() {
    if (swigCPtr != 0L) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        LeapJNI.delete_Gesture(swigCPtr);
      }
      swigCPtr = 0L;
    }
    super.delete();
  }
  
  public Gesture() {
    this(LeapJNI.new_Gesture__SWIG_0(), true);
  }
  
  public Gesture(Gesture paramGesture) {
    this(LeapJNI.new_Gesture__SWIG_1(getCPtr(paramGesture), paramGesture), true);
  }
  
  public Type type() {
    return Type.swigToEnum(LeapJNI.Gesture_type(swigCPtr, this));
  }
  
  public State state() {
    return State.swigToEnum(LeapJNI.Gesture_state(swigCPtr, this));
  }
  
  public int id() {
    return LeapJNI.Gesture_id(swigCPtr, this);
  }
  
  public long duration() {
    return LeapJNI.Gesture_duration(swigCPtr, this);
  }
  
  public float durationSeconds() {
    return LeapJNI.Gesture_durationSeconds(swigCPtr, this);
  }
  
  public Frame frame() {
    return new Frame(LeapJNI.Gesture_frame(swigCPtr, this), true);
  }
  
  public HandList hands() {
    return new HandList(LeapJNI.Gesture_hands(swigCPtr, this), true);
  }
  
  public PointableList pointables() {
    return new PointableList(LeapJNI.Gesture_pointables(swigCPtr, this), true);
  }
  
  public boolean isValid() {
    return LeapJNI.Gesture_isValid(swigCPtr, this);
  }
  
  public boolean equals(Gesture paramGesture) {
    return LeapJNI.Gesture_equals(swigCPtr, this, getCPtr(paramGesture), paramGesture);
  }
  
  public String toString() {
    return LeapJNI.Gesture_toString(swigCPtr, this);
  }
  
  public static Gesture invalid() {
    return new Gesture(LeapJNI.Gesture_invalid(), false);
  }
  
  public static enum Type {
    TYPE_INVALID(-1), 
    TYPE_SWIPE(1), 
    TYPE_CIRCLE(4), 
    TYPE_SCREEN_TAP(5), 
    TYPE_KEY_TAP(6);
    
    public final int swigValue() {
      return swigValue;
    }
    
    public static Type swigToEnum(int paramInt) {
      Type[] arrayOfType1 = (Type[])Type.class.getEnumConstants();
      if ((paramInt < arrayOfType1.length) && (paramInt >= 0) && (swigValue == paramInt))
        return arrayOfType1[paramInt];
      for (Type localType : arrayOfType1)
        if (swigValue == paramInt)
          return localType;
      throw new IllegalArgumentException("No enum " + Type.class + " with value " + paramInt);
    }
    
    private Type()
    {
      swigValue = SwigNext.access$008();
    }
    
    private Type(int paramInt)
    {
      swigValue = paramInt;
      SwigNext.access$002(paramInt + 1);
    }
    
    private Type(Type paramType)
    {
      swigValue = swigValue;
      SwigNext.access$002(swigValue + 1);
    }
    
    private final int swigValue;
    private static class SwigNext
    {
      private static int next = 0;
      
      private SwigNext() {}
    } }
  
  public static enum State { STATE_INVALID(-1), 
    STATE_START(1), 
    STATE_UPDATE(2), 
    STATE_STOP(3);
    
    public final int swigValue() {
      return swigValue;
    }
    
    public static State swigToEnum(int paramInt) {
      State[] arrayOfState1 = (State[])State.class.getEnumConstants();
      if ((paramInt < arrayOfState1.length) && (paramInt >= 0) && (swigValue == paramInt))
        return arrayOfState1[paramInt];
      for (State localState : arrayOfState1)
        if (swigValue == paramInt)
          return localState;
      throw new IllegalArgumentException("No enum " + State.class + " with value " + paramInt);
    }
    
    private State()
    {
      swigValue = SwigNext.access$108();
    }
    
    private State(int paramInt)
    {
      swigValue = paramInt;
      SwigNext.access$102(paramInt + 1);
    }
    
    private State(State paramState)
    {
      swigValue = swigValue;
      SwigNext.access$102(swigValue + 1);
    }
    
    private final int swigValue;
    private static class SwigNext
    {
      private static int next = 0;
      
      private SwigNext() {}
    }
  }
}
