package jogamp.graph.font.typecast.tt.engine;

import jogamp.graph.font.typecast.ot.Mnemonic;

























public class Parser
{
  private final short[][] instructions = new short[3][];
  




  public Parser() {}
  



  public int advanceIP(int paramInt)
  {
    int i = paramInt >> 16;
    int j = paramInt & 0xFFFF;
    
    paramInt++;
    int k; if (64 == instructions[i][j])
    {
      k = instructions[i][(++j)];
      paramInt += k + 1;
    } else if (65 == instructions[i][j])
    {
      k = instructions[i][(++j)];
      paramInt += k * 2 + 1;
    } else if (176 == (instructions[i][j] & 0xF8)) {
      k = (short)((instructions[i][j] & 0x7) + 1);
      paramInt += k;
    } else if (184 == (instructions[i][j] & 0xF8)) {
      k = (short)((instructions[i][j] & 0x7) + 1);
      paramInt += k * 2;
    }
    return paramInt;
  }
  
  public int getISLength(int paramInt) {
    return instructions[paramInt].length;
  }
  
  public short getOpcode(int paramInt) {
    return instructions[(paramInt >> 16)][(paramInt & 0xFFFF)];
  }
  
  public short getPushCount(int paramInt) {
    int i = instructions[(paramInt >> 16)][(paramInt & 0xFFFF)];
    if ((64 == i) || (65 == i))
      return instructions[(paramInt >> 16)][((paramInt & 0xFFFF) + 1)];
    if ((176 == (i & 0xF8)) || (184 == (i & 0xF8))) {
      return (short)((i & 0x7) + 1);
    }
    return 0;
  }
  
  public int[] getPushData(int paramInt) {
    int i = getPushCount(paramInt);
    int[] arrayOfInt = new int[i];
    int j = paramInt >> 16;
    int k = paramInt & 0xFFFF;
    int m = instructions[j][k];
    int n; if (64 == m) {
      for (n = 0; n < i; n++) {
        arrayOfInt[n] = instructions[j][(k + n + 2)];
      }
    } else if (176 == (m & 0xF8)) {
      for (n = 0; n < i; n++) {
        arrayOfInt[n] = instructions[j][(k + n + 1)];
      }
    } else if (65 == m) {
      for (n = 0; n < i; n++) {
        arrayOfInt[n] = (instructions[j][(k + n * 2 + 2)] << 8 | instructions[j][(k + n * 2 + 3)]);
      }
    } else if (184 == (m & 0xF8)) {
      for (n = 0; n < i; n++) {
        arrayOfInt[n] = (instructions[j][(k + n * 2 + 1)] << 8 | instructions[j][(k + n * 2 + 2)]);
      }
    }
    return arrayOfInt;
  }
  
  public int handleElse(int paramInt) {
    while (instructions[(paramInt >> 16)][(paramInt & 0xFFFF)] != 89) {
      paramInt = advanceIP(paramInt);
    }
    return paramInt;
  }
  
  public int handleIf(boolean paramBoolean, int paramInt) {
    if (!paramBoolean)
    {


      while ((instructions[(paramInt >> 16)][(paramInt & 0xFFFF)] != 27) && (instructions[(paramInt >> 16)][(paramInt & 0xFFFF)] != 89))
      {
        paramInt = advanceIP(paramInt);
      }
    }
    return paramInt;
  }
  


  public void setCvtProgram(short[] paramArrayOfShort)
  {
    instructions[1] = paramArrayOfShort;
  }
  


  public void setFontProgram(short[] paramArrayOfShort)
  {
    instructions[0] = paramArrayOfShort;
  }
  


  public void setGlyphProgram(short[] paramArrayOfShort)
  {
    instructions[2] = paramArrayOfShort;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    int i = 0;
    int[] arrayOfInt; int j; while (i < instructions[0].length) {
      localStringBuilder.append(Mnemonic.getMnemonic(getOpcode(i)));
      if (getPushCount(i) > 0) {
        arrayOfInt = getPushData(i);
        for (j = 0; j < arrayOfInt.length; j++)
          localStringBuilder.append(" ").append(arrayOfInt[j]);
      }
      localStringBuilder.append("\n");
      i = advanceIP(i);
    }
    localStringBuilder.append("\n");
    i = 65536;
    while (i < (0x10000 | instructions[1].length)) {
      localStringBuilder.append(Mnemonic.getMnemonic(getOpcode(i)));
      if (getPushCount(i) > 0) {
        arrayOfInt = getPushData(i);
        for (j = 0; j < arrayOfInt.length; j++) {
          localStringBuilder.append(" ").append(arrayOfInt[j]);
        }
      }
      localStringBuilder.append("\n");
      i = advanceIP(i);
    }
    localStringBuilder.append("\n");
    i = 131072;
    while (i < (0x20000 | instructions[2].length)) {
      localStringBuilder.append(Mnemonic.getMnemonic(getOpcode(i)));
      if (getPushCount(i) > 0) {
        arrayOfInt = getPushData(i);
        for (j = 0; j < arrayOfInt.length; j++) {
          localStringBuilder.append(" ").append(arrayOfInt[j]);
        }
      }
      localStringBuilder.append("\n");
      i = advanceIP(i);
    }
    return localStringBuilder.toString();
  }
}
