package jogamp.opengl.windows.wgl;

import com.jogamp.gluegen.runtime.opengl.GLProcAddressResolver;
import com.jogamp.opengl.GLException;
import java.nio.ByteBuffer;
import jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR;











































public class WGL
{
  public static final int WGL_SWAP_MAIN_PLANE = 1;
  public static final int WGL_SWAP_UNDERLAY15 = 1073741824;
  public static final int WGL_SWAP_UNDERLAY14 = 536870912;
  public static final int WGL_SWAP_UNDERLAY13 = 268435456;
  public static final int WGL_SWAP_UNDERLAY12 = 134217728;
  public static final int WGL_SWAP_UNDERLAY11 = 67108864;
  public static final int WGL_SWAP_UNDERLAY10 = 33554432;
  public static final int WGL_SWAP_OVERLAY14 = 16384;
  public static final int WGL_SWAP_OVERLAY15 = 32768;
  public static final int WGL_SWAP_OVERLAY12 = 4096;
  public static final int WGL_SWAP_OVERLAY13 = 8192;
  public static final int WGL_SWAP_OVERLAY10 = 1024;
  public static final int WGL_SWAP_OVERLAY11 = 2048;
  public static final int WGL_SWAP_OVERLAY9 = 512;
  public static final int WGL_SWAP_OVERLAY7 = 128;
  public static final int WGL_SWAP_OVERLAY8 = 256;
  public static final int WGL_SWAP_OVERLAY5 = 32;
  public static final int WGL_SWAP_OVERLAY6 = 64;
  public static final int WGL_SWAP_OVERLAY3 = 8;
  public static final int WGL_SWAP_OVERLAY4 = 16;
  public static final int WGL_SWAP_OVERLAY1 = 2;
  public static final int WGL_SWAP_OVERLAY2 = 4;
  public static final int WGL_SWAP_UNDERLAY4 = 524288;
  public static final int WGL_SWAP_UNDERLAY3 = 262144;
  public static final int WGL_SWAP_UNDERLAY2 = 131072;
  public static final int WGL_SWAP_UNDERLAY1 = 65536;
  public static final int WGL_SWAP_UNDERLAY9 = 16777216;
  public static final int WGL_SWAP_UNDERLAY8 = 8388608;
  public static final int WGL_SWAP_UNDERLAY7 = 4194304;
  public static final int WGL_SWAP_UNDERLAY6 = 2097152;
  public static final int WGL_SWAP_UNDERLAY5 = 1048576;
  
  public WGL() {}
  
  public static boolean wglCopyContext(long paramLong1, long paramLong2, int paramInt)
  {
    long l = wglProcAddressTable_addressof_wglCopyContext;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglCopyContext" }));
    }
    return dispatch_wglCopyContext0(paramLong1, paramLong2, paramInt, l);
  }
  

  private static native boolean dispatch_wglCopyContext0(long paramLong1, long paramLong2, int paramInt, long paramLong3);
  

  public static long wglCreateContext(long paramLong)
  {
    long l = wglProcAddressTable_addressof_wglCreateContext;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglCreateContext" }));
    }
    return dispatch_wglCreateContext0(paramLong, l);
  }
  

  private static native long dispatch_wglCreateContext0(long paramLong1, long paramLong2);
  

  public static boolean wglDeleteContext(long paramLong)
  {
    long l = wglProcAddressTable_addressof_wglDeleteContext;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDeleteContext" }));
    }
    return dispatch_wglDeleteContext0(paramLong, l);
  }
  

  private static native boolean dispatch_wglDeleteContext0(long paramLong1, long paramLong2);
  

  public static long wglGetCurrentContext()
  {
    long l = wglProcAddressTable_addressof_wglGetCurrentContext;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetCurrentContext" }));
    }
    return dispatch_wglGetCurrentContext0(l);
  }
  

  private static native long dispatch_wglGetCurrentContext0(long paramLong);
  

  public static long wglGetCurrentDC()
  {
    long l = wglProcAddressTable_addressof_wglGetCurrentDC;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetCurrentDC" }));
    }
    return dispatch_wglGetCurrentDC0(l);
  }
  

  private static native long dispatch_wglGetCurrentDC0(long paramLong);
  

  public static boolean wglMakeCurrent(long paramLong1, long paramLong2)
  {
    long l = wglProcAddressTable_addressof_wglMakeCurrent;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglMakeCurrent" }));
    }
    return dispatch_wglMakeCurrent0(paramLong1, paramLong2, l);
  }
  

  private static native boolean dispatch_wglMakeCurrent0(long paramLong1, long paramLong2, long paramLong3);
  

  public static boolean wglShareLists(long paramLong1, long paramLong2)
  {
    long l = wglProcAddressTable_addressof_wglShareLists;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglShareLists" }));
    }
    return dispatch_wglShareLists0(paramLong1, paramLong2, l);
  }
  

  private static native boolean dispatch_wglShareLists0(long paramLong1, long paramLong2, long paramLong3);
  

  public static long wglGetProcAddress(String paramString)
  {
    long l = wglProcAddressTable_addressof_wglGetProcAddress;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetProcAddress" }));
    }
    return dispatch_wglGetProcAddress0(paramString, l);
  }
  

  private static native long dispatch_wglGetProcAddress0(String paramString, long paramLong);
  

  public static boolean wglSwapLayerBuffers(long paramLong, int paramInt)
  {
    long l = wglProcAddressTable_addressof_wglSwapLayerBuffers;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglSwapLayerBuffers" }));
    }
    return dispatch_wglSwapLayerBuffers0(paramLong, paramInt, l);
  }
  

  private static native boolean dispatch_wglSwapLayerBuffers0(long paramLong1, int paramInt, long paramLong2);
  

  public static int wglChoosePixelFormat(long paramLong, PIXELFORMATDESCRIPTOR paramPIXELFORMATDESCRIPTOR)
  {
    long l = wglProcAddressTable_addressof_wglChoosePixelFormat;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglChoosePixelFormat" }));
    }
    return dispatch_wglChoosePixelFormat0(paramLong, paramPIXELFORMATDESCRIPTOR == null ? null : paramPIXELFORMATDESCRIPTOR.getBuffer(), l);
  }
  

  private static native int dispatch_wglChoosePixelFormat0(long paramLong1, ByteBuffer paramByteBuffer, long paramLong2);
  

  public static int wglDescribePixelFormat(long paramLong, int paramInt1, int paramInt2, PIXELFORMATDESCRIPTOR paramPIXELFORMATDESCRIPTOR)
  {
    long l = wglProcAddressTable_addressof_wglDescribePixelFormat;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglDescribePixelFormat" }));
    }
    return dispatch_wglDescribePixelFormat0(paramLong, paramInt1, paramInt2, paramPIXELFORMATDESCRIPTOR == null ? null : paramPIXELFORMATDESCRIPTOR.getBuffer(), l);
  }
  

  private static native int dispatch_wglDescribePixelFormat0(long paramLong1, int paramInt1, int paramInt2, ByteBuffer paramByteBuffer, long paramLong2);
  

  public static int wglGetPixelFormat(long paramLong)
  {
    long l = wglProcAddressTable_addressof_wglGetPixelFormat;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglGetPixelFormat" }));
    }
    return dispatch_wglGetPixelFormat0(paramLong, l);
  }
  

  private static native int dispatch_wglGetPixelFormat0(long paramLong1, long paramLong2);
  

  public static boolean wglSetPixelFormat(long paramLong, int paramInt, PIXELFORMATDESCRIPTOR paramPIXELFORMATDESCRIPTOR)
  {
    long l = wglProcAddressTable_addressof_wglSetPixelFormat;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglSetPixelFormat" }));
    }
    return dispatch_wglSetPixelFormat0(paramLong, paramInt, paramPIXELFORMATDESCRIPTOR == null ? null : paramPIXELFORMATDESCRIPTOR.getBuffer(), l);
  }
  

  private static native boolean dispatch_wglSetPixelFormat0(long paramLong1, int paramInt, ByteBuffer paramByteBuffer, long paramLong2);
  

  public static boolean wglSwapBuffers(long paramLong)
  {
    long l = wglProcAddressTable_addressof_wglSwapBuffers;
    if (l == 0L) {
      throw new GLException(String.format("Method \"%s\" not available", new Object[] { "wglSwapBuffers" }));
    }
    return dispatch_wglSwapBuffers0(paramLong, l);
  }
  


  private static native boolean dispatch_wglSwapBuffers0(long paramLong1, long paramLong2);
  

  private static WGLProcAddressTable wglProcAddressTable = new WGLProcAddressTable(new GLProcAddressResolver());
  public static WGLProcAddressTable getWGLProcAddressTable() { return wglProcAddressTable; }
  
  static long wglGetProcAddress(long paramLong, String paramString) {
    if (paramLong == 0L) {
      throw new GLException("Passed null pointer for method \"wglGetProcAddress\"");
    }
    return dispatch_wglGetProcAddress0(paramString, paramLong);
  }
}
