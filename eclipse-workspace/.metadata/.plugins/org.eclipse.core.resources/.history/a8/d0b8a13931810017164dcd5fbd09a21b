package processing.opengl;

import com.jogamp.common.util.IOUtil.ClassResources;
import com.jogamp.nativewindow.MutableGraphicsConfiguration;
import com.jogamp.nativewindow.NativeSurface;
import com.jogamp.nativewindow.util.Dimension;
import com.jogamp.nativewindow.util.InsetsImmutable;
import com.jogamp.nativewindow.util.PixelFormat;
import com.jogamp.nativewindow.util.PixelRectangle;
import com.jogamp.nativewindow.util.PixelRectangle.GenericPixelRect;
import com.jogamp.nativewindow.util.RectangleImmutable;
import com.jogamp.newt.Display;
import com.jogamp.newt.Display.PointerIcon;
import com.jogamp.newt.MonitorDevice;
import com.jogamp.newt.NewtFactory;
import com.jogamp.newt.Screen;
import com.jogamp.newt.awt.NewtCanvasAWT;
import com.jogamp.newt.event.KeyAdapter;
import com.jogamp.newt.event.MouseAdapter;
import com.jogamp.newt.event.WindowEvent;
import com.jogamp.newt.event.WindowListener;
import com.jogamp.newt.event.WindowUpdateEvent;
import com.jogamp.newt.opengl.GLWindow;
import com.jogamp.newt.util.EDTUtil;
import com.jogamp.opengl.GLAnimatorControl;
import com.jogamp.opengl.GLAnimatorControl.UncaughtExceptionHandler;
import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.GLCapabilities;
import com.jogamp.opengl.GLEventListener;
import com.jogamp.opengl.GLException;
import com.jogamp.opengl.GLProfile;
import com.jogamp.opengl.util.FPSAnimator;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.awt.image.Raster;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.ImageIcon;
import processing.core.PApplet;
import processing.core.PGraphics;
import processing.core.PImage;
import processing.core.PSurface;


























public class PSurfaceJOGL
  implements PSurface
{
  public static GLProfile profile;
  public PJOGL pgl;
  protected GLWindow window;
  protected FPSAnimator animator;
  protected Rectangle screenRect;
  protected PApplet sketch;
  protected PGraphics graphics;
  protected int sketchX;
  protected int sketchY;
  protected int sketchWidth0;
  protected int sketchHeight0;
  protected int sketchWidth;
  protected int sketchHeight;
  protected Display display;
  protected Screen screen;
  protected List<MonitorDevice> monitors;
  protected MonitorDevice displayDevice;
  protected Throwable drawException;
  protected Object waitObject = new Object();
  
  protected NewtCanvasAWT canvas;
  
  protected float[] currentPixelScale = { 0.0F, 0.0F };
  
  protected boolean external = false;
  
  public PSurfaceJOGL(PGraphics graphics) {
    this.graphics = graphics;
    pgl = ((PJOGL)pgl);
  }
  
  public void initOffscreen(PApplet sketch)
  {
    this.sketch = sketch;
    
    sketchWidth = sketch.sketchWidth();
    sketchHeight = sketch.sketchHeight();
    
    if (window != null) {
      canvas = new NewtCanvasAWT(window);
      canvas.setBounds(0, 0, window.getWidth(), window.getHeight());
      canvas.setFocusable(true);
    }
  }
  
  public void initFrame(PApplet sketch)
  {
    this.sketch = sketch;
    initIcons();
    

    File mesaLib = new File("/usr/lib/arm-linux-gnueabihf/libGLESv2.so.2");
    if (mesaLib.exists()) {
      System.out.println("\nIf you are receiving an error regarding the undefined symbol bcm_host_init, make sure you have the package libgles2-mesa deinstalled. This can be done by executing \"sudo aptitude remove libgles2-mesa\" in the terminal, and is a known issue with the Raspbian distribution.\n");
    }
    



    initDisplay();
    initGL();
    initWindow();
    initListeners();
    initAnimator();
  }
  
  public Object getNative()
  {
    return window;
  }
  
  protected void initDisplay()
  {
    Display tmpDisplay = NewtFactory.createDisplay(null);
    tmpDisplay.addReference();
    Screen tmpScreen = NewtFactory.createScreen(tmpDisplay, 0);
    tmpScreen.addReference();
    
    monitors = new ArrayList();
    GraphicsEnvironment environment = GraphicsEnvironment.getLocalGraphicsEnvironment();
    GraphicsDevice[] awtDevices = environment.getScreenDevices();
    List<MonitorDevice> newtDevices = tmpScreen.getMonitorDevices();
    



    if (PApplet.platform == 3) {
      for (GraphicsDevice device : awtDevices) {
        String did = device.getIDstring();
        String[] parts = did.split("\\.");
        String id1 = "";
        if (1 < parts.length) {
          id1 = parts[1].trim();
        }
        MonitorDevice monitor = null;
        int id0 = newtDevices.size() > 0 ? ((MonitorDevice)newtDevices.get(0)).getId() : 0;
        for (int i = 0; i < newtDevices.size(); i++) {
          MonitorDevice mon = (MonitorDevice)newtDevices.get(i);
          String mid = String.valueOf(mon.getId() - id0);
          if (id1.equals(mid)) {
            monitor = mon;
            break;
          }
        }
        if (monitor != null) {
          monitors.add(monitor);
        }
      }
    } else if (PApplet.platform == 1)
    {

      monitors.addAll(newtDevices);
    } else {
      for (GraphicsDevice device : awtDevices) {
        String did = device.getIDstring();
        String[] parts = did.split("Display");
        String id1 = "";
        if (1 < parts.length) {
          id1 = parts[1].trim();
        }
        MonitorDevice monitor = null;
        for (int i = 0; i < newtDevices.size(); i++) {
          MonitorDevice mon = (MonitorDevice)newtDevices.get(i);
          String mid = String.valueOf(mon.getId());
          if (id1.equals(mid)) {
            monitor = mon;
            break;
          }
        }
        if (monitor == null)
        {
          for (int i = 0; i < newtDevices.size(); i++) {
            MonitorDevice mon = (MonitorDevice)newtDevices.get(i);
            String mid = String.valueOf(mon.getId());
            if (-1 < did.indexOf(mid)) {
              monitor = mon;
              break;
            }
          }
        }
        if (monitor != null) {
          monitors.add(monitor);
        }
      }
    }
    
    displayDevice = null;
    int displayNum = sketch.sketchDisplay();
    if (displayNum > 0) {
      if (displayNum <= monitors.size()) {
        displayDevice = ((MonitorDevice)monitors.get(displayNum - 1));
      } else {
        System.err.format("Display %d does not exist, using the default display instead.%n", new Object[] {
          Integer.valueOf(displayNum) });
        for (int i = 0; i < monitors.size(); i++) {
          System.err.format("Display %d is %s%n", new Object[] { Integer.valueOf(i + 1), monitors.get(i) });
        }
      }
    } else if (monitors.size() > 0) {
      displayDevice = ((MonitorDevice)monitors.get(0));
    }
    
    if (displayDevice != null) {
      screen = displayDevice.getScreen();
      display = screen.getDisplay();
    } else {
      screen = tmpScreen;
      display = tmpDisplay;
      displayDevice = screen.getPrimaryMonitor();
    }
  }
  

  protected void initGL()
  {
    if (profile == null) {
      if (PJOGL.profile == 1) {
        try {
          profile = GLProfile.getGL2ES1();
        } catch (GLException localGLException1) {
          profile = GLProfile.getMaxFixedFunc(true);
        }
      } else if (PJOGL.profile == 2) {
        try {
          profile = GLProfile.getGL2ES2();
        } catch (GLException localGLException2) {
          profile = GLProfile.getMaxProgrammable(true);
        }
      } else if (PJOGL.profile == 3) {
        try {
          profile = GLProfile.getGL2GL3();
        } catch (GLException localGLException3) {
          profile = GLProfile.getMaxProgrammable(true);
        }
        if (!profile.isGL3()) {
          PGraphics.showWarning("Requested profile GL3 but is not available, got: " + profile);
        }
      } else if (PJOGL.profile == 4) {
        try {
          profile = GLProfile.getGL4ES3();
        } catch (GLException localGLException4) {
          profile = GLProfile.getMaxProgrammable(true);
        }
        if (!profile.isGL4())
          PGraphics.showWarning("Requested profile GL4 but is not available, got: " + profile);
      } else {
        throw new RuntimeException("Unsupported OpenGL profile.");
      }
    }
    
    GLCapabilities caps = new GLCapabilities(profile);
    caps.setAlphaBits(PGL.REQUESTED_ALPHA_BITS);
    caps.setDepthBits(PGL.REQUESTED_DEPTH_BITS);
    caps.setStencilBits(PGL.REQUESTED_STENCIL_BITS);
    




    caps.setSampleBuffers(true);
    caps.setNumSamples(PGL.smoothToSamples(graphics.smooth));
    caps.setBackgroundOpaque(true);
    caps.setOnscreen(true);
    pgl.setCaps(caps);
  }
  
  protected void initWindow()
  {
    window = GLWindow.create(screen, pgl.getCaps());
    








    boolean spanDisplays = sketch.sketchDisplay() == 0;
    screenRect = (spanDisplays ? 
      new Rectangle(0, 0, screen.getWidth(), screen.getHeight()) : 
      new Rectangle(0, 0, 
      displayDevice.getViewportInWindowUnits().getWidth(), 
      displayDevice.getViewportInWindowUnits().getHeight()));
    


    sketch.displayWidth = screenRect.width;
    sketch.displayHeight = screenRect.height;
    
    sketchWidth0 = sketch.sketchWidth();
    sketchHeight0 = sketch.sketchHeight();
    



















    sketchWidth = sketch.sketchWidth();
    sketchHeight = sketch.sketchHeight();
    

    boolean fullScreen = sketch.sketchFullScreen();
    













    if ((fullScreen) || (spanDisplays)) {
      sketchWidth = screenRect.width;
      sketchHeight = screenRect.height;
    }
    float[] reqSurfacePixelScale;
    float[] reqSurfacePixelScale;
    if (graphics.is2X())
    {
      reqSurfacePixelScale = new float[] { 0.0F, 
        0.0F };
    }
    else {
      reqSurfacePixelScale = new float[] { 1.0F, 
        1.0F };
    }
    window.setSurfaceScale(reqSurfacePixelScale);
    window.setSize(sketchWidth, sketchHeight);
    window.setResizable(false);
    setSize(sketchWidth, sketchHeight);
    sketchX = displayDevice.getViewportInWindowUnits().getX();
    sketchY = displayDevice.getViewportInWindowUnits().getY();
    if (fullScreen) {
      PApplet.hideMenuBar();
      window.setTopLevelPosition(sketchX, sketchY);
      if (spanDisplays) {
        window.setFullscreen(monitors);
      } else {
        List<MonitorDevice> display = Collections.singletonList(displayDevice);
        window.setFullscreen(display);
      }
    }
  }
  
  protected void initListeners()
  {
    NEWTMouseListener mouseListener = new NEWTMouseListener();
    window.addMouseListener(mouseListener);
    NEWTKeyListener keyListener = new NEWTKeyListener();
    window.addKeyListener(keyListener);
    NEWTWindowListener winListener = new NEWTWindowListener();
    window.addWindowListener(winListener);
    
    DrawListener drawlistener = new DrawListener();
    window.addGLEventListener(drawlistener);
  }
  
  protected void initAnimator()
  {
    animator = new FPSAnimator(window, 60);
    drawException = null;
    animator.setUncaughtExceptionHandler(new GLAnimatorControl.UncaughtExceptionHandler()
    {

      public void uncaughtException(GLAnimatorControl animator, GLAutoDrawable drawable, Throwable cause)
      {
        synchronized (waitObject) {
          drawException = cause;
          waitObject.notify();








        }
        








      }
      









    });new Thread(new Runnable()
    {
      public void run()
      {
        synchronized (waitObject) {
          try {
            if (drawException == null) waitObject.wait();
          } catch (InterruptedException e) {
            e.printStackTrace();
          }
          
          if (drawException != null) {
            Throwable cause = drawException.getCause();
            if (!(cause instanceof ThreadDeath))
            {

              if ((cause instanceof RuntimeException))
                throw ((RuntimeException)cause);
              if ((cause instanceof UnsatisfiedLinkError))
                throw new UnsatisfiedLinkError(cause.getMessage());
              if (cause == null) {
                throw new RuntimeException(drawException.getMessage());
              }
              throw new RuntimeException(cause);
            }
          }
        }
      }
    })
    
























      .start();
  }
  

  public void setTitle(final String title)
  {
    display.getEDTUtil().invoke(false, new Runnable()
    {
      public void run() {
        window.setTitle(title);
      }
    });
  }
  

  public void setVisible(final boolean visible)
  {
    display.getEDTUtil().invoke(false, new Runnable()
    {
      public void run() {
        window.setVisible(visible);
      }
    });
  }
  

  public void setResizable(final boolean resizable)
  {
    display.getEDTUtil().invoke(false, new Runnable()
    {
      public void run() {
        window.setResizable(resizable);
      }
    });
  }
  
  public void setIcon(PImage icon)
  {
    PGraphics.showWarning("Window icons for OpenGL sketches can only be set in settings()\nusing PJOGL.setIcon(filename).");
  }
  


  public void setAlwaysOnTop(final boolean always)
  {
    display.getEDTUtil().invoke(false, new Runnable()
    {
      public void run() {
        window.setAlwaysOnTop(always);
      }
    });
  }
  
  protected void initIcons()
  {
    IOUtil.ClassResources res = null;
    if ((PJOGL.icons == null) || (PJOGL.icons.length == 0))
    {
      int[] sizes = { 16, 32, 48, 64, 128, 256, 512 };
      String[] iconImages = new String[sizes.length];
      for (int i = 0; i < sizes.length; i++) {
        iconImages[i] = ("/icon/icon-" + sizes[i] + ".png");
      }
      res = new IOUtil.ClassResources(iconImages, 
        PApplet.class.getClassLoader(), 
        PApplet.class);
    }
    else {
      String[] iconImages = new String[PJOGL.icons.length];
      for (int i = 0; i < PJOGL.icons.length; i++) {
        iconImages[i] = resourceFilename(PJOGL.icons[i]);
      }
      
      res = new IOUtil.ClassResources(iconImages, 
        sketch.getClass().getClassLoader(), 
        sketch.getClass());
    }
    NewtFactory.setWindowIcons(res);
  }
  


  private String resourceFilename(String filename)
  {
    InputStream stream = null;
    
    try
    {
      File file = new File(sketch.dataPath(filename));
      if (!file.exists())
      {
        file = sketch.sketchFile(filename);
      }
      
      if ((file.exists()) && (!file.isDirectory())) {
        try
        {
          String filePath = file.getCanonicalPath();
          String filenameActual = new File(filePath).getName();
          
          String filenameShort = new File(filename).getName();
          



          if (!filenameActual.equals(filenameShort)) {
            throw new RuntimeException("This file is named " + 
              filenameActual + " not " + 
              filename + ". Rename the file " + 
              "or change your code.");
          }
        }
        catch (IOException localIOException1) {}
      }
      stream = new FileInputStream(file);
      if (stream != null) {
        stream.close();
        return file.getCanonicalPath();
      }
    }
    catch (IOException localIOException2) {}catch (SecurityException localSecurityException1) {}
    



    ClassLoader cl = sketch.getClass().getClassLoader();
    

    try
    {
      stream = cl.getResourceAsStream("data/" + filename);
      if (stream != null) {
        String cn = stream.getClass().getName();
        



        if (!cn.equals("sun.plugin.cache.EmptyInputStream")) {
          stream.close();
          return "data/" + filename;
        }
      }
      



      stream = cl.getResourceAsStream(filename);
      if (stream != null) {
        String cn = stream.getClass().getName();
        if (!cn.equals("sun.plugin.cache.EmptyInputStream")) {
          stream.close();
          return filename;
        }
        
      }
      
    }
    catch (IOException localIOException3)
    {
      try
      {
        String path = sketch.dataPath(filename);
        stream = new FileInputStream(path);
        if (stream != null) {
          stream.close();
          return path;
        }
      }
      catch (IOException localIOException4) {
        try {
          String path = sketch.sketchPath(filename);
          stream = new FileInputStream(path);
          if (stream != null) {
            stream.close();
            return path;
          }
        }
        catch (Exception localException1) {
          try {
            stream = new FileInputStream(filename);
            if (stream != null) {
              stream.close();
              return filename;
            }
          }
          catch (IOException localIOException5) {}
        }
      }
      catch (SecurityException localSecurityException2) {}catch (Exception e)
      {
        e.printStackTrace();
      }
    }
    return "";
  }
  

  public void placeWindow(int[] location, int[] editorLocation)
  {
    int x = window.getX() - window.getInsets().getLeftWidth();
    int y = window.getY() - window.getInsets().getTopHeight();
    int w = window.getWidth() + window.getInsets().getTotalWidth();
    int h = window.getHeight() + window.getInsets().getTotalHeight();
    
    if (location != null)
    {
      window.setTopLevelPosition(location[0], location[1]);
    }
    else if (editorLocation != null)
    {
      int locationX = editorLocation[0] - 20;
      int locationY = editorLocation[1];
      
      if (locationX - w > 10)
      {
        window.setTopLevelPosition(locationX - w, locationY);





      }
      else
      {





        locationX = (sketch.displayWidth - w) / 2;
        locationY = (sketch.displayHeight - h) / 2;
        


        window.setTopLevelPosition(locationX, locationY);
      }
    }
    else
    {
      int sketchX = displayDevice.getViewportInWindowUnits().getX();
      int sketchY = displayDevice.getViewportInWindowUnits().getY();
      window.setTopLevelPosition(sketchX + screenRect.x + (screenRect.width - sketchWidth) / 2, 
        sketchY + screenRect.y + (screenRect.height - sketchHeight) / 2);
    }
    
    Point frameLoc = new Point(x, y);
    if (y < 0)
    {

      window.setTopLevelPosition(x, 30);
    }
  }
  
  public void placePresent(int stopColor)
  {
    pgl.initPresentMode(0.5F * (screenRect.width - sketchWidth), 
      0.5F * (screenRect.height - sketchHeight), stopColor);
    window.setSize(screenRect.width, screenRect.height);
    PApplet.hideMenuBar();
    window.setTopLevelPosition(sketchX + screenRect.x, 
      sketchY + screenRect.y);
    window.setFullscreen(true);
  }
  
  public void setupExternalMessages()
  {
    external = true;
  }
  
  public void startThread()
  {
    if (animator != null) {
      animator.start();
    }
  }
  
  public void pauseThread()
  {
    if (animator != null) {
      animator.pause();
    }
  }
  
  public void resumeThread()
  {
    if (animator != null) {
      animator.resume();
    }
  }
  
  public boolean stopThread()
  {
    if (animator != null) {
      return animator.stop();
    }
    return false;
  }
  

  public boolean isStopped()
  {
    if (animator != null) {
      return !animator.isAnimating();
    }
    return true;
  }
  

  public void setLocation(final int x, final int y)
  {
    display.getEDTUtil().invoke(false, new Runnable()
    {
      public void run() {
        window.setTopLevelPosition(x, y);
      }
    });
  }
  
  public void setSize(int width, int height)
  {
    if ((width == sketch.width) && (height == sketch.height)) {
      return;
    }
    
    if (!pgl.presentMode()) {
      sketch.setSize(width, height);
      sketchWidth = width;
      sketchHeight = height;
      graphics.setSize(width, height);
      window.setSize(width, height);
    }
  }
  
  public float getPixelScale()
  {
    if (graphics.is2X())
    {

      window.getCurrentSurfaceScale(currentPixelScale);
      return currentPixelScale[0];
    }
    return 1.0F;
  }
  

  public Component getComponent()
  {
    return canvas;
  }
  
  public void setSmooth(int level)
  {
    pgl.reqNumSamples = level;
    GLCapabilities caps = new GLCapabilities(profile);
    caps.setAlphaBits(PGL.REQUESTED_ALPHA_BITS);
    caps.setDepthBits(PGL.REQUESTED_DEPTH_BITS);
    caps.setStencilBits(PGL.REQUESTED_STENCIL_BITS);
    caps.setSampleBuffers(true);
    caps.setNumSamples(pgl.reqNumSamples);
    caps.setBackgroundOpaque(true);
    caps.setOnscreen(true);
    NativeSurface target = window.getNativeSurface();
    MutableGraphicsConfiguration config = (MutableGraphicsConfiguration)target.getGraphicsConfiguration();
    config.setChosenCapabilities(caps);
  }
  
  public void setFrameRate(float fps)
  {
    if (animator != null) {
      animator.stop();
      animator.setFPS((int)fps);
      pgl.setFps(fps);
      animator.start();
    }
  }
  


  public void requestFocus() { display.getEDTUtil().invoke(false, new Runnable()
    {
      public void run() {
        window.requestFocus();
      }
    }); }
  
  class DrawListener implements GLEventListener {
    DrawListener() {}
    
    public void display(GLAutoDrawable drawable) {
      if (display.getEDTUtil().isCurrentThreadEDT())
      {

        return;
      }
      
      if (sketch.frameCount == 0) {
        if ((sketchWidth < sketchWidth0) || (sketchHeight < sketchHeight0)) {
          PGraphics.showWarning("The sketch has been automatically resized to fit the screen resolution");
        }
        
        requestFocus();
      }
      
      pgl.getGL(drawable);
      int pframeCount = sketch.frameCount;
      sketch.handleDraw();
      if (pframeCount == sketch.frameCount)
      {

        pgl.beginRender();
        pgl.endRender(sketch.sketchWindowColor());
      }
      
      PGraphicsOpenGL.completeFinishedPixelTransfers();
      
      if (sketch.exitCalled()) {
        PGraphicsOpenGL.completeAllPixelTransfers();
        
        sketch.dispose();
        sketch.exitActual();
      }
    }
    
    public void dispose(GLAutoDrawable drawable) { sketch.dispose(); }
    
    public void init(GLAutoDrawable drawable) {
      pgl.getGL(drawable);
      pgl.init(drawable);
      sketch.start();
      
      int c = graphics.backgroundColor;
      pgl.clearColor((c >> 16 & 0xFF) / 255.0F, 
        (c >> 8 & 0xFF) / 255.0F, 
        (c >> 0 & 0xFF) / 255.0F, 
        (c >> 24 & 0xFF) / 255.0F);
      pgl.clear(PGL.COLOR_BUFFER_BIT);
    }
    





    public void reshape(GLAutoDrawable drawable, int x, int y, int w, int h)
    {
      pgl.resetFBOLayer();
      
      window.getCurrentSurfaceScale(currentPixelScale);
      









      pgl.getGL(drawable);
      




      setSize((int)(w / currentPixelScale[0]), (int)(h / currentPixelScale[1]));
    }
  }
  
  protected class NEWTWindowListener
    implements WindowListener
  {
    public NEWTWindowListener() {}
    
    public void windowGainedFocus(WindowEvent arg0)
    {
      sketch.focused = true;
      sketch.focusGained();
    }
    
    public void windowLostFocus(WindowEvent arg0)
    {
      sketch.focused = false;
      sketch.focusLost();
    }
    
    public void windowDestroyNotify(WindowEvent arg0)
    {
      sketch.exit();
    }
    

    public void windowDestroyed(WindowEvent arg0) {}
    

    public void windowMoved(WindowEvent arg0)
    {
      if (external) {
        sketch.frameMoved(window.getX(), window.getY());
      }
    }
    


    public void windowRepaint(WindowUpdateEvent arg0) {}
    

    public void windowResized(WindowEvent arg0) {}
  }
  

  protected class NEWTMouseListener
    extends MouseAdapter
  {
    public NEWTMouseListener() {}
    

    public void mousePressed(com.jogamp.newt.event.MouseEvent e)
    {
      nativeMouseEvent(e, 1);
    }
    
    public void mouseReleased(com.jogamp.newt.event.MouseEvent e) {
      nativeMouseEvent(e, 2);
    }
    
    public void mouseClicked(com.jogamp.newt.event.MouseEvent e) {
      nativeMouseEvent(e, 3);
    }
    
    public void mouseDragged(com.jogamp.newt.event.MouseEvent e) {
      nativeMouseEvent(e, 4);
    }
    
    public void mouseMoved(com.jogamp.newt.event.MouseEvent e) {
      nativeMouseEvent(e, 5);
    }
    
    public void mouseWheelMoved(com.jogamp.newt.event.MouseEvent e) {
      nativeMouseEvent(e, 8);
    }
    
    public void mouseEntered(com.jogamp.newt.event.MouseEvent e)
    {
      nativeMouseEvent(e, 6);
    }
    
    public void mouseExited(com.jogamp.newt.event.MouseEvent e)
    {
      nativeMouseEvent(e, 7);
    }
  }
  

  protected class NEWTKeyListener
    extends KeyAdapter
  {
    public NEWTKeyListener() {}
    
    public void keyPressed(com.jogamp.newt.event.KeyEvent e)
    {
      nativeKeyEvent(e, 1);
    }
    
    public void keyReleased(com.jogamp.newt.event.KeyEvent e) {
      nativeKeyEvent(e, 2);
    }
    
    public void keyTyped(com.jogamp.newt.event.KeyEvent e) { nativeKeyEvent(e, 3); }
  }
  


  protected void nativeMouseEvent(com.jogamp.newt.event.MouseEvent nativeEvent, int peAction)
  {
    int modifiers = nativeEvent.getModifiers();
    int peModifiers = modifiers & 
      0xF;
    



    int peButton = 0;
    if ((modifiers & 0x20) != 0) {
      peButton = 37;
    } else if ((modifiers & 0x40) != 0) {
      peButton = 3;
    } else if ((modifiers & 0x80) != 0) {
      peButton = 39;
    }
    
    if (PApplet.platform == 2)
    {
      if ((modifiers & 0x2) != 0) {
        peButton = 39;
      }
    }
    
    int peCount = 0;
    if (peAction == 8)
    {

      peCount = -(nativeEvent.isShiftDown() ? (int)nativeEvent.getRotation()[0] : 
        (int)nativeEvent.getRotation()[1]);
    } else {
      peCount = nativeEvent.getClickCount();
    }
    
    window.getCurrentSurfaceScale(currentPixelScale);
    int sx = (int)(nativeEvent.getX() / currentPixelScale[0]);
    int sy = (int)(nativeEvent.getY() / currentPixelScale[1]);
    int mx = sx;
    int my = sy;
    
    if (pgl.presentMode()) {
      mx -= (int)pgl.presentX;
      my -= (int)pgl.presentY;
      if ((peAction == 2) && 
        (pgl.insideStopButton(sx, sy - screenRect.height))) {
        sketch.exit();
      }
      if ((mx < 0) || (sketchWidth < mx) || (my < 0) || (sketchHeight < my)) {
        return;
      }
    }
    
    processing.event.MouseEvent me = new processing.event.MouseEvent(nativeEvent, nativeEvent.getWhen(), 
      peAction, peModifiers, 
      mx, my, 
      peButton, 
      peCount);
    
    sketch.postEvent(me);
  }
  

  protected void nativeKeyEvent(com.jogamp.newt.event.KeyEvent nativeEvent, int peAction)
  {
    int peModifiers = nativeEvent.getModifiers() & 
      0xF;
    



    short code = nativeEvent.getKeyCode();
    char keyChar;
    int keyCode;
    char keyChar; if (isPCodedKey(code)) {
      int keyCode = mapToPConst(code);
      keyChar = 65535; } else { char keyChar;
      if (isHackyKey(code))
      {
        int keyCode = code == 13 ? 
          10 : code;
        keyChar = hackToChar(code, nativeEvent.getKeyChar());
      } else {
        keyCode = code;
        keyChar = nativeEvent.getKeyChar();
      }
    }
    






    processing.event.KeyEvent ke = new processing.event.KeyEvent(nativeEvent, nativeEvent.getWhen(), 
      peAction, peModifiers, 
      keyChar, 
      keyCode, 
      nativeEvent.isAutoRepeat());
    
    sketch.postEvent(ke);
    
    if ((!isPCodedKey(code)) && (!isHackyKey(code)) && 
      (peAction == 1))
    {

      processing.event.KeyEvent tke = new processing.event.KeyEvent(nativeEvent, nativeEvent.getWhen(), 
        3, peModifiers, 
        keyChar, 
        0, 
        nativeEvent.isAutoRepeat());
      
      sketch.postEvent(tke);
    }
  }
  

  private static boolean isPCodedKey(short code)
  {
    return (code == 150) || 
      (code == 152) || 
      (code == 149) || 
      (code == 151) || 
      (code == 18) || 
      (code == 17) || 
      (code == 15) || 
      (code == 154);
  }
  




  private static int mapToPConst(short code)
  {
    switch (code) {
    case 150: 
      return 38;
    case 152: 
      return 40;
    case 149: 
      return 37;
    case 151: 
      return 39;
    case 18: 
      return 18;
    case 17: 
      return 17;
    case 15: 
      return 16;
    case 154: 
      return 157;
    }
    return code;
  }
  

  private static boolean isHackyKey(short code)
  {
    switch (code) {
    case 8: 
    case 9: 
    case 13: 
    case 27: 
    case 147: 
      return true;
    }
    return false;
  }
  
  private static char hackToChar(short code, char def)
  {
    switch (code) {
    case 8: 
      return '\b';
    case 9: 
      return '\t';
    case 13: 
      return '\n';
    case 27: 
      return '\033';
    case 147: 
      return '';
    }
    return def;
  }
  

  class CursorInfo
  {
    PImage image;
    int x;
    int y;
    
    CursorInfo(PImage image, int x, int y)
    {
      this.image = image;
      this.x = x;
      this.y = y;
    }
    
    void set() {
      setCursor(image, x, y);
    }
  }
  
  static Map<Integer, CursorInfo> cursors = new HashMap();
  static Map<Integer, String> cursorNames = new HashMap();
  
  static { cursorNames.put(Integer.valueOf(0), "arrow");
    cursorNames.put(Integer.valueOf(1), "cross");
    cursorNames.put(Integer.valueOf(3), "wait");
    cursorNames.put(Integer.valueOf(13), "move");
    cursorNames.put(Integer.valueOf(12), "hand");
    cursorNames.put(Integer.valueOf(2), "text");
  }
  
  public void setCursor(int kind)
  {
    if (!cursorNames.containsKey(Integer.valueOf(kind))) {
      PGraphics.showWarning("Unknown cursor type: " + kind);
      return;
    }
    CursorInfo cursor = (CursorInfo)cursors.get(Integer.valueOf(kind));
    if (cursor == null) {
      String name = (String)cursorNames.get(Integer.valueOf(kind));
      if (name != null) {
        ImageIcon icon = 
          new ImageIcon(getClass().getResource("cursors/" + name + ".png"));
        PImage img = new PImage(icon.getImage());
        
        int x = width / 2;
        int y = height / 2;
        
        if (kind == 0) {
          x = 10;y = 7;
        } else if (kind == 12) {
          x = 12;y = 8;
        } else if (kind == 2) {
          x = 16;y = 22;
        }
        cursor = new CursorInfo(img, x, y);
        cursors.put(Integer.valueOf(kind), cursor);
      }
    }
    if (cursor != null) {
      cursor.set();
    } else {
      PGraphics.showWarning("Cannot load cursor type: " + kind);
    }
  }
  
  public void setCursor(PImage image, int hotspotX, int hotspotY)
  {
    Display disp = window.getScreen().getDisplay();
    BufferedImage bimg = (BufferedImage)image.getNative();
    DataBufferInt dbuf = (DataBufferInt)bimg.getData().getDataBuffer();
    int[] ipix = dbuf.getData();
    ByteBuffer pixels = ByteBuffer.allocate(ipix.length * 4);
    pixels.asIntBuffer().put(ipix);
    PixelFormat format = PixelFormat.ARGB8888;
    Dimension size = new Dimension(bimg.getWidth(), bimg.getHeight());
    PixelRectangle pixelrect = new PixelRectangle.GenericPixelRect(format, size, 0, false, pixels);
    final Display.PointerIcon pi = disp.createPointerIcon(pixelrect, hotspotX, hotspotY);
    display.getEDTUtil().invoke(false, new Runnable()
    {
      public void run() {
        window.setPointerIcon(pi);
      }
    });
  }
  
  public void showCursor()
  {
    display.getEDTUtil().invoke(false, new Runnable()
    {
      public void run() {
        window.setPointerVisible(true);
      }
    });
  }
  
  public void hideCursor()
  {
    display.getEDTUtil().invoke(false, new Runnable()
    {
      public void run() {
        window.setPointerVisible(false);
      }
    });
  }
}
