package jogamp.newt.swt.event;

import com.jogamp.nativewindow.NativeSurface;
import com.jogamp.nativewindow.NativeSurfaceHolder;
import com.jogamp.newt.Window;
import com.jogamp.newt.event.InputEvent;
import com.jogamp.newt.event.KeyEvent;
import com.jogamp.newt.event.KeyListener;
import com.jogamp.newt.event.MouseEvent;
import com.jogamp.newt.event.MouseListener;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
































public class SWTNewtEventFactory
{
  public static final short eventTypeSWT2NEWT(int paramInt)
  {
    switch (paramInt) {
    case 3: 
      return 203;
    case 4:  return 204;
    case 5:  return 205;
    case 6:  return 201;
    case 7:  return 202;
    case 37: 
      return 207;
    case 1: 
      return 300;
    case 2:  return 301;
    }
    return 0;
  }
  
  public static final int swtModifiers2Newt(int paramInt, boolean paramBoolean) {
    int i = 0;
    if ((paramInt & 0x20000) != 0) i |= 0x1;
    if ((paramInt & 0x40000) != 0) i |= 0x2;
    if ((paramInt & 0x10000) != 0) i |= 0x8;
    return i;
  }
  
  public static short swtKeyCode2NewtKeyCode(int paramInt) {
    short s = (short)paramInt;
    switch (paramInt) {
    case 16777223:  return 2;
    case 16777224:  return 3;
    case 16777303:  return 5;
    case 8:  return 8;
    case 9:  return 9;
    case 10:  return 13;
    case 16777222:  return 11;
    case 16777221:  return 16;
    case 262144:  return 17;
    case 16777298:  return 20;
    case 16777301:  return 22;
    case 16777300:  return 23;
    case 256:  return 24;
    case 16777225:  return 26;
    case 27:  return 27;
    case 32:  return 32;
    case 16777226:  return 97;
    case 16777227:  return 98;
    case 16777228:  return 99;
    case 16777229:  return 100;
    case 16777230:  return 101;
    case 16777231:  return 102;
    case 16777232:  return 103;
    case 16777233:  return 104;
    case 16777234:  return 105;
    case 16777235:  return 106;
    case 16777236:  return 107;
    case 16777237:  return 108;
    case 16777238:  return 109;
    case 16777239:  return 110;
    case 16777240:  return 111;
    case 16777241:  return 112;
    case 16777242:  return 113;
    case 16777243:  return 114;
    case 16777244:  return 115;
    case 16777245:  return 116;
    case 127:  return 147;
    case 16777264:  return 128;
    case 16777265:  return 129;
    case 16777266:  return 130;
    case 16777267:  return 131;
    case 16777268:  return 132;
    case 16777269:  return 133;
    case 16777270:  return 134;
    case 16777271:  return 135;
    case 16777272:  return 136;
    case 16777273:  return 137;
    case 16777262:  return 138;
    case 16777259:  return 139;
    case 16777261:  return 140;
    case 16777258:  return 141;
    case 16777263:  return 142;
    case 16777299:  return 148;
    case 16777219:  return 149;
    case 16777217:  return 150;
    case 16777220:  return 151;
    case 16777218:  return 152;
    case 16777297:  return 156;
    }
    return s;
  }
  
  public static int newtKeyCode2SWTKeyCode(short paramShort) {
    int i = 0xFFFF & paramShort;
    switch (paramShort) {
    case 2:  return 16777223;
    case 3:  return 16777224;
    case 5:  return 16777303;
    case 8:  return 8;
    case 9:  return 9;
    case 13:  return 10;
    case 11:  return 16777222;
    case 16:  return 16777221;
    case 17:  return 262144;
    case 20:  return 16777298;
    case 22:  return 16777301;
    case 23:  return 16777300;
    case 24:  return 256;
    case 26:  return 16777225;
    case 27:  return 27;
    case 32:  return 32;
    case 97:  return 16777226;
    case 98:  return 16777227;
    case 99:  return 16777228;
    case 100:  return 16777229;
    case 101:  return 16777230;
    case 102:  return 16777231;
    case 103:  return 16777232;
    case 104:  return 16777233;
    case 105:  return 16777234;
    case 106:  return 16777235;
    case 107:  return 16777236;
    case 108:  return 16777237;
    case 109:  return 16777238;
    case 110:  return 16777239;
    case 111:  return 16777240;
    case 112:  return 16777241;
    case 113:  return 16777242;
    case 114:  return 16777243;
    case 115:  return 16777244;
    case 116:  return 16777245;
    case 147:  return 127;
    case 128:  return 16777264;
    case 129:  return 16777265;
    case 130:  return 16777266;
    case 131:  return 16777267;
    case 132:  return 16777268;
    case 133:  return 16777269;
    case 134:  return 16777270;
    case 135:  return 16777271;
    case 136:  return 16777272;
    case 137:  return 16777273;
    case 138:  return 16777262;
    case 139:  return 16777259;
    case 140:  return 16777261;
    case 141:  return 16777258;
    case 142:  return 16777263;
    case 148:  return 16777299;
    case 149:  return 16777219;
    case 150:  return 16777217;
    case 151:  return 16777220;
    case 152:  return 16777218;
    case 156:  return 16777297;
    }
    return i;
  }
  
  public static final InputEvent createInputEvent(Event paramEvent, NativeSurfaceHolder paramNativeSurfaceHolder)
  {
    Object localObject = createMouseEvent(paramEvent, paramNativeSurfaceHolder);
    if (null == localObject) {
      localObject = createKeyEvent(paramEvent, paramNativeSurfaceHolder);
    }
    return localObject;
  }
  
  public static final MouseEvent createMouseEvent(Event paramEvent, NativeSurfaceHolder paramNativeSurfaceHolder) {
    switch (type) {
    case 3: 
    case 4: 
    case 5: 
    case 6: 
    case 7: 
    case 37: 
      break;
    default: 
      return null;
    }
    short s = eventTypeSWT2NEWT(type);
    if (0 != s) {
      float f = 0.0F;
      if (37 == type)
      {

        f = (float)rotation;
      }
      
      int i = swtModifiers2Newt(stateMask, true);
      
      NativeSurface localNativeSurface = paramNativeSurfaceHolder.getNativeSurface();
      int[] arrayOfInt;
      if (null != localNativeSurface) {
        if ((localNativeSurface instanceof Window)) {
          Window localWindow = (Window)localNativeSurface;
          if (localWindow.isPointerConfined()) {
            i |= 0x40000000;
          }
          if (!localWindow.isPointerVisible()) {
            i |= 0x80000000;
          }
        }
        arrayOfInt = localNativeSurface.convertToPixelUnits(new int[] { x, y });
      } else {
        arrayOfInt = new int[] { x, y };
      }
      


      return new MouseEvent(s, paramNativeSurfaceHolder, 0xFFFFFFFF & time, i, arrayOfInt[0], arrayOfInt[1], (short)count, (short)button, MouseEvent.getRotationXYZ(f, i), 1.0F);
    }
    return null;
  }
  
  public static final KeyEvent createKeyEvent(Event paramEvent, NativeSurfaceHolder paramNativeSurfaceHolder) {
    switch (type) {
    case 1: 
    case 2: 
      break;
    default: 
      return null;
    }
    short s1 = eventTypeSWT2NEWT(type);
    if (0 != s1) {
      short s2 = swtKeyCode2NewtKeyCode(keyCode);
      return KeyEvent.create(s1, paramNativeSurfaceHolder, 0xFFFFFFFF & time, 
      
        swtModifiers2Newt(stateMask, false), s2, s2, character);
    }
    
    return null;
  }
  




  short dragButtonDown = 0;
  
  public SWTNewtEventFactory() {
    resetButtonsDown();
  }
  
  final void resetButtonsDown() {
    dragButtonDown = 0;
  }
  
  public final boolean dispatchMouseEvent(Event paramEvent, NativeSurfaceHolder paramNativeSurfaceHolder, MouseListener paramMouseListener) {
    MouseEvent localMouseEvent1 = createMouseEvent(paramEvent, paramNativeSurfaceHolder);
    if (null != localMouseEvent1) {
      if (null != paramMouseListener) { MouseEvent localMouseEvent2;
        switch (type) {
        case 3: 
          dragButtonDown = ((short)button);
          paramMouseListener.mousePressed(localMouseEvent1); break;
        case 4: 
          dragButtonDown = 0;
          paramMouseListener.mouseReleased(localMouseEvent1);
          





          localMouseEvent2 = new MouseEvent((short)200, localMouseEvent1.getSource(), localMouseEvent1.getWhen(), localMouseEvent1.getModifiers(), localMouseEvent1.getX(), localMouseEvent1.getY(), localMouseEvent1.getClickCount(), localMouseEvent1.getButton(), localMouseEvent1.getRotation(), localMouseEvent1.getRotationScale());
          paramMouseListener.mouseClicked(localMouseEvent2);
          
          break;
        case 5: 
          if (0 < dragButtonDown)
          {




            localMouseEvent2 = new MouseEvent((short)206, localMouseEvent1.getSource(), localMouseEvent1.getWhen(), localMouseEvent1.getModifiers(), localMouseEvent1.getX(), localMouseEvent1.getY(), localMouseEvent1.getClickCount(), dragButtonDown, localMouseEvent1.getRotation(), localMouseEvent1.getRotationScale());
            paramMouseListener.mouseDragged(localMouseEvent2);
          } else {
            paramMouseListener.mouseMoved(localMouseEvent1);
          }
          break;
        case 6: 
          paramMouseListener.mouseEntered(localMouseEvent1);
          break;
        case 7: 
          resetButtonsDown();
          paramMouseListener.mouseExited(localMouseEvent1);
          break;
        case 37: 
          paramMouseListener.mouseWheelMoved(localMouseEvent1);
        }
        
      }
      return true;
    }
    return false;
  }
  
  public final boolean dispatchKeyEvent(Event paramEvent, NativeSurfaceHolder paramNativeSurfaceHolder, KeyListener paramKeyListener) {
    KeyEvent localKeyEvent = createKeyEvent(paramEvent, paramNativeSurfaceHolder);
    if (null != localKeyEvent) {
      if (null != paramKeyListener) {
        switch (type) {
        case 1: 
          paramKeyListener.keyPressed(localKeyEvent);
          break;
        case 2: 
          paramKeyListener.keyReleased(localKeyEvent);
        }
        
      }
      return true;
    }
    return false;
  }
  

  public final void attachDispatchListener(Control paramControl, final NativeSurfaceHolder paramNativeSurfaceHolder, final MouseListener paramMouseListener, final KeyListener paramKeyListener)
  {
    if (null == paramControl) {
      throw new IllegalArgumentException("Argument ctrl is null");
    }
    if (null == paramNativeSurfaceHolder) {
      throw new IllegalArgumentException("Argument source is null");
    }
    Object localObject;
    if (null != paramMouseListener) {
      localObject = new Listener()
      {

        public void handleEvent(Event paramAnonymousEvent) { dispatchMouseEvent(paramAnonymousEvent, paramNativeSurfaceHolder, paramMouseListener); }
      };
      paramControl.addListener(3, (Listener)localObject);
      paramControl.addListener(4, (Listener)localObject);
      paramControl.addListener(5, (Listener)localObject);
      paramControl.addListener(6, (Listener)localObject);
      paramControl.addListener(7, (Listener)localObject);
      paramControl.addListener(37, (Listener)localObject);
    }
    if (null != paramKeyListener) {
      localObject = new Listener()
      {

        public void handleEvent(Event paramAnonymousEvent) { dispatchKeyEvent(paramAnonymousEvent, paramNativeSurfaceHolder, paramKeyListener); }
      };
      paramControl.addListener(1, (Listener)localObject);
      paramControl.addListener(2, (Listener)localObject);
    }
  }
}
