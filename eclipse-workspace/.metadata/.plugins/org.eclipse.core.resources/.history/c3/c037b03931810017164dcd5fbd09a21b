package com.leapmotion.leap;




public class Arm
  extends Interface
{
  private long swigCPtr;
  


  public Arm(long paramLong, boolean paramBoolean)
  {
    super(LeapJNI.Arm_SWIGUpcast(paramLong), paramBoolean);
    swigCPtr = paramLong;
  }
  
  public static long getCPtr(Arm paramArm) {
    return paramArm == null ? 0L : swigCPtr;
  }
  
  protected void finalize() {
    delete();
  }
  
  public synchronized void delete() {
    if (swigCPtr != 0L) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        LeapJNI.delete_Arm(swigCPtr);
      }
      swigCPtr = 0L;
    }
    super.delete();
  }
  
  public Arm() {
    this(LeapJNI.new_Arm(), true);
  }
  
  public float width() {
    return LeapJNI.Arm_width(swigCPtr, this);
  }
  
  public Vector direction() {
    return new Vector(LeapJNI.Arm_direction(swigCPtr, this), true);
  }
  
  public Matrix basis() {
    return new Matrix(LeapJNI.Arm_basis(swigCPtr, this), true);
  }
  
  public Vector elbowPosition() {
    return new Vector(LeapJNI.Arm_elbowPosition(swigCPtr, this), true);
  }
  
  public Vector wristPosition() {
    return new Vector(LeapJNI.Arm_wristPosition(swigCPtr, this), true);
  }
  
  public Vector center() {
    return new Vector(LeapJNI.Arm_center(swigCPtr, this), true);
  }
  
  public boolean isValid() {
    return LeapJNI.Arm_isValid(swigCPtr, this);
  }
  
  public static Arm invalid() {
    return new Arm(LeapJNI.Arm_invalid(), false);
  }
  
  public boolean equals(Arm paramArm) {
    return LeapJNI.Arm_equals(swigCPtr, this, getCPtr(paramArm), paramArm);
  }
  
  public String toString() {
    return LeapJNI.Arm_toString(swigCPtr, this);
  }
}
