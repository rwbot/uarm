package jogamp.graph.font.typecast.ot.table;

import java.io.DataInput;
import java.io.IOException;




















































public class Os2Table
  implements Table
{
  private final DirectoryEntry _de;
  private final int _version;
  private final short _xAvgCharWidth;
  private final int _usWeightClass;
  private final int _usWidthClass;
  private final short _fsType;
  private final short _ySubscriptXSize;
  private final short _ySubscriptYSize;
  private final short _ySubscriptXOffset;
  private final short _ySubscriptYOffset;
  private final short _ySuperscriptXSize;
  private final short _ySuperscriptYSize;
  private final short _ySuperscriptXOffset;
  private final short _ySuperscriptYOffset;
  private final short _yStrikeoutSize;
  private final short _yStrikeoutPosition;
  private final short _sFamilyClass;
  private final Panose _panose;
  private final int _ulUnicodeRange1;
  private final int _ulUnicodeRange2;
  private final int _ulUnicodeRange3;
  private final int _ulUnicodeRange4;
  private final int _achVendorID;
  private final short _fsSelection;
  private final int _usFirstCharIndex;
  private final int _usLastCharIndex;
  private final short _sTypoAscender;
  private final short _sTypoDescender;
  private final short _sTypoLineGap;
  private final int _usWinAscent;
  private final int _usWinDescent;
  private final int _ulCodePageRange1;
  private final int _ulCodePageRange2;
  private short _sxHeight;
  private short _sCapHeight;
  private int _usDefaultChar;
  private int _usBreakChar;
  private int _usMaxContext;
  
  protected Os2Table(DirectoryEntry paramDirectoryEntry, DataInput paramDataInput)
    throws IOException
  {
    _de = ((DirectoryEntry)paramDirectoryEntry.clone());
    _version = paramDataInput.readUnsignedShort();
    _xAvgCharWidth = paramDataInput.readShort();
    _usWeightClass = paramDataInput.readUnsignedShort();
    _usWidthClass = paramDataInput.readUnsignedShort();
    _fsType = paramDataInput.readShort();
    _ySubscriptXSize = paramDataInput.readShort();
    _ySubscriptYSize = paramDataInput.readShort();
    _ySubscriptXOffset = paramDataInput.readShort();
    _ySubscriptYOffset = paramDataInput.readShort();
    _ySuperscriptXSize = paramDataInput.readShort();
    _ySuperscriptYSize = paramDataInput.readShort();
    _ySuperscriptXOffset = paramDataInput.readShort();
    _ySuperscriptYOffset = paramDataInput.readShort();
    _yStrikeoutSize = paramDataInput.readShort();
    _yStrikeoutPosition = paramDataInput.readShort();
    _sFamilyClass = paramDataInput.readShort();
    byte[] arrayOfByte = new byte[10];
    paramDataInput.readFully(arrayOfByte);
    _panose = new Panose(arrayOfByte);
    _ulUnicodeRange1 = paramDataInput.readInt();
    _ulUnicodeRange2 = paramDataInput.readInt();
    _ulUnicodeRange3 = paramDataInput.readInt();
    _ulUnicodeRange4 = paramDataInput.readInt();
    _achVendorID = paramDataInput.readInt();
    _fsSelection = paramDataInput.readShort();
    _usFirstCharIndex = paramDataInput.readUnsignedShort();
    _usLastCharIndex = paramDataInput.readUnsignedShort();
    _sTypoAscender = paramDataInput.readShort();
    _sTypoDescender = paramDataInput.readShort();
    _sTypoLineGap = paramDataInput.readShort();
    _usWinAscent = paramDataInput.readUnsignedShort();
    _usWinDescent = paramDataInput.readUnsignedShort();
    _ulCodePageRange1 = paramDataInput.readInt();
    _ulCodePageRange2 = paramDataInput.readInt();
    

    if (_version == 2) {
      _sxHeight = paramDataInput.readShort();
      _sCapHeight = paramDataInput.readShort();
      _usDefaultChar = paramDataInput.readUnsignedShort();
      _usBreakChar = paramDataInput.readUnsignedShort();
      _usMaxContext = paramDataInput.readUnsignedShort();
    }
  }
  
  public int getVersion() {
    return _version;
  }
  
  public short getAvgCharWidth() {
    return _xAvgCharWidth;
  }
  
  public int getWeightClass() {
    return _usWeightClass;
  }
  
  public int getWidthClass() {
    return _usWidthClass;
  }
  
  public short getLicenseType() {
    return _fsType;
  }
  
  public short getSubscriptXSize() {
    return _ySubscriptXSize;
  }
  
  public short getSubscriptYSize() {
    return _ySubscriptYSize;
  }
  
  public short getSubscriptXOffset() {
    return _ySubscriptXOffset;
  }
  
  public short getSubscriptYOffset() {
    return _ySubscriptYOffset;
  }
  
  public short getSuperscriptXSize() {
    return _ySuperscriptXSize;
  }
  
  public short getSuperscriptYSize() {
    return _ySuperscriptYSize;
  }
  
  public short getSuperscriptXOffset() {
    return _ySuperscriptXOffset;
  }
  
  public short getSuperscriptYOffset() {
    return _ySuperscriptYOffset;
  }
  
  public short getStrikeoutSize() {
    return _yStrikeoutSize;
  }
  
  public short getStrikeoutPosition() {
    return _yStrikeoutPosition;
  }
  
  public short getFamilyClass() {
    return _sFamilyClass;
  }
  
  public Panose getPanose() {
    return _panose;
  }
  
  public int getUnicodeRange1() {
    return _ulUnicodeRange1;
  }
  
  public int getUnicodeRange2() {
    return _ulUnicodeRange2;
  }
  
  public int getUnicodeRange3() {
    return _ulUnicodeRange3;
  }
  
  public int getUnicodeRange4() {
    return _ulUnicodeRange4;
  }
  
  public int getVendorID() {
    return _achVendorID;
  }
  
  public short getSelection() {
    return _fsSelection;
  }
  
  public int getFirstCharIndex() {
    return _usFirstCharIndex;
  }
  
  public int getLastCharIndex() {
    return _usLastCharIndex;
  }
  
  public short getTypoAscender() {
    return _sTypoAscender;
  }
  
  public short getTypoDescender() {
    return _sTypoDescender;
  }
  
  public short getTypoLineGap() {
    return _sTypoLineGap;
  }
  
  public int getWinAscent() {
    return _usWinAscent;
  }
  
  public int getWinDescent() {
    return _usWinDescent;
  }
  
  public int getCodePageRange1() {
    return _ulCodePageRange1;
  }
  
  public int getCodePageRange2() {
    return _ulCodePageRange2;
  }
  
  public short getXHeight() {
    return _sxHeight;
  }
  
  public short getCapHeight() {
    return _sCapHeight;
  }
  
  public int getDefaultChar() {
    return _usDefaultChar;
  }
  
  public int getBreakChar() {
    return _usBreakChar;
  }
  
  public int getMaxContext() {
    return _usMaxContext;
  }
  
  public int getType()
  {
    return 1330851634;
  }
  



































  public String toString()
  {
    return "'OS/2' Table - OS/2 and Windows Metrics\n---------------------------------------" + "\n  'OS/2' version:      " + _version + "\n  xAvgCharWidth:       " + _xAvgCharWidth + "\n  usWeightClass:       " + _usWeightClass + "\n  usWidthClass:        " + _usWidthClass + "\n  fsType:              0x" + Integer.toHexString(_fsType).toUpperCase() + "\n  ySubscriptXSize:     " + _ySubscriptXSize + "\n  ySubscriptYSize:     " + _ySubscriptYSize + "\n  ySubscriptXOffset:   " + _ySubscriptXOffset + "\n  ySubscriptYOffset:   " + _ySubscriptYOffset + "\n  ySuperscriptXSize:   " + _ySuperscriptXSize + "\n  ySuperscriptYSize:   " + _ySuperscriptYSize + "\n  ySuperscriptXOffset: " + _ySuperscriptXOffset + "\n  ySuperscriptYOffset: " + _ySuperscriptYOffset + "\n  yStrikeoutSize:      " + _yStrikeoutSize + "\n  yStrikeoutPosition:  " + _yStrikeoutPosition + "\n  sFamilyClass:        " + (_sFamilyClass >> 8) + "    subclass = " + (_sFamilyClass & 0xFF) + "\n  PANOSE:              " + _panose.toString() + "\n  Unicode Range 1( Bits 0 - 31 ): " + Integer.toHexString(_ulUnicodeRange1).toUpperCase() + "\n  Unicode Range 2( Bits 32- 63 ): " + Integer.toHexString(_ulUnicodeRange2).toUpperCase() + "\n  Unicode Range 3( Bits 64- 95 ): " + Integer.toHexString(_ulUnicodeRange3).toUpperCase() + "\n  Unicode Range 4( Bits 96-127 ): " + Integer.toHexString(_ulUnicodeRange4).toUpperCase() + "\n  achVendID:           '" + getVendorIDAsString() + "'\n  fsSelection:         0x" + Integer.toHexString(_fsSelection).toUpperCase() + "\n  usFirstCharIndex:    0x" + Integer.toHexString(_usFirstCharIndex).toUpperCase() + "\n  usLastCharIndex:     0x" + Integer.toHexString(_usLastCharIndex).toUpperCase() + "\n  sTypoAscender:       " + _sTypoAscender + "\n  sTypoDescender:      " + _sTypoDescender + "\n  sTypoLineGap:        " + _sTypoLineGap + "\n  usWinAscent:         " + _usWinAscent + "\n  usWinDescent:        " + _usWinDescent + "\n  CodePage Range 1( Bits 0 - 31 ): " + Integer.toHexString(_ulCodePageRange1).toUpperCase() + "\n  CodePage Range 2( Bits 32- 63 ): " + Integer.toHexString(_ulCodePageRange2).toUpperCase();
  }
  




  private String getVendorIDAsString()
  {
    return (char)(_achVendorID >> 24 & 0xFF) + (char)(_achVendorID >> 16 & 0xFF) + (char)(_achVendorID >> 8 & 0xFF) + (char)(_achVendorID & 0xFF);
  }
  






  public DirectoryEntry getDirectoryEntry()
  {
    return _de;
  }
}
