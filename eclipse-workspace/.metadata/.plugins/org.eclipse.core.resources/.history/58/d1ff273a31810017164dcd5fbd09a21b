package jogamp.opengl.glu.nurbs;

import java.io.PrintStream;
















































































































public class Subdivider
{
  public static final int CULL_TRIVIAL_REJECT = 0;
  public static final int CULL_ACCEPT = 1;
  private static final int MAXARCS = 10;
  Quilt qlist;
  private Renderhints renderhints;
  private Backend backend;
  private int subdivisions;
  private float domain_distance_u_rate;
  private int is_domain_distance_sampling;
  private Bin initialbin;
  private boolean showDegenerate;
  private boolean isArcTypeBezier;
  private Flist tpbrkpts;
  private Flist spbrkpts;
  private int s_index;
  private Arc pjarc;
  private ArcTesselator arctesselator;
  private int t_index;
  private final Flist smbrkpts = new Flist();
  



  private float domain_distance_v_rate;
  



  public Subdivider() {}
  



  public void beginQuilts(Backend paramBackend)
  {
    qlist = null;
    renderhints = new Renderhints();
    backend = paramBackend;
    
    initialbin = new Bin();
    arctesselator = new ArcTesselator();
  }
  




  public void addQuilt(Quilt paramQuilt)
  {
    if (qlist == null) {
      qlist = paramQuilt;
    } else {
      next = qlist;
      qlist = paramQuilt;
    }
  }
  




  public void endQuilts() {}
  




  public void drawSurfaces()
  {
    renderhints.init();
    
    if (qlist == null)
    {
      return;
    }
    
    for (Object localObject = qlist; localObject != null; localObject = next) {
      if (((Quilt)localObject).isCulled() == 0) {
        freejarcs(initialbin);
        return;
      }
    }
    
    localObject = new float[2];
    float[] arrayOfFloat1 = new float[2];
    
    spbrkpts = new Flist();
    tpbrkpts = new Flist();
    qlist.getRange((float[])localObject, arrayOfFloat1, spbrkpts, tpbrkpts);
    
    int i = (is_domain_distance_sampling > 0) && (renderhints.display_method != 5) ? 1 : 0;
    

    i = 1;
    
    if (!initialbin.isnonempty()) {
      if (i == 0) {
        makeBorderTrim((float[])localObject, arrayOfFloat1);
      }
    } else {
      float[] arrayOfFloat2 = new float[2];
      qlist.findRates(spbrkpts, tpbrkpts, arrayOfFloat2);
    }
    

    backend.bgnsurf(renderhints.wiretris, renderhints.wirequads);
    


    if ((!initialbin.isnonempty()) && (i != 0))
    {



      for (int j = spbrkpts.start; j < spbrkpts.end - 1; j++) {
        for (int k = tpbrkpts.start; k < tpbrkpts.end - 1; k++) {
          float[] arrayOfFloat3 = new float[2];
          float[] arrayOfFloat4 = new float[2];
          
          arrayOfFloat3[0] = spbrkpts.pts[j];
          arrayOfFloat4[0] = spbrkpts.pts[(j + 1)];
          arrayOfFloat3[1] = tpbrkpts.pts[k];
          arrayOfFloat4[1] = tpbrkpts.pts[(k + 1)];
          qlist.downloadAll(arrayOfFloat3, arrayOfFloat4, backend);
          
          int m = (int)(domain_distance_u_rate * (arrayOfFloat4[0] - arrayOfFloat3[0]));
          int n = (int)(domain_distance_v_rate * (arrayOfFloat4[1] - arrayOfFloat3[1]));
          
          if (m <= 0)
            m = 1;
          if (n <= 0) {
            n = 1;
          }
          backend.surfgrid(arrayOfFloat3[0], arrayOfFloat4[0], m, arrayOfFloat4[1], arrayOfFloat3[1], n);
          
          backend.surfmesh(0, 0, m, n);
        }
        
      }
      
    }
    else {
      subdivideInS(initialbin);
    }
    backend.endsurf();
  }
  






  private void freejarcs(Bin paramBin) {}
  





  private void subdivideInS(Bin paramBin)
  {
    if (renderhints.display_method == 6) {
      outline(paramBin);
      freejarcs(paramBin);
    } else {
      setArcTypeBezier();
      setNonDegenerate();
      splitInS(paramBin, spbrkpts.start, spbrkpts.end);
    }
  }
  







  private void splitInS(Bin paramBin, int paramInt1, int paramInt2)
  {
    if (paramBin.isnonempty()) {
      if (paramInt1 != paramInt2) {
        int i = paramInt1 + (paramInt2 - paramInt1) / 2;
        Bin localBin1 = new Bin();
        Bin localBin2 = new Bin();
        
        split(paramBin, localBin1, localBin2, 0, spbrkpts.pts[i]);
        splitInS(localBin1, paramInt1, i);
        splitInS(localBin2, i + 1, paramInt2);
      }
      else if ((paramInt1 == spbrkpts.start) || (paramInt1 == spbrkpts.end)) {
        freejarcs(paramBin);
      } else if (renderhints.display_method == 7) {
        outline(paramBin);
        freejarcs(paramBin);
      } else {
        setArcTypeBezier();
        setNonDegenerate();
        s_index = paramInt1;
        splitInT(paramBin, tpbrkpts.start, tpbrkpts.end);
      }
    }
  }
  











  private void splitInT(Bin paramBin, int paramInt1, int paramInt2)
  {
    if (paramBin.isnonempty()) { Object localObject1;
      Object localObject2; if (paramInt1 != paramInt2) {
        int i = paramInt1 + (paramInt2 - paramInt1) / 2;
        localObject1 = new Bin();
        localObject2 = new Bin();
        split(paramBin, (Bin)localObject1, (Bin)localObject2, 1, tpbrkpts.pts[(i + 1)]);
        splitInT((Bin)localObject1, paramInt1, i);
        splitInT((Bin)localObject2, i + 1, paramInt2);
      }
      else if ((paramInt1 == tpbrkpts.start) || (paramInt1 == tpbrkpts.end)) {
        freejarcs(paramBin);
      } else if (renderhints.display_method == 8) {
        outline(paramBin);
        freejarcs(paramBin);
      } else {
        t_index = paramInt1;
        setArcTypeBezier();
        setDegenerate();
        
        float[] arrayOfFloat = new float[2];
        localObject1 = new float[2];
        
        arrayOfFloat[0] = spbrkpts.pts[(s_index - 1)];
        arrayOfFloat[1] = tpbrkpts.pts[(t_index - 1)];
        
        localObject1[0] = spbrkpts.pts[s_index];
        localObject1[1] = tpbrkpts.pts[t_index];
        qlist.downloadAll(arrayOfFloat, (float[])localObject1, backend);
        
        localObject2 = new Patchlist(qlist, arrayOfFloat, (float[])localObject1);
        
        samplingSplit(paramBin, (Patchlist)localObject2, renderhints.maxsubdivisions, 0);
        
        setNonDegenerate();
        setArcTypeBezier();
      }
    }
  }
  










  private void samplingSplit(Bin paramBin, Patchlist paramPatchlist, int paramInt1, int paramInt2)
  {
    if (!paramBin.isnonempty())
      return;
    if (paramPatchlist.cullCheck() == 0) {
      freejarcs(paramBin);
      return;
    }
    
    paramPatchlist.getstepsize();
    if (renderhints.display_method == 5) {
      tesselation(paramBin, paramPatchlist);
      outline(paramBin);
      freejarcs(paramBin);
      return;
    }
    
    tesselation(paramBin, paramPatchlist);
    if ((paramPatchlist.needsSamplingSubdivision()) && (paramInt1 > 0)) {
      if (!paramPatchlist.needsSubdivision(0)) {
        paramInt2 = 1;
      } else if (paramPatchlist.needsSubdivision(1)) {
        paramInt2 = 0;
      } else {
        paramInt2 = 1 - paramInt2;
      }
      Bin localBin1 = new Bin();
      Bin localBin2 = new Bin();
      
      float f = (float)((pspec[paramInt2].range[0] + pspec[paramInt2].range[1]) * 0.5D);
      
      split(paramBin, localBin1, localBin2, paramInt2, f);
      Patchlist localPatchlist = new Patchlist(paramPatchlist, paramInt2, f);
      samplingSplit(localBin1, localPatchlist, paramInt1 - 1, paramInt2);
      samplingSplit(localBin2, localPatchlist, paramInt1 - 1, paramInt2);
    } else {
      setArcTypePwl();
      setDegenerate();
      nonSamplingSplit(paramBin, paramPatchlist, paramInt1, paramInt2);
      setDegenerate();
      setArcTypeBezier();
    }
  }
  








  private void nonSamplingSplit(Bin paramBin, Patchlist paramPatchlist, int paramInt1, int paramInt2)
  {
    if ((paramPatchlist.needsNonSamplingSubdivision()) && (paramInt1 > 0)) {
      paramInt2 = 1 - paramInt2;
      
      Bin localBin1 = new Bin();
      Bin localBin2 = new Bin();
      
      float f = (float)((pspec[paramInt2].range[0] + pspec[paramInt2].range[1]) * 0.5D);
      split(paramBin, localBin1, localBin2, paramInt2, f);
      Patchlist localPatchlist = new Patchlist(paramPatchlist, paramInt2, f);
      if (localBin1.isnonempty()) {
        if (localPatchlist.cullCheck() == 0) {
          freejarcs(localBin1);
        } else {
          nonSamplingSplit(localBin1, localPatchlist, paramInt1 - 1, paramInt2);
        }
      }
      if (localBin2.isnonempty()) {
        if (paramPatchlist.cullCheck() == 0) {
          freejarcs(localBin2);
        } else {
          nonSamplingSplit(localBin2, localPatchlist, paramInt1 - 1, paramInt2);
        }
      }
    } else {
      paramPatchlist.bbox();
      backend.patch(pspec[0].range[0], pspec[0].range[1], pspec[1].range[0], pspec[1].range[1]);
      

      if (renderhints.display_method == 9) {
        outline(paramBin);
        freejarcs(paramBin);
      } else {
        setArcTypePwl();
        setDegenerate();
        findIrregularS(paramBin);
        monosplitInS(paramBin, smbrkpts.start, smbrkpts.end);
      }
    }
  }
  








  private void monosplitInS(Bin paramBin, int paramInt1, int paramInt2) {}
  








  private void findIrregularS(Bin paramBin) {}
  








  private void setArcTypePwl() {}
  







  private void tesselation(Bin paramBin, Patchlist paramPatchlist) {}
  







  private void setDegenerate() {}
  







  private void split(Bin paramBin1, Bin paramBin2, Bin paramBin3, int paramInt, float paramFloat)
  {
    Bin localBin1 = new Bin();
    Bin localBin2 = new Bin();
    
    partition(paramBin1, paramBin2, localBin1, paramBin3, localBin2, paramInt, paramFloat);
    
    int i = localBin1.numarcs();
    

    if (i % 2 == 0)
    {
      Arc[] arrayOfArc = new Arc[10];
      CArrayOfArcs localCArrayOfArcs1;
      if (i >= 10) {
        localCArrayOfArcs1 = new CArrayOfArcs(new Arc[i]);
      } else {
        localCArrayOfArcs1 = new CArrayOfArcs(arrayOfArc);
      }
      



      CArrayOfArcs localCArrayOfArcs2 = new CArrayOfArcs(localCArrayOfArcs1);
      Arc localArc; for (; (localArc = localBin1.removearc()) != null; localCArrayOfArcs2.pp())
        localCArrayOfArcs2.set(localArc);
      Object localObject;
      CArrayOfArcs localCArrayOfArcs3; if (paramInt == 0) {
        localObject = new ArcSdirSorter(this);
        ((ArcSdirSorter)localObject).qsort(localCArrayOfArcs1, i);
        
        localCArrayOfArcs3 = new CArrayOfArcs(localCArrayOfArcs1);
        for (; localCArrayOfArcs3.getPointer() < localCArrayOfArcs2.getPointer(); localCArrayOfArcs3.raisePointerBy(2))
          check_s(localCArrayOfArcs3.get(), localCArrayOfArcs3.getRelative(1));
        localCArrayOfArcs3 = new CArrayOfArcs(localCArrayOfArcs1);
        for (; localCArrayOfArcs3.getPointer() < localCArrayOfArcs2.getPointer(); localCArrayOfArcs3.raisePointerBy(2))
          join_s(paramBin2, paramBin3, localCArrayOfArcs3.get(), localCArrayOfArcs3.getRelative(1));
        localCArrayOfArcs3 = new CArrayOfArcs(localCArrayOfArcs1);
        for (; localCArrayOfArcs3.getPointer() != localCArrayOfArcs2.getPointer(); localCArrayOfArcs3.pp()) {
          if ((localCArrayOfArcs3.get().head()[0] <= paramFloat) && 
            (localCArrayOfArcs3.get().tail()[0] <= paramFloat)) {
            paramBin2.addarc(localCArrayOfArcs3.get());
          } else {
            paramBin3.addarc(localCArrayOfArcs3.get());
          }
        }
      } else {
        localObject = new ArcTdirSorter(this);
        ((ArcTdirSorter)localObject).qsort(localCArrayOfArcs1, i);
        
        localCArrayOfArcs3 = new CArrayOfArcs(localCArrayOfArcs1);
        for (; localCArrayOfArcs3.getPointer() < localCArrayOfArcs2.getPointer(); localCArrayOfArcs3.raisePointerBy(2))
          check_t(localCArrayOfArcs3.get(), localCArrayOfArcs3.getRelative(1));
        localCArrayOfArcs3 = new CArrayOfArcs(localCArrayOfArcs1);
        for (; localCArrayOfArcs3.getPointer() < localCArrayOfArcs2.getPointer(); localCArrayOfArcs3.raisePointerBy(2))
          join_t(paramBin2, paramBin3, localCArrayOfArcs3.get(), localCArrayOfArcs3.getRelative(1));
        localCArrayOfArcs3 = new CArrayOfArcs(localCArrayOfArcs1);
        for (; localCArrayOfArcs3.getPointer() != localCArrayOfArcs2.getPointer(); localCArrayOfArcs3.raisePointerBy(2)) {
          if ((localCArrayOfArcs3.get().head()[0] <= paramFloat) && 
            (localCArrayOfArcs3.get().tail()[0] <= paramFloat)) {
            paramBin2.addarc(localCArrayOfArcs3.get());
          } else {
            paramBin3.addarc(localCArrayOfArcs3.get());
          }
        }
      }
      
      localBin2.adopt();
    }
  }
  









  private void join_t(Bin paramBin1, Bin paramBin2, Arc paramArc1, Arc paramArc2) {}
  








  private void check_t(Arc paramArc1, Arc paramArc2) {}
  








  private void join_s(Bin paramBin1, Bin paramBin2, Arc paramArc1, Arc paramArc2)
  {
    if (!paramArc1.getitail())
      paramArc1 = next;
    if (!paramArc2.getitail()) {
      paramArc2 = next;
    }
    float f1 = paramArc1.tail()[0];
    float f2 = paramArc1.tail()[1];
    float f3 = paramArc2.tail()[1];
    
    if (f2 == f3) {
      simplelink(paramArc1, paramArc2);
    } else {
      Arc localArc1 = new Arc(1);
      Arc localArc2 = new Arc(3);
      if (isBezierArcType()) {
        arctesselator.bezier(localArc1, f1, f1, f2, f3);
        arctesselator.bezier(localArc2, f1, f1, f3, f2);
      } else {
        arctesselator.pwl_right(localArc1, f1, f2, f3, 0.0F);
        arctesselator.pwl_left(localArc1, f1, f3, f2, 0.0F);
      }
      link(paramArc1, paramArc2, localArc1, localArc2);
      paramBin1.addarc(localArc1);
      paramBin2.addarc(localArc2);
    }
  }
  








  private void link(Arc paramArc1, Arc paramArc2, Arc paramArc3, Arc paramArc4) {}
  








  private boolean isBezierArcType()
  {
    return true;
  }
  










  private void simplelink(Arc paramArc1, Arc paramArc2) {}
  









  private void check_s(Arc paramArc1, Arc paramArc2) {}
  









  private void partition(Bin paramBin1, Bin paramBin2, Bin paramBin3, Bin paramBin4, Bin paramBin5, int paramInt, float paramFloat)
  {
    Bin localBin1 = new Bin();
    Bin localBin2 = new Bin();
    Bin localBin3 = new Bin();
    Bin localBin4 = new Bin();
    
    for (Arc localArc = paramBin1.removearc(); localArc != null; localArc = paramBin1.removearc()) {
      float f1 = localArc.tail()[paramInt] - paramFloat;
      float f2 = localArc.head()[paramInt] - paramFloat;
      
      if (f1 > 0.0F) {
        if (f2 > 0.0F) {
          paramBin4.addarc(localArc);
        } else if (f2 == 0.0F) {
          localBin4.addarc(localArc);
        } else {
          switch (arc_split(localArc, paramInt, paramFloat, 0)) {
          case 2: 
            localBin4.addarc(localArc);
            localBin1.addarc(next);
            break;
          

          default: 
            System.out.println("TODO subdivider.partition rest cases");
            break;
          }
        }
      } else if (f1 == 0.0F) {
        if (f2 > 0.0F) {
          localBin2.addarc(localArc);
        } else if (f2 == 0.0F) {
          paramBin5.addarc(localArc);
        } else {
          localBin2.addarc(localArc);
        }
      }
      else if (f2 <= 0.0F)
      {

        if (f2 == 0.0F) {
          localBin3.addarc(localArc);
        } else {
          paramBin2.addarc(localArc);
        }
      }
    }
    
    if (paramInt == 0) {
      classify_headonleft_s(localBin1, paramBin3, paramBin2, paramFloat);
      classify_tailonleft_s(localBin3, paramBin3, paramBin2, paramFloat);
      classify_headonright_s(localBin2, paramBin3, paramBin4, paramFloat);
      classify_tailonright_s(localBin4, paramBin3, paramBin4, paramFloat);
    } else {
      classify_headonleft_t(localBin1, paramBin3, paramBin2, paramFloat);
      classify_tailonleft_t(localBin3, paramBin3, paramBin2, paramFloat);
      classify_headonright_t(localBin2, paramBin3, paramBin4, paramFloat);
      classify_tailonright_t(localBin4, paramBin3, paramBin4, paramFloat);
    }
  }
  







  private void classify_tailonright_t(Bin paramBin1, Bin paramBin2, Bin paramBin3, float paramFloat) {}
  







  private void classify_tailonleft_s(Bin paramBin1, Bin paramBin2, Bin paramBin3, float paramFloat)
  {
    Arc localArc;
    





    while ((localArc = paramBin1.removearc()) != null) {
      localArc.clearitail();
      
      float f = next.head()[0] - paramFloat;
      if (f > 0.0F) {
        paramBin2.addarc(localArc);
      } else if (f < 0.0F) {
        if (ccwTurn_sl(localArc, next)) {
          paramBin3.addarc(localArc);
        } else {
          paramBin2.addarc(localArc);
        }
      } else if (next.tail()[1] > next.head()[1]) {
        paramBin2.addarc(localArc);
      } else {
        paramBin3.addarc(localArc);
      }
    }
  }
  




  private void classify_headonright_s(Bin paramBin1, Bin paramBin2, Bin paramBin3, float paramFloat)
  {
    Arc localArc;
    



    while ((localArc = paramBin1.removearc()) != null) {
      localArc.setitail();
      
      float f = prev.tail()[0] - paramFloat;
      if (f > 0.0F) {
        if (ccwTurn_sr(prev, localArc)) {
          paramBin3.addarc(localArc);
        } else
          paramBin2.addarc(localArc);
      } else if (f < 0.0F) {
        paramBin3.addarc(localArc);
      }
      else if (prev.tail()[1] > prev.head()[1]) {
        paramBin3.addarc(localArc);
      } else {
        paramBin2.addarc(localArc);
      }
    }
  }
  







  private boolean ccwTurn_sr(Arc paramArc1, Arc paramArc2)
  {
    return false;
  }
  








  private void classify_headonright_t(Bin paramBin1, Bin paramBin2, Bin paramBin3, float paramFloat) {}
  







  private void classify_tailonleft_t(Bin paramBin1, Bin paramBin2, Bin paramBin3, float paramFloat) {}
  







  private void classify_headonleft_t(Bin paramBin1, Bin paramBin2, Bin paramBin3, float paramFloat)
  {
    Arc localArc;
    






    while ((localArc = paramBin1.removearc()) != null) {
      localArc.setitail();
      
      float f = prev.tail()[1] - paramFloat;
      if (f > 0.0F) {
        paramBin3.addarc(localArc);
      } else if (f < 0.0F) {
        if (ccwTurn_tl(prev, localArc)) {
          paramBin3.addarc(localArc);
        } else {
          paramBin2.addarc(localArc);
        }
      } else if (prev.tail()[0] > prev.head()[0]) {
        paramBin3.addarc(localArc);
      } else {
        paramBin2.addarc(localArc);
      }
    }
  }
  







  private boolean ccwTurn_tl(Arc paramArc1, Arc paramArc2)
  {
    return false;
  }
  




  private void classify_tailonright_s(Bin paramBin1, Bin paramBin2, Bin paramBin3, float paramFloat)
  {
    Arc localArc;
    


    while ((localArc = paramBin1.removearc()) != null) {
      localArc.clearitail();
      
      float f = next.head()[0] - paramFloat;
      if (f > 0.0F) {
        if (ccwTurn_sr(localArc, next)) {
          paramBin3.addarc(localArc);
        } else
          paramBin2.addarc(localArc);
      } else if (f < 0.0F) {
        paramBin2.addarc(localArc);
      }
      else if (next.tail()[1] > next.head()[1]) {
        paramBin3.addarc(localArc);
      } else {
        paramBin2.addarc(localArc);
      }
    }
  }
  




  private void classify_headonleft_s(Bin paramBin1, Bin paramBin2, Bin paramBin3, float paramFloat)
  {
    Arc localArc;
    



    while ((localArc = paramBin1.removearc()) != null) {
      localArc.setitail();
      
      float f = prev.tail()[0] - paramFloat;
      if (f > 0.0F) {
        paramBin3.addarc(localArc);
      } else if (f < 0.0F) {
        if (ccwTurn_sl(prev, localArc)) {
          paramBin3.addarc(localArc);
        } else {
          paramBin2.addarc(localArc);
        }
      } else if (prev.tail()[1] > prev.head()[1]) {
        paramBin2.addarc(localArc);
      } else {
        paramBin3.addarc(localArc);
      }
    }
  }
  








  private boolean ccwTurn_sl(Arc paramArc1, Arc paramArc2)
  {
    return false;
  }
  









  private int arc_split(Arc paramArc, int paramInt1, float paramFloat, int paramInt2)
  {
    return 0;
  }
  



  private void setNonDegenerate()
  {
    showDegenerate = false;
  }
  




  private void setArcTypeBezier()
  {
    isArcTypeBezier = true;
  }
  






  private void outline(Bin paramBin) {}
  






  private void makeBorderTrim(float[] paramArrayOfFloat1, float[] paramArrayOfFloat2)
  {
    float f1 = paramArrayOfFloat1[0];
    float f2 = paramArrayOfFloat2[0];
    
    float f3 = paramArrayOfFloat1[1];
    float f4 = paramArrayOfFloat2[1];
    
    pjarc = null;
    Arc localArc = null;
    
    localArc = new Arc(4);
    arctesselator.bezier(localArc, f1, f2, f3, f3);
    initialbin.addarc(localArc);
    pjarc = localArc.append(pjarc);
    
    localArc = new Arc(1);
    arctesselator.bezier(localArc, f2, f2, f3, f4);
    initialbin.addarc(localArc);
    pjarc = localArc.append(pjarc);
    
    localArc = new Arc(2);
    arctesselator.bezier(localArc, f2, f1, f4, f4);
    initialbin.addarc(localArc);
    pjarc = localArc.append(pjarc);
    
    localArc = new Arc(3);
    arctesselator.bezier(localArc, f1, f1, f4, f3);
    initialbin.addarc(localArc);
    localArc = localArc.append(pjarc);
  }
  





  public void drawCurves()
  {
    float[] arrayOfFloat1 = new float[1];
    float[] arrayOfFloat2 = new float[1];
    
    Flist localFlist = new Flist();
    qlist.getRange(arrayOfFloat1, arrayOfFloat2, localFlist);
    
    renderhints.init();
    
    backend.bgncurv();
    
    for (int i = start; i < end - 1; i++) {
      float[] arrayOfFloat3 = new float[1];
      float[] arrayOfFloat4 = new float[1];
      arrayOfFloat3[0] = pts[i];
      arrayOfFloat4[0] = pts[(i + 1)];
      
      qlist.downloadAll(arrayOfFloat3, arrayOfFloat4, backend);
      Curvelist localCurvelist = new Curvelist(qlist, arrayOfFloat3, arrayOfFloat4);
      samplingSplit(localCurvelist, renderhints.maxsubdivisions);
    }
    backend.endcurv();
  }
  




  private void samplingSplit(Curvelist paramCurvelist, int paramInt)
  {
    if (paramCurvelist.cullCheck() == 0) {
      return;
    }
    paramCurvelist.getstepsize();
    
    if ((!paramCurvelist.needsSamplingSubdivision()) || (subdivisions <= 0))
    {


      int i = (int)(1.0F + range[2] / stepsize);
      backend.curvgrid(range[0], range[1], i);
      backend.curvmesh(0, i);
    }
  }
  






  public void set_domain_distance_u_rate(double paramDouble)
  {
    domain_distance_u_rate = ((float)paramDouble);
  }
  




  public void set_domain_distance_v_rate(double paramDouble)
  {
    domain_distance_v_rate = ((float)paramDouble);
  }
  




  public void set_is_domain_distance_sampling(int paramInt)
  {
    is_domain_distance_sampling = paramInt;
  }
}
