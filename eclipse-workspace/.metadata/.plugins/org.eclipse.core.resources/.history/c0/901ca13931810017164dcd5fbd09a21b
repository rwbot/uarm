package processing.opengl;

import processing.core.PMatrix2D;








































public class LineStroker
{
  private LineStroker output;
  private int capStyle;
  private int joinStyle;
  private int m00;
  private int m01;
  private int m10;
  private int m11;
  private int lineWidth2;
  private long scaledLineWidth2;
  private int numPenSegments;
  private int[] pen_dx;
  private int[] pen_dy;
  private boolean[] penIncluded;
  private int[] join;
  private int[] offset = new int[2];
  private int[] reverse = new int[100];
  private int[] miter = new int[2];
  
  private long miterLimitSq;
  
  private int prev;
  
  private int rindex;
  
  private boolean started;
  
  private boolean lineToOrigin;
  
  private boolean joinToOrigin;
  
  private int sx0;
  
  private int sy0;
  
  private int sx1;
  
  private int sy1;
  
  private int x0;
  
  private int y0;
  
  private int scolor0;
  private int pcolor0;
  private int color0;
  private int mx0;
  private int my0;
  private int omx;
  private int omy;
  private int px0;
  private int py0;
  private double m00_2_m01_2;
  private double m10_2_m11_2;
  private double m00_m10_m01_m11;
  private static final long ROUND_JOIN_THRESHOLD = 100000000L;
  private static final long ROUND_JOIN_INTERNAL_THRESHOLD = 1000000000L;
  
  public LineStroker() {}
  
  public LineStroker(LineStroker output, int lineWidth, int capStyle, int joinStyle, int miterLimit, PMatrix2D transform)
  {
    setOutput(output);
    setParameters(lineWidth, capStyle, joinStyle, miterLimit, transform);
  }
  





  public void setOutput(LineStroker output)
  {
    this.output = output;
  }
  



















  public void setParameters(int lineWidth, int capStyle, int joinStyle, int miterLimit, PMatrix2D transform)
  {
    m00 = LinePath.FloatToS15_16(m00);
    m01 = LinePath.FloatToS15_16(m01);
    m10 = LinePath.FloatToS15_16(m10);
    m11 = LinePath.FloatToS15_16(m11);
    
    lineWidth2 = (lineWidth >> 1);
    scaledLineWidth2 = (m00 * lineWidth2 >> 16);
    this.capStyle = capStyle;
    this.joinStyle = joinStyle;
    
    m00_2_m01_2 = (m00 * m00 + m01 * m01);
    m10_2_m11_2 = (m10 * m10 + m11 * m11);
    m00_m10_m01_m11 = (m00 * m10 + m01 * m11);
    
    double dm00 = m00 / 65536.0D;
    double dm01 = m01 / 65536.0D;
    double dm10 = m10 / 65536.0D;
    double dm11 = m11 / 65536.0D;
    double determinant = dm00 * dm11 - dm01 * dm10;
    
    if (joinStyle == 0) {
      double limit = miterLimit / 65536.0D * (lineWidth2 / 65536.0D) * 
        determinant;
      double limitSq = limit * limit;
      miterLimitSq = ((limitSq * 65536.0D * 65536.0D));
    }
    
    numPenSegments = ((int)(3.14159F * lineWidth / 65536.0F));
    if ((pen_dx == null) || (pen_dx.length < numPenSegments)) {
      pen_dx = new int[numPenSegments];
      pen_dy = new int[numPenSegments];
      penIncluded = new boolean[numPenSegments];
      join = new int[2 * numPenSegments];
    }
    
    for (int i = 0; i < numPenSegments; i++) {
      double r = lineWidth / 2.0D;
      double theta = i * 2 * 3.141592653589793D / numPenSegments;
      
      double cos = Math.cos(theta);
      double sin = Math.sin(theta);
      pen_dx[i] = ((int)(r * (dm00 * cos + dm01 * sin)));
      pen_dy[i] = ((int)(r * (dm10 * cos + dm11 * sin)));
    }
    
    prev = 2;
    rindex = 0;
    started = false;
    lineToOrigin = false;
  }
  
  private void computeOffset(int x0, int y0, int x1, int y1, int[] m) {
    long lx = x1 - x0;
    long ly = y1 - y0;
    

    if ((m00 > 0) && (m00 == m11)) if (((m01 == 0 ? 1 : 0) & (m10 == 0 ? 1 : 0)) != 0) {
        long ilen = LinePath.hypot(lx, ly);
        if (ilen == 0L) { int dy;
          int dx = dy = 0;
          break label282; }
        int dx = (int)(ly * scaledLineWidth2 / ilen);
        int dy = (int)(-(lx * scaledLineWidth2) / ilen);
        break label282;
      }
    double dlx = x1 - x0;
    double dly = y1 - y0;
    double det = m00 * m11 - m01 * m10;
    int sdet = det > 0.0D ? 1 : -1;
    double a = dly * m00 - dlx * m10;
    double b = dly * m01 - dlx * m11;
    double dh = LinePath.hypot(a, b);
    double div = sdet * lineWidth2 / (65536.0D * dh);
    double ddx = dly * m00_2_m01_2 - dlx * m00_m10_m01_m11;
    double ddy = dly * m00_m10_m01_m11 - dlx * m10_2_m11_2;
    int dx = (int)(ddx * div);
    int dy = (int)(ddy * div);
    
    label282:
    m[0] = dx;
    m[1] = dy;
  }
  
  private void ensureCapacity(int newrindex) {
    if (reverse.length < newrindex) {
      int[] tmp = new int[Math.max(newrindex, 6 * reverse.length / 5)];
      System.arraycopy(reverse, 0, tmp, 0, rindex);
      reverse = tmp;
    }
  }
  
  private boolean isCCW(int x0, int y0, int x1, int y1, int x2, int y2) {
    int dx0 = x1 - x0;
    int dy0 = y1 - y0;
    int dx1 = x2 - x1;
    int dy1 = y2 - y1;
    return dx0 * dy1 < dy0 * dx1;
  }
  
  private boolean side(int x, int y, int x0, int y0, int x1, int y1) {
    long lx = x;
    long ly = y;
    long lx0 = x0;
    long ly0 = y0;
    long lx1 = x1;
    long ly1 = y1;
    
    return (ly0 - ly1) * lx + (lx1 - lx0) * ly + (lx0 * ly1 - lx1 * ly0) > 0L;
  }
  

  private int computeRoundJoin(int cx, int cy, int xa, int ya, int xb, int yb, int side, boolean flip, int[] join)
  {
    int ncoords = 0;
    boolean centerSide;
    boolean centerSide;
    if (side == 0) {
      centerSide = side(cx, cy, xa, ya, xb, yb);
    } else {
      centerSide = side == 1;
    }
    for (int i = 0; i < numPenSegments; i++) {
      int px = cx + pen_dx[i];
      int py = cy + pen_dy[i];
      
      boolean penSide = side(px, py, xa, ya, xb, yb);
      if (penSide != centerSide) {
        penIncluded[i] = true;
      } else {
        penIncluded[i] = false;
      }
    }
    
    int start = -1;int end = -1;
    for (int i = 0; i < numPenSegments; i++) {
      if ((penIncluded[i] != 0) && 
        (penIncluded[((i + numPenSegments - 1) % numPenSegments)] == 0)) {
        start = i;
      }
      if ((penIncluded[i] != 0) && (penIncluded[((i + 1) % numPenSegments)] == 0)) {
        end = i;
      }
    }
    
    if (end < start) {
      end += numPenSegments;
    }
    
    if ((start != -1) && (end != -1)) {
      long dxa = cx + pen_dx[start] - xa;
      long dya = cy + pen_dy[start] - ya;
      long dxb = cx + pen_dx[start] - xb;
      long dyb = cy + pen_dy[start] - yb;
      
      boolean rev = dxa * dxa + dya * dya > dxb * dxb + dyb * dyb;
      int i = rev ? end : start;
      int incr = rev ? -1 : 1;
      for (;;) {
        int idx = i % numPenSegments;
        int px = cx + pen_dx[idx];
        int py = cy + pen_dy[idx];
        join[(ncoords++)] = px;
        join[(ncoords++)] = py;
        if (i == (rev ? start : end)) {
          break;
        }
        i += incr;
      }
    }
    
    return ncoords / 2;
  }
  






  private void drawRoundJoin(int x, int y, int omx, int omy, int mx, int my, int side, int color, boolean flip, boolean rev, long threshold)
  {
    if (((omx == 0) && (omy == 0)) || ((mx == 0) && (my == 0))) {
      return;
    }
    
    long domx = omx - mx;
    long domy = omy - my;
    long len = domx * domx + domy * domy;
    if (len < threshold) {
      return;
    }
    
    if (rev) {
      omx = -omx;
      omy = -omy;
      mx = -mx;
      my = -my;
    }
    
    int bx0 = x + omx;
    int by0 = y + omy;
    int bx1 = x + mx;
    int by1 = y + my;
    
    int npoints = computeRoundJoin(x, y, bx0, by0, bx1, by1, side, flip, join);
    for (int i = 0; i < npoints; i++) {
      emitLineTo(join[(2 * i)], join[(2 * i + 1)], color, rev);
    }
  }
  


  private void computeMiter(int ix0, int iy0, int ix1, int iy1, int ix0p, int iy0p, int ix1p, int iy1p, int[] m)
  {
    long x0 = ix0;
    long y0 = iy0;
    long x1 = ix1;
    long y1 = iy1;
    
    long x0p = ix0p;
    long y0p = iy0p;
    long x1p = ix1p;
    long y1p = iy1p;
    
    long x10 = x1 - x0;
    long y10 = y1 - y0;
    long x10p = x1p - x0p;
    long y10p = y1p - y0p;
    
    long den = x10 * y10p - x10p * y10 >> 16;
    if (den == 0L) {
      m[0] = ix0;
      m[1] = iy0;
      return;
    }
    
    long t = x1p * (y0 - y0p) - x0 * y10p + x0p * (y1p - y0) >> 16;
    m[0] = ((int)(x0 + t * x10 / den));
    m[1] = ((int)(y0 + t * y10 / den));
  }
  

  private void drawMiter(int px0, int py0, int x0, int y0, int x1, int y1, int omx, int omy, int mx, int my, int color, boolean rev)
  {
    if ((mx == omx) && (my == omy)) {
      return;
    }
    if ((px0 == x0) && (py0 == y0)) {
      return;
    }
    if ((x0 == x1) && (y0 == y1)) {
      return;
    }
    
    if (rev) {
      omx = -omx;
      omy = -omy;
      mx = -mx;
      my = -my;
    }
    
    computeMiter(px0 + omx, py0 + omy, x0 + omx, y0 + omy, x0 + mx, y0 + my, x1 + 
      mx, y1 + my, miter);
    

    long dx = miter[0] - x0;
    long dy = miter[1] - y0;
    long a = dy * m00 - dx * m10 >> 16;
    long b = dy * m01 - dx * m11 >> 16;
    long lenSq = a * a + b * b;
    
    if (lenSq < miterLimitSq) {
      emitLineTo(miter[0], miter[1], color, rev);
    }
  }
  

  public void moveTo(int x0, int y0, int c0)
  {
    if (lineToOrigin)
    {
      lineToImpl(sx0, sy0, scolor0, joinToOrigin);
      lineToOrigin = false;
    }
    
    if (prev == 1) {
      finish();
    }
    
    sx0 = (this.x0 = x0);
    sy0 = (this.y0 = y0);
    scolor0 = (this.color0 = c0);
    rindex = 0;
    started = false;
    joinSegment = false;
    prev = 0;
  }
  
  boolean joinSegment = false;
  
  public void lineJoin()
  {
    joinSegment = true;
  }
  

  public void lineTo(int x1, int y1, int c1)
  {
    if (lineToOrigin) {
      if ((x1 == sx0) && (y1 == sy0))
      {
        return;
      }
      

      lineToImpl(sx0, sy0, scolor0, joinToOrigin);
      lineToOrigin = false;
    } else { if ((x1 == x0) && (y1 == y0))
        return;
      if ((x1 == sx0) && (y1 == sy0)) {
        lineToOrigin = true;
        joinToOrigin = joinSegment;
        joinSegment = false;
        return;
      }
    }
    lineToImpl(x1, y1, c1, joinSegment);
    joinSegment = false;
  }
  
  private void lineToImpl(int x1, int y1, int c1, boolean joinSegment) {
    computeOffset(x0, y0, x1, y1, offset);
    int mx = offset[0];
    int my = offset[1];
    
    if (!started) {
      emitMoveTo(x0 + mx, y0 + my, color0);
      sx1 = x1;
      sy1 = y1;
      mx0 = mx;
      my0 = my;
      started = true;
    } else {
      boolean ccw = isCCW(px0, py0, x0, y0, x1, y1);
      if (joinSegment) {
        if (joinStyle == 0) {
          drawMiter(px0, py0, x0, y0, x1, y1, omx, omy, mx, my, color0, ccw);
        } else if (joinStyle == 1) {
          drawRoundJoin(x0, y0, omx, omy, mx, my, 0, color0, false, ccw, 
            100000000L);
        }
      }
      else {
        drawRoundJoin(x0, y0, omx, omy, mx, my, 0, color0, false, ccw, 
          1000000000L);
      }
      
      emitLineTo(x0, y0, color0, !ccw);
    }
    
    emitLineTo(x0 + mx, y0 + my, color0, false);
    emitLineTo(x1 + mx, y1 + my, c1, false);
    
    emitLineTo(x0 - mx, y0 - my, color0, true);
    emitLineTo(x1 - mx, y1 - my, c1, true);
    
    omx = mx;
    omy = my;
    px0 = x0;
    py0 = y0;
    pcolor0 = color0;
    x0 = x1;
    y0 = y1;
    color0 = c1;
    prev = 1;
  }
  
  public void close() {
    if (lineToOrigin)
    {
      lineToOrigin = false;
    }
    
    if (!started) {
      finish();
      return;
    }
    
    computeOffset(x0, y0, sx0, sy0, offset);
    int mx = offset[0];
    int my = offset[1];
    

    boolean ccw = isCCW(px0, py0, x0, y0, sx0, sy0);
    if (joinSegment) {
      if (joinStyle == 0) {
        drawMiter(px0, py0, x0, y0, sx0, sy0, omx, omy, mx, my, pcolor0, ccw);
      } else if (joinStyle == 1) {
        drawRoundJoin(x0, y0, omx, omy, mx, my, 0, color0, false, ccw, 
          100000000L);
      }
    }
    else {
      drawRoundJoin(x0, y0, omx, omy, mx, my, 0, color0, false, ccw, 
        1000000000L);
    }
    
    emitLineTo(x0 + mx, y0 + my, color0);
    emitLineTo(sx0 + mx, sy0 + my, scolor0);
    
    ccw = isCCW(x0, y0, sx0, sy0, sx1, sy1);
    

    if (!ccw) {
      if (joinStyle == 0) {
        drawMiter(x0, y0, sx0, sy0, sx1, sy1, mx, my, mx0, my0, color0, false);
      } else if (joinStyle == 1) {
        drawRoundJoin(sx0, sy0, mx, my, mx0, my0, 0, scolor0, false, false, 
          100000000L);
      }
    }
    
    emitLineTo(sx0 + mx0, sy0 + my0, scolor0);
    emitLineTo(sx0 - mx0, sy0 - my0, scolor0);
    

    if (ccw) {
      if (joinStyle == 0) {
        drawMiter(x0, y0, sx0, sy0, sx1, sy1, -mx, -my, -mx0, -my0, color0, 
          false);
      } else if (joinStyle == 1) {
        drawRoundJoin(sx0, sy0, -mx, -my, -mx0, -my0, 0, scolor0, true, false, 
          100000000L);
      }
    }
    
    emitLineTo(sx0 - mx, sy0 - my, scolor0);
    emitLineTo(x0 - mx, y0 - my, color0);
    for (int i = rindex - 3; i >= 0; i -= 3) {
      emitLineTo(reverse[i], reverse[(i + 1)], reverse[(i + 2)]);
    }
    
    x0 = sx0;
    y0 = sy0;
    rindex = 0;
    started = false;
    joinSegment = false;
    prev = 2;
    emitClose();
  }
  
  public void end() {
    if (lineToOrigin)
    {
      lineToImpl(sx0, sy0, scolor0, joinToOrigin);
      lineToOrigin = false;
    }
    
    if (prev == 1) {
      finish();
    }
    
    output.end();
    joinSegment = false;
    prev = 0;
  }
  
  long lineLength(long ldx, long ldy) {
    long ldet = m00 * m11 - m01 * m10 >> 16;
    long la = (ldy * m00 - ldx * m10) / ldet;
    long lb = (ldy * m01 - ldx * m11) / ldet;
    long llen = (int)LinePath.hypot(la, lb);
    return llen;
  }
  
  private void finish() {
    if (capStyle == 1) {
      drawRoundJoin(x0, y0, omx, omy, -omx, -omy, 1, color0, false, false, 
        100000000L);
    } else if (capStyle == 2) {
      long ldx = px0 - x0;
      long ldy = py0 - y0;
      long llen = lineLength(ldx, ldy);
      if (0L < llen) {
        long s = lineWidth2 * 65536L / llen;
        
        int capx = x0 - (int)(ldx * s >> 16);
        int capy = y0 - (int)(ldy * s >> 16);
        
        emitLineTo(capx + omx, capy + omy, color0);
        emitLineTo(capx - omx, capy - omy, color0);
      }
    }
    
    for (int i = rindex - 3; i >= 0; i -= 3) {
      emitLineTo(reverse[i], reverse[(i + 1)], reverse[(i + 2)]);
    }
    rindex = 0;
    
    if (capStyle == 1) {
      drawRoundJoin(sx0, sy0, -mx0, -my0, mx0, my0, 1, scolor0, false, false, 
        100000000L);
    } else if (capStyle == 2) {
      long ldx = sx1 - sx0;
      long ldy = sy1 - sy0;
      long llen = lineLength(ldx, ldy);
      if (0L < llen) {
        long s = lineWidth2 * 65536L / llen;
        
        int capx = sx0 - (int)(ldx * s >> 16);
        int capy = sy0 - (int)(ldy * s >> 16);
        
        emitLineTo(capx - mx0, capy - my0, scolor0);
        emitLineTo(capx + mx0, capy + my0, scolor0);
      }
    }
    
    emitClose();
    joinSegment = false;
  }
  
  private void emitMoveTo(int x0, int y0, int c0) {
    output.moveTo(x0, y0, c0);
  }
  
  private void emitLineTo(int x1, int y1, int c1) {
    output.lineTo(x1, y1, c1);
  }
  
  private void emitLineTo(int x1, int y1, int c1, boolean rev) {
    if (rev) {
      ensureCapacity(rindex + 3);
      reverse[(rindex++)] = x1;
      reverse[(rindex++)] = y1;
      reverse[(rindex++)] = c1;
    } else {
      emitLineTo(x1, y1, c1);
    }
  }
  
  private void emitClose() {
    output.close();
  }
}
