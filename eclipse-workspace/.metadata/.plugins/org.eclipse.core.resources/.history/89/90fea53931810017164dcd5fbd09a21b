package processing.data;

import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import processing.core.PApplet;








































































































public class JSONObject
{
  private static final int keyPoolSize = 100;
  private static HashMap<String, Object> keyPool = new HashMap(100);
  



  private final HashMap<String, Object> map;
  



  private static final class Null
  {
    private Null() {}
    



    protected final Object clone()
    {
      return this;
    }
    






    public boolean equals(Object object)
    {
      return (object == null) || (object == this);
    }
    




    public String toString()
    {
      return "null";
    }
    

    public int hashCode()
    {
      return super.hashCode();
    }
  }
  

















  public static final Object NULL = new Null(null);
  




  public JSONObject()
  {
    map = new HashMap();
  }
  





















  public JSONObject(Reader reader)
  {
    this(new JSONTokener(reader));
  }
  






  protected JSONObject(JSONTokener x)
  {
    this();
    


    if (x.nextClean() != '{') {
      throw new RuntimeException("A JSONObject text must begin with '{'");
    }
    for (;;) {
      char c = x.nextClean();
      switch (c) {
      case '\000': 
        throw new RuntimeException("A JSONObject text must end with '}'");
      case '}': 
        return;
      }
      x.back();
      String key = x.nextValue().toString();
      



      c = x.nextClean();
      if (c == '=') {
        if (x.next() != '>') {
          x.back();
        }
      } else if (c != ':') {
        throw new RuntimeException("Expected a ':' after a key");
      }
      putOnce(key, x.nextValue());
      


      switch (x.nextClean()) {
      case ',': 
      case ';': 
        if (x.nextClean() == '}') {
          return;
        }
        x.back();
      }
    }
    return;
    
    throw new RuntimeException("Expected a ',' or '}'");
  }
  








  protected JSONObject(HashMap<String, Object> map)
  {
    this.map = new HashMap();
    if (map != null) {
      Iterator i = map.entrySet().iterator();
      while (i.hasNext()) {
        Map.Entry e = (Map.Entry)i.next();
        Object value = e.getValue();
        if (value != null) {
          map.put((String)e.getKey(), wrap(value));
        }
      }
    }
  }
  



  public JSONObject(IntDict dict)
  {
    map = new HashMap();
    for (int i = 0; i < dict.size(); i++) {
      setInt(dict.key(i), dict.value(i));
    }
  }
  



  public JSONObject(FloatDict dict)
  {
    map = new HashMap();
    for (int i = 0; i < dict.size(); i++) {
      setFloat(dict.key(i), dict.value(i));
    }
  }
  



  public JSONObject(StringDict dict)
  {
    map = new HashMap();
    for (int i = 0; i < dict.size(); i++) {
      setString(dict.key(i), dict.value(i));
    }
  }
  



















  protected JSONObject(Object bean)
  {
    this();
    populateMap(bean);
  }
  


































  public static JSONObject parse(String source)
  {
    return new JSONObject(new JSONTokener(source));
  }
  











































































































  protected static String doubleToString(double d)
  {
    if ((Double.isInfinite(d)) || (Double.isNaN(d))) {
      return "null";
    }
    


    String string = Double.toString(d);
    if ((string.indexOf('.') > 0) && (string.indexOf('e') < 0) && 
      (string.indexOf('E') < 0)) {
      while (string.endsWith("0")) {
        string = string.substring(0, string.length() - 1);
      }
      if (string.endsWith(".")) {
        string = string.substring(0, string.length() - 1);
      }
    }
    return string;
  }
  







  private Object get(String key)
  {
    if (key == null) {
      throw new RuntimeException("Null key.");
    }
    Object object = opt(key);
    if (object == null) {
      throw new RuntimeException("JSONObject[" + quote(key) + "] not found.");
    }
    return object;
  }
  












  public String getString(String key)
  {
    Object object = get(key);
    if ((object instanceof String)) {
      return (String)object;
    }
    throw new RuntimeException("JSONObject[" + quote(key) + "] not a string.");
  }
  








  public String getString(String key, String defaultValue)
  {
    Object object = opt(key);
    return NULL.equals(object) ? defaultValue : object.toString();
  }
  













  public int getInt(String key)
  {
    Object object = get(key);
    try {
      return (object instanceof Number) ? 
        ((Number)object).intValue() : 
        Integer.parseInt((String)object);
    } catch (Exception localException) {
      throw new RuntimeException("JSONObject[" + quote(key) + "] is not an int.");
    }
  }
  









  public int getInt(String key, int defaultValue)
  {
    try
    {
      return getInt(key);
    } catch (Exception localException) {}
    return defaultValue;
  }
  









  public long getLong(String key)
  {
    Object object = get(key);
    try {
      return (object instanceof Number) ? 
        ((Number)object).longValue() : 
        Long.parseLong((String)object);
    } catch (Exception e) {
      throw new RuntimeException("JSONObject[" + quote(key) + "] is not a long.", e);
    }
  }
  









  public long getLong(String key, long defaultValue)
  {
    try
    {
      return getLong(key);
    } catch (Exception localException) {}
    return defaultValue;
  }
  









  public float getFloat(String key)
  {
    return (float)getDouble(key);
  }
  
  public float getFloat(String key, float defaultValue)
  {
    try {
      return getFloat(key);
    } catch (Exception localException) {}
    return defaultValue;
  }
  








  public double getDouble(String key)
  {
    Object object = get(key);
    try {
      return (object instanceof Number) ? 
        ((Number)object).doubleValue() : 
        Double.parseDouble((String)object);
    } catch (Exception localException) {
      throw new RuntimeException("JSONObject[" + quote(key) + "] is not a number.");
    }
  }
  









  public double getDouble(String key, double defaultValue)
  {
    try
    {
      return getDouble(key);
    } catch (Exception localException) {}
    return defaultValue;
  }
  













  public boolean getBoolean(String key)
  {
    Object object = get(key);
    if ((object.equals(Boolean.FALSE)) || (
      ((object instanceof String)) && 
      (((String)object).equalsIgnoreCase("false"))))
      return false;
    if ((object.equals(Boolean.TRUE)) || (
      ((object instanceof String)) && 
      (((String)object).equalsIgnoreCase("true")))) {
      return true;
    }
    throw new RuntimeException("JSONObject[" + quote(key) + "] is not a Boolean.");
  }
  








  public boolean getBoolean(String key, boolean defaultValue)
  {
    try
    {
      return getBoolean(key);
    } catch (Exception localException) {}
    return defaultValue;
  }
  













  public JSONArray getJSONArray(String key)
  {
    Object object = get(key);
    if ((object instanceof JSONArray)) {
      return (JSONArray)object;
    }
    throw new RuntimeException("JSONObject[" + quote(key) + "] is not a JSONArray.");
  }
  












  public JSONObject getJSONObject(String key)
  {
    Object object = get(key);
    if ((object instanceof JSONObject)) {
      return (JSONObject)object;
    }
    throw new RuntimeException("JSONObject[" + quote(key) + "] is not a JSONObject.");
  }
  

















































  public boolean hasKey(String key)
  {
    return map.containsKey(key);
  }
  





































  public boolean isNull(String key)
  {
    return NULL.equals(opt(key));
  }
  






  public Iterator keyIterator()
  {
    return map.keySet().iterator();
  }
  





  public Set keys()
  {
    return map.keySet();
  }
  





  public int size()
  {
    return map.size();
  }
  






















  private static String numberToString(Number number)
  {
    if (number == null) {
      throw new RuntimeException("Null pointer");
    }
    testValidity(number);
    


    String string = number.toString();
    if ((string.indexOf('.') > 0) && (string.indexOf('e') < 0) && 
      (string.indexOf('E') < 0)) {
      while (string.endsWith("0")) {
        string = string.substring(0, string.length() - 1);
      }
      if (string.endsWith(".")) {
        string = string.substring(0, string.length() - 1);
      }
    }
    return string;
  }
  





  private Object opt(String key)
  {
    return key == null ? null : map.get(key);
  }
  
































































































  private void populateMap(Object bean)
  {
    Class klass = bean.getClass();
    


    boolean includeSuperClass = klass.getClassLoader() != null;
    
    Method[] methods = includeSuperClass ? 
      klass.getMethods() : 
      klass.getDeclaredMethods();
    for (int i = 0; i < methods.length; i++) {
      try {
        Method method = methods[i];
        if (Modifier.isPublic(method.getModifiers())) {
          String name = method.getName();
          String key = "";
          if (name.startsWith("get")) {
            if (("getClass".equals(name)) || 
              ("getDeclaringClass".equals(name))) {
              key = "";
            } else {
              key = name.substring(3);
            }
          } else if (name.startsWith("is")) {
            key = name.substring(2);
          }
          if ((key.length() > 0) && 
            (Character.isUpperCase(key.charAt(0))) && 
            (method.getParameterTypes().length == 0)) {
            if (key.length() == 1) {
              key = key.toLowerCase();
            } else if (!Character.isUpperCase(key.charAt(1))) {
              key = 
                key.substring(0, 1).toLowerCase() + key.substring(1);
            }
            
            Object result = method.invoke(bean, null);
            if (result != null) {
              map.put(key, wrap(result));
            }
          }
        }
      }
      catch (Exception localException) {}
    }
  }
  









  public JSONObject setString(String key, String value)
  {
    return put(key, value);
  }
  













  public JSONObject setInt(String key, int value)
  {
    put(key, Integer.valueOf(value));
    return this;
  }
  








  public JSONObject setLong(String key, long value)
  {
    put(key, Long.valueOf(value));
    return this;
  }
  









  public JSONObject setFloat(String key, float value)
  {
    put(key, new Double(value));
    return this;
  }
  








  public JSONObject setDouble(String key, double value)
  {
    put(key, new Double(value));
    return this;
  }
  













  public JSONObject setBoolean(String key, boolean value)
  {
    put(key, value ? Boolean.TRUE : Boolean.FALSE);
    return this;
  }
  








  public JSONObject setJSONObject(String key, JSONObject value)
  {
    return put(key, value);
  }
  








  public JSONObject setJSONArray(String key, JSONArray value)
  {
    return put(key, value);
  }
  









































  private JSONObject put(String key, Object value)
  {
    if (key == null) {
      throw new RuntimeException("Null key.");
    }
    if (value != null) {
      testValidity(value);
      String pooled = (String)keyPool.get(key);
      if (pooled == null) {
        if (keyPool.size() >= 100) {
          keyPool = new HashMap(100);
        }
        keyPool.put(key, key);
      } else {
        key = pooled;
      }
      map.put(key, value);
    } else {
      remove(key);
    }
    return this;
  }
  










  private JSONObject putOnce(String key, Object value)
  {
    if ((key != null) && (value != null)) {
      if (opt(key) != null) {
        throw new RuntimeException("Duplicate key \"" + key + "\"");
      }
      put(key, value);
    }
    return this;
  }
  


























  protected static String quote(String string)
  {
    StringWriter sw = new StringWriter();
    synchronized (sw.getBuffer()) {
      try {
        return quote(string, sw).toString();
      }
      catch (IOException localIOException) {
        return "";
      }
    }
  }
  
  protected static Writer quote(String string, Writer w) throws IOException {
    if ((string == null) || (string.length() == 0)) {
      w.write("\"\"");
      return w;
    }
    

    char c = '\000';
    

    int len = string.length();
    
    w.write(34);
    for (int i = 0; i < len; i++) {
      char b = c;
      c = string.charAt(i);
      switch (c) {
      case '"': 
      case '\\': 
        w.write(92);
        w.write(c);
        break;
      case '/': 
        if (b == '<') {
          w.write(92);
        }
        w.write(c);
        break;
      case '\b': 
        w.write("\\b");
        break;
      case '\t': 
        w.write("\\t");
        break;
      case '\n': 
        w.write("\\n");
        break;
      case '\f': 
        w.write("\\f");
        break;
      case '\r': 
        w.write("\\r");
        break;
      default: 
        if ((c < ' ') || ((c >= '') && (c < ' ')) || (
          (c >= ' ') && (c < '℀'))) {
          w.write("\\u");
          String hhhh = Integer.toHexString(c);
          w.write("0000", 0, 4 - hhhh.length());
          w.write(hhhh);
        } else {
          w.write(c);
        }
        break; }
    }
    w.write(34);
    return w;
  }
  






  public Object remove(String key)
  {
    return map.remove(key);
  }
  







  protected static Object stringToValue(String string)
  {
    if (string.equals("")) {
      return string;
    }
    if (string.equalsIgnoreCase("true")) {
      return Boolean.TRUE;
    }
    if (string.equalsIgnoreCase("false")) {
      return Boolean.FALSE;
    }
    if (string.equalsIgnoreCase("null")) {
      return NULL;
    }
    








    char b = string.charAt(0);
    if (((b >= '0') && (b <= '9')) || (b == '.') || (b == '-') || (b == '+')) {
      try {
        if ((string.indexOf('.') > -1) || 
          (string.indexOf('e') > -1) || (string.indexOf('E') > -1)) {
          Double d = Double.valueOf(string);
          if ((!d.isInfinite()) && (!d.isNaN())) {
            return d;
          }
        } else {
          Long myLong = Long.valueOf(string);
          if (myLong.longValue() == myLong.intValue()) {
            return Integer.valueOf(myLong.intValue());
          }
          return myLong;
        }
      }
      catch (Exception localException) {}
    }
    
    return string;
  }
  






  protected static void testValidity(Object o)
  {
    if (o != null) {
      if ((o instanceof Double)) {
        if ((((Double)o).isInfinite()) || (((Double)o).isNaN())) {
          throw new RuntimeException(
            "JSON does not allow non-finite numbers.");
        }
      } else if (((o instanceof Float)) && (
        (((Float)o).isInfinite()) || (((Float)o).isNaN()))) {
        throw new RuntimeException(
          "JSON does not allow non-finite numbers.");
      }
    }
  }
  


























  public boolean save(File file, String options)
  {
    PrintWriter writer = PApplet.createWriter(file);
    boolean success = write(writer, options);
    writer.close();
    return success;
  }
  
  public boolean write(PrintWriter output)
  {
    return write(output, null);
  }
  
  public boolean write(PrintWriter output, String options)
  {
    int indentFactor = 2;
    if (options != null) {
      String[] opts = PApplet.split(options, ',');
      for (String opt : opts) {
        if (opt.equals("compact")) {
          indentFactor = -1;
        } else if (opt.startsWith("indent=")) {
          indentFactor = PApplet.parseInt(opt.substring(7), -2);
          if (indentFactor == -2) {
            throw new IllegalArgumentException("Could not read a number from " + opt);
          }
        } else {
          System.err.println("Ignoring " + opt);
        }
      }
    }
    output.print(format(indentFactor));
    output.flush();
    return true;
  }
  





  public String toString()
  {
    try
    {
      return format(2);
    } catch (Exception localException) {}
    return null;
  }
  













  public String format(int indentFactor)
  {
    StringWriter w = new StringWriter();
    synchronized (w.getBuffer()) {
      return writeInternal(w, indentFactor, 0).toString();
    }
  }
  




















  protected static String valueToString(Object value)
  {
    if ((value == null) || (value.equals(null))) {
      return "null";
    }
    











    if ((value instanceof Number)) {
      return numberToString((Number)value);
    }
    if (((value instanceof Boolean)) || ((value instanceof JSONObject)) || 
      ((value instanceof JSONArray))) {
      return value.toString();
    }
    if ((value instanceof Map)) {
      return new JSONObject(value).toString();
    }
    if ((value instanceof Collection)) {
      return new JSONArray(value).toString();
    }
    if (value.getClass().isArray()) {
      return new JSONArray(value).toString();
    }
    return quote(value.toString());
  }
  










  protected static Object wrap(Object object)
  {
    try
    {
      if (object == null) {
        return NULL;
      }
      if (((object instanceof JSONObject)) || ((object instanceof JSONArray)) || 
        (NULL.equals(object)) || 
        ((object instanceof Byte)) || ((object instanceof Character)) || 
        ((object instanceof Short)) || ((object instanceof Integer)) || 
        ((object instanceof Long)) || ((object instanceof Boolean)) || 
        ((object instanceof Float)) || ((object instanceof Double)) || 
        ((object instanceof String))) {
        return object;
      }
      
      if ((object instanceof Collection)) {
        return new JSONArray(object);
      }
      if (object.getClass().isArray()) {
        return new JSONArray(object);
      }
      if ((object instanceof Map)) {
        return new JSONObject(object);
      }
      Package objectPackage = object.getClass().getPackage();
      String objectPackageName = objectPackage != null ? 
        objectPackage.getName() : 
        "";
      
      if ((objectPackageName.startsWith("java.")) || 
        (objectPackageName.startsWith("javax.")) || 
        (object.getClass().getClassLoader() == null))
      {
        return object.toString();
      }
      return new JSONObject(object);
    } catch (Exception localException) {}
    return null;
  }
  















  static final Writer writeValue(Writer writer, Object value, int indentFactor, int indent)
    throws IOException
  {
    if ((value == null) || (value.equals(null))) {
      writer.write("null");
    } else if ((value instanceof JSONObject)) {
      ((JSONObject)value).writeInternal(writer, indentFactor, indent);
    } else if ((value instanceof JSONArray)) {
      ((JSONArray)value).writeInternal(writer, indentFactor, indent);
    } else if ((value instanceof Map)) {
      new JSONObject(value).writeInternal(writer, indentFactor, indent);
    } else if ((value instanceof Collection)) {
      new JSONArray(value).writeInternal(writer, indentFactor, 
        indent);
    } else if (value.getClass().isArray()) {
      new JSONArray(value).writeInternal(writer, indentFactor, indent);
    } else if ((value instanceof Number)) {
      writer.write(numberToString((Number)value));
    } else if ((value instanceof Boolean)) {
      writer.write(value.toString());




    }
    else
    {




      quote(value.toString(), writer);
    }
    return writer;
  }
  
  static final void indent(Writer writer, int indent) throws IOException
  {
    for (int i = 0; i < indent; i++) {
      writer.write(32);
    }
  }
  






  protected Writer writeInternal(Writer writer, int indentFactor, int indent)
  {
    try
    {
      boolean commanate = false;
      int length = size();
      Iterator keys = keyIterator();
      writer.write(123);
      
      int actualFactor = indentFactor == -1 ? 0 : indentFactor;
      
      if (length == 1) {
        Object key = keys.next();
        writer.write(quote(key.toString()));
        writer.write(58);
        if (actualFactor > 0) {
          writer.write(32);
        }
        
        writeValue(writer, map.get(key), indentFactor, indent);
      } else if (length != 0) {
        int newIndent = indent + actualFactor;
        while (keys.hasNext()) {
          Object key = keys.next();
          if (commanate) {
            writer.write(44);
          }
          if (indentFactor != -1) {
            writer.write(10);
          }
          indent(writer, newIndent);
          writer.write(quote(key.toString()));
          writer.write(58);
          if (actualFactor > 0) {
            writer.write(32);
          }
          
          writeValue(writer, map.get(key), indentFactor, newIndent);
          commanate = true;
        }
        if (indentFactor != -1) {
          writer.write(10);
        }
        indent(writer, indent);
      }
      writer.write(125);
      return writer;
    } catch (IOException exception) {
      throw new RuntimeException(exception);
    }
  }
}
