package jogamp.opengl.glu.nurbs;












public class Knotvector
{
  public static final float TOLERANCE = 1.0E-5F;
  










  private static final int MAXORDER = 24;
  










  int knotcount;
  










  int stride;
  










  int order;
  










  float[] knotlist;
  










  public Knotvector(int paramInt1, int paramInt2, int paramInt3, float[] paramArrayOfFloat)
  {
    init(paramInt1, paramInt2, paramInt3, paramArrayOfFloat);
  }
  












  public void init(int paramInt1, int paramInt2, int paramInt3, float[] paramArrayOfFloat)
  {
    knotcount = paramInt1;
    stride = paramInt2;
    order = paramInt3;
    knotlist = new float[paramInt1];
    for (int i = 0; i < paramInt1; i++) {
      knotlist[i] = paramArrayOfFloat[i];
    }
  }
  





  public int validate()
  {
    int i = knotcount - 1;
    if ((order < 1) || (order > 24)) {
      return 1;
    }
    if (knotcount < 2 * order) {
      return 2;
    }
    if (identical(knotlist[(i - (order - 1))], knotlist[(order - 1)])) {
      return 3;
    }
    for (int j = 0; j < i; j++) {
      if (knotlist[j] > knotlist[(j + 1)])
        return 4;
    }
    j = 1;
    for (; i >= 1; i--)
      if (knotlist[i] - knotlist[(i - 1)] < 1.0E-5F) {
        j++;
      }
      else {
        if (j > order) {
          return 5;
        }
        j = 1;
      }
    if (j > order) {
      return 5;
    }
    
    return 0;
  }
  









  public void show(String paramString) {}
  









  public static boolean identical(float paramFloat1, float paramFloat2)
  {
    return paramFloat1 - paramFloat2 < 1.0E-5F;
  }
}
